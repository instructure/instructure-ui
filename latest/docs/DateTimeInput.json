{"description":"\nA DateTimeInput component is used to enter a date-time value. It is built as a composition\nof the [DateInput](#DateInput) and [TimeSelect](#TimeSelect) components.\n\nThe properties of DateTimeInput prefaced with _date_ are passed to the underlying [DateInput](#DateInput)\n(e.g. _dateLabel_ is DateInput's _label_), while the properties prefaced\nwith _time_ are forwarded to the underlying\n[TimeSelect](#TimeSelect). Others are either shared by both sub-components (e.g. locale), or\nare unique to DateTimeInput (e.g. description).\n\n### Localization\n\nThe component is localized via its `locale` and `timezone` parameters. Both are read from `props`, `context` and from the browser's locale in this priority order. `locale` determines the language and format dates and time are displayed in (e.g. month names, AM/PM or 24-hour format) and the beginning of the week (e.g. Monday in Germany, Sunday in the U.S.) in the dropdown calendar.\n\n### Examples\n\n#### A DateTimeInput with `columns` layout and a default value:\n\n```js\n---\ntype: example\n---\n  const Example = () => {\n    return (\n      <div style={{ height: '15rem' }}>\n        <DateTimeInput\n          description=\"Pick a date and time\"\n          datePlaceholder=\"Choose a date\"\n          dateRenderLabel=\"Date\"\n          timeRenderLabel=\"Time\"\n          invalidDateTimeMessage=\"Invalid date!\"\n          prevMonthLabel=\"Previous month\"\n          nextMonthLabel=\"Next month\"\n          defaultValue=\"2018-01-18T13:30\"\n          layout=\"columns\"\n        />\n      </div>\n    )\n  }\n\n  render(<Example />)\n```\n\n#### A required DateInput with `stacked` layout that warns if the value in the past:\n\nThis sample code also allows the user to enter an arbitrary time value by setting `allowNonStepInput` to `true`.\n\n```js\n---\ntype: example\n---\n  const Example = () => {\n    const [value, setValue] = useState(undefined)\n    const [messages, setMessages] = useState([])\n\n    const onChange = (e, isoDate) => {\n      let newMessages = []\n      if (!isoDate) {\n        // this happens if an invalid date is entered\n        setValue(undefined)\n        setMessages(newMessages)\n        return\n      }\n      const now = new Date()\n      const newValue = new Date(isoDate)\n      if (newValue.valueOf() <= now.valueOf()) {\n        newMessages = [{ text: 'That date-time is in the past', type: 'hint' }]\n      }\n      setValue(isoDate)\n      setMessages(newMessages)\n    }\n\n    const text = value ? new Date(value).toString() : 'N/A'\n\n    return (\n      <div>\n        <div style={{ marginBottom: '1em', fontStyle: 'italic' }}>\n          You entered:\n          <br />\n          {text}\n        </div>\n        <div style={{ height: '14rem' }}>\n          <DateTimeInput\n            description={\n              <ScreenReaderContent>Pick a date and time</ScreenReaderContent>\n            }\n            datePlaceholder=\"Choose\"\n            dateRenderLabel=\"Date\"\n            timeRenderLabel=\"Time\"\n            prevMonthLabel=\"Previous month\"\n            nextMonthLabel=\"Next month\"\n            onChange={onChange}\n            layout=\"stacked\"\n            value={value}\n            invalidDateTimeMessage=\"Invalid date!\"\n            messages={messages}\n            allowNonStepInput={true}\n            isRequired\n          />\n        </div>\n      </div>\n    )\n  }\n\n  render(<Example />)\n```\n\n#### A disabled DateTimeInput:\n\n```js\n---\ntype: example\n---\n<DateTimeInput\n  description=\"Pick a date and time\"\n  datePlaceholder=\"Choose a date\"\n  dateRenderLabel=\"Date\"\n  timeRenderLabel=\"Time\"\n  prevMonthLabel='Previous month'\n  nextMonthLabel='Next month'\n  invalidDateTimeMessage={(dvalue) => { return `'${dvalue} is not valid.` }}\n  layout=\"columns\"\n  defaultValue=\"2018-01-18T13:30\"\n  interaction=\"disabled\"\n/>\n```\n\n#### A DateTimeInput in a different locale and timezone where these are set from the React `context`:\n\n```js\n---\ntype: example\n---\n  const Example = () => {\n    return (\n      <ApplyLocale locale=\"fr\" timezone=\"Africa/Nairobi\">\n        <div style={{ height: '14rem' }}>\n          <DateTimeInput\n            description=\"Pick a date and time\"\n            datePlaceholder=\"Choose a date\"\n            dateRenderLabel=\"Date\"\n            timeRenderLabel=\"Time\"\n            prevMonthLabel=\"Previous month\"\n            nextMonthLabel=\"Next month\"\n            invalidDateTimeMessage={(dvalue) => {\n              return `'${dvalue} is not valid.`\n            }}\n            layout=\"columns\"\n            defaultValue=\"2018-01-18T16:00\"\n          />\n        </div>\n      </ApplyLocale>\n    )\n  }\n\n  render(<Example />)\n```\n\n#### A `DateTimeInput` with some disabled dates that are supplied via a `string` array:\n\n```js\n---\ntype: example\n---\n<DateTimeInput\n  description=\"Pick a date and time\"\n  datePlaceholder=\"Choose a date\"\n  dateRenderLabel=\"Date\"\n  timeRenderLabel=\"Time\"\n  invalidDateTimeMessage=\"Invalid date\"\n  disabledDateTimeMessage=\"Disabled date\"\n  prevMonthLabel=\"Previous month\"\n  nextMonthLabel=\"Next month\"\n  defaultValue=\"2022-04-08T13:30\"\n  layout=\"columns\"\n  disabledDates={['2022-04-01T13:30', '2022-04-03T13:30', '2022-04-04T13:30']}\n  locale=\"en-us\"\n  timezone=\"America/Denver\"\n/>\n```\n\n#### A `DateTimeInput` with some disabled dates that are supplied via a `function`:\n\n```js\n---\ntype: example\n---\n  const Example = () => {\n    const locale = 'en-us'\n    const timezone = 'America/Denver'\n\n    const getDisabledDates = (isoDateToCheck) => {\n      const parsed = moment.tz(\n        isoDateToCheck,\n        [moment.ISO_8601],\n        locale,\n        timezone\n      )\n      const now = moment().locale(locale).tz(timezone)\n      return parsed.isBefore(now)\n    }\n\n    return (\n      <div style={{ height: '15rem' }}>\n        <DateTimeInput\n          description=\"Pick a date and time\"\n          datePlaceholder=\"Choose a date\"\n          dateRenderLabel=\"Date\"\n          timeRenderLabel=\"Time\"\n          invalidDateTimeMessage={(rawDateValue) =>\n            'Invalid date: ' + rawDateValue\n          }\n          disabledDateTimeMessage={(rawDateValue) =>\n            'Disabled date: ' + rawDateValue\n          }\n          prevMonthLabel=\"Previous month\"\n          nextMonthLabel=\"Next month\"\n          defaultValue=\"2022-04-08T13:30\"\n          layout=\"columns\"\n          disabledDates={getDisabledDates}\n          locale={locale}\n          timezone={timezone}\n        />\n      </div>\n    )\n  }\n\n  render(<Example />)\n```\n\n#### Programatically reset `DateTimeInput`\n\nDue to `onChange` not being called on every typing event, and `value` isn't representing the inner value-state of the component, it's not possible to reset the `DateTimeInput` by setting the `value` to `undefined`. Instead, you can use the `reset` function that is passed to the `DateTimeInput` as a prop.\n\n```js\n---\ntype: example\n---\n  const Example = () => {\n    const [date, setDate] = useState('')\n    const resetFn = useRef()\n\n    return (\n      <div>\n        <DateTimeInput\n          description=\"Pick a date and time\"\n          datePlaceholder=\"Choose a date\"\n          dateRenderLabel=\"Date\"\n          timeRenderLabel=\"Time\"\n          invalidDateTimeMessage=\"Invalid date!\"\n          prevMonthLabel=\"Previous month\"\n          nextMonthLabel=\"Next month\"\n          value={date}\n          onChange={(e, newDate) => setDate(newDate)}\n          reset={(reset) => (resetFn.current = reset)}\n        />\n        <Button onClick={() => resetFn.current()}>Clear</Button>\n        <p>{date}</p>\n      </div>\n    )\n  }\n  render(<Example />)\n```\n","displayName":"DateTimeInput","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"recalculateState","docblock":null,"modifiers":[],"params":[{"name":"dateStr","optional":true,"type":{"name":"string"}},{"name":"doNotChangeDate","optional":true,"type":null},{"name":"doNotChangeTime","optional":true,"type":null}],"returns":{"type":{"name":"signature","type":"object","raw":"{\n  // the time and date currently selected\n  iso?: Moment\n  // set when the user types text into the DateInput\n  dateInputTextChanged: boolean\n  // The currently selected dateTime in the calendar. Will be final when\n  // the calendar closes.\n  calendarSelectedDate?: Moment\n  // the date rendered by the opened calendar. Not selected just determines\n  // which month/year to show\n  renderedDate: Moment\n  // The value currently displayed in the dateInput component.\n  // Just the date part is visible\n  dateInputText: string\n  // The value currently displayed in the timeSelect component as ISO datetime\n  timeSelectValue?: string\n  // The message (success/error) shown below the component\n  message?: FormMessage\n  // Whether the calendar is open\n  isShowingCalendar?: boolean\n}","signature":{"properties":[{"key":"iso","value":{"name":"Moment","required":false}},{"key":"dateInputTextChanged","value":{"name":"boolean","required":true}},{"key":"calendarSelectedDate","value":{"name":"Moment","required":false}},{"key":"renderedDate","value":{"name":"Moment","required":true}},{"key":"dateInputText","value":{"name":"string","required":true}},{"key":"timeSelectValue","value":{"name":"string","required":false}},{"key":"message","value":{"name":"FormMessage","required":false}},{"key":"isShowingCalendar","value":{"name":"boolean","required":false}}]}}}},{"name":"reset","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"locale","docblock":null,"modifiers":[],"params":[],"returns":{"type":{"name":"string"}}},{"name":"timezone","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"dateFormat","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isDisabledDate","docblock":null,"modifiers":[],"params":[{"name":"date","optional":false,"type":{"name":"Moment","alias":"Moment"}}],"returns":null},{"name":"handleDateTextChange","docblock":null,"modifiers":[],"params":[{"name":"_event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}},{"name":"date","optional":false,"type":{"name":"signature","type":"object","raw":"{ value: string }","signature":{"properties":[{"key":"value","value":{"name":"string","required":true}}]}}}],"returns":null},{"name":"tryParseDate","docblock":null,"modifiers":[],"params":[{"name":"val","optional":false,"type":{"name":"string"}}],"returns":null},{"name":"handleDayClick","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"MouseEvent","elements":[{"name":"any"}],"raw":"MouseEvent<any>","alias":"MouseEvent"}},{"name":"{ date }: { date: string }","optional":false,"type":{"name":"signature","type":"object","raw":"{ date: string }","signature":{"properties":[{"key":"date","value":{"name":"string","required":true}}]}}}],"returns":null},{"name":"handleHideCalendar","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"updateStateBasedOnDateInput","docblock":null,"modifiers":[],"params":[{"name":"dateParsed","optional":false,"type":{"name":"union","raw":"Moment | null | undefined","elements":[{"name":"Moment"},{"name":"null"},{"name":"undefined"}]}},{"name":"event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"updateStateBasedOnTimeSelect","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}},{"name":"option","optional":false,"type":{"name":"signature","type":"object","raw":"{ value?: string; inputText: string }","signature":{"properties":[{"key":"value","value":{"name":"string","required":false}},{"key":"inputText","value":{"name":"string","required":true}}]}}}],"returns":null},{"name":"changeStateIfNeeded","docblock":null,"modifiers":[],"params":[{"name":"newState","optional":false,"type":{"name":"signature","type":"object","raw":"{\n  // the time and date currently selected\n  iso?: Moment\n  // set when the user types text into the DateInput\n  dateInputTextChanged: boolean\n  // The currently selected dateTime in the calendar. Will be final when\n  // the calendar closes.\n  calendarSelectedDate?: Moment\n  // the date rendered by the opened calendar. Not selected just determines\n  // which month/year to show\n  renderedDate: Moment\n  // The value currently displayed in the dateInput component.\n  // Just the date part is visible\n  dateInputText: string\n  // The value currently displayed in the timeSelect component as ISO datetime\n  timeSelectValue?: string\n  // The message (success/error) shown below the component\n  message?: FormMessage\n  // Whether the calendar is open\n  isShowingCalendar?: boolean\n}","signature":{"properties":[{"key":"iso","value":{"name":"Moment","required":false}},{"key":"dateInputTextChanged","value":{"name":"boolean","required":true}},{"key":"calendarSelectedDate","value":{"name":"Moment","required":false}},{"key":"renderedDate","value":{"name":"Moment","required":true}},{"key":"dateInputText","value":{"name":"string","required":true}},{"key":"timeSelectValue","value":{"name":"string","required":false}},{"key":"message","value":{"name":"FormMessage","required":false}},{"key":"isShowingCalendar","value":{"name":"boolean","required":false}}]},"alias":"DateTimeInputState"}},{"name":"e","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"areDifferentDates","docblock":null,"modifiers":[],"params":[{"name":"d1","optional":true,"type":{"name":"Moment","alias":"Moment"}},{"name":"d2","optional":true,"type":{"name":"Moment","alias":"Moment"}}],"returns":null},{"name":"handleBlur","docblock":null,"modifiers":[],"params":[{"name":"e","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"handleShowCalendar","docblock":null,"modifiers":[],"params":[{"name":"_event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"handleSelectNextDay","docblock":null,"modifiers":[],"params":[{"name":"_event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"handleSelectPrevDay","docblock":null,"modifiers":[],"params":[{"name":"_event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"handleRenderNextMonth","docblock":null,"modifiers":[],"params":[{"name":"_event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"handleRenderPrevMonth","docblock":null,"modifiers":[],"params":[{"name":"_event","optional":false,"type":{"name":"SyntheticEvent","alias":"SyntheticEvent"}}],"returns":null},{"name":"renderDays","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"defaultWeekdays","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"renderNextPrevMonthButton","docblock":null,"modifiers":[],"params":[{"name":"type","optional":false,"type":{"name":"union","raw":"'prev' | 'next'","elements":[{"name":"literal","value":"'prev'"},{"name":"literal","value":"'next'"}]}}],"returns":null}],"props":{"description":{"required":true,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"The label over the composite `DateTimeInput` component"},"dateRenderLabel":{"required":true,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"The label over the DateInput"},"prevMonthLabel":{"required":true,"tsType":{"name":"string"},"description":"The screen reader label for the calendar navigation header's prev month\nbutton"},"nextMonthLabel":{"required":true,"tsType":{"name":"string"},"description":"The screen reader label for the calendar navigation header's next month\nbutton"},"datePlaceholder":{"required":false,"tsType":{"name":"string"},"description":"HTML placeholder text to display when the date input has no value.\nThis should be hint text, not a label replacement."},"timePlaceholder":{"required":false,"tsType":{"name":"string"},"description":"HTML placeholder text to display when the time input has no value.\nThis should be hint text, not a label replacement."},"dateFormat":{"required":false,"tsType":{"name":"string"},"description":"The format of the date shown in the `DateInput` when a date is selected.\nValid formats are compatible with\n[Moment formats](https://momentjs.com/docs/#/displaying/format/),\nincluding localized formats.\n\nIf omitted, it will use 'LL' which is a localized date with full month,\ne.g. \"August 6, 2014\"","defaultValue":{"value":"'LL'","computed":false}},"timeRenderLabel":{"required":true,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"The label over the time input"},"timeStep":{"required":false,"tsType":{"name":"union","raw":"5 | 10 | 15 | 20 | 30 | 60","elements":[{"name":"literal","value":"5"},{"name":"literal","value":"10"},{"name":"literal","value":"15"},{"name":"literal","value":"20"},{"name":"literal","value":"30"},{"name":"literal","value":"60"}]},"description":"The number of minutes to increment by when generating the allowable time options.","defaultValue":{"value":"30","computed":false}},"timeFormat":{"required":false,"tsType":{"name":"string"},"description":"The format of the time shown in the `TimeSelect` when a time is selected.\nValid formats are compatible with\n[Moment formats](https://momentjs.com/docs/#/displaying/format/),\nincluding localized formats.\n\nIf omitted, defers to the underlying `TimeSelect`'s default."},"locale":{"required":false,"tsType":{"name":"string"},"description":"A standard language identifier.\n\nSee [Moment.js](https://momentjs.com/timezone/docs/#/using-timezones/parsing-in-zone/) for\nmore details.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's locale will be used if no value is set via a component\nproperty or a context property."},"timezone":{"required":false,"tsType":{"name":"string"},"description":"A timezone identifier in the format: *Area/Location*\n\nSee [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list\nof possible options.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's timezone will be used if no value is set via a component\nproperty or a context property."},"invalidDateTimeMessage":{"required":true,"tsType":{"name":"union","raw":"string | ((rawDateValue: string) => string)","elements":[{"name":"string"},{"name":"unknown"}]},"description":"The message shown to the user when the data is invalid.\nIf a string, shown to the user anytime the input is invalid.\n\nIf a function, receives a single parameter:\n- *rawDateValue*: the string entered as a date by the user.\n\nCurrently, times must be selected from a list, it can never be incorrect,\nThough `invalidDateTimeMessage()` will be called if the user selects a time without\nsetting the date."},"showMessages":{"required":false,"tsType":{"name":"boolean"},"description":"Toggles whether to show built-in messages (the date/time, or the\n`invalidDateTimeMessage`). Even when set to `false` the component will\nshow user supplied messages by the `messages` prop.\n@default true","defaultValue":{"value":"true","computed":false}},"messages":{"required":false,"tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"description":"Extra message(s) to be displayed."},"messageFormat":{"required":false,"tsType":{"name":"string"},"description":"This format of the composite date-time when displayed in messages.\nValid formats are defined in the\n[Moment docs](https://momentjs.com/docs/#/displaying/format/)","defaultValue":{"value":"'LLLL'","computed":false}},"layout":{"required":false,"tsType":{"name":"union","raw":"'stacked' | 'columns' | 'inline'","elements":[{"name":"literal","value":"'stacked'"},{"name":"literal","value":"'columns'"},{"name":"literal","value":"'inline'"}]},"description":"The layout of this component.\nVertically stacked, horizontally arranged in 2 columns, or inline (default).\nSee [FormFieldGroup](#FormFieldGroup) for details.","defaultValue":{"value":"'inline'","computed":false}},"rowSpacing":{"required":false,"tsType":{"name":"union","raw":"'none' | 'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'none'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"description":"Controls the spacing between the inputs when they are in a vertical layout.","defaultValue":{"value":"'small'","computed":false}},"colSpacing":{"required":false,"tsType":{"name":"union","raw":"'none' | 'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'none'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"description":"Controls the spacing between the inputs when they are in a horizontal layout.","defaultValue":{"value":"'medium'","computed":false}},"value":{"required":false,"tsType":{"name":"string"},"description":"An ISO 8601 formatted date string representing the current date-time\n(must be accompanied by an onChange prop)."},"defaultValue":{"required":false,"tsType":{"name":"string"},"description":"An ISO 8601 formatted date string to use if `value` isn't provided."},"renderWeekdayLabels":{"required":false,"tsType":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(\n  | React.ReactNode\n  | ((...args: any[]) => React.ReactNode)\n)[]"},"description":"An array of labels containing the name of each day of the week. The visible\nportion of the label should be abbreviated (no longer than three characters).\nNote that screen readers will read this content preceding each date as the\n`<Calendar />` is navigated. Consider using\n[AccessibleContent](#AccessibleContent) with the `alt` prop containing the\nfull day name for assistive technologies and the children containing the\nabbreviation. ex. `[<AccessibleContent alt=\"Monday\">Mon</AccessibleContent>, ...]`\n\nYou must render set the starting day of the week to the one specified by\nthe current locale (e.g. Sunday in the US, Monday in Germany),\ndates are already displayed this way.\n\nBy default it will render accessible, localized, abbreviated weekdays\nwith week starts according to the current locale."},"isRequired":{"required":false,"tsType":{"name":"boolean"},"description":"Specifies if the input is required (its passed down to the native DOM\nelements). If its `true` then an empty input will produce an error message\n(`invalidDateTimeMessage`)","defaultValue":{"value":"false","computed":false}},"interaction":{"required":false,"tsType":{"name":"InteractionType"},"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled."},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: SyntheticEvent, isoValue?: string) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"},{"type":{"name":"string"},"name":"isoValue"}],"return":{"name":"void"}}},"description":"Called when the date-time value has changed.\nThe passed in parameters are:\n- *event*: The triggering event (which may be from the underlying\n  `DateInput` or `TimeSelect`)\n- *isoValue*: The new date value in ISO8601 format, undefined if its invalid"},"dateInputRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(el: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}},"description":"The HTML `input` element where the date is entered."},"timeInputRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(el: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}},"description":"The HTML `input` element where the time is entered."},"onBlur":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e: SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"e"}],"return":{"name":"void"}}},"description":"onBlur event handler for when focus leaves DateTimeInput.\nDoes not fire when focus moves between DateInput and TimeSelect within the\ncomponent"},"disabledDates":{"required":false,"tsType":{"name":"union","raw":"string[] | ((isoDateToCheck: string) => boolean)","elements":[{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"},{"name":"unknown"}]},"description":""},"disabledDateTimeMessage":{"required":false,"tsType":{"name":"union","raw":"string | ((rawDateValue: string) => string)","elements":[{"name":"string"},{"name":"unknown"}]},"description":"Error message shown to the user if they enter a date that is disabled.\nIf not specified the component will show the `invalidDateTimeMessage`."},"allowNonStepInput":{"required":false,"tsType":{"name":"boolean"},"description":"Whether to allow the user to enter non-step divisible values in the time\ninput field. Note that even if this is set to false one can enter non-step\ndivisible values programmatically. The user will need to enter the value\nexactly (except for lower/uppercase) as specified by the `timeFormat` prop\nfor it to be accepted.\nDefault is `undefined` which equals to `false`","defaultValue":{"value":"false","computed":false}},"initialTimeForNewDate":{"required":false,"tsType":{"name":"string"},"description":"The default time to be prefilled if a day is selected. The time input has to be empty for this to be applied.\nAn error is thrown if the time format is not HH:MM."},"reset":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(reset: () => void) => void","signature":{"arguments":[{"type":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"name":"reset"}],"return":{"name":"void"}}},"description":"Used for getting the internal reset function of DateTimeInput. If that\nfunction is called, the component will reset to its default inner state.\nThe callback function will be called in componentDidMount\nNOTE: this won't call onChange, so you have to reset the value manually when calling reset"}},"category":"components","relativePath":"packages/ui-date-time-input/src/DateTimeInput/index.tsx","extension":".tsx","srcPath":"packages/ui-date-time-input/src/DateTimeInput/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-date-time-input/src/DateTimeInput/index.tsx","packageName":"@instructure/ui-date-time-input","requirePath":"@instructure/ui-date-time-input/lib/DateTimeInput/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-date-time-input/src/DateTimeInput/index.tsx').default","esPath":"@instructure/ui-date-time-input/es/DateTimeInput/index","id":"DateTimeInput","title":"DateTimeInput"}