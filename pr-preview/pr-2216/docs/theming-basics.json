{"description":"\n## InstUI's theming engine\n\nInstUI's theming engine allows each UI component can to be used in isolation and support multiple themes, including dynamic themes provided at runtime, while still working within a system of components that use a shared global theme. It uses the [Emotion design library's](https://emotion.sh/) under the hood to convert JavaScript objects to CSS.\n\n### Motivation\n\n1. Two-tiered theme variable system: system-wide variables + component level variables. With this variable system, components can be themed, tested, and rendered in isolation from the rest of the system, and we can mitigate issues that may arise with system-wide theme updates.\n\n2. Runtime theme application and definition: to apply user/account level themes without using the CSS cascade.\n\n3. Prevent CSS Cascade bugs: All components should specify variants via props or component level theme variables only (no className or style overrides) with a clear API and should not rely on any external styles.\n\n4. Theme variables should be accessible in JS.\n\n5. All component styles should be scoped to the component.\n\n6. Pre-render/server-side render support (inline critical CSS).\n\n7. Use a popular, well maintained and broadly adopted JS design and theming library that supports runtime theme switching ([Emotion](https://emotion.sh/)).\n\n### InstUISettingsProvider\n\n`InstUISettingsProvider` is a React component, which wraps Emotion's own `ThemeProvider`.\n\nIt accepts a `theme` prop, which should be an Instructure UI theme.\n\nIt can be used in two ways. On the top level, you can provide the theme for the whole application or nested anywhere inside it. You can also provide an object with theme or component theme overrides.\n\n**For detailed usage info and examples, see the [InstUISettingsProvider](InstUISettingsProvider) documentation page.**\n\n```jsx\n---\ntype: code\n---\nimport Button from './Button'\nimport { InstUISettingsProvider } from '@instructure/emotion'\nimport { canvasHighContrast } from '@instructure/ui-themes'\n\nconst RenderApp = () => {\n  return (\n    <InstUISettingsProvider theme={canvasHighContrast}>\n      <Button />\n    </InstUISettingsProvider>\n  )\n}\n```\n\n### Theme overrides\n\nA themeable componentâ€™s theme can be configured by wrapping it in an [InstUISettingsProvider](InstUISettingsProvider) component, and/or set explicitly via its `themeOverride` prop.\n\n#### themeOverride prop\n\nThe themeable components accept a `themeOverride` prop which lets you override it's component theme object. It accepts an override object or a function, which has the current `componentTheme` as its parameter.\n\n**See more on the [withStyle](withStyle/#applying-themes) and [Using theme overrides](/#using-theme-overrides) doc pages for more info.**\n\n```js\n---\ntype: example\n---\n<div>\n  <Button color='primary' themeOverride={{ primaryBackground: \"purple\" }}>\n    Button\n  </Button>\n  <Button\n    color='primary'\n    margin=\"0 0 0 small\"\n    themeOverride={(componentTheme) => ({\n      primaryBackground: componentTheme.successBackground,\n      primaryBorderColor: componentTheme.successBorderColor\n    })}\n  >\n    Button\n  </Button>\n  <Button\n    color='primary'\n    margin=\"0 0 0 small\"\n    themeOverride={(_componentTheme, currentTheme) => ({\n      primaryBackground: currentTheme.colors.primitives.orange57,\n      primaryBorderColor: '#00AAA4',\n      borderWidth: currentTheme.borders.widthLarge,\n      borderStyle: 'dashed'\n    })}\n  >\n    Button\n  </Button>\n</div>\n```\n\n### Global styles\n\nWrite your global styles in the `styles.js` file on a \"globalStyles\" key. You don't have to add labels to global styles.\n\n```js\n---\ntype: code\n---\n// styles.js\n\nreturn {\n  globalStyles: {\n    '.CodeMirror': {\n      height: 'auto',\n      background: componentTheme.background\n      // ...\n    }\n  }\n}\n```\n\nIn the `index.js`, import `Global` from `@instructure/emotion`, which is equivalent to the [Global](https://emotion.sh/docs/globals) component of Emotion.js.\n\nIn the render method, use the `<Global>` component and pass the the \"globalStyles\" as its `styles={}` property.\n\n```jsx\n---\ntype: code\n---\n// index.js\n\nimport { withStyle, Global } from '@instructure/emotion'\n\n// ...\n\nrender() {\n  const { styles } = this.props\n\n  return (\n    <div css={styles.codeEditor}>\n      <Global styles={styles.globalStyles} />\n      // ...\n    </div>\n  )\n}\n```\n\n### Keyframes\n\nAnimations are handled with Emotion's [keyframes](https://emotion.sh/docs/keyframes) helper.\n\nImport `keyframes` from `@instructure/emotion` in the `styles.js` file.\n\nDefine the animation on the top of the page as a `const` and use it in your style object where needed. **Make sure that it is defined outside of the `generateStyle` method, otherwise it is causing problems with style recalculation.**\n\n```js\n---\ntype: code\n---\n// styles.js\n\nimport { keyframes } from '@instructure/emotion'\n\nconst pulseAnimation = keyframes`\n  to {\n    transform: scale(1);\n    opacity: 0.9;\n  }`\n\nconst generateStyle = (componentTheme, props, state) => {\n  // ...\n\n  return {\n    componentClass: {\n      // ...\n      animationName: pulseAnimation\n    }\n  }\n}\n```\n\n### Writing theme tests\n\nFor components with theme tests, you can use `generateComponentTheme` from `theme.js` to get the theme variables.\n\nImport the themes needed for your test, and pass them to the generator.\n\n```js\n---\ntype: code\n---\nimport { canvas, canvasHighContrast } from '@instructure/ui-themes'\nimport generateComponentTheme from '../theme'\n\ndescribe('YourComponent.theme', () => {\n  describe('with canvas theme', () => {\n    const variables = generateComponentTheme(canvas)\n\n    describe('default', () => {\n      it('should ensure background color and text color meet 3:1 contrast', () => {\n        expect(contrast(variables.background, variables.color)).to.be.above(3)\n      })\n    })\n  })\n  describe('with the \"canvas-high-contrast\" theme', () => {\n    const variables = generateComponentTheme(canvasHighContrast)\n\n    describe('default', () => {\n      it('should ensure background color and text color meet 4.5:1 contrast', () => {\n        expect(contrast(variables.background, variables.color)).to.be.above(4.5)\n      })\n    })\n  })\n})\n```\n","title":"Theming engine basics","category":"Contributor Guides/theming","order":1,"relativePath":"docs/contributor-docs/theming/theming-basics.md","extension":".md","srcPath":"docs/contributor-docs/theming/theming-basics.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/theming/theming-basics.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/contributor-docs/theming/theming-basics","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/contributor-docs/theming/theming-basics.md').default","esPath":"@instructure/docs/contributor-docs/theming/theming-basics","themePath":"docs/contributor-docs/theming/theming-basics.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/theming/theming-basics.md","id":"theming-basics"}