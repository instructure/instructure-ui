{"description":"\n## Making InstUI-like components with theming\n\nInstUI uses [Emotion](https://emotion.sh/docs/introduction) under the hood to theme and style its components.\nIf you want to read about the design behind the system and how to build `class-based` components with InstUI, please read [this](theming-class-based).\n\nThis page will show you how to build `functional` react components with InstUI.\n\n### Anatomy of a functional InstUI component\n\nTo make similar and similarly maintainable components to InstUI, you should follow a basic structure. This is not strictly necessary but recommended and this guide will assume you do use it.\n\nA fully equipped InstUI component has three files: `index.tsx`, `style.ts`, `theme.ts` and uses the `useStyles` hook.\n\nLet's take a look at the simplest example possible:\n\n```js\n---\ntype: code\n---\n// index.tsx\n\n// /** @jsx jsx */\nimport { jsx, useStyle } from '@instructure/emotion'\nimport generateStyle from './styles'\nimport generateComponentTheme from './theme'\nconst InstUIComponent = (props: PropsType)=> {\n  const styles = useStyle({\n    generateStyle,\n    generateComponentTheme,\n    componentId: \"InstUIComponent_id\",\n    //any unique id\n    params: {\n      color: props.color,\n      variant: props.variant,\n      themeOverride: props.themeOverride\n      }\n    }\n  )\n  return (\n    <div css={ styles?.root }>content</div>\n  )\n}\n\nexport default InstUIComponent\n```\n\n```js\n---\ntype: code\n---\n// style.ts\n\nconst generateStyle = (\n  componentTheme: componentThemeType,\n  params:ParamType): AvatarStyle => {\n  const { color, variant } = params // assuming you passed the `color` and `variant` to the useStyle hook\n  const variantStyles = {\n    circle: {\n      width: '2.5em',\n      position: 'relative',\n      borderRadius: '100%',\n      overflow: 'hidden' },\n      rectangle: { width: '3em' } }\n  const colorVariants = {\n    default: componentTheme.defaultColor,\n    green: componentTheme.niceGreenColor,\n    nonThemedColor: \"pink\"\n  }\n  return {\n    instUIComponent: { //for the root element's\n    style label: 'instUIComponent',\n    color: colorVariants[color],\n    backgroundColor: componentTheme.bgColor,\n    ...variantStyles[variant]\n    },\n    aChildElement: {\n      label: 'instUIComponent_aChildElement', // this label is needed. Please prefix it with the root label\n      fontWeight: \"400\" //you can hardcode values. Don't need to get them from the theme necessarily .\n    }\n  }\n}\nexport default generateStyle\n```\n\n```js\n---\ntype: code\n---\n// theme.ts\n\nimport type { Theme } from '@instructure/ui-themes'\nconst generateComponentTheme = (theme: Theme) => {\n  const { colors } = theme // the theme you are using. See instUI's theme docs as well\n  const componentVariables ={\n    defaultColor: colors?.contrasts?.white1010,\n    niceGreenColor: colors.contrasts.green4570,\n    bgColor: \"purple\" //this is hardcoded, but added to the theme, so it can be overridden\n  }\n  return { ...componentVariables }\n}\nexport default generateComponentTheme\n```\n\nLet's take a look at the key parts of the examples:\n\nThe `useStyle` hook calculates the styles for the component. It needs an object with:\n\n- `generateStyle` function, this function contains all the `css` information (`style.ts` file in the example).\n- `generateComponentTheme` is an optional param. This provides variables that act as the theme of the components. These can be derived from the global theme object or hardcoded. All can be overridden.\n- `componentId` depends on `generateComponentTheme`. It's mandatory if `generateComponentTheme` is provided. It must be a unique string to identify the component by and used for [component level overrides](https://instructure.design/#using-theme-overrides/#Overriding%20theme%20for%20a%20specific%20component%20in%20a%20subtree).\n- `params` is an optional object with any data you need to pass to `generateStyle`. To enable themeOverrides on the component, you must pass the `themeOverride` prop to `params`.\n\n`useStyle` returns an object with the css classes. Pass it to the DOM through emotion's `css` prop (see example).\n\n#### The `generateComponentTheme`\n\nThe `generateComponentTheme` defines, calculates and exposes variables that are considered `component theme variables`. These variables will be used in the `generateStyle` method to \"theme\" the component's style. These variables are overwritable by the [various override methods](https://instructure.design/#using-theme-overrides).\n`generateComponentTheme` gets the `theme` as parameter. Return an object (`componentVariables`) with keys that will act as the `component theme variables`. This method will be injected to `generateStyle`.\n\n#### The `generateStyle`\n\nYou define the css in the `generateStyle` method. It has access to the themes, defined in the `generateComponentTheme` (in the example: `componentTheme`) and the `params` which are passed to the `useStyle` hook.\nNote: if you set the `label` to a unique value for every css class, it makes testing and debugging much easier because emotion appends to the end of the hashed class name it generates.\n","title":"Functional themed components","category":"Contributor Guides/theming","order":2,"relativePath":"docs/contributor-docs/theming/theming-functional.md","extension":".md","srcPath":"docs/contributor-docs/theming/theming-functional.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/theming/theming-functional.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/contributor-docs/theming/theming-functional","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/contributor-docs/theming/theming-functional.md').default","esPath":"@instructure/docs/contributor-docs/theming/theming-functional","themePath":"docs/contributor-docs/theming/theming-functional.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/theming/theming-functional.md","id":"theming-functional"}