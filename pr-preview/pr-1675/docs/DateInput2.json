{"description":"\nThis component is an updated version of [`DateInput`](/#DateInput) that's easier to configure for developers, has a better UX, better accessibility features and a year picker. We recommend using this instead of `DateInput` which will be deprecated in the future.\n\n### Minimal config\n\n- ```js\n  class Example extends React.Component {\n    state = { value: '' }\n\n    render() {\n      return (\n        <DateInput2\n          renderLabel=\"Choose a date\"\n          screenReaderLabels={{\n            calendarIcon: 'Calendar',\n            nextMonthButton: 'Next month',\n            prevMonthButton: 'Previous month'\n          }}\n          value={this.state.value}\n          width=\"20rem\"\n          onChange={(e, value) => this.setState({ value })}\n          invalidDateErrorMessage=\"Invalid date\"\n        />\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [value, setValue] = useState('')\n    return (\n      <DateInput2\n        renderLabel=\"Choose a date\"\n        screenReaderLabels={{\n          calendarIcon: 'Calendar',\n          nextMonthButton: 'Next month',\n          prevMonthButton: 'Previous month'\n        }}\n        value={value}\n        width=\"20rem\"\n        onChange={(e, value) => setValue(value)}\n        invalidDateErrorMessage=\"Invalid date\"\n      />\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### With year picker\n\n- ```js\n  class Example extends React.Component {\n    state = { value: '' }\n\n    render() {\n      return (\n        <DateInput2\n          renderLabel=\"Choose a date\"\n          screenReaderLabels={{\n            calendarIcon: 'Calendar',\n            nextMonthButton: 'Next month',\n            prevMonthButton: 'Previous month'\n          }}\n          width=\"20rem\"\n          value={this.state.value}\n          onChange={(e, value) => this.setState({ value })}\n          invalidDateErrorMessage=\"Invalid date\"\n          withYearPicker={{\n            screenReaderLabel: 'Year picker',\n            startYear: 1900,\n            endYear: 2024\n          }}\n        />\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [value, setValue] = useState('')\n\n    return (\n      <DateInput2\n        renderLabel=\"Choose a date\"\n        screenReaderLabels={{\n          calendarIcon: 'Calendar',\n          nextMonthButton: 'Next month',\n          prevMonthButton: 'Previous month'\n        }}\n        width=\"20rem\"\n        value={value}\n        onChange={(e, value) => setValue(value)}\n        invalidDateErrorMessage=\"Invalid date\"\n        withYearPicker={{\n          screenReaderLabel: 'Year picker',\n          startYear: 1900,\n          endYear: 2024\n        }}\n      />\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### With custom validation\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [value, setValue] = useState('')\n  const [messages, setMessages] = useState([])\n\n  const handleDateValidation = (dateString, isValidDate) => {\n    if (!isValidDate) {\n      setMessages([{\n        type: 'error',\n        text: 'This is not a valid date'\n      }])\n    } else if (new Date(dateString) < new Date('January 1, 1900')) {\n      setMessages([{\n        type: 'error',\n        text: 'Use date after January 1, 1900'\n      }])\n    } else {\n      setMessages([])\n    }\n  }\n\n  return (\n    <DateInput2\n      renderLabel=\"Choose a date after January 1, 1900\"\n      screenReaderLabels={{\n        calendarIcon: 'Calendar',\n        nextMonthButton: 'Next month',\n        prevMonthButton: 'Previous month'\n      }}\n      width=\"20rem\"\n      value={value}\n      messages={messages}\n      onRequestValidateDate={handleDateValidation}\n      onChange={(e, value) => setValue(value)}\n      withYearPicker={{\n        screenReaderLabel: 'Year picker',\n        startYear: 1900,\n        endYear: 2024\n      }}\n    />\n  )\n}\n\nrender(<Example />)\n```\n","displayName":"DateInput2","methods":[],"props":{"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":true,"description":"Specifies the input label.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"screenReaderLabels":{"type":{"name":"object"},"required":true,"description":"","tsType":{"name":"signature","type":"object","raw":"{\n  calendarIcon: string\n  prevMonthButton: string\n  nextMonthButton: string\n}","signature":{"properties":[{"key":"calendarIcon","value":{"name":"string","required":true}},{"key":"prevMonthButton","value":{"name":"string","required":true}},{"key":"nextMonthButton","value":{"name":"string","required":true}}]}}},"value":{"type":{"name":"custom","raw":"controllable(PropTypes.string)"},"required":false,"description":"Specifies the input value.","tsType":{"name":"string"}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"Specifies the input size.","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Html placeholder text to display when the input has no value. This should\nbe hint text, not a label replacement.","tsType":{"name":"string"}},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback fired when the input changes.","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent, value: string) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"string"},"name":"value"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a blur event.","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"defaultValue":{"value":"'enabled'","computed":false}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"Specifies if the input is required.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"isInline":{"type":{"name":"bool"},"required":false,"description":"Controls whether the input is rendered inline with other elements or if it\nis rendered as a block level element.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"Specifies the width of the input.","tsType":{"name":"string"}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Displays messages and validation for the input. It should be an object\nwith the following shape:\n`{\n  text: PropTypes.node,\n  type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"onRequestShowCalendar":{"type":{"name":"func"},"required":false,"description":"Callback fired requesting the calendar be shown.","tsType":{"name":"signature","type":"function","raw":"(event: SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestHideCalendar":{"type":{"name":"func"},"required":false,"description":"Callback fired requesting the calendar be hidden.","tsType":{"name":"signature","type":"function","raw":"(event: SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestValidateDate":{"type":{"name":"func"},"required":false,"description":"Callback fired when the input is blurred. Feedback should be provided\nto the user when this function is called if the selected date or input\nvalue is invalid. The component has an internal check whether the date can\nbe parsed to a valid date.","tsType":{"name":"signature","type":"function","raw":"(\n  value?: string,\n  internalValidationPassed?: boolean\n) => void | FormMessage[]","signature":{"arguments":[{"type":{"name":"string"},"name":"value"},{"type":{"name":"boolean"},"name":"internalValidationPassed"}],"return":{"name":"union","raw":"void | FormMessage[]","elements":[{"name":"void"},{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}]}}}},"invalidDateErrorMessage":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":false,"description":"The message shown to the user when the date is invalid. If this prop is not set, validation is bypassed.\nIf it's set to an empty string, validation happens and the input border changes to red if validation hasn't passed.","tsType":{"name":"string"}},"locale":{"type":{"name":"string"},"required":false,"description":"A standard language identifier.\n\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) for\nmore details.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's locale will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"timezone":{"type":{"name":"string"},"required":false,"description":"A timezone identifier in the format: *Area/Location*\n\nSee [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list\nof possible options.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's timezone will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"withYearPicker":{"type":{"name":"object"},"required":false,"description":"If set, years can be picked from a dropdown.\nIt accepts an object.\nscreenReaderLabel: string // e.g.: i18n(\"pick a year\")\n\nonRequestYearChange?:(e: React.MouseEvent,requestedYear: number): void // if set, on year change, only this will be called and no internal change will take place\n\nstartYear: number // e.g.: 2001, sets the start year of the selectable list\n\nendYear: number // e.g.: 2030, sets the end year of the selectable list","tsType":{"name":"signature","type":"object","raw":"{\n  screenReaderLabel: string\n  onRequestYearChange?: (e: SyntheticEvent, requestedYear: number) => void\n  startYear: number\n  endYear: number\n}","signature":{"properties":[{"key":"screenReaderLabel","value":{"name":"string","required":true}},{"key":"onRequestYearChange","value":{"name":"signature","type":"function","raw":"(e: SyntheticEvent, requestedYear: number) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"e"},{"type":{"name":"number"},"name":"requestedYear"}],"return":{"name":"void"}},"required":false}},{"key":"startYear","value":{"name":"number","required":true}},{"key":"endYear","value":{"name":"number","required":true}}]}}}},"category":"components","relativePath":"packages/ui-date-input/src/DateInput2/index.tsx","extension":".tsx","srcPath":"packages/ui-date-input/src/DateInput2/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-date-input/src/DateInput2/index.tsx","packageName":"@instructure/ui-date-input","requirePath":"@instructure/ui-date-input/lib/DateInput2/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-date-input/src/DateInput2/index.tsx').default","esPath":"@instructure/ui-date-input/es/DateInput2/index","id":"DateInput2","title":"DateInput2"}