{"description":"\n```js\n---\ntype: example\n---\n  <>\n  <CheckboxGroup\n  name=\"sports2\"\n  messages={[\n    { text: 'Old error...', type: 'error' }\n  ]}\n  description=\"Old checkbox group with error\"\n>\n  <Checkbox label=\"Football\" value=\"football\" />\n  <Checkbox label=\"Basketball\" value=\"basketball\"/>\n  <Checkbox label=\"Volleyball\" value=\"volleyball\" />\n  <Checkbox label=\"Soccer\" value=\"soccer\"/>\n</CheckboxGroup>\n\n  <div style={{height: '64px'}}></div>\n\n  <CheckboxGroup\n  name=\"newErrorGroup\"\n  messages={[\n    { text: 'New error...', type: 'newError' }\n  ]}\n  description=\"New checkbox group with error\"\n>\n  <Checkbox label=\"Football\" value=\"football\" />\n  <Checkbox label=\"Basketball\" value=\"basketball\"/>\n  <Checkbox label=\"Volleyball\" value=\"volleyball\" />\n  <Checkbox label=\"Soccer\" value=\"soccer\"/>\n</CheckboxGroup>\n\n  <div style={{height: '64px'}}></div>\n    <Checkbox label=\"toggle\" variant=\"toggle\" isRequired/>\n  <div style={{height: '64px'}}></div>\n    <Checkbox label=\"required toggle\" variant=\"toggle\" messages={[{type: 'error', text: 'Old error'}]} isRequired/>\n  <div style={{height: '64px'}}></div>\n    <Checkbox label=\"required toggle\" variant=\"toggle\" messages={[{type: 'newError', text: 'New error'}]} isRequired/>\n  <div style={{height: '64px'}}></div>\n\n  <Checkbox label=\"checkbox 1\" value=\"medium\" />\n  <div style={{height: '64px'}}></div>\n  <Checkbox label=\"required checkbox\" value=\"medium\" isRequired/>\n  <div style={{height: '64px'}}></div>\n  <Checkbox label=\"checkbox 2\" value=\"medium\" messages={[{type: 'error', text: 'Old error'}]} isRequired/>\n  <div style={{height: '64px'}}></div>\n  <Checkbox label=\"checkbox 3\" value=\"medium\" messages={[{type: 'newError', text: 'New error'}]} isRequired/>\n  <div style={{height: '64px'}}></div>\n\n  <RadioInputGroup name=\"example1\" description=\"Select something\" messages={[{text: 'Radio error', type: 'newError'}]} isRequired>\n  <RadioInput\n    label=\"See RadioInputGroup for more details\"\n    value=\"foo1\"\n    name=\"bar3\"\n  />\n  <RadioInput\n    label=\"See RadioInputGroup for more details\"\n    value=\"foo2\"\n    name=\"bar3\"\n  />\n  <RadioInput\n    label=\"See RadioInputGroup for more details\"\n    value=\"foo3\"\n    name=\"bar3\"\n  />\n    </RadioInputGroup>\n  <div style={{height: '64px'}}></div>\n\n  <RadioInputGroup name=\"example2\" description=\"Required radio group\" isRequired>\n  <RadioInput\n    label=\"See RadioInputGroup for more details\"\n    value=\"foo1\"\n    name=\"bar3\"\n  />\n  <RadioInput\n    label=\"See RadioInputGroup for more details\"\n    value=\"foo2\"\n    name=\"bar3\"\n  />\n  <RadioInput\n    label=\"See RadioInputGroup for more details\"\n    value=\"foo3\"\n    name=\"bar3\"\n  />\n    </RadioInputGroup>\n  <div style={{height: '64px'}}></div>\n\n\n<TextInput\n  renderLabel=\"Required name\"\n  placeholder=\"Doe, John Doe\"\n  isRequired\n  onChange={(event, value) => { console.log(value) }}\n/>\n  <div style={{height: '64px'}}></div>\n<TextInput\n  renderLabel=\"Name\"\n  placeholder=\"Doe, John Doe\"\n  isRequired\n  messages={[\n    { text: 'Old error', type: 'error' }\n  ]}\n  onChange={(event, value) => { console.log(value) }}\n/>\n  <div style={{height: '64px'}}></div>\n<TextInput\n  renderLabel=\"Name\"\n  placeholder=\"Doe, John Doe\"\n  isRequired\n  messages={[\n    { text: 'New error, Lorem, ipsum dolor sit amet consectetur adipisicing elit. Atque illum molestias vel consequatur dolorum explicabo officia velit enim, praesentium voluptatibus omnis minus voluptatem vero, eveniet dolores perspiciatis magni aut nulla?', type: 'newError' }\n  ]}\n  onChange={(event, value) => { console.log(value) }}\n/>\n  <div style={{height: '64px'}}></div>\n<TextInput\n  renderLabel=\"Name\"\n  placeholder=\"Doe, John Doe\"\n  messages={[\n    { text: 'New Error', type: 'newError' }\n  ]}\n  onChange={(event, value) => { console.log(value) }}\n/>\n</>\n```\n","displayName":"TextInput","methods":[],"props":{"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"The form field label.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'email'","computed":false},{"value":"'url'","computed":false},{"value":"'tel'","computed":false},{"value":"'search'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Determines the underlying native HTML `<input>` element's `type`.\n\nFor more see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url","tsType":{"name":"union","raw":"'text' | 'email' | 'url' | 'tel' | 'search' | 'password'","elements":[{"name":"literal","value":"'text'"},{"name":"literal","value":"'email'"},{"name":"literal","value":"'url'"},{"name":"literal","value":"'tel'"},{"name":"literal","value":"'search'"},{"name":"literal","value":"'password'"}]},"defaultValue":{"value":"'text'","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":"The id of the text input. One is generated if not supplied.","tsType":{"name":"string"}},"value":{"type":{"name":"custom","raw":"controllable(PropTypes.string)"},"required":false,"description":"the selected value (must be accompanied by an `onChange` prop)","tsType":{"name":"string"}},"defaultValue":{"type":{"name":"string"},"required":false,"description":"value to set on initial render","tsType":{"name":"string"}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled.","tsType":{"name":"InteractionType"},"defaultValue":{"value":"undefined","computed":true}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Array of objects with shape: `{\n  text: React.ReactNode,\n  type: One of ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"defaultValue":{"value":"[]","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the text input.","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"textAlign":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'center'","computed":false}]},"required":false,"description":"The text alignment of the input.","tsType":{"name":"union","raw":"'start' | 'center'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"}]},"defaultValue":{"value":"'start'","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"The width of the input.","tsType":{"name":"string"}},"htmlSize":{"type":{"name":"number"},"required":false,"description":"The width of the input (integer value 0 or higher), if a width is not explicitly\nprovided via the `width` prop.\n\nOnly applicable if `display=\"inline-block\"`.\n\nFor more see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/size","tsType":{"name":"number"}},"display":{"type":{"name":"enum","value":[{"value":"'inline-block'","computed":false},{"value":"'block'","computed":false}]},"required":false,"description":"The display of the root element.","tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"defaultValue":{"value":"'block'","computed":false}},"shouldNotWrap":{"type":{"name":"bool"},"required":false,"description":"Prevents the default behavior of wrapping the input and rendered content\nwhen available space is exceeded.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Html placeholder text to display when the input has no value. This should be hint text, not a label replacement.","tsType":{"name":"string"}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"Whether or not the text input is required.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"inputRef":{"type":{"name":"func"},"required":false,"description":"a function that provides a reference to the actual input element","tsType":{"name":"signature","type":"function","raw":"(inputElement: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"inputElement"}],"return":{"name":"void"}}}},"inputContainerRef":{"type":{"name":"func"},"required":false,"description":"a function that provides a reference a parent of the input element","tsType":{"name":"signature","type":"function","raw":"(element: HTMLSpanElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"renderBeforeInput":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display before the input text, such as an icon","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderAfterInput":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display after the input text, such as an icon","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a change event.\n@param {Object} event - the event object\n@param {string} value - the string value of the input","tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent<HTMLInputElement>, value: string) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"},{"type":{"name":"string"},"name":"value"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Callback fired when input loses focus.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"onFocus":{"type":{"name":"func"},"required":false,"description":"Callback fired when input receives focus.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","tags":"form, field","relativePath":"packages/ui-text-input/src/TextInput/index.tsx","extension":".tsx","srcPath":"packages/ui-text-input/src/TextInput/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-text-input/src/TextInput/index.tsx","packageName":"@instructure/ui-text-input","requirePath":"@instructure/ui-text-input/lib/TextInput/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-text-input/src/TextInput/index.tsx').default","esPath":"@instructure/ui-text-input/es/TextInput/index","themePath":"packages/ui-text-input/src/TextInput/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-text-input/src/TextInput/theme.ts","id":"TextInput","title":"TextInput"}