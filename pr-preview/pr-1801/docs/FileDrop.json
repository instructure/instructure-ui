{"description":"\n`FileDrop` is a consistent way to drag and drop, as well as browse your computer to upload a media file.\n\nThe `isDragAccepted` and `isDragRejected` props can be used to signal to the user if\nthe dragged files are going to be accepted or not (unfortunately, this only works as intended in Chrome\nand Firefox).\n\n```js\n---\ntype: example\n---\n<FileDrop\n  accept=\"image/*\"\n  onDropAccepted={([file]) => { console.log(`File accepted ${file.name}`) }}\n  onDropRejected={([file]) => { console.log(`File rejected ${file.name}`) }}\n  renderLabel={\n    <View as=\"div\" padding=\"xx-large large\" background=\"primary\">\n      <IconModuleLine size=\"large\" />\n      <Heading>Drop files here to add them to module</Heading>\n      <Text color=\"brand\">\n        Drag and drop, or click to browse your computer\n      </Text>\n    </View>\n  }\n/>\n```\n\nA disabled FileDrop\n\n```js\n---\ntype: example\n---\n<FileDrop\n  renderLabel={\n    <Billboard\n      heading=\"Upload your image\"\n      message=\"Drag and drop, or click to browse your computer\"\n      hero={<Img src={placeholderImage(1200, 300)} />}\n    />\n  }\n  interaction=\"disabled\"\n/>\n```\n\n### Accept\n\nThe `accept` prop dictates what type of files are allowed. It can be an array or comma-separated string of\n[MIME type formats](https://en.wikipedia.org/wiki/Media_type#Common_examples) and/or file extensions.\n\n```js\n---\ntype: example\n---\n<div>\n  <FileDrop\n    accept=\".csv\"\n    onDropAccepted={([file]) => { console.log(`File accepted ${file.name}`) }}\n    onDropRejected={([file]) => { console.log(`File rejected ${file.name}`) }}\n    renderLabel={\n      <View  background=\"secondary\" as=\"div\" textAlign=\"center\" padding=\"x-large large\">\n        <IconUploadSolid />\n        <Text as=\"div\" weight=\"bold\">\n          Upload document\n        </Text>\n        <Text>Drag and drop or <Text color=\"brand\">browse your files</Text></Text>\n        <Text size=\"small\" as=\"div\" lineHeight=\"double\">A single CSV document</Text>\n      </View>\n    }\n    display=\"inline-block\"\n    width=\"24rem\"\n    margin=\"x-small\"\n  />\n  <FileDrop\n    accept=\"video/*\"\n    onDropAccepted={([file]) => { console.log(`File accepted ${file.name}`) }}\n    onDropRejected={([file]) => { console.log(`File rejected ${file.name}`) }}\n    renderLabel={\n      <Billboard\n        size=\"small\"\n        message=\"All video file types\"\n        hero={<IconVideoLine />}\n      />\n    }\n    display=\"inline-block\"\n    width=\"12rem\"\n    margin=\"x-small\"\n  />\n</div>\n```\n\nFileDrop accepts the same `messages` prop as the other Instructure UI input components for providing\nform validation feedback. If there are `error` messages in the `messages` array, FileDrop's border\nwill turn the theme's `rejectedColor`.\n\n```js\n---\ntype: example\n---\n<FileDrop\n  accept=\".jpg\"\n  onDropAccepted={([file]) => { console.log(`File accepted ${file.name}`) }}\n  onDropRejected={([file]) => { console.log(`File rejected ${file.name}`) }}\n  messages={[{ text: 'Invalid file type', type: 'error' }]}\n  renderLabel={\n    <Billboard\n      size=\"small\"\n      message=\"Only .jpg files\"\n      hero={<IconImageLine />}\n    />\n  }\n  maxWidth=\"15rem\"\n  margin=\"0 auto\"\n/>\n```\n\n### shouldAllowMultiple\n\nIf the `shouldAllowMultiple` prop is `true`, FileDrop accepts multiple files.\n\n```js\n---\ntype: example\n---\n<FileDrop\n  shouldAllowMultiple={true}\n  onDropAccepted={(files) => {\n    console.log(`Files accepted ${files.map((f) => f.name).join(',')}`)\n  }}\n  renderLabel={\n    <View as=\"div\" textAlign=\"center\" padding=\"large\" margin=\"large 0 0 0\">\n      <IconAnnotateLine color=\"brand\" size=\"large\" />\n      <Text as=\"div\" color=\"brand\">\n        Drag and Drop or Click to Browser your Computer\n      </Text>\n    </View>\n  }\n  width=\"18rem\"\n  height=\"16rem\"\n  margin=\"x-small\"\n/>\n```\n\n### height Property\n\nIf the `height` property is set to `100%`, the FileDrop container will fill the available vertical space.\n\n```js\n---\ntype: example\n---\n<div style={{height: '30rem'}}>\n  <FileDrop\n    height=\"100%\"\n    renderLabel={\n      <Flex direction=\"column\" height=\"100%\" alignItems=\"center\" justifyItems=\"center\">\n        <Flex.Item padding=\"small\">\n          <IconPdfLine size=\"large\" />\n        </Flex.Item>\n        <Flex.Item padding=\"small\">\n          <Text size=\"large\">\n            Drag and Drop or Click to Browser your Computer\n          </Text>\n        </Flex.Item>\n        <Flex.Item padding=\"small\">\n          <Text color=\"secondary\" size=\"small\">\n            Accepted File Type is PDF\n          </Text>\n        </Flex.Item>\n      </Flex>\n    }\n  />\n</div>\n```\n","displayName":"FileDrop","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The id of the input (to link it to its label for a11y)","tsType":{"name":"string"}},"renderLabel":{"type":{"name":"union","value":[{"name":"func"},{"name":"node"}]},"required":true,"description":"The content of FileDrop; can be a component or React node.\nComponents receive `isDragAccepted` and `isDragRejected` as props.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"signature","type":"object","raw":"{\n  isDragAccepted: boolean\n  isDragRejected: boolean\n  interaction: FileDropOwnProps['interaction']\n}","signature":{"properties":[{"key":"isDragAccepted","value":{"name":"boolean","required":true}},{"key":"isDragRejected","value":{"name":"boolean","required":true}},{"key":"interaction","value":{"name":"union","raw":"FileDropOwnProps['interaction']","required":true}}]}},{"name":"ClassicComponent","elements":[{"name":"signature","type":"object","raw":"{\n  isDragAccepted: boolean\n  isDragRejected: boolean\n  interaction: FileDropOwnProps['interaction']\n}","signature":{"properties":[{"key":"isDragAccepted","value":{"name":"boolean","required":true}},{"key":"isDragRejected","value":{"name":"boolean","required":true}},{"key":"interaction","value":{"name":"union","raw":"FileDropOwnProps['interaction']","required":true}}]}},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"signature","type":"object","raw":"{\n  isDragAccepted: boolean\n  isDragRejected: boolean\n  interaction: FileDropOwnProps['interaction']\n}","signature":{"properties":[{"key":"isDragAccepted","value":{"name":"boolean","required":true}},{"key":"isDragRejected","value":{"name":"boolean","required":true}},{"key":"interaction","value":{"name":"union","raw":"FileDropOwnProps['interaction']","required":true}}]}}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"accept":{"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}]},"required":false,"description":"The mime media type/s or file extension/s allowed to be dropped inside","tsType":{"name":"union","raw":"string | string[]","elements":[{"name":"string"},{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"}]}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"object with shape: `{\ntext: PropTypes.node,\ntype: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])\n  }`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"defaultValue":{"value":"[]","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"Called when clicking on drop area to select files to upload","tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"}],"return":{"name":"void"}}},"defaultValue":{"value":"function (_e: React.MouseEvent) {}","computed":false}},"onDrop":{"type":{"name":"func"},"required":false,"description":"Called when dropping files or when file dialog window exits successfully","tsType":{"name":"signature","type":"function","raw":"(\n  accepted: ArrayLike<DataTransferItem | File>,\n  rejected: ArrayLike<DataTransferItem | File>,\n  e: React.DragEvent\n) => void","signature":{"arguments":[{"type":{"name":"ArrayLike","elements":[{"name":"union","raw":"DataTransferItem | File","elements":[{"name":"DataTransferItem"},{"name":"File"}]}],"raw":"ArrayLike<DataTransferItem | File>"},"name":"accepted"},{"type":{"name":"ArrayLike","elements":[{"name":"union","raw":"DataTransferItem | File","elements":[{"name":"DataTransferItem"},{"name":"File"}]}],"raw":"ArrayLike<DataTransferItem | File>"},"name":"rejected"},{"type":{"name":"ReactDragEvent","raw":"React.DragEvent"},"name":"e"}],"return":{"name":"void"}}}},"onDropAccepted":{"type":{"name":"func"},"required":false,"description":"Called when dropping allowed files","tsType":{"name":"signature","type":"function","raw":"(\n  accepted: ArrayLike<DataTransferItem | File>,\n  e: React.DragEvent | React.ChangeEvent\n) => void","signature":{"arguments":[{"type":{"name":"ArrayLike","elements":[{"name":"union","raw":"DataTransferItem | File","elements":[{"name":"DataTransferItem"},{"name":"File"}]}],"raw":"ArrayLike<DataTransferItem | File>"},"name":"accepted"},{"type":{"name":"union","raw":"React.DragEvent | React.ChangeEvent","elements":[{"name":"ReactDragEvent","raw":"React.DragEvent"},{"name":"ReactChangeEvent","raw":"React.ChangeEvent"}]},"name":"e"}],"return":{"name":"void"}}}},"onDropRejected":{"type":{"name":"func"},"required":false,"description":"Called when dropping rejected files","tsType":{"name":"signature","type":"function","raw":"(\n  rejected: ArrayLike<DataTransferItem | File>,\n  e: React.DragEvent | React.ChangeEvent\n) => void","signature":{"arguments":[{"type":{"name":"ArrayLike","elements":[{"name":"union","raw":"DataTransferItem | File","elements":[{"name":"DataTransferItem"},{"name":"File"}]}],"raw":"ArrayLike<DataTransferItem | File>"},"name":"rejected"},{"type":{"name":"union","raw":"React.DragEvent | React.ChangeEvent","elements":[{"name":"ReactDragEvent","raw":"React.DragEvent"},{"name":"ReactChangeEvent","raw":"React.ChangeEvent"}]},"name":"e"}],"return":{"name":"void"}}}},"onDragEnter":{"type":{"name":"func"},"required":false,"description":"Called when dragging files\nand passing through FileDrop's content for the first time","tsType":{"name":"signature","type":"function","raw":"(e: React.DragEvent) => void","signature":{"arguments":[{"type":{"name":"ReactDragEvent","raw":"React.DragEvent"},"name":"e"}],"return":{"name":"void"}}}},"onDragOver":{"type":{"name":"func"},"required":false,"description":"Called when dragging files and passing through FileDrop's content","tsType":{"name":"signature","type":"function","raw":"(e: React.DragEvent) => void","signature":{"arguments":[{"type":{"name":"ReactDragEvent","raw":"React.DragEvent"},"name":"e"}],"return":{"name":"void"}}}},"onDragLeave":{"type":{"name":"func"},"required":false,"description":"Called when dragging files and leaving FileDrop's content","tsType":{"name":"signature","type":"function","raw":"(e: React.DragEvent) => void","signature":{"arguments":[{"type":{"name":"ReactDragEvent","raw":"React.DragEvent"},"name":"e"}],"return":{"name":"void"}}}},"shouldEnablePreview":{"type":{"name":"bool"},"required":false,"description":"Flag to use window.URL.createObjectURL for each dropped file and pass it through file.preview","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"shouldAllowMultiple":{"type":{"name":"bool"},"required":false,"description":"Flag to allow multiple files to drop at once","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"shouldAllowRepeats":{"type":{"name":"bool"},"required":false,"description":"Flag to allow upload of the same file more than once","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"maxSize":{"type":{"name":"number"},"required":false,"description":"the maximum file size allowed","tsType":{"name":"number"},"defaultValue":{"value":"Infinity","computed":true}},"minSize":{"type":{"name":"number"},"required":false,"description":"the minimum file size allowed","tsType":{"name":"number"},"defaultValue":{"value":"0","computed":false}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]}},"display":{"type":{"name":"enum","value":[{"value":"'block'","computed":false},{"value":"'inline-block'","computed":false}]},"required":false,"description":"Set the CSS `display` property on FileInput's outermost element","tsType":{"name":"union","raw":"'block' | 'inline-block'","elements":[{"name":"literal","value":"'block'"},{"name":"literal","value":"'inline-block'"}]},"defaultValue":{"value":"'block'","computed":false}},"height":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Set the CSS `height` property on FileInput's outermost element","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"width":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Set the CSS `width` property on FileInput's outermost element","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"maxWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Set the CSS `maxWidth` property on FileInput's outermost element","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"minWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Set the CSS `minWidth` property on FileInput's outermost element","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are 0, none, auto, xxx-small, xx-small, x-small, small,\nmedium, large, x-large, xx-large. Apply these values via familiar\nCSS-like shorthand. For example: margin=\"small auto large\".","tsType":{"name":"Spacing"}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-file-drop/src/FileDrop/index.tsx","extension":".tsx","srcPath":"packages/ui-file-drop/src/FileDrop/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-file-drop/src/FileDrop/index.tsx","packageName":"@instructure/ui-file-drop","requirePath":"@instructure/ui-file-drop/lib/FileDrop/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-file-drop/src/FileDrop/index.tsx').default","esPath":"@instructure/ui-file-drop/es/FileDrop/index","themePath":"packages/ui-file-drop/src/FileDrop/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-file-drop/src/FileDrop/theme.ts","id":"FileDrop","title":"FileDrop"}