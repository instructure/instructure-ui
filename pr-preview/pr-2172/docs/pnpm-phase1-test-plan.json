{"description":"\n# pnpm Migration Phase 1 - Test Plan\n\nThis document provides a comprehensive test plan for validating Phase 1 of the pnpm migration. Phase 1 focuses on migrating from npm to pnpm while maintaining the existing Lerna-based release workflow.\n\n## Test Environment Requirements\n\n- **Node.js**: >=22 (as specified in package.json)\n- **pnpm**: >=9\n- **Operating Systems**: macOS, Linux, Windows (partially supported)\n- **Git**: Latest stable version\n- **Browsers**: Latest 2 versions of Chrome, Firefox, Safari, Edge\n\n## Pre-Test Setup\n\n```bash\n# Clean environment\nrm -rf node_modules packages/*/node_modules .pnpm-store\nrm -f pnpm-lock.yaml\n\n# Install pnpm if not already installed\nnpm install -g pnpm@latest\n\n# Clone fresh copy (or use existing)\ngit clone https://github.com/instructure/instructure-ui.git\ncd instructure-ui\ngit checkout feat/pnpm-migration\n```\n\n## Test Categories\n\n### 1. Installation & Setup Tests\n\n#### Test 1.1: Clean Install\n\n**Objective**: Verify pnpm can install all dependencies from scratch\n\n**Steps**:\n\n```bash\npnpm install\n```\n\n**Expected Results**:\n\n- ✅ Command completes without errors\n- ✅ `pnpm-lock.yaml` is created\n- ✅ `node_modules/.pnpm` directory exists\n- ✅ Install time is faster than npm (baseline: ~2-3min with npm, target: ~30-60sec with pnpm)\n- ✅ No peer dependency warnings for @instructure/\\* packages\n- ✅ No phantom dependency issues\n\n**Success Criteria**: Exit code 0, lockfile created, all packages installed\n\n---\n\n#### Test 1.2: Frozen Lockfile Install\n\n**Objective**: Verify CI-compatible install works\n\n**Steps**:\n\n```bash\nrm -rf node_modules\npnpm install --frozen-lockfile\n```\n\n**Expected Results**:\n\n- ✅ Installation succeeds without modifying pnpm-lock.yaml\n- ✅ Command fails if lockfile is out of sync (expected behavior)\n\n**Success Criteria**: Exit code 0, lockfile unchanged\n\n---\n\n#### Test 1.3: Workspace Protocol Verification\n\n**Objective**: Confirm all internal dependencies use `workspace:*`\n\n**Steps**:\n\n```bash\n# Check a sample package\ncat packages/ui-buttons/package.json | grep -A 20 '\"dependencies\"'\n```\n\n**Expected Results**:\n\n- ✅ All `@instructure/*` dependencies show `workspace:*`\n- ✅ External dependencies (react, @babel/runtime, etc.) show normal semver versions\n\n**Example**:\n\n```json\n\"dependencies\": {\n  \"@babel/runtime\": \"^7.27.6\",\n  \"@instructure/emotion\": \"workspace:*\",\n  \"@instructure/ui-view\": \"workspace:*\"\n}\n```\n\n**Success Criteria**: 100% of internal deps use workspace protocol\n\n---\n\n### 2. Build & Bootstrap Tests\n\n#### Test 2.1: Bootstrap Process\n\n**Objective**: Verify the bootstrap script works with pnpm\n\n**Steps**:\n\n```bash\npnpm run bootstrap\n```\n\n**Expected Results**:\n\n- ✅ Clean script runs successfully\n- ✅ UI icons prepare-build completes\n- ✅ Babel transpilation completes for all packages\n- ✅ Token generation completes\n- ✅ Build output exists in `packages/*/lib/` and `packages/*/es/`\n- ⚠️ TypeScript build skipped (known limitation - documented)\n\n**Success Criteria**: Exit code 0, all build artifacts created\n\n---\n\n#### Test 2.2: Incremental Build\n\n**Objective**: Test watch mode and incremental builds\n\n**Steps**:\n\n```bash\n# Terminal 1\npnpm run build:watch\n\n# Terminal 2 (after initial build completes)\n# Make a small change to a component\necho \"// test change\" >> packages/ui-buttons/src/Button/index.tsx\n\n# Observe rebuild in Terminal 1\n```\n\n**Expected Results**:\n\n- ✅ Watch mode starts without errors\n- ✅ Changes trigger rebuild\n- ✅ Only affected packages rebuild (not all 102 packages)\n\n**Success Criteria**: Changes detected and rebuilt within 5 seconds\n\n---\n\n#### Test 2.3: Type Checking\n\n**Objective**: Verify TypeScript configuration works\n\n**Steps**:\n\n```bash\npnpm run ts:check\n```\n\n**Expected Results**:\n\n- ✅ Command runs (even if with errors - known issue)\n- ✅ TypeScript can resolve workspace dependencies\n- ⚠️ May show errors about missing type dependencies (documented issue)\n\n**Success Criteria**: Command completes, resolution works\n\n---\n\n### 3. Package Linking Tests\n\n#### Test 3.1: Workspace Symlinks\n\n**Objective**: Verify internal packages are symlinked correctly\n\n**Steps**:\n\n```bash\n# Check symlinks exist\nls -la node_modules/@instructure/ui-view\nls -la packages/ui-buttons/node_modules/@instructure/ui-view\n\n# Verify it's a symlink to the workspace\nreadlink node_modules/@instructure/ui-view\n```\n\n**Expected Results**:\n\n- ✅ `node_modules/@instructure/ui-view` is a symlink to `packages/ui-view`\n- ✅ All @instructure packages in node_modules are symlinks\n- ✅ No duplicated @instructure packages in the tree\n\n**Success Criteria**: All workspace packages symlinked, no duplicates\n\n---\n\n#### Test 3.2: Cross-Package Changes\n\n**Objective**: Verify changes propagate across linked packages\n\n**Steps**:\n\n```bash\n# 1. Make a change in ui-view\necho \"export const TEST_CONSTANT = 'test'\" >> packages/ui-view/src/View/index.tsx\n\n# 2. Rebuild ui-view\npnpm --filter @instructure/ui-view build\n\n# 3. Verify ui-buttons can see the change (if it imports from ui-view)\n# This should work immediately due to symlinking\n```\n\n**Expected Results**:\n\n- ✅ Changes in ui-view are immediately available to ui-buttons\n- ✅ No need to run `pnpm install` after local changes\n\n**Success Criteria**: Symlinked packages reflect changes immediately\n\n---\n\n### 4. Development Workflow Tests\n\n#### Test 4.1: Dev Server\n\n**Objective**: Test the documentation development server\n\n**Steps**:\n\n```bash\npnpm run dev\n```\n\n**Expected Results**:\n\n- ✅ Server starts on http://localhost:9090\n- ✅ Documentation site loads correctly\n- ✅ All component examples render\n- ✅ Hot reload works when editing components\n- ✅ No console errors related to module resolution\n\n**Success Criteria**: Server runs, hot reload works, no errors\n\n---\n\n#### Test 4.2: Filtered Commands\n\n**Objective**: Verify pnpm filter syntax works\n\n**Steps**:\n\n```bash\n# Build single package\npnpm --filter @instructure/ui-buttons build\n\n# Run tests for single package\npnpm --filter @instructure/ui-buttons test\n\n# Build multiple packages with pattern\npnpm --filter \"@instructure/ui-*\" build\n```\n\n**Expected Results**:\n\n- ✅ Single package builds successfully\n- ✅ Pattern matching works correctly\n- ✅ Only specified packages are affected\n\n**Success Criteria**: Filtered commands execute only on target packages\n\n---\n\n### 5. Testing Infrastructure\n\n#### Test 5.1: Unit Tests (Vitest)\n\n**Objective**: Verify vitest tests run correctly\n\n**Steps**:\n\n```bash\n# Run all tests\npnpm run test:vitest\n\n# Run tests for specific package\npnpm --filter @instructure/ui-buttons test\n```\n\n**Expected Results**:\n\n- ✅ Tests discover and run\n- ✅ All tests pass (or same failures as before migration)\n- ✅ Test coverage reports generate\n- ✅ Module resolution works in test environment\n\n**Success Criteria**: Test suite runs, results match pre-migration baseline\n\n---\n\n#### Test 5.2: Component Tests (Cypress)\n\n**Objective**: Verify Cypress component tests work\n\n**Steps**:\n\n```bash\npnpm run cy:component\n```\n\n**Expected Results**:\n\n- ✅ Cypress launches\n- ✅ Component tests run\n- ✅ Tests pass (or same failures as before)\n\n**Success Criteria**: Test suite completes successfully\n\n---\n\n### 6. Linting & Code Quality\n\n#### Test 6.1: Linting\n\n**Objective**: Verify linting works across the monorepo\n\n**Steps**:\n\n```bash\n# Run linting\npnpm run lint\n\n# Run lint fix\npnpm run lint:fix\n```\n\n**Expected Results**:\n\n- ✅ ESLint runs on all packages\n- ✅ No new linting errors introduced by migration\n- ✅ Auto-fix works correctly\n\n**Success Criteria**: Linting completes, no new errors\n\n---\n\n#### Test 6.2: Commit Hooks\n\n**Objective**: Test husky pre-commit hooks\n\n**Steps**:\n\n```bash\n# Make a test change\necho \"// test\" >> packages/ui-buttons/src/Button/index.tsx\n\n# Stage and commit\ngit add packages/ui-buttons/src/Button/index.tsx\ngit commit -m \"test: verify commit hooks\"\n```\n\n**Expected Results**:\n\n- ✅ lint-staged runs\n- ✅ TypeScript reference check runs\n- ✅ Prettier formats staged files\n- ✅ Commit succeeds if checks pass\n\n**Success Criteria**: Hooks run successfully, commit created\n\n---\n\n### 7. Package Publishing Tests\n\n#### Test 7.1: Pack Verification\n\n**Objective**: Verify workspace:\\* converts to real versions in tarballs\n\n**Steps**:\n\n```bash\ncd packages/ui-buttons\npnpm pack\n\n# Extract and inspect\ntar -xzf instructure-ui-buttons-*.tgz\ncat package/package.json | grep -A 10 '\"dependencies\"'\n```\n\n**Expected Results**:\n\n- ✅ Tarball created successfully\n- ✅ `workspace:*` converted to actual version numbers (e.g., `11.0.1`)\n- ✅ External dependencies unchanged\n\n**Example Expected**:\n\n```json\n\"dependencies\": {\n  \"@instructure/ui-view\": \"11.0.1\",  // NOT workspace:*\n  \"@babel/runtime\": \"^7.27.6\"\n}\n```\n\n**Success Criteria**: workspace protocol converted, versions correct\n\n---\n\n#### Test 7.2: Dry Run Publish\n\n**Objective**: Test publishing without actually publishing\n\n**Steps**:\n\n```bash\ncd packages/ui-buttons\npnpm publish --dry-run --no-git-checks\n```\n\n**Expected Results**:\n\n- ✅ Dry run completes\n- ✅ Shows what would be published\n- ✅ No errors about invalid dependencies\n\n**Success Criteria**: Dry run succeeds, output looks correct\n\n---\n\n### 8. CI/CD Integration Tests\n\n#### Test 8.1: PR Validation Workflow\n\n**Objective**: Verify GitHub Actions PR validation works\n\n**Prerequisites**: Push branch to GitHub\n\n**Steps**:\n\n1. Create a test PR from the branch\n2. Observe GitHub Actions workflow execution\n\n**Expected Results**:\n\n- ✅ `lint` job completes successfully\n- ✅ `vitest-tests` job completes successfully\n- ✅ `cypress` job completes successfully\n- ✅ pnpm cache is used (check workflow logs for \"Cache restored\")\n- ✅ Total workflow time is faster than npm baseline\n\n**Success Criteria**: All 3 jobs pass, workflow completes\n\n---\n\n#### Test 8.2: Workflow Cache Performance\n\n**Objective**: Verify pnpm caching works in CI\n\n**Steps**:\n\n1. Run PR validation workflow once (cold cache)\n2. Push another commit to trigger workflow again (warm cache)\n3. Compare workflow execution times\n\n**Expected Results**:\n\n- ✅ Second run is significantly faster\n- ✅ Logs show \"Cache hit\" for pnpm\n- ✅ Dependencies not re-downloaded\n\n**Success Criteria**: 50%+ faster on cached run\n\n---\n\n### 9. Peer Dependency Management\n\n#### Test 9.1: Strict Peer Dependencies\n\n**Objective**: Verify pnpm's strict peer dep handling\n\n**Steps**:\n\n```bash\n# Check for peer dependency issues\npnpm install 2>&1 | grep -i \"peer\"\n```\n\n**Expected Results**:\n\n- ✅ No unmet peer dependencies for internal packages\n- ✅ React/React-DOM versions are consistent\n- ⚠️ May show warnings for external packages (acceptable)\n\n**Success Criteria**: No errors, internal packages satisfied\n\n---\n\n#### Test 9.2: React Version Consistency\n\n**Objective**: Ensure single React version across monorepo\n\n**Steps**:\n\n```bash\npnpm list react\npnpm list react-dom\n```\n\n**Expected Results**:\n\n- ✅ Only one version of React is installed (18.3.1)\n- ✅ Only one version of React-DOM is installed (18.3.1)\n- ✅ No duplicates in dependency tree\n\n**Success Criteria**: Single version of React/React-DOM\n\n---\n\n### 10. Disk Usage & Performance\n\n#### Test 10.1: Disk Space Comparison\n\n**Objective**: Measure disk space savings\n\n**Steps**:\n\n```bash\n# With pnpm\ndu -sh node_modules\ndu -sh .pnpm-store\n\n# Compare to baseline npm install (if available)\n```\n\n**Expected Results**:\n\n- ✅ node_modules is smaller than npm equivalent\n- ✅ .pnpm-store enables sharing across clones\n- ✅ Total space: ~60-80% of npm baseline\n\n**Success Criteria**: Measurable disk space savings\n\n---\n\n#### Test 10.2: Install Performance\n\n**Objective**: Benchmark install speed\n\n**Steps**:\n\n```bash\n# Clean install timing\nrm -rf node_modules .pnpm-store\ntime pnpm install\n```\n\n**Expected Results**:\n\n- ✅ Clean install: 30-90 seconds (vs npm: 2-3 minutes)\n- ✅ Cached install: 10-30 seconds\n- ✅ 50-70% faster than npm\n\n**Success Criteria**: Faster than npm baseline\n\n---\n\n### 11. Edge Cases & Error Handling\n\n#### Test 11.1: Missing Dependencies\n\n**Objective**: Verify pnpm catches undeclared dependencies\n\n**Steps**:\n\n```bash\n# This should fail in strict mode if a package imports\n# something not declared in its package.json\npnpm run build\n```\n\n**Expected Results**:\n\n- ✅ Build catches any phantom dependencies\n- ✅ Clear error messages about missing deps\n- ⚠️ Some packages may have issues (to be fixed in Phase 2)\n\n**Success Criteria**: Errors are clear and actionable\n\n---\n\n#### Test 11.2: Lockfile Conflicts\n\n**Objective**: Test handling of lockfile merge conflicts\n\n**Steps**:\n\n```bash\n# Simulate conflict by editing pnpm-lock.yaml\n# Then try to install\npnpm install\n```\n\n**Expected Results**:\n\n- ✅ pnpm detects corrupted lockfile\n- ✅ Error message is clear\n- ✅ Can be resolved with `pnpm install` (regenerates)\n\n**Success Criteria**: Clear error handling, recovery possible\n\n---\n\n### 12. Backwards Compatibility\n\n#### Test 12.1: Lerna Commands Still Work\n\n**Objective**: Verify Lerna still functions with pnpm\n\n**Steps**:\n\n```bash\n# These should still work in Phase 1\nnpx lerna list\nnpx lerna run build --stream\n```\n\n**Expected Results**:\n\n- ✅ Lerna can discover packages\n- ✅ Lerna run commands work\n- ✅ Lerna uses pnpm as client (from lerna.json)\n\n**Success Criteria**: Lerna compatibility maintained\n\n---\n\n### 13. Documentation Verification\n\n#### Test 13.1: Documentation Accuracy\n\n**Objective**: Verify docs match actual commands\n\n**Steps**:\n\n1. Follow docs/contributor-docs/building-instui.md\n2. Follow docs/contributor-docs/contributing.md\n3. Try all example commands\n\n**Expected Results**:\n\n- ✅ All documented commands work\n- ✅ No references to npm remain (except in comments about migration)\n- ✅ Examples are accurate and complete\n\n**Success Criteria**: Docs are complete and accurate\n\n---\n\n### 14. Release Process Tests (Phase 1 Specific)\n\n#### Test 14.1: Version Bumping\n\n**Objective**: Verify bump command works with pnpm\n\n**Steps**:\n\n```bash\n# Test bump (but don't actually release)\npnpm run bump patch --no-push\n```\n\n**Expected Results**:\n\n- ✅ Lerna bumps versions\n- ✅ pnpm-lock.yaml is updated\n- ✅ Workspace dependencies remain `workspace:*` in repo\n- ✅ No errors related to package manager\n\n**Success Criteria**: Version bump succeeds, lockfile updated\n\n---\n\n## Test Execution Checklist\n\nUse this checklist to track test execution:\n\n### Installation & Setup\n\n- [ ] 1.1 Clean Install\n- [ ] 1.2 Frozen Lockfile Install\n- [ ] 1.3 Workspace Protocol Verification\n\n### Build & Bootstrap\n\n- [ ] 2.1 Bootstrap Process\n- [ ] 2.2 Incremental Build\n- [ ] 2.3 Type Checking\n\n### Package Linking\n\n- [ ] 3.1 Workspace Symlinks\n- [ ] 3.2 Cross-Package Changes\n\n### Development Workflow\n\n- [ ] 4.1 Dev Server\n- [ ] 4.2 Filtered Commands\n\n### Testing Infrastructure\n\n- [ ] 5.1 Unit Tests (Vitest)\n- [ ] 5.2 Component Tests (Cypress)\n\n### Linting & Code Quality\n\n- [ ] 6.1 Linting\n- [ ] 6.2 Commit Hooks\n\n### Package Publishing\n\n- [ ] 7.1 Pack Verification\n- [ ] 7.2 Dry Run Publish\n\n### CI/CD Integration\n\n- [ ] 8.1 PR Validation Workflow\n- [ ] 8.2 Workflow Cache Performance\n\n### Peer Dependency Management\n\n- [ ] 9.1 Strict Peer Dependencies\n- [ ] 9.2 React Version Consistency\n\n### Disk Usage & Performance\n\n- [ ] 10.1 Disk Space Comparison\n- [ ] 10.2 Install Performance\n\n### Edge Cases\n\n- [ ] 11.1 Missing Dependencies\n- [ ] 11.2 Lockfile Conflicts\n\n### Backwards Compatibility\n\n- [ ] 12.1 Lerna Commands Still Work\n\n### Documentation\n\n- [ ] 13.1 Documentation Accuracy\n\n### Release Process\n\n- [ ] 14.1 Version Bumping\n\n## Known Issues & Limitations (Phase 1)\n\n### Expected Issues\n\n1. **TypeScript Build**: Type build is skipped in bootstrap due to missing type dependencies. Workaround: Run `pnpm run build:types` separately.\n2. **Some Phantom Dependencies**: A few packages may import types without declaring them. This will be fixed in Phase 2.\n3. **Windows Support**: Partial. Build works, but some scripts may fail.\n\n### Acceptable Warnings\n\n- External package peer dependency warnings (not related to our packages)\n- deprecation warnings from transitive dependencies\n\n## Success Metrics\n\nThe migration is considered successful when:\n\n1. ✅ **100% of tests pass** (same as pre-migration)\n2. ✅ **Install time**: 50-70% faster than npm\n3. ✅ **Disk space**: 20-40% reduction\n4. ✅ **CI/CD workflows**: All pass on first try\n5. ✅ **Developer experience**: No regressions\n6. ✅ **Zero breaking changes**: Consumers unaffected\n7. ✅ **Documentation**: Complete and accurate\n\n## Reporting Issues\n\nIf you find issues during testing:\n\n1. **Document the issue**:\n\n   - Test number and name\n   - Steps to reproduce\n   - Expected vs actual behavior\n   - Error messages/logs\n   - Environment (OS, Node version, pnpm version)\n\n2. **Categorize severity**:\n\n   - **Critical**: Blocks development or releases\n   - **Major**: Causes significant inconvenience\n   - **Minor**: Small issues with workarounds\n   - **Enhancement**: Improvement suggestions\n\n3. **Report**:\n   - Create GitHub issue with label `pnpm-migration`\n   - Reference this test plan\n   - Include all documentation from step 1\n\n## Rollback Procedure\n\nIf critical issues are found:\n\n```bash\n# 1. Revert to previous commit\ngit revert <commit-hash>\n\n# 2. Or reset to master\ngit checkout master\ngit branch -D feat/pnpm-migration\n\n# 3. Reinstall with npm\nrm -rf node_modules pnpm-lock.yaml .pnpm-store\nnpm install\nnpm run bootstrap\n```\n\n## Next Steps After Phase 1\n\nOnce Phase 1 is validated and merged:\n\n1. Monitor production for 1-2 weeks\n2. Gather team feedback\n3. Fix any discovered issues\n4. Plan Phase 2: release-it integration\n5. Remove Lerna dependency (Phase 2)\n\n## Appendix: Quick Reference Commands\n\n```bash\n# Installation\npnpm install                    # Install dependencies\npnpm install --frozen-lockfile  # CI-style install\n\n# Development\npnpm run bootstrap              # Build all packages\npnpm run dev                    # Start dev server\npnpm run build:watch            # Watch mode\n\n# Testing\npnpm run test:vitest            # Unit tests\npnpm run cy:component           # Cypress tests\npnpm run lint                   # Lint all\npnpm run lint:fix               # Fix linting\n\n# Package-specific\npnpm --filter @instructure/ui-buttons build    # Build one package\npnpm --filter @instructure/ui-buttons test     # Test one package\n\n# Troubleshooting\npnpm run clean                  # Clean build artifacts\npnpm run clean && pnpm install  # Nuclear option\nrm -rf .pnpm-store              # Clear pnpm cache\n```\n\n---\n\n**Test Plan Version**: 1.0\n**Last Updated**: 2025-10-13\n**Applies To**: Phase 1 of pnpm migration (workspace protocol + CI/CD)\n","title":"pnpm Migration Phase 1 - Test Plan","category":"Contributor Guides","order":11,"relativePath":"docs/contributor-docs/pnpm-phase1-test-plan.md","extension":".md","srcPath":"docs/contributor-docs/pnpm-phase1-test-plan.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/pnpm-phase1-test-plan.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/contributor-docs/pnpm-phase1-test-plan","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/contributor-docs/pnpm-phase1-test-plan.md').default","esPath":"@instructure/docs/contributor-docs/pnpm-phase1-test-plan","themePath":"docs/contributor-docs/pnpm-phase1-test-plan.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/pnpm-phase1-test-plan.md","id":"pnpm-phase1-test-plan"}