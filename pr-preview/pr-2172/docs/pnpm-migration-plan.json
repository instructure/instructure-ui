{"description":"\n# npm to pnpm + release-it Migration Plan\n\n## Executive Summary\n\n**Current Pain Points:**\n\n1. Manual version updates across 102 packages when releasing\n2. Complex release process with multiple manual steps\n3. Lerna dependency with uncertain maintenance future\n\n**Solution:**\n\n1. Migrate to pnpm with `workspace:*` protocol → eliminates manual version syncing\n2. Replace Lerna with release-it → single-command releases with conventional commits\n3. Faster installs, stricter dependency management, modern tooling\n\n## Table of Contents\n\n- [Current State Analysis](#current-state-analysis)\n- [Phase 1: pnpm + Workspace Protocol Migration](#phase-1-pnpm--workspace-protocol-migration)\n- [Phase 2: release-it Integration](#phase-2-release-it-integration)\n- [Testing Strategy](#testing-strategy)\n- [Rollback Plan](#rollback-plan)\n- [FAQ](#faq)\n\n## Current State Analysis\n\n### Package Manager\n\n- **npm v11.5.2** with npm workspaces\n- **102 packages** in `packages/*` directory\n- **265 total package.json files** (including nested dependencies)\n\n### Monorepo Setup\n\n- **Lerna 8.1.9** for:\n  - Task running (`lerna run build --stream`)\n  - Package versioning (`lerna version --conventional-commits`)\n  - Package discovery (`lerna list --json`)\n- **npm workspaces** for dependency resolution\n- **Exact version pinning** for internal packages (e.g., `\"@instructure/ui-view\": \"10.26.0\"`)\n\n### Current Lerna Usage\n\n#### 1. Task Running (Easy to replace)\n\n| Before (Lerna)                               | After (pnpm)                    |\n| -------------------------------------------- | ------------------------------- |\n| `lerna run lint --stream`                    | `pnpm -r --stream lint`         |\n| `lerna run build --stream`                   | `pnpm -r --stream build`        |\n| `lerna run build:watch --stream`             | `pnpm -r --stream build:watch`  |\n| `lerna run bundle --stream --scope docs-app` | `pnpm --filter docs-app bundle` |\n\n#### 2. Package Discovery (Used by pkg-utils)\n\n- `packages/pkg-utils/lib/get-packages.js` calls `lerna list --json`\n- Returns package metadata (name, version, location)\n\n#### 3. Versioning & Changelog (CRITICAL)\n\n- `packages/ui-scripts/lib/utils/npm.js` uses `lerna version` with:\n  - `--conventional-commits` - Auto-generate changelog from git history\n  - `--exact` - No ^ in version ranges\n  - `--force-publish=*` - Bump ALL packages\n  - `--no-push` / `--no-git-tag-version` - Manual control\n\n### The Manual Version Problem\n\n**Current workflow when releasing:**\n\n```json\n---\ntype: code\n---\n// Before release: ui-buttons/package.json\n{\n  \"dependencies\": {\n    \"@instructure/ui-view\": \"10.26.0\",\n    \"@instructure/ui-utils\": \"10.26.0\"\n  }\n}\n\n// After bumping to 10.27.0, Lerna updates:\n{\n  \"dependencies\": {\n    \"@instructure/ui-view\": \"10.27.0\",  // ← Manual update needed\n    \"@instructure/ui-utils\": \"10.27.0\"  // ← Manual update needed\n  }\n}\n```\n\nThis happens across **101 packages** × ~10 internal deps each = **~1000 manual updates per release**.\n\n## Phase 1: pnpm + Workspace Protocol Migration\n\n**Goal:** Eliminate manual version updates, improve install performance, stricter dependencies\n\n**Risk:** Low\n\n### Step 1.1: Configuration Setup\n\n#### Create `pnpm-workspace.yaml`\n\n```yaml\n---\ntype: code\n---\npackages:\n  - 'packages/*'\n```\n\n#### Update root `package.json`\n\n```json\n---\ntype: code\n---\n{\n  \"engines\": {\n    \"node\": \">=22\",\n    \"npm\": \"Use pnpm instead.\",\n    \"pnpm\": \">=9\"\n  },\n  \"pnpm\": {\n    \"overrides\": {\n      \"react\": \"^18\",\n      \"react-dom\": \"^18\",\n      \"@types/react\": \"^18\"\n    }\n  }\n}\n```\n\n**Remove:**\n\n```json\n---\ntype: code\n---\n{\n  \"resolutions\": {\n    // ← DELETE (replaced by pnpm.overrides)\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"@types/react\": \"^18\"\n  }\n}\n```\n\n#### Create `.npmrc` for pnpm config\n\n```ini\n---\ntype: code\n---\n# Strict peer dependencies (recommended)\nauto-install-peers=false\nstrict-peer-dependencies=true\n\n# Workspace protocol\nlink-workspace-packages=true\n\n# Use hoisted node linker initially for compatibility\nnode-linker=hoisted\n\n# Can enable later for stricter isolation:\n# node-linker=isolated\n# shamefully-hoist=false\n```\n\n#### Update `.gitignore`\n\nUpdate your `.gitignore` file:\n\n- Remove `npm-debug.log` and `lerna-debug.log` lines\n- Remove `.npmrc` line (if present) - we now need to commit this file for pnpm config\n- Add `pnpm-debug.log`\n- Add `.pnpm-store/`\n\n#### Update lerna.json (temporary - will be removed in Phase 2)\n\n```json\n---\ntype: code\n---\n{\n  \"version\": \"10.26.0\",\n  \"npmClient\": \"pnpm\",\n  \"command\": {\n    \"version\": {\n      \"allowBranch\": [\"master\", \"v*_maintenance\"],\n      \"message\": \"chore(release): %s\"\n    }\n  },\n  \"$schema\": \"node_modules/lerna/schemas/lerna-schema.json\"\n}\n```\n\n### Step 1.2: Convert to Workspace Protocol\n\n**This is THE KEY STEP that solves your version sync problem.**\n\n#### Create conversion script\n\nCreate `scripts/convert-to-workspace-protocol.js`:\n\n```javascript\n---\ntype: code\n---\n#!/usr/bin/env node\n\nconst fs = require('fs')\nconst path = require('path')\nconst { globSync } = require('glob')\n\nconst SCOPE = '@instructure'\n\nconsole.log('Finding all packages in monorepo...')\n\n// Get all package names in the monorepo\nconst packagePaths = globSync('packages/*/package.json')\nconst packageNames = packagePaths\n  .map((p) => {\n    const pkg = JSON.parse(fs.readFileSync(p, 'utf8'))\n    return pkg.name\n  })\n  .filter((name) => name && name.startsWith(SCOPE))\n\nconsole.log(`Found ${packageNames.length} @instructure packages\\n`)\n\nlet totalChanges = 0\n\n// Convert each package.json\nconsole.log('Converting package.json files to workspace protocol...')\nfor (const pkgPath of packagePaths) {\n  const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'))\n  let changed = false\n\n  // Convert dependencies\n  for (const depType of ['dependencies', 'devDependencies']) {\n    if (!pkg[depType]) continue\n\n    for (const [name, version] of Object.entries(pkg[depType])) {\n      if (packageNames.includes(name) && !version.startsWith('workspace:')) {\n        pkg[depType][name] = 'workspace:*'\n        changed = true\n        totalChanges++\n        console.log(`  ${pkg.name}: ${name} ${version} → workspace:*`)\n      }\n    }\n  }\n\n  if (changed) {\n    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\\n')\n  }\n}\n\n// Also update root package.json\nconsole.log('\\nConverting root package.json...')\nconst rootPkg = JSON.parse(fs.readFileSync('package.json', 'utf8'))\nlet rootChanged = false\n\nfor (const depType of ['devDependencies']) {\n  if (!rootPkg[depType]) continue\n\n  for (const [name, version] of Object.entries(rootPkg[depType])) {\n    if (packageNames.includes(name) && !version.startsWith('workspace:')) {\n      rootPkg[depType][name] = 'workspace:*'\n      rootChanged = true\n      totalChanges++\n      console.log(`  root: ${name} ${version} → workspace:*`)\n    }\n  }\n}\n\nif (rootChanged) {\n  fs.writeFileSync('package.json', JSON.stringify(rootPkg, null, 2) + '\\n')\n}\n\nconsole.log('\\nConversion complete!')\nconsole.log(`Total conversions: ${totalChanges}`)\nconsole.log('\\nNext steps:')\nconsole.log('  1. Review the changes: git diff')\nconsole.log('  2. Run: pnpm install')\nconsole.log('  3. Run: pnpm run bootstrap')\nconsole.log('  4. Test: pnpm run dev')\n```\n\n#### Run conversion\n\n```bash\nnode scripts/convert-to-workspace-protocol.js\n```\n\n**Result:**\n\n```json\n---\ntype: code\n---\n// BEFORE\n\"dependencies\": {\n  \"@instructure/ui-view\": \"10.26.0\",\n  \"@instructure/ui-utils\": \"10.26.0\"\n}\n\n// AFTER\n\"dependencies\": {\n  \"@instructure/ui-view\": \"workspace:*\",\n  \"@instructure/ui-utils\": \"workspace:*\"\n}\n```\n\n**Benefits:**\n\n- You'll NEVER manually update these versions again\n- pnpm ensures you always use the local workspace version\n- On publish, pnpm automatically converts `workspace:*` → actual version\n\n### Step 1.3: Update Scripts\n\n#### Root `package.json` scripts\n\n```json\n---\ntype: code\n---\n{\n  \"scripts\": {\n    \"prestart\": \"pnpm run bootstrap\",\n    \"start\": \"pnpm --filter docs-app start\",\n    \"start:watch\": \"pnpm --filter docs-app start:watch\",\n    \"dev\": \"pnpm run start:watch\",\n\n    \"cy:component\": \"cypress run --component\",\n    \"test:vitest\": \"vitest --watch=false\",\n    \"test:vitest-watch\": \"vitest\",\n\n    \"lint\": \"pnpm -r --stream lint\",\n    \"lint:changes\": \"pnpm run lint -- --since HEAD^\",\n    \"lint:fix\": \"pnpm -r --stream lint:fix\",\n    \"lint:commits\": \"commitlint --from=HEAD^1\",\n\n    \"bootstrap\": \"node scripts/bootstrap.js\",\n    \"build\": \"pnpm -r --stream build\",\n    \"build:watch\": \"pnpm -r --stream build:watch\",\n    \"build:docs\": \"pnpm --filter docs-app bundle\",\n    \"build:tokens\": \"ui-scripts generate-all-tokens\",\n    \"build:types\": \"tsc -b tsconfig.references.json\",\n    \"build:ts\": \"pnpm --filter @instructure/ui-icons prepare-build && pnpm run build:types\",\n\n    \"clean\": \"node scripts/clean.js\",\n    \"clean-node\": \"node scripts/clean.js --nuke_node\",\n    \"export:icons\": \"pnpm --filter @instructure/ui-icons export\",\n\n    \"bump\": \"ui-scripts bump\",\n    \"release\": \"ui-scripts publish\",\n\n    \"husky:pre-commit\": \"lint-staged && node scripts/checkTSReferences.js\",\n    \"postinstall\": \"husky\",\n    \"ts:check\": \"pnpm -r --stream ts:check\"\n  }\n}\n```\n\n**Key changes:**\n\n| Before                          | After                       |\n| ------------------------------- | --------------------------- |\n| `lerna run <cmd> --stream`      | `pnpm -r --stream <cmd>`    |\n| `lerna run <cmd> --scope <pkg>` | `pnpm --filter <pkg> <cmd>` |\n| `npm run --workspace <pkg>`     | `pnpm --filter <pkg>`       |\n| `npm run`                       | `pnpm run` (or just `pnpm`) |\n\n#### scripts/bootstrap.js\n\n```diff\n---\ntype: code\n---\n const { execSync, fork } = require('child_process')\n const { spawn } = require('cross-spawn')\n const path = require('path')\n\n const opts = { stdio: 'inherit' }\n function buildProject() {\n   const spawnStdIoOpts = { stdio: ['inherit', 'inherit', 'pipe'] }\n   execSync(\n     'lerna run prepare-build --scope @instructure/ui-icons --loglevel silent',\n     opts\n   )\n   console.info('Starting Babel and TSC...')\n-  const tsBuild = spawn('npm', ['run', 'build:types'], spawnStdIoOpts)\n-  const babelBuild = spawn('npm', ['run', 'build'], spawnStdIoOpts)\n+  const tsBuild = spawn('pnpm', ['run', 'build:types'], spawnStdIoOpts)\n+  const babelBuild = spawn('pnpm', ['run', 'build'], spawnStdIoOpts)\n   tsBuild.on('exit', (code) => {\n     if (code !== 0) {\n       babelBuild.kill()\n-      console.error(\"'npm run build:ts' failed :(\")\n+      console.error(\"'pnpm run build:ts' failed :(\")\n       process.exit(code)\n     }\n   })\n   tsBuild.stderr.on('data', (data) => {\n     console.error('tsc stderr', data.toString())\n   })\n   babelBuild.stderr.on('data', (data) => {\n     console.error('babel stderr', data.toString())\n   })\n   babelBuild.on('exit', (code) => {\n     if (code !== 0) {\n       tsBuild.kill()\n-      console.error(\"'npm run build' failed :(\")\n+      console.error(\"'pnpm run build' failed :(\")\n       process.exit(code)\n     }\n-    execSync('npm run build:tokens', opts)\n+    execSync('pnpm run build:tokens', opts)\n   })\n }\n```\n\n#### packages/ui-scripts/lib/commands/bump.js\n\n```diff\n---\ntype: code\n---\n   info('Running npm install to update package-lock file!')\n-  execSync('npm install', { stdio: 'inherit' })\n+  info('Running pnpm install to update pnpm-lock.yaml!')\n+  execSync('pnpm install', { stdio: 'inherit' })\n } catch (err) {\n   error(err)\n   process.exit(1)\n```\n\n#### packages/ui-scripts/lib/utils/npm.js\n\n```diff\n---\ntype: code\n---\n export function createNPMRCFile() {\n   const { NPM_TOKEN, NPM_EMAIL, NPM_USERNAME } = process.env\n\n   if (NPM_TOKEN) {\n     fs.writeFileSync(\n       path.resolve(process.cwd(), '.npmrc'),\n       `//registry.npmjs.org/:_authToken=${NPM_TOKEN}\\n${NPM_SCOPE}\\nemail=${NPM_EMAIL}\\nname=${NPM_USERNAME}`\n     )\n   }\n\n   try {\n     info('running npm whoami:')\n-    runCommandSync('npm', ['whoami'])\n+    runCommandSync('pnpm', ['whoami'])\n   } catch (e) {\n     error(`Could not determine if NPM auth was successful: ${e}`)\n     process.exit(1)\n   }\n }\n```\n\n### Step 1.4: Update CI/CD\n\nUpdate all workflow files in `.github/workflows/`:\n\n#### Template for all workflows\n\n```diff\n---\ntype: code\n---\n jobs:\n   job-name:\n     runs-on: ubuntu-latest\n     steps:\n       - uses: actions/checkout@v4\n+        with:\n+          fetch-depth: 0  # For conventional commits\n+\n+      - uses: pnpm/action-setup@v4\n+        with:\n+          version: 9\n+\n       - uses: actions/setup-node@v4\n         with:\n           node-version: '22'\n-          cache: 'npm'\n+          cache: 'pnpm'\n+\n       - name: Install dependencies\n-        run: npm ci\n+        run: pnpm install --frozen-lockfile\n+\n       - name: Bootstrap project\n-        run: npm run bootstrap\n+        run: pnpm run bootstrap\n```\n\n**Files to update:**\n\n- `.github/workflows/pr-validation.yml` (3 jobs)\n- `.github/workflows/release.yml`\n- `.github/workflows/deploy.yml` (2 jobs)\n- `.github/workflows/manual-release-to-npm.yml`\n- `.github/workflows/manual-release-from-pr.yml`\n- `.github/workflows/visual-regression.yml`\n\n### Step 1.5: Update Documentation\n\n#### Files to update:\n\n- `README.md`\n- `docs/contributor-docs/building-instui.md`\n- `docs/contributor-docs/contributing.md`\n- `docs/contributor-docs/dev-commands.md` (if exists)\n\n**Search and replace:**\n\n| Before          | After                            |\n| --------------- | -------------------------------- |\n| `npm install`   | `pnpm install`                   |\n| `npm ci`        | `pnpm install --frozen-lockfile` |\n| `npm run <cmd>` | `pnpm <cmd>` or `pnpm run <cmd>` |\n\n**Example diff for docs/contributor-docs/building-instui.md:**\n\n````diff\n---\ntype: code\n---\n ### How to build the project\n\n-In order to build the project one should have [`git`](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and [`node`](https://nodejs.org/en/download/) (supported version is defined in the root [package.json](https://github.com/instructure/instructure-ui/blob/master/package.json#L90)) installed.\n+In order to build the project one should have [`git`](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git), [`node`](https://nodejs.org/en/download/) (supported version is defined in the root [package.json](https://github.com/instructure/instructure-ui/blob/master/package.json#L90)), and [`pnpm`](https://pnpm.io/installation) installed.\n\n 1. Download the source code and go into the root directory of instructure-ui:\n\n    ```sh\n    git clone https://github.com/instructure/instructure-ui.git\n    cd instructure-ui\n    ```\n\n 2. Install dependencies for packages:\n\n    ```sh\n-   npm install\n+   pnpm install\n    ```\n\n 3. Run the bootstrap script:\n\n    ```sh\n-   npm run bootstrap\n+   pnpm run bootstrap\n    ```\n````\n\n### Step 1.6: Migration Execution\n\n```bash\n---\ntype: code\n---\n# 1. Clean everything\nrm -rf node_modules package-lock.json\nfind packages -name \"node_modules\" -type d -prune -exec rm -rf {} +\npnpm run clean\n\n# 2. Run workspace protocol conversion\nnode scripts/convert-to-workspace-protocol.js\n\n# 3. Review changes\ngit diff packages/*/package.json | less\n\n# 4. Install with pnpm\npnpm install\n\n# 5. Bootstrap/build\npnpm run bootstrap\n\n# 6. Test locally\npnpm run lint\npnpm run test:vitest\npnpm run dev  # Should open localhost:9090\n```\n\n### Step 1.7: Verification\n\n#### Check workspace linking\n\n```bash\n---\ntype: code\n---\n# Verify all @instructure packages are linked\nls -la node_modules/@instructure/\n\n# Verify a specific package uses workspace version\ncd packages/ui-buttons\nls -la node_modules/@instructure/ui-view  # Should be symlink\n```\n\n#### Check peer dependencies\n\n```bash\n---\ntype: code\n---\npnpm list react\npnpm list react-dom\n# Should show single version (^18.x.x)\n```\n\n#### Test build & dev server\n\n```bash\n---\ntype: code\n---\npnpm run build\npnpm run build:docs\npnpm run dev\n```\n\n#### Test publishing transformation\n\n```bash\n---\ntype: code\n---\ncd packages/ui-buttons\npnpm pack --dry-run\n# Check output - workspace:* should be converted to version number\n```\n\n### Step 1.8: Commit Changes\n\n```bash\n---\ntype: code\n---\ngit add -A\ngit commit -m \"chore: migrate to pnpm with workspace protocol\n\n- Replace npm with pnpm as package manager\n- Adopt workspace:* protocol for internal dependencies\n- Update all scripts and CI/CD workflows\n- Update Lerna to use pnpm client\n- Update documentation\n\nThis eliminates manual version syncing across 102 packages.\"\n```\n\n## Phase 2: release-it Integration\n\n**Goal:** Replace Lerna with release-it for automated releases\n\n**Risk:** Low-Medium\n\n### Why release-it?\n\n**Current Lerna workflow:**\n\n```bash\n---\ntype: code\n---\n# 1. Bump versions\nui-scripts bump [major|minor|patch]\n  └─> lerna version --conventional-commits --no-push --no-git-tag-version\n\n# 2. Manually commit\n\n# 3. Publish\nui-scripts publish\n  └─> npm publish for each package\n```\n\n**With release-it:**\n\n```bash\n---\ntype: code\n---\n# Single command does everything:\npnpm release\n  ├─> Analyzes commits (conventional-commits)\n  ├─> Determines version bump (major/minor/patch)\n  ├─> Updates all package.json files\n  ├─> Generates changelogs\n  ├─> Creates git commit\n  ├─> Creates git tag\n  ├─> Pushes to remote\n  └─> Publishes to npm\n```\n\n### Step 2.1: Install release-it\n\n```bash\n---\ntype: code\n---\npnpm add -D release-it @release-it-plugins/workspaces @release-it/conventional-changelog\n```\n\n### Step 2.2: Create release-it Config\n\nCreate .release-it.json in root:\n\n```json\n---\ntype: code\n---\n{\n  \"git\": {\n    \"commitMessage\": \"chore(release): ${version}\",\n    \"tagName\": \"v${version}\",\n    \"tagAnnotation\": \"Release v${version}\",\n    \"requireCleanWorkingDir\": true,\n    \"requireUpstream\": true,\n    \"requireCommits\": true,\n    \"requireBranch\": [\"master\", \"v*_maintenance\"],\n    \"addUntrackedFiles\": false\n  },\n  \"github\": {\n    \"release\": true,\n    \"releaseName\": \"v${version}\",\n    \"autoGenerate\": false\n  },\n  \"npm\": {\n    \"publish\": false\n  },\n  \"plugins\": {\n    \"@release-it-plugins/workspaces\": {\n      \"workspaces\": [\"packages/*\"],\n      \"additionalManifests\": {\n        \"dependencyUpdates\": [\"workspace:*\"]\n      }\n    },\n    \"@release-it/conventional-changelog\": {\n      \"preset\": {\n        \"name\": \"angular\"\n      },\n      \"infile\": \"CHANGELOG.md\",\n      \"header\": \"# Changelog\\n\\nAll notable changes to this project will be documented in this file. See [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\",\n      \"gitRawCommitsOpts\": {\n        \"path\": \".\"\n      }\n    }\n  },\n  \"hooks\": {\n    \"before:init\": [\"pnpm run lint\", \"pnpm run test:vitest\"],\n    \"after:bump\": [\"pnpm install --lockfile-only\"],\n    \"after:release\": \"echo Successfully released ${name} v${version}\"\n  }\n}\n```\n\n### Step 2.3: Update ui-scripts\n\n#### packages/ui-scripts/lib/commands/bump.js\n\nReplace entire file:\n\n```javascript\n---\ntype: code\n---\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 - present Instructure, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { error, runCommandAsync } from '@instructure/command-utils'\n\nexport default {\n  command: 'bump',\n  desc: 'Bump versions and generate changelogs using release-it',\n  builder: (yargs) => {\n    yargs.option('releaseType', {\n      type: 'string',\n      describe: 'Release type: major, minor, patch, or specific version'\n    })\n    yargs.option('preRelease', {\n      type: 'string',\n      describe: 'Pre-release identifier: snapshot, beta, alpha, rc'\n    })\n    yargs.option('dryRun', {\n      type: 'boolean',\n      describe: 'Dry run (no git commits, no publish)',\n      default: false\n    })\n  },\n  handler: async (argv) => {\n    const { releaseType, preRelease, dryRun } = argv\n\n    try {\n      const args = ['release-it']\n\n      // Add version increment\n      if (releaseType) {\n        args.push(releaseType)\n      }\n\n      // Add pre-release\n      if (preRelease) {\n        args.push(`--preRelease=${preRelease}`)\n      }\n\n      // Add dry-run flag\n      if (dryRun) {\n        args.push('--dry-run')\n      }\n\n      // CI mode (non-interactive)\n      if (process.env.CI) {\n        args.push('--ci')\n      }\n\n      await runCommandAsync('pnpm', args, {}, { stdio: 'inherit' })\n    } catch (err) {\n      error(err)\n      process.exit(1)\n    }\n  }\n}\n```\n\n#### packages/ui-scripts/lib/commands/publish.js\n\nSimplify to just call release-it:\n\n```javascript\n---\ntype: code\n---\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 - present Instructure, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { error, runCommandAsync } from '@instructure/command-utils'\nimport { createNPMRCFile } from '../utils/npm.js'\n\nexport default {\n  command: 'publish',\n  desc: 'Publish packages using release-it (run after bump, or use release-it directly)',\n  builder: (yargs) => {\n    yargs.option('dryRun', {\n      type: 'boolean',\n      describe: 'Dry run (no actual publish)',\n      default: false\n    })\n    yargs.option('isMaintenance', {\n      type: 'boolean',\n      describe: 'If true npm publish will use vXYZ_maintenance as tag',\n      default: false\n    })\n  },\n  handler: async (argv) => {\n    const { dryRun, isMaintenance } = argv\n\n    try {\n      // Set up npm authentication\n      createNPMRCFile()\n\n      const args = ['release-it', '--no-increment', '--no-git']\n\n      if (dryRun) {\n        args.push('--dry-run')\n      }\n\n      if (process.env.CI) {\n        args.push('--ci')\n      }\n\n      // Handle maintenance tag\n      if (isMaintenance) {\n        args.push('--npm.tag=maintenance')\n      }\n\n      await runCommandAsync('pnpm', args, {}, { stdio: 'inherit' })\n    } catch (err) {\n      error(err)\n      process.exit(1)\n    }\n  }\n}\n```\n\n### Step 2.4: Update pkg-utils\n\n#### packages/pkg-utils/lib/get-packages.js\n\nReplace Lerna dependency:\n\n```javascript\n---\ntype: code\n---\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 - present Instructure, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst { getPackage } = require('./get-package')\nconst fs = require('fs')\nconst path = require('path')\nconst { globSync } = require('glob')\n\n/**\n * Gets all packages in the monorepo.\n * Replaces lerna list --json functionality.\n * @returns {Array} Array of package objects with name, version, location, private\n */\nmodule.exports = function getPackages() {\n  const rootDir = path.resolve(__dirname, '../../..')\n  const packagePaths = globSync('packages/*/package.json', { cwd: rootDir })\n\n  return packagePaths.map((pkgPath) => {\n    const fullPath = path.join(rootDir, pkgPath)\n    const location = path.dirname(fullPath)\n    return getPackage({ cwd: location })\n  })\n}\n```\n\n#### Update packages/pkg-utils/package.json\n\n```diff\n---\ntype: code\n---\n {\n   \"dependencies\": {\n-    \"@lerna/package\": \"^6.4.1\",\n+    \"glob\": \"^11.0.0\",\n     \"read-pkg-up\": \"^7.0.1\"\n   }\n }\n```\n\nThen run:\n\n```bash\n---\ntype: code\n---\ncd packages/pkg-utils\npnpm remove @lerna/package\npnpm add glob\n```\n\n### Step 2.5: Simplify npm.js Utils\n\n#### packages/ui-scripts/lib/utils/npm.js\n\nRemove Lerna-related code:\n\n```diff\n---\ntype: code\n---\n-import { Project } from '@lerna/project'\n-\n-const syncRootPackageVersion = async (useProjectVersion) => {\n-  const project = new Project(process.cwd())\n-  const rootPkg = pkgUtils.getPackage()\n-\n-  let projectVersion\n-\n-  if (project.isIndependent() || useProjectVersion) {\n-    projectVersion = project.version\n-  } else {\n-    const pkgs = pkgUtils.getChangedPackages()\n-    projectVersion = pkgs[0].version\n-  }\n-\n-  if (projectVersion !== rootPkg.get('version')) {\n-    rootPkg.set('version', projectVersion)\n-    await rootPkg.serialize()\n-  }\n-\n-  return projectVersion\n-}\n-\n-export async function bumpPackages(packageName, requestedVersion) {\n-  // ... DELETE entire function - release-it handles this now\n-}\n\n export function createNPMRCFile() {\n   // ... KEEP this function - still needed for CI\n }\n```\n\n### Step 2.6: Remove Lerna\n\n```bash\n---\ntype: code\n---\n# Remove Lerna from root\npnpm remove -D lerna\n\n# Remove from ui-scripts (if listed)\ncd packages/ui-scripts\npnpm remove @lerna/project\n\n# Delete lerna.json\nrm lerna.json\n\n# Commit\ngit add -A\ngit commit -m \"chore: remove Lerna dependency\n\nReplaced with release-it for version management and publishing.\"\n```\n\n### Step 2.7: Update Root Scripts\n\n```json\n---\ntype: code\n---\n{\n  \"scripts\": {\n    \"bump\": \"ui-scripts bump\",\n    \"release\": \"ui-scripts publish\",\n    \"release:dry\": \"release-it --dry-run\"\n  }\n}\n```\n\nOr use release-it directly:\n\n```json\n---\ntype: code\n---\n{\n  \"scripts\": {\n    \"bump\": \"release-it\",\n    \"release\": \"release-it --ci\",\n    \"release:dry\": \"release-it --dry-run\",\n    \"release:snapshot\": \"release-it --preRelease=snapshot\"\n  }\n}\n```\n\n### Step 2.8: Update CI/CD\n\n#### .github/workflows/release.yml\n\n```yaml\n---\ntype: code\n---\nname: Release to npm\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    name: Release packages\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0 # Needed for conventional commits\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - uses: pnpm/action-setup@v4\n        with:\n          version: 9\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '22'\n          cache: 'pnpm'\n\n      - name: Install dependencies\n        run: pnpm install --frozen-lockfile\n\n      - name: Bootstrap project\n        run: pnpm run bootstrap\n\n      - name: Run tests\n        run: USE_REACT_STRICT_MODE=0 pnpm run test:vitest\n\n      - name: Configure git\n        run: |\n          git config user.name \"instructure-ui-ci\"\n          git config user.email \"instructure-ui-ci@instructure.com\"\n\n      - name: Release to npm\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: pnpm run release\n\n  tag:\n    needs: release\n    if: \"startsWith(github.event.head_commit.message, 'chore(release)')\"\n    runs-on: ubuntu-latest\n    name: Tag release commit\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: Set up git identity\n        run: git config --global user.name \"instructure-ui-ci\" && git config --global user.email \"instructure-ui-ci@instructure.com\"\n      - name: Add tag\n        run: git tag -a v$(./.github/workflows/calculateVersion.sh) -m v$(./.github/workflows/calculateVersion.sh)\n      - name: Push tags\n        run: git push origin v$(./.github/workflows/calculateVersion.sh)\n```\n\n### Step 2.9: Testing release-it\n\n```bash\n---\ntype: code\n---\n# 1. Dry run to see what would happen\npnpm release --dry-run\n\n# 2. Test version bump only (no publish, no push)\ngit checkout -b test-release-it\npnpm release --no-npm --no-git.push\n\n# 3. Verify changes\ngit log -1\ngit show HEAD\n\n# 4. Verify package.json versions updated\ncat packages/ui-buttons/package.json | grep version\n\n# 5. Verify CHANGELOG.md generated\ncat CHANGELOG.md\n\n# 6. Test pack to verify workspace:* conversion\ncd packages/ui-buttons\npnpm pack\ntar -tzf instructure-ui-buttons-*.tgz | grep package.json\ntar -xzf instructure-ui-buttons-*.tgz -O package/package.json | jq .dependencies\n# Should show actual versions, not workspace:*\n\n# 7. Clean up test\ngit reset --hard HEAD^\ngit checkout feat/pnpm-migration\ngit branch -D test-release-it\n```\n\n### Step 2.10: Commit Phase 2 Changes\n\n```bash\n---\ntype: code\n---\ngit add -A\ngit commit -m \"chore: integrate release-it for automated releases\n\n- Replace Lerna version/publish with release-it\n- Configure conventional commits + changelog generation\n- Update ui-scripts bump/publish commands\n- Update pkg-utils to remove Lerna dependency\n- Remove Lerna completely\n- Update CI/CD workflows\n\nSingle command releases with full automation.\"\n```\n\n## Testing Strategy\n\n### Local Testing Checklist\n\n#### Phase 1 (pnpm + workspace protocol)\n\n- [ ] `pnpm install` completes without errors\n- [ ] `pnpm run bootstrap` builds all packages\n- [ ] `pnpm run lint` passes\n- [ ] `pnpm run test:vitest` passes\n- [ ] `pnpm run dev` starts dev server\n- [ ] Hot reload works when editing components\n- [ ] `pnpm --filter @instructure/ui-buttons build` works\n- [ ] Verify symlinks: `ls -la node_modules/@instructure/ui-view`\n- [ ] Check peer deps: `pnpm list react` shows single version\n- [ ] Test build: `cd packages/ui-buttons && pnpm pack`\n\n#### Phase 2 (release-it)\n\n- [ ] `pnpm release --dry-run` shows correct version bump\n- [ ] Dry run generates expected CHANGELOG entries\n- [ ] Test bump on branch: `pnpm release --no-npm --no-git.push`\n- [ ] Verify all package.json versions updated\n- [ ] Verify pnpm-lock.yaml updated\n- [ ] Verify git commit created with correct message\n- [ ] Verify workspace:\\* preserved in repo, converted in tarball\n- [ ] Test prerelease: `pnpm release --preRelease=snapshot --dry-run`\n\n### CI/CD Testing\n\n- [ ] Push branch, verify PR validation passes\n- [ ] All 3 jobs pass (lint, vitest, cypress)\n- [ ] Check workflow duration (should be faster with pnpm)\n- [ ] Review CI logs for warnings\n- [ ] Verify cache is working (pnpm/action-setup@v4)\n\n### Pre-Production Release Testing\n\n**Create a test release on a branch:**\n\n```bash\n---\ntype: code\n---\n# 1. Create test branch from master\ngit checkout master\ngit pull\ngit checkout -b test-release-process\n\n# 2. Make a trivial change\necho \"// test\" >> packages/ui-buttons/src/index.ts\ngit add .\ngit commit -m \"feat: test release process\"\n\n# 3. Run release (with --no-git.push to prevent pushing)\npnpm release --no-git.push\n\n# 4. Verify results\ngit log -1\ngit show HEAD\ncat CHANGELOG.md\ncat packages/ui-buttons/package.json | grep version\n\n# 5. Test tarball\ncd packages/ui-buttons\npnpm pack\ntar -xzf *.tgz -O package/package.json | jq .dependencies\n\n# 6. Clean up\ngit reset --hard HEAD^\ngit checkout master\ngit branch -D test-release-process\n```\n\n### First Production Release\n\n**After merging to master, monitor first release carefully:**\n\n1. Watch GitHub Actions logs in real-time\n2. Verify npm publish for each package\n3. Check npm registry: `npm view @instructure/ui-buttons`\n4. Verify git tag created: `git tag -l`\n5. Verify GitHub release created\n6. Test installing in a separate project:\n   ```bash\n   mkdir test-install && cd test-install\n   npm init -y\n   npm install @instructure/ui-buttons@latest\n   ```\n\n## Rollback Plan\n\n### If Issues in Phase 1 (pnpm migration)\n\n#### Immediate rollback (< 1 hour)\n\n```bash\n---\ntype: code\n---\n# Revert commit\ngit revert HEAD\n\n# Or reset if not pushed\ngit reset --hard HEAD^\n\n# Reinstall with npm\nrm -rf node_modules pnpm-lock.yaml\nnpm install\nnpm run bootstrap\n```\n\n#### Partial rollback (keep changes, use npm temporarily)\n\n```bash\n---\ntype: code\n---\n# Keep all changes but use npm\nnpm install  # Creates package-lock.json\nnpm run bootstrap\n\n# Update CI temporarily\ngit checkout HEAD -- .github/workflows/*.yml\n```\n\n### If Issues in Phase 2 (release-it)\n\n#### Revert to Lerna temporarily\n\n```bash\n---\ntype: code\n---\n# Revert Phase 2 commits\ngit revert <commit-hash>\n\n# Reinstall Lerna\npnpm add -D lerna @lerna/project\npnpm --filter @instructure/pkg-utils add @lerna/package\n\n# Restore lerna.json\ngit checkout HEAD^ -- lerna.json\n\n# Can still use pnpm + workspace protocol\n```\n\n#### Emergency manual release\n\n```bash\n---\ntype: code\n---\n# If release-it completely fails, manually publish:\nfor pkg in packages/*; do\n  if [ -f \"$pkg/package.json\" ]; then\n    cd \"$pkg\"\n    if [ \"$(jq -r .private package.json)\" != \"true\" ]; then\n      npm publish\n    fi\n    cd ../..\n  fi\ndone\n```\n\n## FAQ\n\n### Q: Will end users notice any changes?\n\n**A:** No. Published packages are identical - same versions, same dependencies. pnpm converts `workspace:*` to actual versions during publish.\n\n### Q: What happens to existing package-lock.json?\n\n**A:** It's deleted and replaced with `pnpm-lock.yaml`. Git will track the new lockfile.\n\n### Q: Can I use npm commands after migration?\n\n**A:** Some yes, but use pnpm instead:\n\n| Command       | Recommendation                               |\n| ------------- | -------------------------------------------- |\n| `npm install` | Use `pnpm install` instead                   |\n| `npm ci`      | Use `pnpm install --frozen-lockfile` instead |\n| `npm publish` | Still works (pnpm includes npm)              |\n| `npm whoami`  | Still works                                  |\n\n### Q: How do workspace versions work?\n\n**A:**\n\n- In repo: `\"@instructure/ui-view\": \"workspace:*\"`\n- When published: `\"@instructure/ui-view\": \"10.27.0\"` (actual version)\n- pnpm automatically converts during `pnpm publish`\n\n### Q: What if a package needs a specific version of another package?\n\n**A:** Use workspace version ranges:\n\n```json\n---\ntype: code\n---\n{\n  \"dependencies\": {\n    \"@instructure/ui-view\": \"workspace:^10.26.0\" // Minimum version\n  }\n}\n```\n\n### Q: Can I test locally without publishing?\n\n**A:** Yes, `pnpm pack` will show you exactly what gets published:\n\n```bash\n---\ntype: code\n---\ncd packages/ui-buttons\npnpm pack\ntar -xzf *.tgz -O package/package.json | jq .dependencies\n```\n\n### Q: How do I run commands in specific packages?\n\n**A:**\n\n```bash\n---\ntype: code\n---\n# Single package\npnpm --filter @instructure/ui-buttons build\n\n# Pattern matching\npnpm --filter \"@instructure/ui-*\" build\n\n# All packages recursively\npnpm -r build\n```\n\n### Q: What about snapshot releases?\n\n**A:** With release-it:\n\n```bash\n---\ntype: code\n---\npnpm release --preRelease=snapshot\n# Creates version like: 10.27.0-snapshot.0\n```\n\n### Q: How do I test changes across packages locally?\n\n**A:** They're automatically linked! Edit `ui-view`, save, and `ui-buttons` uses it immediately.\n\n### Q: What if release-it fails mid-release?\n\n**A:** release-it is transactional. If publish fails:\n\n1. Versions are bumped (already committed)\n2. Re-run `pnpm release --no-increment` to retry publish only\n\n### Q: Can I still use Lerna commands?\n\n**A:** After Phase 1: Yes (Lerna uses pnpm)\nAfter Phase 2: No (Lerna removed), use pnpm equivalents\n\n### Q: How do I bump only specific packages?\n\n**A:** release-it bumps all packages (unified versioning). If you need independent versioning, we'd need a different strategy.\n\n## Comparison: Before & After\n\n### Version Management\n\n| Aspect                | Before (npm + Lerna)    | After (pnpm + release-it)      |\n| --------------------- | ----------------------- | ------------------------------ |\n| Internal deps         | `\"ui-view\": \"10.26.0\"`  | `\"ui-view\": \"workspace:*\"`     |\n| Version updates       | Manual in 102 packages  | Automatic (workspace protocol) |\n| Install time          | ~2-3 minutes            | ~30-60 seconds                 |\n| Disk space            | ~500MB per node_modules | Shared store (saves ~80%)      |\n| Dependency strictness | Loose (phantom deps)    | Strict (only declared deps)    |\n\n### Release Process\n\n| Aspect                | Before                                             | After                           |\n| --------------------- | -------------------------------------------------- | ------------------------------- |\n| Commands              | `npm run bump` + manual commit + `npm run release` | `pnpm release`                  |\n| Version determination | Lerna conventional commits                         | release-it conventional commits |\n| Changelog             | Lerna generates                                    | release-it generates            |\n| Git operations        | Manual                                             | Automated (commit, tag, push)   |\n| Publish               | Custom script                                      | Built-in                        |\n| Dry-run               | Limited                                            | Full simulation                 |\n\n### Developer Experience\n\n| Task              | Before                                 | After                            |\n| ----------------- | -------------------------------------- | -------------------------------- |\n| Install deps      | `npm install`                          | `pnpm install`                   |\n| Bootstrap         | `npm run bootstrap`                    | `pnpm run bootstrap`             |\n| Build all         | `npm run build`                        | `pnpm run build`                 |\n| Build one package | `npm run build --workspace ui-buttons` | `pnpm --filter ui-buttons build` |\n| Add dependency    | Edit package.json + npm install        | `pnpm --filter <pkg> add <dep>`  |\n| Release           | Multiple commands                      | `pnpm release`                   |\n\n## Success Metrics\n\nAfter migration, you should see:\n\n- **Zero manual version updates** when releasing\n- **50-70% faster** `install` times\n- **Single command** releases\n- **Automatic** changelog generation\n- **Stricter** dependency management (fewer bugs)\n- **80%+ disk space savings** across multiple clones\n- **No Lerna dependency** (actively maintained tools only)\n\n## Next Steps\n\n1. **Review this plan** - Add comments, questions, or concerns\n2. **Get team buy-in** - Share with other maintainers\n3. **Schedule migration** - Pick a sprint with lighter workload\n4. **Execute Phase 1** - pnpm + workspace protocol\n5. **Validate Phase 1** - Run for 1-2 weeks\n6. **Execute Phase 2** - release-it integration\n7. **Monitor & iterate** - Watch first few releases closely\n\n## Resources\n\n- [pnpm Documentation](https://pnpm.io/)\n- [pnpm Workspaces](https://pnpm.io/workspaces)\n- [Workspace Protocol](https://pnpm.io/workspaces#workspace-protocol-workspace)\n- [release-it Documentation](https://github.com/release-it/release-it)\n- [release-it Monorepo Recipe](https://github.com/release-it/release-it/blob/main/docs/recipes/monorepo.md)\n- [@release-it-plugins/workspaces](https://github.com/release-it-plugins/workspaces)\n- [Conventional Commits](https://www.conventionalcommits.org/)\n","title":"pnpm + release-it Migration Plan","category":"Contributor Guides","order":10,"relativePath":"docs/contributor-docs/pnpm-migration-plan.md","extension":".md","srcPath":"docs/contributor-docs/pnpm-migration-plan.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/pnpm-migration-plan.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/contributor-docs/pnpm-migration-plan","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/contributor-docs/pnpm-migration-plan.md').default","esPath":"@instructure/docs/contributor-docs/pnpm-migration-plan","themePath":"docs/contributor-docs/pnpm-migration-plan.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/pnpm-migration-plan.md","id":"pnpm-migration-plan"}