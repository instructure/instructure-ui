{"name":"withStyle","description":"\nA decorator or higher order component that makes a component themeable.\n\nIt adds a `makeStyles` function and the generated `styles` object to the decorated Component's props. If it has an own theme, it also adds the `themeOverride` prop to the component.\n\nAs a HOC:\n\n```js-code\nimport { withStyle } from '@instructure/emotion'\nimport generateStyle from './styles'\nimport generateComponentTheme from './theme'\n\nexport default withStyle(generateStyle, generateComponentTheme)(ExampleComponent)\n```\n\nThemeable components inject their themed styles into the document\nwhen they are mounted.\n\n### Applying themes\n\nA themeable componentâ€™s theme can be configured via wrapping it in an\n[InstUISettingsProvider](#InstUISettingsProvider) component, and/or set\nexplicitly via its `themeOverride` prop.\n\nInstUISettingsProvider provides a theme object (e.g. the [canvas theme](/#canvas)).\nThese variables are mapped to the component's own variables in `theme.js` (see [theming](#theming-basics) for more info).\n\nWith the `themeOverride` prop you can directly set/override the component theme variables declared in theme.js. It accepts an object or a function. The function has the component's theme and the currently active main theme as its parameter.\n\nSee more about the overrides on the [Using theme overrides](/#using-theme-overrides) docs page.\n\n```js-code\n// ExampleComponent/theme.js\nconst generateComponentTheme = (theme) => {\n  const { colors } = theme\n\n  const componentVariables = {\n    background: colors?.backgroundMedium,\n    color: colors?.textDarkest,\n\n    hoverColor: colors?.textLightest,\n    hoverBackground: colors?.backgroundDarkest\n  }\n\n  return componentVariables\n}\nexport default generateComponentTheme\n```\n\n```jsx-code\n{// global theme override}\n<InstUISettingsProvider theme={{\n  colors: { backgroundMedium: '#888' }\n}}>\n {// component theme override}\n  <ExampleComponent themeOverride={{ hoverColor: '#eee' }} />\n\n {// component theme override with function}\n  <ExampleComponent themeOverride={(componentTheme, currentTheme) => ({\n    hoverBackground: componentTheme.background,\n    activeBackground: currentTheme.colors.backgroundBrand\n  })} />\n</InstUISettingsProvider>\n```","params":[{"name":"generateStyle","type":"function","description":"- The function that returns the component's style object"},{"name":"generateComponentTheme","type":"function","description":"- The function that returns the component's theme variables object"}],"returns":{"description":"The decorated WithStyle Component","type":"ReactElement"},"category":"utilities/themes","relativePath":"packages/emotion/src/withStyle.tsx","extension":".tsx","srcPath":"packages/emotion/src/withStyle.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/emotion/src/withStyle.tsx","packageName":"@instructure/emotion","requirePath":"@instructure/emotion/lib/withStyle","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/emotion/src/withStyle.tsx').default","esPath":"@instructure/emotion/es/withStyle","themePath":"packages/emotion/src/withStyle.tsx","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/emotion/src/withStyle.tsx","id":"withStyle","title":"withStyle"}