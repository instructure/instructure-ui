{"description":"\nThe ToggleDetails component can be used to show/hide content in response to user action.\n\nBy default, ToggleDetails content is hidden. To override, pass in the `defaultExpanded` prop.\n\n```js\n---\ntype: example\n---\n<ToggleDetails\n  summary=\"Click to hide me!\"\n  defaultExpanded\n>\n  <Text weight=\"bold\">I am expanded!</Text> {lorem.paragraph()}\n</ToggleDetails>\n```\n\nToggleDetails can be controlled:\n\n```js\n---\ntype: example\n---\n\nclass Example extends React.Component {\n  state = {\n    expanded: true\n  };\n\n  handleChange = (event, expanded) => this.setState({ expanded });\n\n  handleToggle = () => this.setState({ expanded: !this.state.expanded });\n\n  render () {\n    return (\n      <div>\n        <Button onClick={this.handleToggle}>\n          This Button {this.state.expanded ? 'Collapses' : 'Expands'}\n        </Button>\n        <br />\n        <br />\n        <ToggleDetails\n          summary=\"Click to hide me!\"\n          expanded={this.state.expanded}\n          onToggle={this.handleChange}\n        >\n          <Text weight=\"bold\">I am controlled and expanded!</Text> {lorem.paragraph()}\n        </ToggleDetails>\n      </div>\n      )\n  }\n}\n\nrender(<Example />)\n```\n\nSetting ToggleDetails to `filled` will make the toggle use a full-width [Button](#Button) component.\n\n```js\n---\ntype: example\n---\n<ToggleDetails\n  variant=\"filled\"\n  summary=\"Click to expand me!\"\n>\n  {lorem.paragraph()}\n</ToggleDetails>\n```\n\n### Icon size / summary text formatting\n\nIcon size can be adjusted using the `size` prop with small, medium, and large options.\n\nThe `summary` prop accepts any node, allowing you to format the summary text as\nyou see fit. In these examples, we are formatting it with the\n[Text](#Text) component.\n\n```js\n---\ntype: example\n---\n<div>\n  <ToggleDetails\n    size=\"small\"\n    summary=\"Small icon\"\n  >\n    {lorem.paragraph()}\n  </ToggleDetails>\n\n  <br />\n\n  <ToggleDetails summary=\"Medium icon\">\n    {lorem.paragraph()}\n  </ToggleDetails>\n\n  <br />\n\n  <ToggleDetails\n    size=\"large\"\n    summary=\"Large icon\"\n  >\n    {lorem.paragraph()}\n  </ToggleDetails>\n</div>\n```\n\n### Icon positioning and block display\n\nThe `iconPosition` prop determines if the icon comes before or after the summary.\n\nWhen the `fluidWidth` prop is set, the toggle fills the width of its\ncontainer.\n\n```js\n---\ntype: example\n---\n<ToggleDetails\n  summary=\"Block display\"\n  iconPosition=\"end\"\n  defaultExpanded\n  fluidWidth\n>\n  <Text>\n    {lorem.paragraph()}\n  </Text>\n</ToggleDetails>\n```\n\n### Example to demonstrate more properties\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [state, setState] = useState({\n    expanded: true,\n    fluidWidth: true,\n    iconPosition: 'start',\n    size: 'small',\n    variant: 'default'\n  });\n\n  const handleChange = (field, value) => setState(prevState => ({ ...prevState, [field]: value }));\n  const handleToggle = () => setState(prevState => ({ ...prevState, expanded: !prevState.expanded }));\n\n  const renderOptions = () => {\n    const { fluidWidth, iconPosition, size, variant } = state;\n    const options = [\n      { name: 'iconPosition', values: ['start', 'end'] },\n      { name: 'size', values: ['small', 'medium', 'large'] },\n      { name: 'variant', values: ['default', 'filled'] },\n    ];\n\n    return (\n      <Flex alignItems=\"start\">\n        {options.map(({ name, values }) => (\n          <Flex.Item margin=\"small\" key={name}>\n            <RadioInputGroup\n              name={name}\n              description={name}\n              value={state[name]}\n              onChange={(e, value) => handleChange(name, value)}\n            >\n              {values.map(val => (\n                <RadioInput label={val} value={val} key={val} />\n              ))}\n            </RadioInputGroup>\n          </Flex.Item>\n        ))}\n        <Flex.Item margin=\"small\">\n          <Checkbox\n            label=\"fluidWidth\"\n            checked={fluidWidth}\n            onChange={() => handleChange('fluidWidth', !fluidWidth)}\n          />\n        </Flex.Item>\n      </Flex>\n    );\n  };\n\n  const { expanded, iconPosition, size, variant, fluidWidth } = state;\n\n  return (\n    <div>\n      {renderOptions()}\n      <Button onClick={handleToggle}>\n        This Button {expanded ? 'Collapses' : 'Expands'}\n      </Button>\n      <br />\n      <br />\n      <ToggleDetails\n        summary=\"Click to hide me!\"\n        expanded={expanded}\n        onToggle={(_, expanded) => handleChange('expanded', expanded)}\n        fluidWidth={fluidWidth}\n        iconPosition={iconPosition}\n        size={size}\n        variant={variant}\n      >\n        <Text weight=\"bold\">\n          I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!I am controlled and expanded!\n        </Text>\n      </ToggleDetails>\n    </div>\n  );\n};\n\nrender(<Example />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use ToggleDetails when descriptive text is longer than a short phrase</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Nest ToggleDetails within another ToggleDetails</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"ToggleDetails","methods":[],"props":{"variant":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'filled'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'default' | 'filled'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'filled'"}]},"defaultValue":{"value":"'default'","computed":false}},"summary":{"type":{"name":"node"},"required":true,"description":"The summary that displays and can be interacted with","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"expanded":{"type":{"name":"custom","raw":"controllable(PropTypes.bool, 'onToggle', 'defaultExpanded')"},"required":false,"description":"Whether the content is expanded or hidden","tsType":{"name":"boolean"}},"defaultExpanded":{"type":{"name":"bool"},"required":false,"description":"Whether the content is initially expanded or hidden (uncontrolled)","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"onToggle":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent, expanded: boolean) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"event"},{"type":{"name":"boolean"},"name":"expanded"}],"return":{"name":"void"}}}},"icon":{"type":{"name":"func"},"required":false,"description":"The icon to display next to the summary text when content is hidden","tsType":{"name":"signature","type":"function","raw":"(...args: any[]) => React.ReactElement","signature":{"arguments":[{"type":{"name":"Array","elements":[{"name":"any"}],"raw":"any[]"},"name":"args","rest":true}],"return":{"name":"ReactReactElement","raw":"React.ReactElement"}}},"defaultValue":{"value":"IconArrowOpenEndSolid","computed":true}},"iconExpanded":{"type":{"name":"func"},"required":false,"description":"The icon to display when content is expanded","tsType":{"name":"signature","type":"function","raw":"(...args: any[]) => React.ReactElement","signature":{"arguments":[{"type":{"name":"Array","elements":[{"name":"any"}],"raw":"any[]"},"name":"args","rest":true}],"return":{"name":"ReactReactElement","raw":"React.ReactElement"}}},"defaultValue":{"value":"IconArrowOpenDownSolid","computed":true}},"iconPosition":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'end'","computed":false}]},"required":false,"description":"Icon position at the start or end of the summary text","tsType":{"name":"union","raw":"'start' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"}]},"defaultValue":{"value":"'start'","computed":false}},"fluidWidth":{"type":{"name":"bool"},"required":false,"description":"should the summary fill the width of its container","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"The toggleable content passed inside the ToggleDetails component","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"defaultValue":{"value":"null","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"Choose a size for the expand/collapse icon","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-toggle-details/src/ToggleDetails/index.tsx","extension":".tsx","srcPath":"packages/ui-toggle-details/src/ToggleDetails/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-toggle-details/src/ToggleDetails/index.tsx","packageName":"@instructure/ui-toggle-details","requirePath":"@instructure/ui-toggle-details/lib/ToggleDetails/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-toggle-details/src/ToggleDetails/index.tsx').default","esPath":"@instructure/ui-toggle-details/es/ToggleDetails/index","themePath":"packages/ui-toggle-details/src/ToggleDetails/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-toggle-details/src/ToggleDetails/theme.ts","id":"ToggleDetails","title":"ToggleDetails"}