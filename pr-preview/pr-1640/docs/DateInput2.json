{"description":"\n@module experimental\n`DateInput2` is an experimental upgrade to the existing [`DateInput`](/#DateInput) component, offering easier configuration, better UX, improved accessibility, and a year picker. While it addresses key limitations of `DateInput`, it's still in the experimental phase, with some missing unit tests and potential (though unlikely) API changes.\n\n`DateInput` will be deprecated in the future, but for now, developers can start using `DateInput2` and provide feedback.\n\n### Minimal config\n\n- ```js\n  class Example extends React.Component {\n    initialDate = '2024-09-09T14:00:00.000Z'\n    state = { dateString: this.initialDate, inputValue: '' }\n\n    render() {\n      return (\n        <div>\n          <DateInput2\n            renderLabel=\"Choose a date\"\n            screenReaderLabels={{\n              calendarIcon: 'Calendar',\n              nextMonthButton: 'Next month',\n              prevMonthButton: 'Previous month'\n            }}\n            value={this.state.dateString}\n            width=\"20rem\"\n            onChange={(e, dateString, inputValue) => {\n              this.setState({ dateString, inputValue })\n            }}\n            invalidDateErrorMessage=\"Invalid date\"\n          />\n          <p>\n            UTC Date String: <code>{this.state.dateString}</code>\n            <br />\n            Input Value: <code>{this.state.inputValue}</code>\n          </p>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [dateString, setDateString] = useState('')\n    const [inputValue, setInputValue] = useState('')\n    return (\n      <div>\n        <DateInput2\n          renderLabel=\"Choose a date\"\n          screenReaderLabels={{\n            calendarIcon: 'Calendar',\n            nextMonthButton: 'Next month',\n            prevMonthButton: 'Previous month'\n          }}\n          value={dateString}\n          width=\"20rem\"\n          onChange={(e, newDateString, newInputValue) => {\n            setDateString(newDateString)\n            setInputValue(newInputValue)\n          }}\n          invalidDateErrorMessage=\"Invalid date\"\n        />\n        <p>\n          UTC Date String: <code>{dateString}</code>\n          <br />\n          Input Value: <code>{inputValue}</code>\n        </p>\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Timezones and UTC\n\nIn the example above you can see that the date is set via the `value` prop and returned from the `onChange` callback. This date is expected to be in UTC timezone. So if a user chooses September 10th 2024 with the timezone 'Europe/Budapest', the `onChange` function will return `2024-09-09T22:00:00.000Z` because Budapest is two hours ahead of UTC.\n\nAltought it would be nice to use the date picker without timezones and leave the time out alltogether but unfortunately you cannot decouple time from dates since the timezone determines when a day ends and another starts. In certain cases this changes the month or even the year. This can affect how you store and load dates from your database: if you want to set a saved date and that date is already timezone adjusted, you have to set it to utc with your date library of choice.\n\n### Parsing dates\n\nWhen typing a date in the input field instead of using the included picker, the component tries to parse the date as you type it in. To prevent premature parsing (e.g. interpreting `2024` as `2024-01-01T00:00:00.000Z`) parsing only turns on after 10 character. Typed in dates are expected to be in [Date Time String Format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format). Any other format are implementation dependant and might differ browser by browser.\n\n### With year picker\n\n- ```js\n  class Example extends React.Component {\n    state = { value: '' }\n\n    render() {\n      return (\n        <DateInput2\n          renderLabel=\"Choose a date\"\n          screenReaderLabels={{\n            calendarIcon: 'Calendar',\n            nextMonthButton: 'Next month',\n            prevMonthButton: 'Previous month'\n          }}\n          width=\"20rem\"\n          value={this.state.value}\n          onChange={(e, value) => this.setState({ value })}\n          invalidDateErrorMessage=\"Invalid date\"\n          withYearPicker={{\n            screenReaderLabel: 'Year picker',\n            startYear: 1900,\n            endYear: 2024\n          }}\n        />\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [value, setValue] = useState('')\n\n    return (\n      <DateInput2\n        renderLabel=\"Choose a date\"\n        screenReaderLabels={{\n          calendarIcon: 'Calendar',\n          nextMonthButton: 'Next month',\n          prevMonthButton: 'Previous month'\n        }}\n        width=\"20rem\"\n        value={value}\n        onChange={(e, value) => setValue(value)}\n        invalidDateErrorMessage=\"Invalid date\"\n        withYearPicker={{\n          screenReaderLabel: 'Year picker',\n          startYear: 1900,\n          endYear: 2024\n        }}\n      />\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Date validation\n\nBy default `DateInput2` only does date validation if the `invalidDateErrorMessage` prop is provided. This uses the browser's `Date` object to try and parse the user provided date and displays the error message if it fails. Validation is triggered on the blur event of the input field.\n\nIf you want to do a more complex validation than the above (e.g. only allow a subset of dates) you can use the `onRequestValidateDate` prop to pass a validation function. This function will run on blur or on selecting a date from the picker. The result of the internal validation will be passed to this function. Then you have to set the error messages accordingly. Check the following example for more details:\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [value, setValue] = useState('')\n  const [messages, setMessages] = useState([])\n\n  const handleDateValidation = (dateString, isValidDate) => {\n    if (!isValidDate) {\n      setMessages([{\n        type: 'error',\n        text: 'This is not a valid date'\n      }])\n    } else if (new Date(dateString) < new Date('January 1, 1900')) {\n      setMessages([{\n        type: 'error',\n        text: 'Use date after January 1, 1900'\n      }])\n    } else {\n      setMessages([])\n    }\n  }\n\n  return (\n    <DateInput2\n      renderLabel=\"Choose a date after January 1, 1900\"\n      screenReaderLabels={{\n        calendarIcon: 'Calendar',\n        nextMonthButton: 'Next month',\n        prevMonthButton: 'Previous month'\n      }}\n      width=\"20rem\"\n      value={value}\n      messages={messages}\n      onRequestValidateDate={handleDateValidation}\n      onChange={(e, value) => setValue(value)}\n      withYearPicker={{\n        screenReaderLabel: 'Year picker',\n        startYear: 1900,\n        endYear: 2024\n      }}\n    />\n  )\n}\n\nrender(<Example />)\n```\n\n### Date formatting\n\nThe display format of the date value can be set via the `formatDate` property. It will be applied if the user clicks on a date in the date picker or after the blur event from the input field.\nSomething to pay attention to is that the date string passed back in the callback function **is in UTC timezone**.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [value1, setValue1] = useState('')\n  const [value2, setValue2] = useState('')\n  const [value3, setValue3] = useState('')\n\n  const shortDateFormatFn = (dateString, locale, timezone) => {\n    return new Date(dateString).toLocaleDateString(locale, {\n      month: 'numeric',\n      year: 'numeric',\n      day: 'numeric',\n      timeZone: timezone,\n    })\n  }\n\n  const isoDateFormatFn = (dateString, locale, timezone) => {\n    // this is a simple way to get ISO8601 date in a specific timezone but should not be used in production\n    // please use a proper date library instead like date-fns, luxon or dayjs\n    const localeDate = new Date(dateString).toLocaleDateString('sv', {\n      month: 'numeric',\n      year: 'numeric',\n      day: 'numeric',\n      timeZone: timezone,\n    })\n\n    return localeDate\n  }\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', gap: '1.5rem'}}>\n        <DateInput2\n          renderLabel=\"Default format\"\n          screenReaderLabels={{\n            calendarIcon: 'Calendar',\n            nextMonthButton: 'Next month',\n            prevMonthButton: 'Previous month'\n          }}\n          isInline\n          width=\"20rem\"\n          value={value1}\n          onChange={(e, value) => setValue1(value)}\n          withYearPicker={{\n            screenReaderLabel: 'Year picker',\n            startYear: 1900,\n            endYear: 2024\n          }}\n        />\n        <DateInput2\n          renderLabel=\"Short format in current locale\"\n          screenReaderLabels={{\n            calendarIcon: 'Calendar',\n            nextMonthButton: 'Next month',\n            prevMonthButton: 'Previous month'\n          }}\n          isInline\n          width=\"20rem\"\n          value={value2}\n          onChange={(e, value) => setValue2(value)}\n          formatDate={shortDateFormatFn}\n          withYearPicker={{\n            screenReaderLabel: 'Year picker',\n            startYear: 1900,\n            endYear: 2024\n          }}\n        />\n        <DateInput2\n          renderLabel=\"ISO8601\"\n          screenReaderLabels={{\n            calendarIcon: 'Calendar',\n            nextMonthButton: 'Next month',\n            prevMonthButton: 'Previous month'\n          }}\n          isInline\n          width=\"20rem\"\n          value={value3}\n          onChange={(e, value) => setValue3(value)}\n          formatDate={isoDateFormatFn}\n          withYearPicker={{\n            screenReaderLabel: 'Year picker',\n            startYear: 1900,\n            endYear: 2024\n          }}\n        />\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n","displayName":"DateInput2","methods":[],"props":{"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":true,"description":"Specifies the input label.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"screenReaderLabels":{"type":{"name":"object"},"required":true,"description":"","tsType":{"name":"signature","type":"object","raw":"{\n  calendarIcon: string\n  prevMonthButton: string\n  nextMonthButton: string\n}","signature":{"properties":[{"key":"calendarIcon","value":{"name":"string","required":true}},{"key":"prevMonthButton","value":{"name":"string","required":true}},{"key":"nextMonthButton","value":{"name":"string","required":true}}]}}},"value":{"type":{"name":"custom","raw":"controllable(PropTypes.string)"},"required":false,"description":"Specifies the input value *before* formatting. The `formatDate` will be applied to it before displaying. Should be a valid, parsable date.","tsType":{"name":"string"}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"Specifies the input size.","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Html placeholder text to display when the input has no value. This should\nbe hint text, not a label replacement.","tsType":{"name":"string"}},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback fired when the input changes.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.SyntheticEvent,\n  isoDateString: string,\n  formattedValue: string\n) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"string"},"name":"isoDateString"},{"type":{"name":"string"},"name":"formattedValue"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a blur event.","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"defaultValue":{"value":"'enabled'","computed":false}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"Specifies if the input is required.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"isInline":{"type":{"name":"bool"},"required":false,"description":"Controls whether the input is rendered inline with other elements or if it\nis rendered as a block level element.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"Specifies the width of the input.","tsType":{"name":"string"}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Displays messages and validation for the input. It should be an object\nwith the following shape:\n`{\n  text: PropTypes.node,\n  type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"onRequestValidateDate":{"type":{"name":"func"},"required":false,"description":"Callback fired when the input is blurred or a date is selected from the calendar.\nFeedback should be provided to the user when this function is called if the selected date or input\nvalue is invalid. The component has an internal check whether the date can be parsed to a valid date.","tsType":{"name":"signature","type":"function","raw":"(\n  isoDateString?: string,\n  internalValidationPassed?: boolean\n) => void | FormMessage[]","signature":{"arguments":[{"type":{"name":"string"},"name":"isoDateString"},{"type":{"name":"boolean"},"name":"internalValidationPassed"}],"return":{"name":"union","raw":"void | FormMessage[]","elements":[{"name":"void"},{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}]}}}},"invalidDateErrorMessage":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":false,"description":"The message shown to the user when the date is invalid. If this prop is not set, validation is bypassed.\nIf it's set to an empty string, validation happens and the input border changes to red if validation hasn't passed.","tsType":{"name":"string"}},"locale":{"type":{"name":"string"},"required":false,"description":"A standard language identifier.\n\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) for\nmore details.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's locale will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"timezone":{"type":{"name":"string"},"required":false,"description":"A timezone identifier in the format: *Area/Location*\n\nSee [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list\nof possible options.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's timezone will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"withYearPicker":{"type":{"name":"object"},"required":false,"description":"If set, years can be picked from a dropdown.\nIt accepts an object.\nscreenReaderLabel: string // e.g.: i18n(\"pick a year\")\n\nonRequestYearChange?:(e: React.MouseEvent,requestedYear: number): void // if set, on year change, only this will be called and no internal change will take place\n\nstartYear: number // e.g.: 2001, sets the start year of the selectable list\n\nendYear: number // e.g.: 2030, sets the end year of the selectable list","tsType":{"name":"signature","type":"object","raw":"{\n  screenReaderLabel: string\n  onRequestYearChange?: (e: SyntheticEvent, requestedYear: number) => void\n  startYear: number\n  endYear: number\n}","signature":{"properties":[{"key":"screenReaderLabel","value":{"name":"string","required":true}},{"key":"onRequestYearChange","value":{"name":"signature","type":"function","raw":"(e: SyntheticEvent, requestedYear: number) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"e"},{"type":{"name":"number"},"name":"requestedYear"}],"return":{"name":"void"}},"required":false}},{"key":"startYear","value":{"name":"number","required":true}},{"key":"endYear","value":{"name":"number","required":true}}]}}},"formatDate":{"type":{"name":"func"},"required":false,"description":"Formatting function for how the date should be displayed inside the input field. It will be applied if the user clicks on a date in the date picker of after blur event from the input field.","tsType":{"name":"signature","type":"function","raw":"(isoDate: string, locale: string, timezone: string) => string","signature":{"arguments":[{"type":{"name":"string"},"name":"isoDate"},{"type":{"name":"string"},"name":"locale"},{"type":{"name":"string"},"name":"timezone"}],"return":{"name":"string"}}},"defaultValue":{"value":"function defaultDateFormatter(\n  dateString: string,\n  locale: string,\n  timezone: string\n) {\n  return new Date(dateString).toLocaleDateString(locale, {\n    month: 'long',\n    year: 'numeric',\n    day: 'numeric',\n    timeZone: timezone\n  })\n}","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-date-input/src/DateInput2/index.tsx","extension":".tsx","srcPath":"packages/ui-date-input/src/DateInput2/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-date-input/src/DateInput2/index.tsx","packageName":"@instructure/ui-date-input","requirePath":"@instructure/ui-date-input/lib/DateInput2/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-date-input/src/DateInput2/index.tsx').default","esPath":"@instructure/ui-date-input/es/DateInput2/index","id":"DateInput2","title":"DateInput2"}