{"description":"\nHeading is a component for creating typographic headings.\n\n## Variant\n\nVariant covers almost all use cases for headings on pages. Their name reflects the places they meant to be used. It takes care of the style of the heading\n\nNOTE 1: for legacy reasons, each `variant` has a default `level` set. This is not the recommended way and will be removed in a later major release. Please specify the `level` directly!\n\nNOTE 2: when `variant` is set the `as` prop is ignored\n\nIMPORTANT A11Y NOTE 1: there can be only one `h1` tag in a page\n\nIMPORTANT A11Y NOTE 2: `h` tags can not skip a level, so for example an `h1` followed by an `h3` not allowed\n\n```js\n---\ntype: example\n---\n  <div>\n    <Heading variant=\"titlePageDesktop\"> titlePageDesktop </Heading><br/>\n    <Heading variant=\"titlePageMobile\"> titlePageMobile </Heading><br/>\n    <Heading variant=\"titleSection\"> titleSection </Heading><br/>\n    <Heading variant=\"titleCardSection\"> titleCardSection </Heading><br/>\n    <Heading variant=\"titleModule\"> titleModule </Heading><br/>\n    <Heading variant=\"titleCardLarge\"> titleCardLarge </Heading><br/>\n    <Heading variant=\"titleCardRegular\"> titleCardRegular </Heading><br/>\n    <Heading variant=\"titleCardMini\"> titleCardMini </Heading><br/>\n    <Heading variant=\"label\"> label </Heading><br/>\n    <Heading variant=\"labelInline\"> labelInline </Heading><br/>\n  </div>\n```\n\n### AI Heading\n\nPre-configured and with unique styles, the `ai-headings` are used for standardized, ai-related components.\n\n```js\n---\ntype: example\n---\n<div style={{display: 'flex', flexDirection: 'column', gap: '24px'}}>\n <Heading aiVariant=\"stacked\">Nutrition Facts</Heading>\n <Heading aiVariant=\"horizontal\">Nutrition Facts</Heading>\n <Heading aiVariant=\"iconOnly\">Nutrition Facts</Heading>\n</div>\n```\n\n### Heading level\n\nGenerate content headings, from h1 to h5. Use the `margin` prop to add margin.\n\n- The `as` prop controls what html element is output. _(if not defined it will default to level)._\n- The `level` prop sets its appearance.\n\n```js\n---\ntype: example\n---\n<div>\n  <Heading level=\"h1\" as=\"h2\" margin=\"0 0 x-small\">Heading level One</Heading>\n\n</div>\n```\n\n### Heading colors\n\nThe default is for the color to inherit, but it can be set to `primary` or `secondary` via the `color` prop. Note there is an inverse option available as well: `primary-inverse` or `secondary-inverse` (_see inverse example below_).\n\n```js\n---\ntype: example\n---\n<div>\n  <Heading>I inherit my color via the CSS cascade (default)</Heading>\n  <Heading color=\"primary\">I am primary color</Heading>\n  <Heading color=\"secondary\">I am secondary color</Heading>\n</div>\n```\n\n### Icons\n\nWith the `renderIcon` prop, an icon can be rendered before the text.\n\n```js\n---\ntype: example\n---\n<div>\n <Heading renderIcon={<IconAdminSolid/>}>I am heading with icon</Heading>\n</div>\n```\n\n```js\n---\ntype: example\n---\n<View background=\"primary-inverse\" as=\"div\">\n  <Heading color=\"primary-inverse\">I am primary-inverse color</Heading>\n  <Heading color=\"secondary-inverse\">I am secondary-inverse color</Heading>\n</View>\n```\n\n### Heading borders\n\nThe default is no borders. However, using the `border` prop, you can\nadd either `top` or `bottom` borders to your heading.\n\n```js\n---\ntype: example\n---\n<div>\n  <Heading margin=\"0 0 medium\" border=\"bottom\">I have a bottom border</Heading>\n  <Heading border=\"top\">I have a top border</Heading>\n</div>\n```\n\n### Ellipsis text overflow\n\nUse [TruncateText](#TruncateText) if you need to constrain your\nHeading to a single line (or certain number of lines).\n\n```js\n---\ntype: example\n---\n<Heading level=\"h2\">\n  <TruncateText>{lorem.paragraph()}</TruncateText>\n</Heading>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Each page should always contain one and only one H1</Figure.Item>\n    <Figure.Item>Headings should be used in logical order</Figure.Item>\n    <Figure.Item>Headings should not be used to format text</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Heading","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"checkProps","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderContent","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getAriaLabel","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"aiVariant":{"required":false,"tsType":{"name":"union","raw":"'stacked' | 'horizontal' | 'iconOnly'","elements":[{"name":"literal","value":"'stacked'"},{"name":"literal","value":"'horizontal'"},{"name":"literal","value":"'iconOnly'"}]},"description":"transforms heading into an ai variant"},"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"The text content of the Heading","defaultValue":{"value":"null","computed":false}},"border":{"required":false,"tsType":{"name":"union","raw":"'none' | 'top' | 'bottom'","elements":[{"name":"literal","value":"'none'"},{"name":"literal","value":"'top'"},{"name":"literal","value":"'bottom'"}]},"description":"Add a top- or bottom-border to the Heading","defaultValue":{"value":"'none'","computed":false}},"color":{"required":false,"tsType":{"name":"union","raw":"| 'primary'\n| 'secondary'\n| 'primary-inverse'\n| 'secondary-inverse'\n| 'inherit'\n| 'ai'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'primary-inverse'"},{"name":"literal","value":"'secondary-inverse'"},{"name":"literal","value":"'inherit'"},{"name":"literal","value":"'ai'"}]},"description":"The font color to render, NOTE: `ai` color is deprecated. Use the `aiVariant` prop instead","defaultValue":{"value":"'inherit'","computed":false}},"level":{"required":false,"tsType":{"name":"union","raw":"HeadingLevel<'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'> | 'reset'","elements":[{"name":"union","raw":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","elements":[{"name":"literal","value":"'h1'"},{"name":"literal","value":"'h2'"},{"name":"literal","value":"'h3'"},{"name":"literal","value":"'h4'"},{"name":"literal","value":"'h5'"},{"name":"literal","value":"'h6'"}]},{"name":"literal","value":"'reset'"}]},"description":"The *visual* appearance of the Heading: h1 is largest; h5 is smallest.","defaultValue":{"value":"'h2'","computed":false}},"as":{"required":false,"tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"description":"Choose the element Heading should render as. Will default to the `level` prop\nif not specified."},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`."},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a ref to the underlying HTML element"},"renderIcon":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"An icon, or function that returns an icon that gets displayed before the text."},"variant":{"required":false,"tsType":{"name":"union","raw":"| 'titlePageDesktop'\n| 'titlePageMobile'\n| 'titleSection'\n| 'titleCardSection'\n| 'titleModule'\n| 'titleCardLarge'\n| 'titleCardRegular'\n| 'titleCardMini'\n| 'label'\n| 'labelInline'","elements":[{"name":"literal","value":"'titlePageDesktop'"},{"name":"literal","value":"'titlePageMobile'"},{"name":"literal","value":"'titleSection'"},{"name":"literal","value":"'titleCardSection'"},{"name":"literal","value":"'titleModule'"},{"name":"literal","value":"'titleCardLarge'"},{"name":"literal","value":"'titleCardRegular'"},{"name":"literal","value":"'titleCardMini'"},{"name":"literal","value":"'label'"},{"name":"literal","value":"'labelInline'"}]},"description":"Sets appearance of the heading."},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-heading/src/Heading/index.tsx","extension":".tsx","srcPath":"packages/ui-heading/src/Heading/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-heading/src/Heading/index.tsx","packageName":"@instructure/ui-heading","requirePath":"@instructure/ui-heading/lib/Heading/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-heading/src/Heading/index.tsx').default","esPath":"@instructure/ui-heading/es/Heading/index","themePath":"packages/ui-heading/src/Heading/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-heading/src/Heading/theme.ts","id":"Heading","title":"Heading"}