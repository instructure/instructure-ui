{"description":"\nA component that positions content with respect to a designated target.\n\n### Internationalization\n\n`Position` placement can be internationalized for right to left languages. The\nfollowing examples are configured utilizing the [TextDirectionContext](TextDirectionContext)\ncomponent in conjunction with the [mirrorHorizontalPlacement](mirrorPlacement)\nutility function.\n\n```js\n---\ntype: example\n---\nconst fpo = lorem.sentence()\nclass Example extends React.Component {\n\nstatic contextType = TextDirectionContext\n\nconstructor (props) {\n  super(props)\n  this.state = { placement: 'end', adjusted: 'end' }\n}\n\nhandleButtonClick = () => {\n  const placements = [\n    'top',\n    'end',\n    'bottom',\n    'start',\n    'top start',\n    'start top',\n    'start center',\n    'start bottom',\n    'bottom start',\n    'bottom center',\n    'bottom end',\n    'end bottom',\n    'end center',\n    'end top',\n    'top end',\n    'top center',\n    'center end',\n    'center start'\n  ]\n  let { placement } = this.state\n  placement = placements[placements.indexOf(placement) + 1] || placements[0]\n  this.setState({ placement })\n};\n\nhandlePositionChanged = ({ placement }) => {\n  this.setState({ adjusted: placement })\n};\n\nrender () {\n  const { placement, adjusted } = this.state\n\n  let offset = {\n    x: 0,\n    y: 0\n  }\n\n  if (['top', 'bottom'].indexOf(placement.split(' ')[0]) >= 0) {\n    offset.y = 16\n  } else {\n    offset.x = 16\n  }\n  const rtl = this.context === 'rtl'\n  return (\n    <View\n      as=\"div\"\n      margin=\"x-large\"\n      padding=\"x-large\"\n      textAlign=\"center\"\n    >\n        <Position\n          placement={rtl ? mirrorHorizontalPlacement(placement, ' ') : placement}\n          offsetX={offset.x}\n          offsetY={offset.y}\n          onPositionChanged={this.handlePositionChanged}\n          renderTarget={\n            <Button color=\"primary\" onClick={this.handleButtonClick}>\n              Change Placement\n            </Button>\n          }\n        >\n          <ContextView\n            placement={rtl ? mirrorHorizontalPlacement(adjusted, ' ') : adjusted}\n            maxWidth=\"22rem\" padding=\"small\"\n          >\n            <Heading level=\"h3\">{placement}</Heading>\n            <p>{fpo}</p>\n          </ContextView>\n        </Position>\n    </View>\n  )\n}\n}\n\nrender(<Example />)\n```\n\nThe `mountNode` prop renders the positioned content inside the configured element (instead of the body).\n\n```js\n---\ntype: example\n---\n\nconst fpo = lorem.sentence()\nclass Example extends React.Component {\n\n  static contextType = TextDirectionContext\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      placement: 'end',\n      adjusted: 'end'\n    }\n  }\n\n  handleButtonClick = () => {\n    const placements = [\n      'top',\n      'end',\n      'bottom',\n      'start',\n      'top start',\n      'start top',\n      'start center',\n      'start bottom',\n      'bottom start',\n      'bottom center',\n      'bottom end',\n      'end bottom',\n      'end center',\n      'end top',\n      'top end',\n      'top center',\n      'center end',\n      'center start'\n    ]\n\n    let { placement } = this.state\n\n    placement = placements[placements.indexOf(placement) + 1] || placements[0]\n\n    this.setState({ placement })\n  };\n\n  handlePositionChanged = ({ placement }) => {\n    this.setState({ adjusted: placement })\n  };\n\n  render () {\n    const { placement, adjusted } = this.state\n\n    let offsetX = 0\n    let offsetY = 0\n\n    if (['top', 'bottom'].indexOf(placement.split(' ')[0]) >= 0) {\n      offsetY = 16\n    } else {\n      offsetX = 16\n    }\n    const rtl = this.context === 'rtl'\n\n    return (\n    <span>\n      <View\n        as=\"div\"\n        margin=\"x-large\"\n        padding=\"x-large\"\n        textAlign=\"center\"\n      >\n          <Position\n            placement={rtl ? mirrorHorizontalPlacement(placement, ' ') : placement}\n            offsetX={offsetX}\n            offsetY={offsetY}\n            mountNode={() => this._mountNode}\n            onPositionChanged={this.handlePositionChanged}\n            renderTarget={\n              <Button color=\"primary\" onClick={this.handleButtonClick}>\n                Change Placement\n              </Button>\n            }\n          >\n            <ContextView\n              placement={rtl ? mirrorHorizontalPlacement(adjusted, ' ') : adjusted}\n              maxWidth=\"20rem\"\n              padding=\"small\"\n            >\n              <Heading level=\"h3\">{placement}</Heading>\n              <p>\n                {fpo}\n              </p>\n            </ContextView>\n          </Position>\n      </View>\n      <div\n        style={{\n          position: 'relative',\n          padding: 100\n        }}\n        ref={(c) => { this._mountNode = c }}\n      />\n    </span>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n`shouldPositionOverTarget` prop with `stretch` placement.\n\n```js\n---\ntype: example\n---\nconst fpo = lorem.paragraphs(7)\n\nclass Example extends React.Component {\n\n  static contextType = TextDirectionContext\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      placement: 'top stretch'\n    }\n  }\n\n  handleButtonClick = () => {\n    const placements = [\n      'top stretch',\n      'bottom stretch',\n      'end stretch',\n      'start stretch'\n    ]\n\n    let { placement } = this.state\n\n    placement = placements[placements.indexOf(placement) + 1] || placements[0]\n\n    this.setState({ placement })\n  };\n\n  render () {\n    const { placement } = this.state\n    const rtl = this.context === 'rtl'\n    return (\n      <div>\n        <Position\n          placement={rtl ? mirrorHorizontalPlacement(placement, ' ') : placement}\n          shouldPositionOverTarget\n          insertAt=\"top\"\n          mountNode={() => this._mountNode}\n          renderTarget={\n            <div\n              ref={(c) => { this._mountNode = c }}\n              style={{\n                overflowY: 'auto',\n                maxHeight: '10rem',\n                marginBottom: '1rem',\n                padding: '0.5rem'\n              }}\n            >\n              {fpo}\n            </div>\n          }\n        >\n          <div\n            style={{\n              backgroundColor: 'white',\n              padding: '1rem'\n            }}\n          >\n            <Heading level=\"h3\">{placement}</Heading>\n          </div>\n        </Position>\n        <Button color=\"primary\" onClick={this.handleButtonClick}>\n          Change Placement\n        </Button>\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n","displayName":"Position","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"toggleLocatorAttributes","docblock":null,"modifiers":[],"params":[{"name":"set","optional":false,"type":{"name":"boolean"}}],"returns":null},{"name":"toggleLocatorAttribute","docblock":null,"modifiers":[],"params":[{"name":"node","optional":false,"type":{"name":"union","raw":"Node | Window | null | undefined","elements":[{"name":"Node"},{"name":"Window"},{"name":"null"},{"name":"undefined"}]}},{"name":"locator","optional":false,"type":{"name":"string"}},{"name":"set","optional":false,"type":{"name":"boolean"}}],"returns":null},{"name":"handlePortalOpen","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"calculatePosition","docblock":null,"modifiers":[],"params":[{"name":"props","optional":false,"type":{"name":"intersection","raw":"PositionOwnProps &\nWithStyleProps<PositionTheme, PositionStyle> &\nWithDeterministicIdProps","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The node to use as the position target\n   */\n  renderTarget?: Renderable\n\n  /**\n   * The target to be used when not using `renderTarget`\n   */\n  target?: PositionMountNode\n\n  /**\n   * The placement of the content in relation to the target\n   */\n  placement?: PlacementPropValues\n\n  /**\n   * An element or a function returning an element to use as the mount node\n   * for the `<Position />` (defaults to `document.body`)\n   */\n  mountNode?: PositionMountNode\n\n  /**\n   * Insert the element at the 'top' of the mountNode or at the 'bottom'\n   */\n  insertAt?: 'bottom' | 'top'\n\n  /**\n   * The parent in which to constrain the placement.\n   * One of?: 'window', 'scroll-parent', 'parent', 'none', an element,\n   * or a function returning an element\n   */\n  constrain?: PositionConstraint\n\n  /**\n   * The horizontal offset for the positioned content\n   */\n  offsetX?: string | number\n\n  /**\n   * The vertical offset for the positioned content\n   */\n  offsetY?: string | number\n\n  /**\n   * An id will be generated if not provided\n   */\n  id?: string\n\n  /**\n   * Whether or not position of the target should be tracked or just set statically on render\n   */\n  shouldTrackPosition?: boolean\n\n  /**\n   * Whether or not you want the content to position over the target\n   */\n  shouldPositionOverTarget?: boolean\n\n  /**\n   * Callback fired when the position changes\n   */\n  onPositionChanged?: (position: PositionObject) => void\n\n  /**\n   * Callback fired when `<Position />` content has been mounted and is initially positioned\n   */\n  onPositioned?: (position: PositionObject) => void\n\n  /**\n   * The content to be positioned\n   */\n  children?: React.ReactNode\n\n  /**\n   * Set the CSS `display` property on the outermost `<span>` container element\n   */\n  containerDisplay?: 'inline-block' | 'block'\n\n  /**\n   * Provides a reference to the underlying HTML root element (the target)\n   */\n  elementRef?: (element: Element | null) => void\n}","signature":{"properties":[{"key":"renderTarget","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"The node to use as the position target"},{"key":"target","value":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}],"required":false},"description":"The target to be used when not using `renderTarget`"},{"key":"placement","value":{"name":"union","raw":"| 'top'\n| 'bottom'\n| 'start'\n| 'end'\n| 'top start'\n| 'top center'\n| 'top end'\n| 'top stretch'\n| 'bottom start'\n| 'bottom center'\n| 'bottom end'\n| 'bottom stretch'\n| 'start top'\n| 'start center'\n| 'start bottom'\n| 'start stretch'\n| 'end top'\n| 'end center'\n| 'end bottom'\n| 'end stretch'\n| 'center start'\n| 'center end'\n| 'offscreen'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"},{"name":"literal","value":"'top start'"},{"name":"literal","value":"'top center'"},{"name":"literal","value":"'top end'"},{"name":"literal","value":"'top stretch'"},{"name":"literal","value":"'bottom start'"},{"name":"literal","value":"'bottom center'"},{"name":"literal","value":"'bottom end'"},{"name":"literal","value":"'bottom stretch'"},{"name":"literal","value":"'start top'"},{"name":"literal","value":"'start center'"},{"name":"literal","value":"'start bottom'"},{"name":"literal","value":"'start stretch'"},{"name":"literal","value":"'end top'"},{"name":"literal","value":"'end center'"},{"name":"literal","value":"'end bottom'"},{"name":"literal","value":"'end stretch'"},{"name":"literal","value":"'center start'"},{"name":"literal","value":"'center end'"},{"name":"literal","value":"'offscreen'"}],"required":false},"description":"The placement of the content in relation to the target"},{"key":"mountNode","value":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}],"required":false},"description":"An element or a function returning an element to use as the mount node\nfor the `<Position />` (defaults to `document.body`)"},{"key":"insertAt","value":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}],"required":false},"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'"},{"key":"constrain","value":{"name":"union","raw":"| PositionMountNode\n| 'window'\n| 'scroll-parent'\n| 'parent'\n| 'none'","elements":[{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}],"required":false},{"name":"literal","value":"'window'"},{"name":"literal","value":"'scroll-parent'"},{"name":"literal","value":"'parent'"},{"name":"literal","value":"'none'"}],"required":false},"description":"The parent in which to constrain the placement.\nOne of?: 'window', 'scroll-parent', 'parent', 'none', an element,\nor a function returning an element"},{"key":"offsetX","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false},"description":"The horizontal offset for the positioned content"},{"key":"offsetY","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false},"description":"The vertical offset for the positioned content"},{"key":"id","value":{"name":"string","required":false},"description":"An id will be generated if not provided"},{"key":"shouldTrackPosition","value":{"name":"boolean","required":false},"description":"Whether or not position of the target should be tracked or just set statically on render"},{"key":"shouldPositionOverTarget","value":{"name":"boolean","required":false},"description":"Whether or not you want the content to position over the target"},{"key":"onPositionChanged","value":{"name":"signature","type":"function","raw":"(position: PositionObject) => void","signature":{"arguments":[{"type":{"name":"intersection","raw":"ElementPosition['style'] & {\n  placement: ElementPosition['placement']\n}","elements":[{"name":"signature","raw":"ElementPosition['style']"},{"name":"signature","type":"object","raw":"{\n  placement: ElementPosition['placement']\n}","signature":{"properties":[{"key":"placement","value":{"name":"union","raw":"ElementPosition['placement']","required":true}}]}}]},"name":"position"}],"return":{"name":"void"}},"required":false},"description":"Callback fired when the position changes"},{"key":"onPositioned","value":{"name":"signature","type":"function","raw":"(position: PositionObject) => void","signature":{"arguments":[{"type":{"name":"intersection","raw":"ElementPosition['style'] & {\n  placement: ElementPosition['placement']\n}","elements":[{"name":"signature","raw":"ElementPosition['style']"},{"name":"signature","type":"object","raw":"{\n  placement: ElementPosition['placement']\n}","signature":{"properties":[{"key":"placement","value":{"name":"union","raw":"ElementPosition['placement']","required":true}}]}}]},"name":"position"}],"return":{"name":"void"}},"required":false},"description":"Callback fired when `<Position />` content has been mounted and is initially positioned"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false},"description":"The content to be positioned"},{"key":"containerDisplay","value":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}],"required":false},"description":"Set the CSS `display` property on the outermost `<span>` container element"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"Provides a reference to the underlying HTML root element (the target)"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  zIndex: Stacking['topmost']\n}","signature":{"properties":[{"key":"zIndex","value":{"name":"number","raw":"Stacking['topmost']","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"'position' | 'zIndex'","elements":[{"name":"literal","value":"'position'"},{"name":"literal","value":"'zIndex'"}]}],"raw":"ComponentStyle<'position' | 'zIndex'>"}],"raw":"WithStyleProps<PositionTheme, PositionStyle>"},{"name":"WithDeterministicIdProps"}],"alias":"PositionProps"}}],"returns":null},{"name":"position","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"startTracking","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"stopTracking","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderContent","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderTarget","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"renderTarget":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"The node to use as the position target"},"target":{"required":false,"tsType":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}]},"description":"The target to be used when not using `renderTarget`"},"placement":{"required":false,"tsType":{"name":"union","raw":"| 'top'\n| 'bottom'\n| 'start'\n| 'end'\n| 'top start'\n| 'top center'\n| 'top end'\n| 'top stretch'\n| 'bottom start'\n| 'bottom center'\n| 'bottom end'\n| 'bottom stretch'\n| 'start top'\n| 'start center'\n| 'start bottom'\n| 'start stretch'\n| 'end top'\n| 'end center'\n| 'end bottom'\n| 'end stretch'\n| 'center start'\n| 'center end'\n| 'offscreen'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"},{"name":"literal","value":"'top start'"},{"name":"literal","value":"'top center'"},{"name":"literal","value":"'top end'"},{"name":"literal","value":"'top stretch'"},{"name":"literal","value":"'bottom start'"},{"name":"literal","value":"'bottom center'"},{"name":"literal","value":"'bottom end'"},{"name":"literal","value":"'bottom stretch'"},{"name":"literal","value":"'start top'"},{"name":"literal","value":"'start center'"},{"name":"literal","value":"'start bottom'"},{"name":"literal","value":"'start stretch'"},{"name":"literal","value":"'end top'"},{"name":"literal","value":"'end center'"},{"name":"literal","value":"'end bottom'"},{"name":"literal","value":"'end stretch'"},{"name":"literal","value":"'center start'"},{"name":"literal","value":"'center end'"},{"name":"literal","value":"'offscreen'"}]},"description":"The placement of the content in relation to the target","defaultValue":{"value":"'bottom center'","computed":false}},"mountNode":{"required":false,"tsType":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}]},"description":"An element or a function returning an element to use as the mount node\nfor the `<Position />` (defaults to `document.body`)","defaultValue":{"value":"null","computed":false}},"insertAt":{"required":false,"tsType":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}]},"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'","defaultValue":{"value":"'bottom'","computed":false}},"constrain":{"required":false,"tsType":{"name":"union","raw":"| PositionMountNode\n| 'window'\n| 'scroll-parent'\n| 'parent'\n| 'none'","elements":[{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}]},{"name":"literal","value":"'window'"},{"name":"literal","value":"'scroll-parent'"},{"name":"literal","value":"'parent'"},{"name":"literal","value":"'none'"}]},"description":"The parent in which to constrain the placement.\nOne of?: 'window', 'scroll-parent', 'parent', 'none', an element,\nor a function returning an element","defaultValue":{"value":"'window'","computed":false}},"offsetX":{"required":false,"tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"description":"The horizontal offset for the positioned content","defaultValue":{"value":"0","computed":false}},"offsetY":{"required":false,"tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"description":"The vertical offset for the positioned content","defaultValue":{"value":"0","computed":false}},"id":{"required":false,"tsType":{"name":"string"},"description":"An id will be generated if not provided"},"shouldTrackPosition":{"required":false,"tsType":{"name":"boolean"},"description":"Whether or not position of the target should be tracked or just set statically on render","defaultValue":{"value":"true","computed":false}},"shouldPositionOverTarget":{"required":false,"tsType":{"name":"boolean"},"description":"Whether or not you want the content to position over the target","defaultValue":{"value":"false","computed":false}},"onPositionChanged":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(position: PositionObject) => void","signature":{"arguments":[{"type":{"name":"intersection","raw":"ElementPosition['style'] & {\n  placement: ElementPosition['placement']\n}","elements":[{"name":"signature","raw":"ElementPosition['style']"},{"name":"signature","type":"object","raw":"{\n  placement: ElementPosition['placement']\n}","signature":{"properties":[{"key":"placement","value":{"name":"union","raw":"ElementPosition['placement']","required":true}}]}}]},"name":"position"}],"return":{"name":"void"}}},"description":"Callback fired when the position changes"},"onPositioned":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(position: PositionObject) => void","signature":{"arguments":[{"type":{"name":"intersection","raw":"ElementPosition['style'] & {\n  placement: ElementPosition['placement']\n}","elements":[{"name":"signature","raw":"ElementPosition['style']"},{"name":"signature","type":"object","raw":"{\n  placement: ElementPosition['placement']\n}","signature":{"properties":[{"key":"placement","value":{"name":"union","raw":"ElementPosition['placement']","required":true}}]}}]},"name":"position"}],"return":{"name":"void"}}},"description":"Callback fired when `<Position />` content has been mounted and is initially positioned"},"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"The content to be positioned","defaultValue":{"value":"null","computed":false}},"containerDisplay":{"required":false,"tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"description":"Set the CSS `display` property on the outermost `<span>` container element"},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a reference to the underlying HTML root element (the target)"}},"category":"components/utilities","relativePath":"packages/ui-position/src/Position/index.tsx","extension":".tsx","srcPath":"packages/ui-position/src/Position/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-position/src/Position/index.tsx","packageName":"@instructure/ui-position","requirePath":"@instructure/ui-position/lib/Position/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-position/src/Position/index.tsx').default","esPath":"@instructure/ui-position/es/Position/index","themePath":"packages/ui-position/src/Position/styles.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-position/src/Position/styles.ts","id":"Position","title":"Position"}