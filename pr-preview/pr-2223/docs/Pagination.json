{"description":"\n### NOTE\n\nPagination is in a state of transition. Its API has been expanded to allow\nas close to zero config usage as possible, without introducing breaking changes to the previous methods.\n\nThe component is under review by the design team and it's possible we'll deprecate te \"old\" API in a\nfollowing version. If you're able to, please use the \"new\" API. Its documentation is on the top of this page.\n\nOne of the biggest improvement is that pagination now can handle large page numbers as well.\n\n### Pagination\n\nThe pagination component provides props to handle most of the pagination use-cases. These following examples are the same as the \"old\" examples in behaviour, but with the \"new\" API\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n\n  return (\n    <Pagination\n      as=\"nav\"\n      margin=\"small\"\n      variant=\"compact\"\n      labelNext=\"Next Page\"\n      labelPrev=\"Previous Page\"\n      currentPage={currentPage}\n      totalPageNumber={9}\n      onPageChange={(nextPage) => setCurrentPage(nextPage)}\n    />\n  )\n}\n\nrender(<Example />)\n```\n\nYou can set any `totalPageNumber`, the component can handle it easily.\\\nFurthermore, you can set `siblingCount`, which indicates how many pages are visible on either side of the `currentPage` and the\n`boundaryCount`, which indicates how many pages are visible in the beginning and end.\\\nAlso, you can set `screenReaderLabelPageButton` to customize what a screenreader will announce when the button receives focus.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n  return (\n    <Pagination\n      as=\"nav\"\n      margin=\"small\"\n      variant=\"compact\"\n      labelNext=\"Next Page\"\n      labelPrev=\"Previous Page\"\n      currentPage={currentPage}\n      totalPageNumber={100000}\n      onPageChange={(nextPage) => setCurrentPage(nextPage)}\n      siblingCount={3}\n      boundaryCount={2}\n      screenReaderLabelPageButton={(currentPage, totalPageNumber) =>\n        `Page ${currentPage} of ${totalPageNumber}`\n      }\n    />\n  )\n}\n\nrender(<Example />)\n```\n\nYou can only display 1000 pages at once.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n  return (\n    <Pagination\n      as=\"nav\"\n      margin=\"small\"\n      variant=\"full\"\n      labelNext=\"Next Page\"\n      labelPrev=\"Previous Page\"\n      currentPage={currentPage}\n      totalPageNumber={100000}\n      onPageChange={(nextPage) => setCurrentPage(nextPage)}\n      siblingCount={3}\n      boundaryCount={2}\n    />\n  )\n}\n\nrender(<Example />)\n```\n\nYou can override the default page rendering with `renderPageIndicator`.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n\n  const pageMap = ['A-G', 'H-J', 'K-M', 'N-Q', 'R-Z']\n\n  return (\n    <Pagination\n      as=\"nav\"\n      margin=\"small\"\n      variant=\"full\"\n      labelNext=\"Next Page\"\n      labelPrev=\"Previous Page\"\n      currentPage={currentPage}\n      totalPageNumber={5}\n      onPageChange={(nextPage) => setCurrentPage(nextPage)}\n      siblingCount={5}\n      boundaryCount={0}\n      renderPageIndicator={(page) => pageMap[page - 1]}\n    />\n  )\n}\n\nrender(<Example />)\n```\n\nThe `variant=\"input\"` prop will render Pagination with a NumberInput and all the arrow buttons.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [currentPage, setCurrentPage] = useState(1)\n\n  return (\n    <Pagination\n      as=\"nav\"\n      margin=\"small\"\n      variant=\"input\"\n      labelNext=\"Next Page\"\n      labelPrev=\"Previous Page\"\n      currentPage={currentPage}\n      totalPageNumber={9}\n      onPageChange={(nextPage) => setCurrentPage(nextPage)}\n    />\n  )\n}\n\nrender(<Example />)\n```\n\n### Legacy examples\n\nThese provide possibly finer, but much more complicated control over the pagination component. They are still supported, but we recommend using the new API.\n\nRenders available pages of content, and reacts to selection of another page.\nExpects array of `Pagination.Page` children. Focus and announcement of page change is\nthe responsibility of your app.\n\nIf there are more than 5 pages, the `compact` variant truncates the page navigation\nto show only the first, last, and pages surrounding the current page. At fewer than\n5 pages, no next/previous arrow buttons will be shown, and all pages will be listed.\n\nProvide an `onClick` to `Pagination.Page` to handle navigation.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { currentPage: 0 }\n  }\n\n  setPage (page) {\n    this.setState({ currentPage: page })\n  }\n\n  render () {\n    const pages = Array.from(Array(9)).map((v, i) => <Pagination.Page\n      key={i}\n      onClick={this.setPage.bind(this, i)}\n      current={i === this.state.currentPage}>\n        {i + 1}\n    </Pagination.Page>)\n\n    return (\n      <Pagination\n        as=\"nav\"\n        margin=\"small\"\n        variant=\"compact\"\n        labelNext=\"Next Page\"\n        labelPrev=\"Previous Page\"\n      >\n        {pages}\n      </Pagination>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\nYou can handle endpoints that have a lot of pages by using a sparse array of children:\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { currentPage: 0 }\n  }\n\n  renderPage(pageIndex) {\n    return (\n      <Pagination.Page\n        key={pageIndex}\n        onClick={() => this.setState({ currentPage: pageIndex })}\n        current={pageIndex === this.state.currentPage}\n      >\n          {pageIndex + 1}\n      </Pagination.Page>\n    )\n  }\n\n  render () {\n    const {currentPage} = this.state\n    const pages = Array(100000)\n    pages[0] = this.renderPage(0)\n    pages[pages.length - 1] = this.renderPage(pages.length - 1)\n    const visiblePageRangeStart = Math.min(pages.length - 4, Math.max(currentPage - 1, 1))\n    const visiblePageRangeEnd = Math.min(currentPage + 4, pages.length - 1)\n    for (let i = visiblePageRangeStart; i < visiblePageRangeEnd; i++) {\n      pages[i] = this.renderPage(i)\n    }\n\n    return (\n      <Pagination\n        as=\"nav\"\n        margin=\"small\"\n        variant=\"compact\"\n        labelNext=\"Next Page\"\n        labelPrev=\"Previous Page\"\n      >\n        {pages}\n      </Pagination>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\nIf you instead provide an href to `Pagination.Page` it will render as a link.\n\n```js\n---\ntype: example\n---\n<Pagination variant=\"full\" label=\"Jump to\">\n  <Pagination.Page href=\"/pages/1\" current>A-G</Pagination.Page>\n  <Pagination.Page href=\"/pages/2\">H-J</Pagination.Page>\n  <Pagination.Page href=\"/pages/3\">K-M</Pagination.Page>\n  <Pagination.Page href=\"/pages/3\">N-Q</Pagination.Page>\n  <Pagination.Page href=\"/pages/3\">R-Z</Pagination.Page>\n</Pagination>\n```\n\nThe `variant=\"input\"` prop will render Pagination with a NumberInput and all the arrow buttons.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { currentPage: 0 }\n  }\n\n  setPage (page) {\n    this.setState({ currentPage: page })\n  }\n\n  render () {\n    const pages = Array.from(Array(9)).map((v, i) => <Pagination.Page\n      key={i}\n      onClick={this.setPage.bind(this, i)}\n      current={i === this.state.currentPage}>\n        {i + 1}\n    </Pagination.Page>)\n\n    return (\n      <Pagination\n        as=\"nav\"\n        margin=\"small\"\n        variant=\"input\"\n        labelFirst=\"First Page\"\n        labelPrev=\"Previous Page\"\n        labelNext=\"Next Page\"\n        labelLast=\"Last Page\"\n      >\n        {pages}\n      </Pagination>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\nThe `withFirstAndLastButton` prop makes the \"Jump to first\" and \"Jump to last\" buttons appear. The `labelFirst` and `labelLast` props set the labels for these buttons.\n\nThe `showDisabledButtons` prop displays the unavailable navigation buttons as disabled instead of hiding them.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      currentPage: 0,\n      withFirstAndLastButton: true,\n      showDisabledButtons: true\n    }\n  }\n\n  setPage (page) {\n    this.setState({ currentPage: page })\n  }\n\n  render () {\n    const pages = Array.from(Array(9)).map((v, i) => <Pagination.Page\n      key={i}\n      onClick={this.setPage.bind(this, i)}\n      current={i === this.state.currentPage}>\n        {i + 1}\n    </Pagination.Page>)\n\n    return (\n      <div>\n        <FormFieldGroup description=\"Pagination Settings\">\n          <Checkbox\n            checked={this.state.withFirstAndLastButton}\n            label=\"With First and Last buttons\"\n            onChange={() => {\n              this.setState({ withFirstAndLastButton: !this.state.withFirstAndLastButton })\n            }}\n          />\n          <Checkbox\n            checked={this.state.showDisabledButtons}\n            label=\"Show disabled buttons\"\n            onChange={() => {\n              this.setState({ showDisabledButtons: !this.state.showDisabledButtons })\n            }}\n          />\n        </FormFieldGroup>\n\n        <Pagination\n          as=\"nav\"\n          margin=\"large small small\"\n          variant=\"compact\"\n          labelNext=\"Next Page\"\n          labelPrev=\"Previous Page\"\n          labelFirst=\"First Page\"\n          labelLast=\"Last Page\"\n          withFirstAndLastButton={ this.state.withFirstAndLastButton }\n          showDisabledButtons={ this.state.showDisabledButtons }\n        >\n          {pages}\n        </Pagination>\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use for splitting up content or data into several pages</Figure.Item>\n    <Figure.Item>Use if there are more than 20 items displayed in one view</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Ensure page links and the next/previous buttons are labeled correctly for screen readers</Figure.Item>\n    <Figure.Item>Use `screenReaderLabelPageButton` or `screenReaderLabelNumberInput` for better screenreader experience</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Pagination","methods":[{"name":"_root","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"inputMode","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"childPages","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"withFirstAndLastButton","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"showDisabledButtons","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focusElementAfterUpdate","docblock":null,"modifiers":[],"params":[{"name":"snapshot","optional":false,"type":{"name":"signature","type":"object","raw":"{\n  lastFocusedButton?: HTMLButtonElement\n}","signature":{"properties":[{"key":"lastFocusedButton","value":{"name":"HTMLButtonElement","required":false}}]},"alias":"PaginationSnapshot"}}],"returns":null},{"name":"compactView","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"transferDisabledPropToChildren","docblock":null,"modifiers":[],"params":[{"name":"children","optional":false,"type":{"name":"intersection['children']","raw":"PaginationProps['children']"}}],"returns":null},{"name":"handleElementRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"handleInputRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]}}],"returns":null},{"name":"renderLabel","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderDefaultPageInput","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderPageInput","docblock":null,"modifiers":[],"params":[{"name":"currentPageIndex","optional":false,"type":{"name":"number"}}],"returns":null},{"name":"handleInputChange","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"union","raw":"| React.KeyboardEvent<HTMLInputElement>\n| React.MouseEvent<HTMLButtonElement>\n| React.FocusEvent<HTMLInputElement>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLButtonElement>","elements":[{"name":"HTMLButtonElement"}]},{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]}]}},{"name":"pageIndex","optional":false,"type":{"name":"number"}}],"returns":null},{"name":"handleNavigation","docblock":null,"modifiers":[],"params":[{"name":"nextIndex","optional":false,"type":{"name":"number"}},{"name":"previousIndex","optional":false,"type":{"name":"number"}}],"returns":null},{"name":"renderPagesInInterval","docblock":null,"modifiers":[],"params":[{"name":"from","optional":false,"type":{"name":"number"}},{"name":"to","optional":false,"type":{"name":"number"}},{"name":"currentPage","optional":false,"type":{"name":"number"}}],"returns":null},{"name":"renderDefaultPages","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderPages","docblock":null,"modifiers":[],"params":[{"name":"currentPageIndex","optional":false,"type":{"name":"number"}}],"returns":null},{"name":"getArrowVariant","docblock":null,"modifiers":[],"params":[{"name":"direction","optional":false,"type":{"name":"union","raw":"'first' | 'prev' | 'next' | 'last'","elements":[{"name":"literal","value":"'first'"},{"name":"literal","value":"'prev'"},{"name":"literal","value":"'next'"},{"name":"literal","value":"'last'"}],"alias":"PaginationArrowDirections"}},{"name":"currentPageIndex","optional":false,"type":{"name":"number"}},{"name":"pagesCount","optional":false,"type":{"name":"number"}}],"returns":{"type":{"name":"signature","type":"object","raw":"{\n  pageIndex: number\n  label: string\n  shouldEnableIcon: boolean\n  handleButtonRef: (el: Element | null) => void\n}","signature":{"properties":[{"key":"pageIndex","value":{"name":"number","required":true}},{"key":"label","value":{"name":"string","required":true}},{"key":"shouldEnableIcon","value":{"name":"boolean","required":true}},{"key":"handleButtonRef","value":{"name":"signature","type":"function","raw":"(el: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":true}}]}}}},{"name":"renderDefaultArrowButton","docblock":null,"modifiers":[],"params":[{"name":"direction","optional":false,"type":{"name":"union","raw":"'first' | 'prev' | 'next' | 'last'","elements":[{"name":"literal","value":"'first'"},{"name":"literal","value":"'prev'"},{"name":"literal","value":"'next'"},{"name":"literal","value":"'last'"}],"alias":"PaginationArrowDirections"}}],"returns":null},{"name":"renderArrowButton","docblock":null,"modifiers":[],"params":[{"name":"direction","optional":false,"type":{"name":"union","raw":"'first' | 'prev' | 'next' | 'last'","elements":[{"name":"literal","value":"'first'"},{"name":"literal","value":"'prev'"},{"name":"literal","value":"'next'"},{"name":"literal","value":"'last'"}],"alias":"PaginationArrowDirections"}},{"name":"currentPageIndex","optional":false,"type":{"name":"number"}}],"returns":null},{"name":"handleOnMouseEnter","docblock":null,"modifiers":[],"params":[{"name":"page","optional":false,"type":{"name":"number"}}],"returns":null}],"props":{"children":{"required":false,"tsType":{"name":"union","raw":"ChildPage | ChildPage[]","elements":[{"name":"ReactReactElement","raw":"React.ReactElement<PaginationPageProps>","elements":[{"name":"intersection","raw":"PickPropsWithExceptions<BaseButtonProps, 'aria-current' | 'elementRef'> &\nPaginationPageOwnProps &\nOtherHTMLAttributes<PaginationPageOwnProps>","elements":[{"name":"Omit","elements":[{"name":"BaseButtonProps"},{"name":"union","raw":"'aria-current' | 'elementRef'","elements":[{"name":"literal","value":"'aria-current'"},{"name":"literal","value":"'elementRef'"}]}],"raw":"Omit<TargetProps, ExcludedProps>"},{"name":"signature","type":"object","raw":"{\n  /**\n   * Content to render as page selection\n   */\n  children: React.ReactNode\n  /**\n   * Whether the page is currently displayed\n   */\n  current?: boolean\n  /**\n   * Callback fired when the `Pagination.Page` is clicked.\n   */\n  onClick?: (\n    event:\n      | React.KeyboardEvent<HTMLInputElement>\n      | React.MouseEvent<HTMLButtonElement>\n      | React.FocusEvent<HTMLInputElement>\n  ) => void\n  /**\n   * The text screenreaders should say when this button is in focus (sets the\n   * `aria-label` attribute).\n   * If left undefined (default) SRs will announce text in the child node(s).\n   */\n  screenReaderLabel?: string\n}","signature":{"properties":[{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true},"description":"Content to render as page selection"},{"key":"current","value":{"name":"boolean","required":false},"description":"Whether the page is currently displayed"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event:\n    | React.KeyboardEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLButtonElement>\n    | React.FocusEvent<HTMLInputElement>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| React.KeyboardEvent<HTMLInputElement>\n| React.MouseEvent<HTMLButtonElement>\n| React.FocusEvent<HTMLInputElement>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLButtonElement>","elements":[{"name":"HTMLButtonElement"}]},{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"Callback fired when the `Pagination.Page` is clicked."},{"key":"screenReaderLabel","value":{"name":"string","required":false},"description":"The text screenreaders should say when this button is in focus (sets the\n`aria-label` attribute).\nIf left undefined (default) SRs will announce text in the child node(s)."}]}},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Content to render as page selection\n   */\n  children: React.ReactNode\n  /**\n   * Whether the page is currently displayed\n   */\n  current?: boolean\n  /**\n   * Callback fired when the `Pagination.Page` is clicked.\n   */\n  onClick?: (\n    event:\n      | React.KeyboardEvent<HTMLInputElement>\n      | React.MouseEvent<HTMLButtonElement>\n      | React.FocusEvent<HTMLInputElement>\n  ) => void\n  /**\n   * The text screenreaders should say when this button is in focus (sets the\n   * `aria-label` attribute).\n   * If left undefined (default) SRs will announce text in the child node(s).\n   */\n  screenReaderLabel?: string\n}","signature":{"properties":[{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true},"description":"Content to render as page selection"},{"key":"current","value":{"name":"boolean","required":false},"description":"Whether the page is currently displayed"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event:\n    | React.KeyboardEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLButtonElement>\n    | React.FocusEvent<HTMLInputElement>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| React.KeyboardEvent<HTMLInputElement>\n| React.MouseEvent<HTMLButtonElement>\n| React.FocusEvent<HTMLInputElement>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLButtonElement>","elements":[{"name":"HTMLButtonElement"}]},{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"Callback fired when the `Pagination.Page` is clicked."},{"key":"screenReaderLabel","value":{"name":"string","required":false},"description":"The text screenreaders should say when this button is in focus (sets the\n`aria-label` attribute).\nIf left undefined (default) SRs will announce text in the child node(s)."}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]}]},{"name":"Array","elements":[{"name":"ReactReactElement","raw":"React.ReactElement<PaginationPageProps>","elements":[{"name":"intersection","raw":"PickPropsWithExceptions<BaseButtonProps, 'aria-current' | 'elementRef'> &\nPaginationPageOwnProps &\nOtherHTMLAttributes<PaginationPageOwnProps>","elements":[{"name":"Omit","elements":[{"name":"BaseButtonProps"},{"name":"union","raw":"'aria-current' | 'elementRef'","elements":[{"name":"literal","value":"'aria-current'"},{"name":"literal","value":"'elementRef'"}]}],"raw":"Omit<TargetProps, ExcludedProps>"},{"name":"signature","type":"object","raw":"{\n  /**\n   * Content to render as page selection\n   */\n  children: React.ReactNode\n  /**\n   * Whether the page is currently displayed\n   */\n  current?: boolean\n  /**\n   * Callback fired when the `Pagination.Page` is clicked.\n   */\n  onClick?: (\n    event:\n      | React.KeyboardEvent<HTMLInputElement>\n      | React.MouseEvent<HTMLButtonElement>\n      | React.FocusEvent<HTMLInputElement>\n  ) => void\n  /**\n   * The text screenreaders should say when this button is in focus (sets the\n   * `aria-label` attribute).\n   * If left undefined (default) SRs will announce text in the child node(s).\n   */\n  screenReaderLabel?: string\n}","signature":{"properties":[{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true},"description":"Content to render as page selection"},{"key":"current","value":{"name":"boolean","required":false},"description":"Whether the page is currently displayed"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event:\n    | React.KeyboardEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLButtonElement>\n    | React.FocusEvent<HTMLInputElement>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| React.KeyboardEvent<HTMLInputElement>\n| React.MouseEvent<HTMLButtonElement>\n| React.FocusEvent<HTMLInputElement>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLButtonElement>","elements":[{"name":"HTMLButtonElement"}]},{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"Callback fired when the `Pagination.Page` is clicked."},{"key":"screenReaderLabel","value":{"name":"string","required":false},"description":"The text screenreaders should say when this button is in focus (sets the\n`aria-label` attribute).\nIf left undefined (default) SRs will announce text in the child node(s)."}]}},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Content to render as page selection\n   */\n  children: React.ReactNode\n  /**\n   * Whether the page is currently displayed\n   */\n  current?: boolean\n  /**\n   * Callback fired when the `Pagination.Page` is clicked.\n   */\n  onClick?: (\n    event:\n      | React.KeyboardEvent<HTMLInputElement>\n      | React.MouseEvent<HTMLButtonElement>\n      | React.FocusEvent<HTMLInputElement>\n  ) => void\n  /**\n   * The text screenreaders should say when this button is in focus (sets the\n   * `aria-label` attribute).\n   * If left undefined (default) SRs will announce text in the child node(s).\n   */\n  screenReaderLabel?: string\n}","signature":{"properties":[{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true},"description":"Content to render as page selection"},{"key":"current","value":{"name":"boolean","required":false},"description":"Whether the page is currently displayed"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event:\n    | React.KeyboardEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLButtonElement>\n    | React.FocusEvent<HTMLInputElement>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| React.KeyboardEvent<HTMLInputElement>\n| React.MouseEvent<HTMLButtonElement>\n| React.FocusEvent<HTMLInputElement>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLButtonElement>","elements":[{"name":"HTMLButtonElement"}]},{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"Callback fired when the `Pagination.Page` is clicked."},{"key":"screenReaderLabel","value":{"name":"string","required":false},"description":"The text screenreaders should say when this button is in focus (sets the\n`aria-label` attribute).\nIf left undefined (default) SRs will announce text in the child node(s)."}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]}]}],"raw":"ChildPage[]"}]},"description":"children of type Pagination.Page"},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":"Disables interaction with all pages","defaultValue":{"value":"false","computed":false}},"withFirstAndLastButton":{"required":false,"tsType":{"name":"boolean"},"description":"Displays \"jump to first\" and \"jump to last\" buttons. Always turned on with `input` variant.","defaultValue":{"value":"false","computed":false}},"showDisabledButtons":{"required":false,"tsType":{"name":"boolean"},"description":"Displays the unavailable navigation buttons as disabled instead of hiding them. Always turned on with `input` variant.","defaultValue":{"value":"false","computed":false}},"label":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"Visible label for component"},"labelNext":{"required":false,"tsType":{"name":"string"},"description":"Accessible label for next button"},"labelPrev":{"required":false,"tsType":{"name":"string"},"description":"Accessible label for previous button"},"labelFirst":{"required":false,"tsType":{"name":"string"},"description":"Accessible label for \"jump to first\" button"},"labelLast":{"required":false,"tsType":{"name":"string"},"description":"Accessible label for \"jump to last\" button"},"labelNumberInput":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(totalPageNumber: number) => React.ReactNode","signature":{"arguments":[{"type":{"name":"number"},"name":"totalPageNumber"}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}},"description":"Label for number input\n\n(__only__ for `input` variant)","defaultValue":{"value":"(numberOfPages: number) => `of ${numberOfPages}`","computed":false}},"screenReaderLabelNumberInput":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  currentPage: number,\n  totalPageNumber: number\n) => string","signature":{"arguments":[{"type":{"name":"number"},"name":"currentPage"},{"type":{"name":"number"},"name":"totalPageNumber"}],"return":{"name":"string"}}},"description":"ScreenReaderLabel for number input\n\n(__only__ for `input` variant)","defaultValue":{"value":"(\n  currentPage: number,\n  numberOfPages: number\n) => `Select page (${currentPage} of ${numberOfPages})`","computed":false}},"screenReaderLabelPageButton":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  currentPage: number,\n  totalPageNumber: number\n) => string","signature":{"arguments":[{"type":{"name":"number"},"name":"currentPage"},{"type":{"name":"number"},"name":"totalPageNumber"}],"return":{"name":"string"}}},"description":"ScreenReaderLabel for page number buttons\n\n(__only__ for `full` and `compact variants)"},"variant":{"required":false,"tsType":{"name":"union","raw":"'full' | 'compact' | 'input'","elements":[{"name":"literal","value":"'full'"},{"name":"literal","value":"'compact'"},{"name":"literal","value":"'input'"}]},"description":"The compact variant truncates the page navigation to show only the first,\nlast, and pages immediately surrounding the current page. Fewer than 5 pages,\nno next/previous arrow buttons will be shown, and all pages will be listed","defaultValue":{"value":"'full'","computed":false}},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Spacing token values can be found here: [Spacing Tokens](https://instructure.design/#layout-spacing/%23Tokens)\n\nApply these values via familiar CSS-like shorthand. For example: `margin=\"space8 0 space12\"`.","defaultValue":{"value":"'space8'","computed":false}},"as":{"required":false,"tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"description":"the element type to render as","defaultValue":{"value":"'div'","computed":false}},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"provides a reference to the underlying html root element"},"inputRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(inputElement: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"inputElement"}],"return":{"name":"void"}}},"description":"provides a reference to the html input element\n\n(__only__ for `input` variant)"},"shouldHandleFocus":{"required":false,"tsType":{"name":"boolean"},"description":"For accessibility, Pagination sets focus on the first or last Pagination.Pages, respectively, when the Previous or Next arrow buttons are removed from the DOM.\nSet this property to `false` to prevent this behavior.","defaultValue":{"value":"true","computed":false}},"totalPageNumber":{"required":false,"tsType":{"name":"number"},"description":"The total number of pages","defaultValue":{"value":"0","computed":false}},"currentPage":{"required":false,"tsType":{"name":"number"},"description":"The current page number","defaultValue":{"value":"1","computed":false}},"siblingCount":{"required":false,"tsType":{"name":"number"},"description":"The number of pages to display before and after the current page","defaultValue":{"value":"1","computed":false}},"boundaryCount":{"required":false,"tsType":{"name":"number"},"description":"The number of always visible pages at the beginning and end\nof the pagination component","defaultValue":{"value":"1","computed":false}},"onPageChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(next: number, prev: number) => void","signature":{"arguments":[{"type":{"name":"number"},"name":"next"},{"type":{"name":"number"},"name":"prev"}],"return":{"name":"void"}}},"description":"Called when page number is changed"},"onMouseEnter":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(page: number) => void","signature":{"arguments":[{"type":{"name":"number"},"name":"page"}],"return":{"name":"void"}}},"description":"Called when a page is hovered."},"renderPageIndicator":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  pageIndex: number,\n  currentPage: number\n) => React.ReactNode","signature":{"arguments":[{"type":{"name":"number"},"name":"pageIndex"},{"type":{"name":"number"},"name":"currentPage"}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}},"description":"Renders the visible pages","defaultValue":{"value":"(page: number) => page","computed":false}},"ellipsis":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"The ellipsis\n(e.g. \"...\")","defaultValue":{"value":"'…'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-pagination/src/Pagination/index.tsx","extension":".tsx","srcPath":"packages/ui-pagination/src/Pagination/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-pagination/src/Pagination/index.tsx","packageName":"@instructure/ui-pagination","requirePath":"@instructure/ui-pagination/lib/Pagination/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-pagination/src/Pagination/index.tsx').default","esPath":"@instructure/ui-pagination/es/Pagination/index","themePath":"packages/ui-pagination/src/Pagination/styles.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-pagination/src/Pagination/styles.ts","id":"Pagination","title":"Pagination"}