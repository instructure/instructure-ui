{"description":"\nA top-level `SideNavBar` component.\n\n```js\n---\ntype: example\n---\n  <div style={{height: '35rem'}}>\n    <SideNavBar\n      label=\"Main navigation\"\n      toggleLabel={{\n        expandedLabel: 'Minimize SideNavBar',\n        minimizedLabel: 'Expand SideNavBar'\n      }}\n    >\n      <SideNavBar.Item\n        icon={<IconUserLine />}\n        label={<ScreenReaderContent>Home</ScreenReaderContent>}\n        href=\"#\"\n        themeOverride={{\n          backgroundColor: 'red',\n          hoverBackgroundColor: 'blue'\n        }}\n      />\n      <SideNavBar.Item\n        icon={<Avatar name=\"Ziggy Marley\" size=\"x-small\" src={avatarSquare} showBorder=\"always\"/>}\n        label=\"Account\"\n        onClick={() => { this.loadSubNav('account') }}\n      />\n      <SideNavBar.Item\n        icon={<IconAdminLine />}\n        label=\"Admin\"\n        href=\"#\"\n      />\n      <SideNavBar.Item selected\n        icon={<IconDashboardLine />}\n        label=\"Dashboard\"\n        href=\"#\"\n      />\n      <SideNavBar.Item\n        icon={<Badge count={99}\n                     formatOutput={function (formattedCount) {\n                       return (\n                         <AccessibleContent alt={`You have ${formattedCount} unread messages.`}>\n                           {formattedCount}\n                         </AccessibleContent>\n                       )\n                     }}\n        ><IconInboxLine /></Badge>}\n        label=\"Inbox\"\n        href=\"#\"\n      />\n      <SideNavBar.Item\n        icon={<IconUserLine />}\n        label=\"Supercalifragilistic\"\n        href=\"#\"\n      />\n    </SideNavBar>\n  </div>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use for top-level SideNavBar</Figure.Item>\n    <Figure.Item>Remember that SideNavBar can be themed by the institution</Figure.Item>\n    <Figure.Item>When using an <Link href=\"/#Avatar\">Avatar</Link> in the SideNavBar it should have the <code>showBorder=\"always\"</code> prop</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Add LTI links to the main area</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"SideNavBar","methods":[{"name":"minimized","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isControlled","docblock":null,"modifiers":[],"params":[{"name":"props","optional":true,"type":null}],"returns":null},{"name":"handleNavToggle","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent","alias":"React.SyntheticEvent"}}],"returns":null},{"name":"renderChildren","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"toggleMessage","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"minimized":{"required":false,"tsType":{"name":"boolean"},"description":"When minimized is set to true, the `<SideNavBar />` shows icons only while the text becomes a tooltip. When it is set to false, the `<SideNavBar />` shows text in addition to the icons"},"defaultMinimized":{"required":false,"tsType":{"name":"boolean"},"description":"Whether the `<SideNavBar />` is initially minimized (uncontrolled)","defaultValue":{"value":"false","computed":false}},"onMinimized":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent, minimized: boolean) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"boolean"},"name":"minimized"}],"return":{"name":"void"}}},"description":""},"label":{"required":true,"tsType":{"name":"string"},"description":"Screen reader label for the main SideNavBar"},"toggleLabel":{"required":true,"tsType":{"name":"signature","type":"object","raw":"{\n  expandedLabel?: string\n  minimizedLabel?: string\n}","signature":{"properties":[{"key":"expandedLabel","value":{"name":"string","required":false}},{"key":"minimizedLabel","value":{"name":"string","required":false}}]}},"description":"Screen reader label for the toggle button expanded/minimized state"},"href":{"required":false,"tsType":{"name":"string"},"description":"If the `<SideNavBar.Item>` goes to a new page, pass an href"},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"event"}],"return":{"name":"void"}}},"description":"If the `<SideNavBar.Item>` does not go to a new page pass an onClick","defaultValue":{"value":"function (_e: React.MouseEvent) {}","computed":false}},"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"children of type SideNavBar.Item","defaultValue":{"value":"null","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-side-nav-bar/src/SideNavBar/index.tsx","extension":".tsx","srcPath":"packages/ui-side-nav-bar/src/SideNavBar/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-side-nav-bar/src/SideNavBar/index.tsx","packageName":"@instructure/ui-side-nav-bar","requirePath":"@instructure/ui-side-nav-bar/lib/SideNavBar/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-side-nav-bar/src/SideNavBar/index.tsx').default","esPath":"@instructure/ui-side-nav-bar/es/SideNavBar/index","themePath":"packages/ui-side-nav-bar/src/SideNavBar/styles.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-side-nav-bar/src/SideNavBar/styles.ts","id":"SideNavBar","title":"SideNavBar"}