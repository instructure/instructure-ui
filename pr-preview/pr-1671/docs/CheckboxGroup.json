{"description":"\nA `<CheckboxGroup/>` is a group of [Checkbox](#Checkbox) components that share the same name. You can\nset an array `value` for the entire group and it will handle setting the `checked` and `name` props for you.\nThe Checkbox components can be rendered vertically or horizontally using the `layout` property.\n\n```js\n---\ntype: example\n---\n<FormFieldGroup description={<ScreenReaderContent>CheckboxGroup examples</ScreenReaderContent>}>\n  <CheckboxGroup name=\"sports\"\n    onChange={function (value) { console.log(value) }}\n    defaultValue={['football', 'volleyball']}\n    description=\"Select your favorite sports\"\n  >\n    <Checkbox label=\"Football\" value=\"football\" />\n    <Checkbox label=\"Basketball\" value=\"basketball\" />\n    <Checkbox label=\"Volleyball\" value=\"volleyball\" />\n    <Checkbox label=\"Other\" value=\"other\" />\n  </CheckboxGroup>\n  <CheckboxGroup name=\"sports\" size=\"small\"\n    layout=\"columns\"\n    onChange={function (value) { console.log(value) }}\n    defaultValue={['football', 'volleyball']}\n    description=\"Select your favorite sports\"\n  >\n    <Checkbox label=\"Football\" value=\"football\" />\n    <Checkbox label=\"Basketball\" value=\"basketball\" />\n    <Checkbox label=\"Volleyball\" value=\"volleyball\" />\n    <Checkbox label=\"Other\" value=\"other\" />\n  </CheckboxGroup>\n</FormFieldGroup>\n```\n\nThe `toggle` variant with `layout` prop set to `inline` and an error message:\n\n```js\n---\ntype: example\n---\n<CheckboxGroup\n  name=\"sports2\"\n  layout=\"inline\"\n  messages={[\n    { text: 'Invalid name', type: 'error' }\n  ]}\n  onChange={function (value) { console.log(value) }}\n  defaultValue={['soccer', 'volleyball']}\n  description=\"I wish to receive score alerts for\"\n>\n  <Checkbox label=\"Football\" value=\"football\" variant=\"toggle\" />\n  <Checkbox label=\"Basketball\" value=\"basketball\" variant=\"toggle\" />\n  <Checkbox label=\"Volleyball\" value=\"volleyball\" variant=\"toggle\" />\n  <Checkbox label=\"Soccer\" value=\"soccer\" variant=\"toggle\" />\n</CheckboxGroup>\n```\n\nYou can set disable/readonly on a group and it works much the same way as a RadioInputGroup.\n\nA `disabled` CheckboxGroup:\n\n```js\n---\ntype: example\n---\n<CheckboxGroup\n  name=\"sports4\"\n  onChange={function (value) { console.log(value) }}\n  defaultValue={['soccer', 'volleyball']}\n  description=\"I wish to receive score alerts for\"\n  disabled\n>\n  <Checkbox label=\"Football\" value=\"football\" variant=\"toggle\" />\n  <Checkbox label=\"Basketball\" value=\"basketball\" variant=\"toggle\" />\n  <Checkbox label=\"Volleyball\" value=\"volleyball\" variant=\"toggle\" />\n  <Checkbox label=\"Soccer\" value=\"soccer\" variant=\"toggle\" />\n</CheckboxGroup>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Align to the left side of the label</Figure.Item>\n    <Figure.Item>Use when multiple selections are allowed</Figure.Item>\n    <Figure.Item>Use to save space from toggles</Figure.Item>\n    <Figure.Item>Stack vertically if there is more than two options to select</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Run more than two checkboxes horizontally</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Ensure CheckboxGroups are labeled correctly so screen readers announce what the group of checkboxes are used for</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"CheckboxGroup","methods":[],"props":{"name":{"type":{"name":"string"},"required":true,"description":"","tsType":{"name":"string"}},"description":{"type":{"name":"node"},"required":true,"description":"","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"defaultValue":{"type":{"name":"array"},"required":false,"description":"value to set on initial render","tsType":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number)[]"}},"value":{"type":{"name":"custom","raw":"controllable(PropTypes.array)"},"required":false,"description":"the selected values (must be accompanied by an `onChange` prop)","tsType":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number)[]"}},"onChange":{"type":{"name":"func"},"required":false,"description":"when used with the `value` prop, the component will not control its own state","tsType":{"name":"signature","type":"function","raw":"(value: (string | number)[]) => void","signature":{"arguments":[{"type":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number)[]"},"name":"value"}],"return":{"name":"void"}}}},"disabled":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"readOnly":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"object with shape: `{\n    text: PropTypes.node,\n    type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])\n      }`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([Checkbox])"},"required":false,"description":"children of type `Checkbox`","tsType":{"name":"Array","elements":[{"name":"ReactComponentElement","raw":"React.ComponentElement<CheckboxProps, Checkbox>","elements":[{"name":"intersection","raw":"CheckboxOwnProps &\nWithStyleProps<CheckboxFacadeTheme | ToggleFacadeTheme, CheckboxStyle> &\nOtherHTMLAttributes<CheckboxOwnProps> &\nWithDeterministicIdProps","elements":[{"name":"signature","type":"object","raw":"{\n  label: React.ReactNode\n  id?: string\n  value?: string | number\n  /**\n   * Array of objects with shape: `{\n   *   text: ReactNode,\n   *   type: One of: ['error', 'hint', 'success', 'screenreader-only']\n   *   }`\n   */\n  messages?: FormMessage[]\n  /* whether to set the input to checked or not on initial render */\n  defaultChecked?: boolean\n  /**\n   * whether the input is checked or not (must be accompanied by an `onChange` prop)\n   */\n  checked?: boolean // TODO: controllable(PropTypes.bool, 'onChange', 'defaultChecked')\n  /**\n   * when used with the `checked` prop, the component will not control its own state\n   */\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void\n  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void\n  onMouseOver?: (e: React.MouseEvent<HTMLInputElement>) => void\n  onMouseOut?: (e: React.MouseEvent<HTMLInputElement>) => void\n  /**\n   * Whether or not to disable the checkbox\n   */\n  disabled?: boolean\n  /**\n   * Works just like disabled but keeps the same styles as if it were active\n   */\n  readOnly?: boolean\n  /**\n   * Visual state showing that child checkboxes are a combination of checked and unchecked\n   */\n  indeterminate?: boolean\n  size?: 'small' | 'medium' | 'large'\n  variant?: 'simple' | 'toggle'\n  inline?: boolean\n  labelPlacement?: 'top' | 'start' | 'end'\n}","signature":{"properties":[{"key":"label","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true}},{"key":"id","value":{"name":"string","required":false}},{"key":"value","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"messages","value":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]","required":false},"description":"Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n  }`"},{"key":"defaultChecked","value":{"name":"boolean","required":false}},{"key":"checked","value":{"name":"boolean","required":false},"description":"whether the input is checked or not (must be accompanied by an `onChange` prop)"},{"key":"onChange","value":{"name":"signature","type":"function","raw":"(e: React.ChangeEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false},"description":"when used with the `checked` prop, the component will not control its own state"},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(e: React.KeyboardEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onFocus","value":{"name":"signature","type":"function","raw":"(e: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onBlur","value":{"name":"signature","type":"function","raw":"(e: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onMouseOver","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onMouseOut","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"disabled","value":{"name":"boolean","required":false},"description":"Whether or not to disable the checkbox"},{"key":"readOnly","value":{"name":"boolean","required":false},"description":"Works just like disabled but keeps the same styles as if it were active"},{"key":"indeterminate","value":{"name":"boolean","required":false},"description":"Visual state showing that child checkboxes are a combination of checked and unchecked"},{"key":"size","value":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}],"required":false}},{"key":"variant","value":{"name":"union","raw":"'simple' | 'toggle'","elements":[{"name":"literal","value":"'simple'"},{"name":"literal","value":"'toggle'"}],"required":false}},{"key":"inline","value":{"name":"boolean","required":false}},{"key":"labelPlacement","value":{"name":"union","raw":"'top' | 'start' | 'end'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"}],"required":false}}]}},{"name":"WithStyleProps","elements":[{"name":"union","raw":"CheckboxFacadeTheme | ToggleFacadeTheme","elements":[{"name":"signature","type":"object","raw":"{\n  color: Colors['contrasts']['white1010']\n  borderWidth: Border['widthSmall']\n  borderColor: Colors['contrasts']['grey1214']\n  borderRadius: Border['radiusMedium']\n  background: Colors['contrasts']['white1010']\n  marginRight: Spacing['xSmall']\n  padding: Spacing['xxxSmall']\n  checkedBackground: Colors['contrasts']['grey125125']\n  checkedBorderColor: Colors['contrasts']['grey125125']\n  hoverBorderColor: Colors['contrasts']['grey125125']\n  focusBorderColor: Colors['contrasts']['blue4570']\n  focusBorderWidth: Border['widthMedium']\n  focusBorderStyle: Border['style']\n  labelColor: Colors['contrasts']['grey125125']\n  checkedLabelColor: Colors['contrasts']['grey125125']\n  labelFontFamily: Typography['fontFamily']\n  labelFontWeight: Typography['fontWeightNormal']\n  labelLineHeight: Typography['lineHeightCondensed']\n  facadeSizeSmall: string\n  facadeSizeMedium: string\n  facadeSizeLarge: string\n  labelFontSizeSmall: Typography['fontSizeSmall']\n  labelFontSizeMedium: Typography['fontSizeMedium']\n  labelFontSizeLarge: Typography['fontSizeLarge']\n  iconSizeSmall: string\n  iconSizeMedium: string\n  iconSizeLarge: string\n}","signature":{"properties":[{"key":"color","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"borderWidth","value":{"name":"union","raw":"Border['widthSmall']","required":true}},{"key":"borderColor","value":{"name":"signature['grey1214']","raw":"Colors['contrasts']['grey1214']","required":true}},{"key":"borderRadius","value":{"name":"union","raw":"Border['radiusMedium']","required":true}},{"key":"background","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"marginRight","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"padding","value":{"name":"union","raw":"Spacing['xxxSmall']","required":true}},{"key":"checkedBackground","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"checkedBorderColor","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"hoverBorderColor","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"focusBorderColor","value":{"name":"signature['blue4570']","raw":"Colors['contrasts']['blue4570']","required":true}},{"key":"focusBorderWidth","value":{"name":"union","raw":"Border['widthMedium']","required":true}},{"key":"focusBorderStyle","value":{"name":"string","raw":"Border['style']","required":true}},{"key":"labelColor","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"checkedLabelColor","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"labelFontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"labelFontWeight","value":{"name":"number","raw":"Typography['fontWeightNormal']","required":true}},{"key":"labelLineHeight","value":{"name":"union","raw":"Typography['lineHeightCondensed']","required":true}},{"key":"facadeSizeSmall","value":{"name":"string","required":true}},{"key":"facadeSizeMedium","value":{"name":"string","required":true}},{"key":"facadeSizeLarge","value":{"name":"string","required":true}},{"key":"labelFontSizeSmall","value":{"name":"union","raw":"Typography['fontSizeSmall']","required":true}},{"key":"labelFontSizeMedium","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"labelFontSizeLarge","value":{"name":"union","raw":"Typography['fontSizeLarge']","required":true}},{"key":"iconSizeSmall","value":{"name":"string","required":true}},{"key":"iconSizeMedium","value":{"name":"string","required":true}},{"key":"iconSizeLarge","value":{"name":"string","required":true}}]}},{"name":"signature","type":"object","raw":"{\n  color: Colors['contrasts']['white1010']\n  background: Colors['contrasts']['grey1111']\n  borderColor: Colors['contrasts']['grey1214']\n  borderWidth: Border['widthMedium']\n  borderRadius: string\n  marginEnd: Spacing['small']\n  marginStart: Spacing['small']\n  marginVertical: Spacing['xSmall']\n  checkedBackground: Colors['contrasts']['green4570']\n  uncheckedIconColor: Colors['contrasts']['grey125125']\n  checkedIconColor: Colors['contrasts']['green4570']\n  focusOutlineColor: Colors['contrasts']['blue4570']\n  focusBorderWidth: Border['widthMedium']\n  focusBorderStyle: Border['style']\n  toggleBackground: Colors['contrasts']['white1010']\n  toggleShadow: Shadows['depth1']\n  toggleSize: Forms['inputHeightSmall']\n  labelColor: Colors['contrasts']['grey125125']\n  labelFontFamily: Typography['fontFamily']\n  labelFontWeight: Typography['fontWeightNormal']\n  labelLineHeight: Typography['lineHeightCondensed']\n  labelFontSizeSmall: Typography['fontSizeSmall']\n  labelFontSizeMedium: Typography['fontSizeMedium']\n  labelFontSizeLarge: Typography['fontSizeLarge']\n}","signature":{"properties":[{"key":"color","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"background","value":{"name":"signature['grey1111']","raw":"Colors['contrasts']['grey1111']","required":true}},{"key":"borderColor","value":{"name":"signature['grey1214']","raw":"Colors['contrasts']['grey1214']","required":true}},{"key":"borderWidth","value":{"name":"union","raw":"Border['widthMedium']","required":true}},{"key":"borderRadius","value":{"name":"string","required":true}},{"key":"marginEnd","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"marginStart","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"marginVertical","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"checkedBackground","value":{"name":"signature['green4570']","raw":"Colors['contrasts']['green4570']","required":true}},{"key":"uncheckedIconColor","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"checkedIconColor","value":{"name":"signature['green4570']","raw":"Colors['contrasts']['green4570']","required":true}},{"key":"focusOutlineColor","value":{"name":"signature['blue4570']","raw":"Colors['contrasts']['blue4570']","required":true}},{"key":"focusBorderWidth","value":{"name":"union","raw":"Border['widthMedium']","required":true}},{"key":"focusBorderStyle","value":{"name":"string","raw":"Border['style']","required":true}},{"key":"toggleBackground","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"toggleShadow","value":{"name":"string","raw":"Shadows['depth1']","required":true}},{"key":"toggleSize","value":{"name":"string","raw":"Forms['inputHeightSmall']","required":true}},{"key":"labelColor","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"labelFontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"labelFontWeight","value":{"name":"number","raw":"Typography['fontWeightNormal']","required":true}},{"key":"labelLineHeight","value":{"name":"union","raw":"Typography['lineHeightCondensed']","required":true}},{"key":"labelFontSizeSmall","value":{"name":"union","raw":"Typography['fontSizeSmall']","required":true}},{"key":"labelFontSizeMedium","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"labelFontSizeLarge","value":{"name":"union","raw":"Typography['fontSizeLarge']","required":true}}]}}]},{"name":"ComponentStyle","elements":[{"name":"union","raw":"'checkbox' | 'input' | 'control' | 'container'","elements":[{"name":"literal","value":"'checkbox'"},{"name":"literal","value":"'input'"},{"name":"literal","value":"'control'"},{"name":"literal","value":"'container'"}]}],"raw":"ComponentStyle<\n  'checkbox' | 'input' | 'control' | 'container'\n>"}],"raw":"WithStyleProps<CheckboxFacadeTheme | ToggleFacadeTheme, CheckboxStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  label: React.ReactNode\n  id?: string\n  value?: string | number\n  /**\n   * Array of objects with shape: `{\n   *   text: ReactNode,\n   *   type: One of: ['error', 'hint', 'success', 'screenreader-only']\n   *   }`\n   */\n  messages?: FormMessage[]\n  /* whether to set the input to checked or not on initial render */\n  defaultChecked?: boolean\n  /**\n   * whether the input is checked or not (must be accompanied by an `onChange` prop)\n   */\n  checked?: boolean // TODO: controllable(PropTypes.bool, 'onChange', 'defaultChecked')\n  /**\n   * when used with the `checked` prop, the component will not control its own state\n   */\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void\n  onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void\n  onMouseOver?: (e: React.MouseEvent<HTMLInputElement>) => void\n  onMouseOut?: (e: React.MouseEvent<HTMLInputElement>) => void\n  /**\n   * Whether or not to disable the checkbox\n   */\n  disabled?: boolean\n  /**\n   * Works just like disabled but keeps the same styles as if it were active\n   */\n  readOnly?: boolean\n  /**\n   * Visual state showing that child checkboxes are a combination of checked and unchecked\n   */\n  indeterminate?: boolean\n  size?: 'small' | 'medium' | 'large'\n  variant?: 'simple' | 'toggle'\n  inline?: boolean\n  labelPlacement?: 'top' | 'start' | 'end'\n}","signature":{"properties":[{"key":"label","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true}},{"key":"id","value":{"name":"string","required":false}},{"key":"value","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"messages","value":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]","required":false},"description":"Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n  }`"},{"key":"defaultChecked","value":{"name":"boolean","required":false}},{"key":"checked","value":{"name":"boolean","required":false},"description":"whether the input is checked or not (must be accompanied by an `onChange` prop)"},{"key":"onChange","value":{"name":"signature","type":"function","raw":"(e: React.ChangeEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false},"description":"when used with the `checked` prop, the component will not control its own state"},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(e: React.KeyboardEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onFocus","value":{"name":"signature","type":"function","raw":"(e: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onBlur","value":{"name":"signature","type":"function","raw":"(e: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onMouseOver","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onMouseOut","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"disabled","value":{"name":"boolean","required":false},"description":"Whether or not to disable the checkbox"},{"key":"readOnly","value":{"name":"boolean","required":false},"description":"Works just like disabled but keeps the same styles as if it were active"},{"key":"indeterminate","value":{"name":"boolean","required":false},"description":"Visual state showing that child checkboxes are a combination of checked and unchecked"},{"key":"size","value":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}],"required":false}},{"key":"variant","value":{"name":"union","raw":"'simple' | 'toggle'","elements":[{"name":"literal","value":"'simple'"},{"name":"literal","value":"'toggle'"}],"required":false}},{"key":"inline","value":{"name":"boolean","required":false}},{"key":"labelPlacement","value":{"name":"union","raw":"'top' | 'start' | 'end'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"}],"required":false}}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]},{"name":"WithDeterministicIdProps"}]},{"name":"Checkbox"}]}],"raw":"CheckboxChild[]"},"defaultValue":{"value":"null","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"layout":{"type":{"name":"enum","value":[{"value":"'stacked'","computed":false},{"value":"'columns'","computed":false},{"value":"'inline'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'stacked' | 'columns' | 'inline'","elements":[{"name":"literal","value":"'stacked'"},{"name":"literal","value":"'columns'"},{"name":"literal","value":"'inline'"}]},"defaultValue":{"value":"'stacked'","computed":false}}},"category":"components","relativePath":"packages/ui-checkbox/src/CheckboxGroup/index.tsx","extension":".tsx","srcPath":"packages/ui-checkbox/src/CheckboxGroup/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-checkbox/src/CheckboxGroup/index.tsx","packageName":"@instructure/ui-checkbox","requirePath":"@instructure/ui-checkbox/lib/CheckboxGroup/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-checkbox/src/CheckboxGroup/index.tsx').default","esPath":"@instructure/ui-checkbox/es/CheckboxGroup/index","id":"CheckboxGroup","title":"CheckboxGroup"}