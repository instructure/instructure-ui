{"description":"\n### Making badges accessible\n\nBadge counts are automatically fed to screenreaders through the `aria-describedby`\nattribute. Often a stand alone number doesn't give a screenreader user enough context (_\"3\" vs. \"You have 3 unread emails\"_).\nThe examples below use the `formatOutput` prop to make the badge more screenreader-friendly.\n\n```js\n---\ntype: example\n---\n  <div>\n    <Badge\n      count={99}\n      pulse\n      margin=\"0 medium 0 0\"\n      formatOutput={function (formattedCount) {\n        return (\n          <AccessibleContent alt={`You have ${formattedCount} new edits to review`}>\n            {formattedCount}\n          </AccessibleContent>\n        )\n      }}\n    >\n      <IconButton\n        renderIcon={IconUserSolid}\n        screenReaderLabel=\"Edits\"\n        withBorder={false}\n        withBackground={false}\n      />\n    </Badge>\n    <Badge\n      type=\"notification\"\n      formatOutput={function () {\n        return <ScreenReaderContent>You have new edits to review</ScreenReaderContent>\n      }}\n    >\n      <IconButton\n        renderIcon={IconUserSolid}\n        screenReaderLabel=\"Edits\"\n        withBorder={false}\n        withBackground={false}\n      />\n    </Badge>\n  </div>\n```\n\n> Note the use of the `pulse` prop in the first example to make the Badge slowly pulse twice on mount.\n\n### Limit the count\n\nUse the `countUntil` prop to set a limit for the count. The default for `formatOverflowText` is a \"+\" symbol.\n\n```js\n---\ntype: example\n---\n<div>\n  <Badge count={105} countUntil={100} margin=\"0 medium 0 0\">\n    <Button>Inbox</Button>\n  </Badge>\n  <Badge count={250} countUntil={100}>\n    <Button>Assignments</Button>\n  </Badge>\n</div>\n```\n\n### Standalone, notification and color variants\n\nSetting the `standalone` prop to `true` renders Badge as a standalone\nelement that is not positioned relative to a child and displays inline-block.\nSetting `type=\"notification\"` will render small circles that should not contain any visible text.\n\n```js\n---\ntype: example\n---\n<div>\n  <Flex padding='small' display='inline-flex' alignItems=\"center\">\n    <Badge standalone count={6} margin='0 small 0 0' />\n    <Badge\n      type=\"notification\"\n      standalone\n      formatOutput={function () {\n        return <ScreenReaderContent>This is a notification</ScreenReaderContent>\n      }}\n    />\n  </Flex>\n  <Flex padding='small' display='inline-flex' alignItems=\"center\">\n    <Badge standalone variant=\"success\" count={12} margin='0 small 0 0' />\n    <Badge\n      variant=\"success\"\n      type=\"notification\"\n      standalone\n      formatOutput={function () {\n        return <ScreenReaderContent>This is a success notification</ScreenReaderContent>\n      }}\n    />\n  </Flex>\n  <Flex padding='small' display='inline-flex' alignItems=\"center\">\n    <Badge standalone variant=\"danger\" count={18} countUntil={10} margin='0 small 0 0' />\n    <Badge\n      variant=\"danger\"\n      type=\"notification\"\n      standalone\n      formatOutput={function () {\n        return <ScreenReaderContent>This is a danger notification</ScreenReaderContent>\n      }}\n    />\n  </Flex>\n  <View display='inline-flex' background='primary-inverse'>\n    <Flex padding='small' display='inline-flex' alignItems=\"center\" background='primary-inverse'>\n      <Badge standalone variant=\"inverse\" count={8} margin='0 small 0 0' />\n      <Badge\n        variant=\"inverse\"\n        type=\"notification\"\n        standalone\n        formatOutput={function () {\n          return <ScreenReaderContent>This is a danger notification</ScreenReaderContent>\n        }}\n      />\n    </Flex>\n  </View>\n</div>\n```\n\n### Placement\n\nDefault is `top end`. **Note that standalone badges can't be placed.**\n\n- ```js\n  class EditButton extends React.Component {\n    render() {\n      return (\n        <IconButton\n          renderIcon={IconUserSolid}\n          screenReaderLabel=\"Edit page\"\n          withBorder={false}\n          withBackground={false}\n        />\n      )\n    }\n  }\n\n  class Example extends React.Component {\n    render() {\n      return (\n        <div>\n          <View as=\"div\" margin=\"0 0 medium\">\n            <Badge count={21} margin=\"0 large 0 0\" placement=\"top start\">\n              <EditButton />\n            </Badge>\n            <Badge count={21} margin=\"0 large 0 0\">\n              <EditButton />\n            </Badge>\n            <Badge count={21} margin=\"0 large 0 0\" placement=\"bottom start\">\n              <EditButton />\n            </Badge>\n            <Badge count={21} margin=\"0 large 0 0\" placement=\"bottom end\">\n              <EditButton />\n            </Badge>\n            <Badge count={21} margin=\"0 large 0 0\" placement=\"start center\">\n              <EditButton />\n            </Badge>\n            <Badge count={21} placement=\"end center\">\n              <EditButton />\n            </Badge>\n          </View>\n          <View as=\"div\">\n            <Badge\n              type=\"notification\"\n              margin=\"0 large 0 0\"\n              placement=\"top start\"\n              formatOutput={function () {\n                return (\n                  <ScreenReaderContent>\n                    Updates are available for your account\n                  </ScreenReaderContent>\n                )\n              }}\n            >\n              <EditButton />\n            </Badge>\n            <Badge\n              type=\"notification\"\n              margin=\"0 large 0 0\"\n              formatOutput={function () {\n                return (\n                  <ScreenReaderContent>\n                    Updates are available for your account\n                  </ScreenReaderContent>\n                )\n              }}\n            >\n              <EditButton />\n            </Badge>\n            <Badge\n              type=\"notification\"\n              margin=\"0 large 0 0\"\n              placement=\"bottom start\"\n              formatOutput={function () {\n                return (\n                  <ScreenReaderContent>\n                    Updates are available for your account\n                  </ScreenReaderContent>\n                )\n              }}\n            >\n              <EditButton />\n            </Badge>\n            <Badge\n              type=\"notification\"\n              margin=\"0 large 0 0\"\n              placement=\"bottom end\"\n              formatOutput={function () {\n                return (\n                  <ScreenReaderContent>\n                    Updates are available for your account\n                  </ScreenReaderContent>\n                )\n              }}\n            >\n              <EditButton />\n            </Badge>\n            <Badge\n              type=\"notification\"\n              margin=\"0 large 0 0\"\n              placement=\"start center\"\n              formatOutput={function () {\n                return (\n                  <ScreenReaderContent>\n                    Updates are available for your account\n                  </ScreenReaderContent>\n                )\n              }}\n            >\n              <EditButton />\n            </Badge>\n            <Badge\n              type=\"notification\"\n              placement=\"end center\"\n              formatOutput={function () {\n                return (\n                  <ScreenReaderContent>\n                    Updates are available for your account\n                  </ScreenReaderContent>\n                )\n              }}\n            >\n              <EditButton />\n            </Badge>\n          </View>\n        </div>\n      )\n    }\n  }\n  render(<Example />)\n  ```\n\n- ```js\n  const EditButton = () => (\n    <IconButton\n      renderIcon={IconUserSolid}\n      screenReaderLabel=\"Edit page\"\n      withBorder={false}\n      withBackground={false}\n    />\n  )\n\n  const Example = () => (\n    <div>\n      <View as=\"div\" margin=\"0 0 medium\">\n        <Badge count={21} margin=\"0 large 0 0\" placement=\"top start\">\n          <EditButton />\n        </Badge>\n        <Badge count={21} margin=\"0 large 0 0\">\n          <EditButton />\n        </Badge>\n        <Badge count={21} margin=\"0 large 0 0\" placement=\"bottom start\">\n          <EditButton />\n        </Badge>\n        <Badge count={21} margin=\"0 large 0 0\" placement=\"bottom end\">\n          <EditButton />\n        </Badge>\n        <Badge count={21} margin=\"0 large 0 0\" placement=\"start center\">\n          <EditButton />\n        </Badge>\n        <Badge count={21} placement=\"end center\">\n          <EditButton />\n        </Badge>\n      </View>\n      <View as=\"div\">\n        <Badge\n          type=\"notification\"\n          margin=\"0 large 0 0\"\n          placement=\"top start\"\n          formatOutput={function () {\n            return (\n              <ScreenReaderContent>\n                Updates are available for your account\n              </ScreenReaderContent>\n            )\n          }}\n        >\n          <EditButton />\n        </Badge>\n        <Badge\n          type=\"notification\"\n          margin=\"0 large 0 0\"\n          formatOutput={function () {\n            return (\n              <ScreenReaderContent>\n                Updates are available for your account\n              </ScreenReaderContent>\n            )\n          }}\n        >\n          <EditButton />\n        </Badge>\n        <Badge\n          type=\"notification\"\n          margin=\"0 large 0 0\"\n          placement=\"bottom start\"\n          formatOutput={function () {\n            return (\n              <ScreenReaderContent>\n                Updates are available for your account\n              </ScreenReaderContent>\n            )\n          }}\n        >\n          <EditButton />\n        </Badge>\n        <Badge\n          type=\"notification\"\n          margin=\"0 large 0 0\"\n          placement=\"bottom end\"\n          formatOutput={function () {\n            return (\n              <ScreenReaderContent>\n                Updates are available for your account\n              </ScreenReaderContent>\n            )\n          }}\n        >\n          <EditButton />\n        </Badge>\n        <Badge\n          type=\"notification\"\n          margin=\"0 large 0 0\"\n          placement=\"start center\"\n          formatOutput={function () {\n            return (\n              <ScreenReaderContent>\n                Updates are available for your account\n              </ScreenReaderContent>\n            )\n          }}\n        >\n          <EditButton />\n        </Badge>\n        <Badge\n          type=\"notification\"\n          placement=\"end center\"\n          formatOutput={function () {\n            return (\n              <ScreenReaderContent>\n                Updates are available for your account\n              </ScreenReaderContent>\n            )\n          }}\n        >\n          <EditButton />\n        </Badge>\n      </View>\n    </div>\n  )\n\n  render(<Example />)\n  ```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use count for up to 2 digits of numbers</Figure.Item>\n    <Figure.Item>Use \"+\" symbol for more than 2 digits (99+)</Figure.Item>\n    <Figure.Item>Use for numeric count (like unread messages)</Figure.Item>\n    <Figure.Item>Provide accessible text for what the number represents</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Use as a status indicator refer to Pill</Figure.Item>\n    <Figure.Item>Use for text strings</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Badge","methods":[],"props":{"count":{"type":{"name":"number"},"required":false,"description":"","tsType":{"name":"number"}},"countUntil":{"type":{"name":"number"},"required":false,"description":"The number at which the count gets truncated by\nformatOverflowText. For example, a countUntil of 100\nwould stop the count at 99.","tsType":{"name":"number"}},"children":{"type":{"name":"element"},"required":false,"description":""},"type":{"type":{"name":"enum","value":[{"value":"'count'","computed":false},{"value":"'notification'","computed":false}]},"required":false,"description":"Render Badge as a counter (`count`) or as a smaller dot (`notification`) with\nno count number displayed.","tsType":{"name":"union","raw":"'count' | 'notification'","elements":[{"name":"literal","value":"'count'"},{"name":"literal","value":"'notification'"}]},"defaultValue":{"value":"'count'","computed":false}},"standalone":{"type":{"name":"bool"},"required":false,"description":"Render Badge as an inline html element that is not positioned relative\nto a child.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"pulse":{"type":{"name":"bool"},"required":false,"description":"Make the Badge slowly pulse twice to get the user's attention.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"variant":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'success'","computed":false},{"value":"'danger'","computed":false},{"value":"'inverse'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'primary' | 'success' | 'danger' | 'inverse'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'danger'"},{"name":"literal","value":"'inverse'"}]},"defaultValue":{"value":"'primary'","computed":false}},"placement":{"type":{"name":"custom","raw":"PositionPropTypes.placement"},"required":false,"description":"Supported values are `top start`, `top end`, `end center`, `bottom end`,\n`bottom start`, and `start center`","tsType":{"name":"PlacementPropValues"},"defaultValue":{"value":"'top end'","computed":false}},"display":{"type":{"name":"enum","value":[{"value":"'inline-block'","computed":false},{"value":"'block'","computed":false}]},"required":false,"description":"Specifies the display property of the container.\n\n__Use \"block\" only when the content inside the Badge also has \"block\" display.__","tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"defaultValue":{"value":"'inline-block'","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"defaultValue":{"value":"() => {}","computed":false}},"formatOverflowText":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(count: number, countUntil: number) => string","signature":{"arguments":[{"type":{"name":"number"},"name":"count"},{"type":{"name":"number"},"name":"countUntil"}],"return":{"name":"string"}}},"defaultValue":{"value":"(_count: number, countUntil: number) =>\n`${countUntil - 1} +`","computed":false}},"formatOutput":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(formattedCount: string) => JSX.Element | string | number","signature":{"arguments":[{"type":{"name":"string"},"name":"formattedCount"}],"return":{"name":"union","raw":"JSX.Element | string | number","elements":[{"name":"JSX.Element"},{"name":"string"},{"name":"number"}]}}}},"as":{"type":{"name":"elementType"},"required":false,"description":"","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]}}},"category":"components","relativePath":"packages/ui-badge/src/Badge/index.tsx","extension":".tsx","srcPath":"packages/ui-badge/src/Badge/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-badge/src/Badge/index.tsx","packageName":"@instructure/ui-badge","requirePath":"@instructure/ui-badge/lib/Badge/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-badge/src/Badge/index.tsx').default","esPath":"@instructure/ui-badge/es/Badge/index","themePath":"packages/ui-badge/src/Badge/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-badge/src/Badge/theme.ts","id":"Badge","title":"Badge"}