{"description":"\nBy default, the Checkbox component is a custom styled HTML checkbox. To default the checkbox to checked,\nset the `defaultChecked` prop.\n\nAdjust the size of the checkbox and label text via the `size` prop. The default size is\n`medium`.\n\n```js\n---\ntype: example\n---\n<Checkbox label={lorem.sentence()} value=\"medium\" defaultChecked />\n```\n\nThe default Checkbox in its disabled state:\n\n```js\n---\ntype: example\n---\n<CheckboxGroup\n  defaultValue={['medium']}\n  name=\"example\"\n  description={<ScreenReaderContent>Checkbox examples</ScreenReaderContent>}\n>\n  <Checkbox label={lorem.sentence()} value=\"medium\" disabled />\n  <Checkbox label={lorem.sentence()} value=\"small\" disabled />\n</CheckboxGroup>\n```\n\nThe `indeterminate` property triggers a visual state that handles\nsituations where \"child\" Checkboxes are neither all checked nor all\nunchecked. Note the use of `aria-labelledby` to make the relationship\nbetween the parent and child Checkboxes clear to screenreader users.\n\n_Note: the `toggle` variant does not support the `indeterminate`\nproperty._\n\n```js\n---\ntype: example\n---\n  const Example = () => {\n    const [value, setValue] = useState(['his111', 'eng203'])\n\n    const updateValue = (valueToUpdate) => {\n      const index = value.indexOf(valueToUpdate)\n      console.log(index)\n      if (index === -1) {\n        setValue([...value, valueToUpdate])\n      } else {\n        setValue([...value.slice(0, index), ...value.slice(index + 1)])\n      }\n    }\n\n    return (\n      <FormFieldGroup\n        description={\n          <ScreenReaderContent>\n            <span id=\"groupLabel\">Courses to edit</span>\n          </ScreenReaderContent>\n        }\n        rowSpacing=\"small\"\n      >\n        <Checkbox\n          aria-labelledby=\"groupLabel selectAllLabel\"\n          label={<span id=\"selectAllLabel\">Select all courses</span>}\n          value=\"all\"\n          onChange={() =>\n            setValue(value.length === 3 ? [] : ['eng203', 'sci101', 'his111'])\n          }\n          checked={value.length === 3}\n          indeterminate={value.length > 0 && value.length < 3}\n        />\n        <View as=\"div\" padding=\"0 0 0 medium\">\n          <Checkbox\n            aria-labelledby=\"groupLabel eng203Label\"\n            label={<span id=\"eng203Label\">English 203</span>}\n            value=\"eng203\"\n            name=\"courses\"\n            onChange={(event) => {\n              updateValue(event.target.value)\n            }}\n            checked={value.indexOf('eng203') !== -1}\n          />\n        </View>\n        <View as=\"div\" padding=\"0 0 0 medium\">\n          <Checkbox\n            aria-labelledby=\"groupLabel sci101Label\"\n            label={<span id=\"sci101Label\">Science 101</span>}\n            value=\"sci101\"\n            name=\"courses\"\n            onChange={(event) => {\n              updateValue(event.target.value)\n            }}\n            checked={value.indexOf('sci101') !== -1}\n          />\n        </View>\n        <View as=\"div\" padding=\"0 0 0 medium\">\n          <Checkbox\n            aria-labelledby=\"groupLabel hist101Label\"\n            label={<span id=\"hist101Label\">History 111</span>}\n            value=\"his111\"\n            name=\"courses\"\n            onChange={(event) => {\n              updateValue(event.target.value)\n            }}\n            checked={value.indexOf('his111') !== -1}\n          />\n        </View>\n      </FormFieldGroup>\n    )\n  }\n\n  render(<Example />)\n```\n\nSetting the `variant` prop to `toggle` turns the checkbox into a toggle switch. For **toggle only** the size prop affects the size of the label and not the actual size of the switch.\n\n```js\n---\ntype: example\n---\n<FormFieldGroup description={<ScreenReaderContent>Checkbox examples</ScreenReaderContent>}>\n  <Checkbox label=\"Small size\" value=\"small\" variant=\"toggle\" size=\"small\" defaultChecked />\n  <Checkbox label=\"Medium size\" value=\"medium\" variant=\"toggle\" />\n  <Checkbox label=\"Large size\" value=\"large\" variant=\"toggle\" size=\"large\" defaultChecked />\n</FormFieldGroup>\n```\n\nTo change the label placement for the toggle variety, use the labelPlacement prop. The default\nplacement is 'end'.\n\n_Note: the `simple` variant does not support the `labelPlacement`\nproperty._\n\n```js\n---\ntype: example\n---\n<FormFieldGroup description={<ScreenReaderContent>Toggle label examples</ScreenReaderContent>}>\n  <Checkbox label=\"Top\" variant=\"toggle\" labelPlacement=\"top\" defaultChecked />\n  <Checkbox label=\"Start\" variant=\"toggle\" labelPlacement=\"start\" />\n  <Checkbox label=\"End\" variant=\"toggle\" labelPlacement=\"end\" defaultChecked />\n</FormFieldGroup>\n```\n\nYou might want to hide the label text when using the toggle switch variant. Do that by wrapping\nthe text in the [ScreenReaderContent](ScreenReaderContent) component.\n\n```js\n---\ntype: example\n---\n<Checkbox\n  label={<ScreenReaderContent>Screenreader-accessible label</ScreenReaderContent>}\n  value=\"accessible\"\n  variant=\"toggle\"\n/>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Align to the left side of the label</Figure.Item>\n    <Figure.Item>Use when multiple selections are allowed</Figure.Item>\n    <Figure.Item>Use to save space from toggles</Figure.Item>\n    <Figure.Item>Stack vertically if there is more than two options to select</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Run more than two checkboxes horizontally</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Do not add business logic to `onMouseOver` or `onMouseOut` events. These events are not triggered by keyboard navigation</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Checkbox","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"handleInputRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]}}],"returns":null},{"name":"handleChange","docblock":null,"modifiers":[],"params":[{"name":"e","optional":false,"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}],"alias":"React.ChangeEvent"}}],"returns":null},{"name":"handleKeyDown","docblock":null,"modifiers":[],"params":[{"name":"e","optional":false,"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}],"alias":"React.KeyboardEvent"}}],"returns":null},{"name":"handleFocus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleBlur","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleMouseOver","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleMouseOut","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"id","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"checked","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focused","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isNewError","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"invalid","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderFacade","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderMessages","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"label":{"required":true,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"id":{"required":false,"tsType":{"name":"string"},"description":""},"value":{"required":false,"tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"description":""},"messages":{"required":false,"tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"description":"Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['newError', 'error', 'hint', 'success', 'screenreader-only']\n  }`"},"defaultChecked":{"required":false,"tsType":{"name":"boolean"},"description":""},"checked":{"required":false,"tsType":{"name":"boolean"},"description":"whether the input is checked or not (must be accompanied by an `onChange` prop)"},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e: React.ChangeEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}},"description":"when used with the `checked` prop, the component will not control its own state"},"onKeyDown":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e: React.KeyboardEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}},"description":""},"onFocus":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}},"description":""},"onBlur":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}},"description":""},"onMouseOver":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}},"description":""},"onMouseOut":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}},"description":""},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":"Whether or not to disable the checkbox","defaultValue":{"value":"false","computed":false}},"readOnly":{"required":false,"tsType":{"name":"boolean"},"description":"Works just like disabled but keeps the same styles as if it were active","defaultValue":{"value":"false","computed":false}},"indeterminate":{"required":false,"tsType":{"name":"boolean"},"description":"Visual state showing that child checkboxes are a combination of checked and unchecked","defaultValue":{"value":"false","computed":false}},"size":{"required":false,"tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"description":"","defaultValue":{"value":"'medium'","computed":false}},"variant":{"required":false,"tsType":{"name":"union","raw":"'simple' | 'toggle'","elements":[{"name":"literal","value":"'simple'"},{"name":"literal","value":"'toggle'"}]},"description":"","defaultValue":{"value":"'simple'","computed":false}},"inline":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"labelPlacement":{"required":false,"tsType":{"name":"union","raw":"'top' | 'start' | 'end'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"}]},"description":"","defaultValue":{"value":"'end'","computed":false}},"isRequired":{"required":false,"tsType":{"name":"boolean"},"description":""},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Margin around the component. Accepts a `Spacing` token. See token values and example usage in [this guide](https://instructure.design/#layout-spacing)."},"inputRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(inputElement: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"inputElement"}],"return":{"name":"void"}}},"description":"A function that provides a reference to the actual underlying input element"},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","tags":"toggle, switch","relativePath":"packages/ui-checkbox/src/Checkbox/index.tsx","extension":".tsx","srcPath":"packages/ui-checkbox/src/Checkbox/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-checkbox/src/Checkbox/index.tsx","packageName":"@instructure/ui-checkbox","requirePath":"@instructure/ui-checkbox/lib/Checkbox/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-checkbox/src/Checkbox/index.tsx').default","esPath":"@instructure/ui-checkbox/es/Checkbox/index","themePath":"packages/ui-checkbox/src/Checkbox/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-checkbox/src/Checkbox/theme.ts","id":"Checkbox","title":"Checkbox"}