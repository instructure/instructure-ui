{"description":"@module Dialog\nThe `Dialog` component is a utility that is used by\n[Popover](#Popover), [Modal](#Modal) and [Tray](#Tray) for keyboard accessibility.\n\nElements outside of the `Dialog` are hidden from screen readers automatically when `shouldContainFocus` is set to `true` or `screenreader`. The `liveRegion` prop can be used to specify any elements that should not be hidden.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = { open: false }\n    }\n\n    render() {\n      return (\n        <View as=\"div\" padding=\"large\">\n          <Button onClick={() => this.setState({ open: true })}>\n            Open the Dialog\n          </Button>\n          <Portal open={this.state.open}>\n            <Mask>\n              <Dialog\n                open={this.state.open}\n                shouldContainFocus\n                defaultFocusElement={() => this._firstName}\n                shouldReturnFocus\n                onDismiss={() => this.setState({ open: false })}\n              >\n                <View\n                  as=\"div\"\n                  maxWidth=\"40rem\"\n                  maxHeight=\"30rem\"\n                  background=\"primary\"\n                  shadow=\"above\"\n                  style={{ position: 'relative' }}\n                  padding=\"medium\"\n                >\n                  <CloseButton\n                    placement=\"end\"\n                    onClick={() => this.setState({ open: false })}\n                    screenReaderLabel=\"Close\"\n                  />\n                  <FormFieldGroup\n                    description={\n                      <Heading level=\"h4\" as=\"span\">\n                        Full name\n                      </Heading>\n                    }\n                    layout=\"columns\"\n                  >\n                    <TextInput\n                      width=\"12rem\"\n                      renderLabel=\"First\"\n                      inputRef={(c) => (this._firstName = c)}\n                    />\n                    <TextInput width=\"12rem\" renderLabel=\"Last\" />\n                  </FormFieldGroup>\n                </View>\n              </Dialog>\n            </Mask>\n          </Portal>\n        </View>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [open, setOpen] = useState(false)\n\n    return (\n      <View as=\"div\" padding=\"large\">\n        <Button onClick={() => setOpen(true)}>Open the Dialog</Button>\n        <Portal open={open}>\n          <Mask>\n            <Dialog\n              open={open}\n              shouldContainFocus\n              defaultFocusElement={() => this._firstName}\n              shouldReturnFocus\n              onDismiss={() => setOpen(false)}\n            >\n              <View\n                as=\"div\"\n                maxWidth=\"40rem\"\n                maxHeight=\"30rem\"\n                background=\"primary\"\n                shadow=\"above\"\n                style={{ position: 'relative' }}\n                padding=\"medium\"\n              >\n                <CloseButton\n                  placement=\"end\"\n                  onClick={() => setOpen(false)}\n                  screenReaderLabel=\"Close\"\n                />\n                <FormFieldGroup\n                  description={\n                    <Heading level=\"h4\" as=\"span\">\n                      Full name\n                    </Heading>\n                  }\n                  layout=\"columns\"\n                >\n                  <TextInput\n                    width=\"12rem\"\n                    renderLabel=\"First\"\n                    inputRef={(c) => (this._firstName = c)}\n                  />\n                  <TextInput width=\"12rem\" renderLabel=\"Last\" />\n                </FormFieldGroup>\n              </View>\n            </Dialog>\n          </Mask>\n        </Portal>\n      </View>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Keyboard focus must be set to a dialog when it appears; usually on the first interactive element within the dialog</Figure.Item>\n    <Figure.Item>A modal dialog must contain keyboard focus until it closes, so that keyboard or screen reader users won't mistakenly interact with background content that is meant to be hidden or inaccessible</Figure.Item>\n    <Figure.Item>A non-modal dialog must close when it loses focus</Figure.Item>\n    <Figure.Item>When the user closes a dialog, focus must return to a logical place within the page. This is usually to the element that triggered the dialog</Figure.Item>\n    <Figure.Item>When dialogs are triggered by buttons or links (buttons are recommended), accessibility can be further enhanced by applying aria-haspopup=\"dialog\" to the trigger. This will notify screen reader users that the trigger opens a dialog</Figure.Item>\n    <Figure.Item>We recommend that dialogs begin with a heading (typically an H2)</Figure.Item>\n    <Figure.Item>Dialogs should be able to be closed by clicking away, esc key and/or a close button</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Dialog","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"The children to be rendered within the `<Dialog />`","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render as the component root, `span` by default","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]}},"display":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'block'","computed":false},{"value":"'inline-block'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'auto' | 'block' | 'inline-block'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'block'"},{"name":"literal","value":"'inline-block'"}]}},"label":{"type":{"name":"string"},"required":false,"description":"The aria-label to read for screen reader.","tsType":{"name":"string"}},"open":{"type":{"name":"bool"},"required":false,"description":"Whether or not the `<Dialog />` is open","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Function called when tab focus leaves the focusable content. This only\noccurs when `shouldContainFocus` is set to false."},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Function called when a focus region is dismissed. This can happen when\nthe user presses the escape key and `shouldCloseOnEscape` is true or\nwhen an IFrame is clicked or when anything outside the focus region\nis clicked if `shouldCloseOnDocumentClick` is true.\n@param event The event triggered the dismissal\n@param documentClick Whether the dismissal was triggered by a mouse click."},"defaultFocusElement":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"An element or a function returning an element to focus by default"},"contentElement":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"An element or a function returning an element that wraps the content of the `<Dialog />`","tsType":{"name":"union","raw":"| Node\n| Window\n| ReactElement\n| Component\n| (() => Node | Window | null | undefined)\n| null","elements":[{"name":"Node"},{"name":"Window"},{"name":"ReactElement"},{"name":"Component"},{"name":"unknown"},{"name":"null"}]}},"liveRegion":{"type":{"name":"union","value":[{"name":"element"},{"name":"arrayOf","value":{"name":"element"}},{"name":"func"}]},"required":false,"description":"An element, function returning an element, or array of elements that will not be hidden from\nthe screen reader when the focus region is active"},"shouldContainFocus":{"type":{"name":"union","value":[{"name":"bool"},{"name":"enum","value":[{"value":"'keyboard'","computed":false},{"value":"'screenreader'","computed":false}]}]},"required":false,"description":"When set to true, or it is an array that includes the 'keyboard' string,\nthe keyboard and screenreader focus is trapped; when set to 'screenreader'\nonly the screenreader focus is trapped.","defaultValue":{"value":"false","computed":false}},"shouldReturnFocus":{"type":{"name":"bool"},"required":false,"description":"When set to true the keyboard focus is returned to the active element\nbefore the focus region was activated.","defaultValue":{"value":"false","computed":false}},"shouldCloseOnDocumentClick":{"type":{"name":"bool"},"required":false,"description":"When set to true the `onDismiss` function is called on a click outside\nthe focus region.","defaultValue":{"value":"true","computed":false}},"shouldCloseOnEscape":{"type":{"name":"bool"},"required":false,"description":"When set to true the `onDismiss` function is called on the `Escape`\nkeypress","defaultValue":{"value":"true","computed":false}},"shouldFocusOnOpen":{"type":{"name":"bool"},"required":false,"description":"When set to true, the `defaultFocusElement` is focused on initialization.","defaultValue":{"value":"true","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element"},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components/utilities","relativePath":"packages/ui-dialog/src/Dialog/index.tsx","extension":".tsx","srcPath":"packages/ui-dialog/src/Dialog/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-dialog/src/Dialog/index.tsx","packageName":"@instructure/ui-dialog","requirePath":"@instructure/ui-dialog/lib/Dialog/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-dialog/src/Dialog/index.tsx').default","esPath":"@instructure/ui-dialog/es/Dialog/index","id":"Dialog","title":"Dialog"}