{"description":"\nThe Overlay component is a closable/dismissible component that transitions\nin and out content rendered in a [Portal](#Portal)\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    open: false\n  }\n\n  _mask = null\n\n  handleMaskRef = el => {\n    this._mask = el\n  }\n\n  render () {\n    return (\n      <div>\n        <Button onClick={() => { this.setState({ open: true })}}>\n          Show the Overlay\n        </Button>\n        <Overlay\n          open={this.state.open}\n          transition=\"fade\"\n          label=\"Overlay Example\"\n          shouldReturnFocus\n          shouldContainFocus\n          onDismiss={() => { this.setState({ open: false })}}\n          defaultFocusElement={() => this._mask}\n        >\n          <Mask\n            onClick={() => { this.setState({ open: false })}}\n            elementRef={this.handleMaskRef}\n          >\n            <Spinner renderTitle=\"Loading\" size=\"large\" margin=\"0 0 0 medium\" />\n          </Mask>\n        </Overlay>\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Ensure content behind the overlay is hidden from users so they cannot navigate to it when using keyboard navigation and screen readers</Figure.Item>\n    <Figure.Item>Dismissable with the ESC key</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Overlay","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"open":{"type":{"name":"bool"},"required":false,"description":"Whether or not the `<Overlay />` is open","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"onOpen":{"type":{"name":"func"},"required":false,"description":"Callback fired when `<Portal />` content has been mounted in the DOM","tsType":{"name":"signature","type":"function","raw":"(DOMNode: PortalNode) => void","signature":{"arguments":[{"type":{"name":"PortalNode"},"name":"DOMNode"}],"return":{"name":"void"}}}},"onClose":{"type":{"name":"func"},"required":false,"description":"Callback fired when `<Portal />` has been unmounted from the DOM","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"mountNode":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"An element or a function returning an element to use as the mount node\nfor the `<Portal />` (defaults to `document.body`)","tsType":{"name":"PositionMountNode"}},"insertAt":{"type":{"name":"enum","value":[{"value":"'bottom'","computed":false},{"value":"'top'","computed":false}]},"required":false,"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'","tsType":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}]},"defaultValue":{"value":"'bottom'","computed":false}},"label":{"type":{"name":"string"},"required":true,"description":"An accessible label for the `<Overlay />` content","tsType":{"name":"string"}},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Callback fired when the `<Overlay />` is requesting to be closed","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.UIEvent | React.FocusEvent,\n  documentClick?: boolean\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.UIEvent | React.FocusEvent","elements":[{"name":"ReactUIEvent","raw":"React.UIEvent"},{"name":"ReactFocusEvent","raw":"React.FocusEvent"}]},"name":"event"},{"type":{"name":"boolean"},"name":"documentClick"}],"return":{"name":"void"}}}},"defaultFocusElement":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"An element or a function returning an element to focus by default","tsType":{"name":"union","raw":"| Node\n| Window\n| ReactElement\n| Component\n| (() => Node | Window | null | undefined)\n| null","elements":[{"name":"Node"},{"name":"Window"},{"name":"ReactElement"},{"name":"Component"},{"name":"unknown"},{"name":"null"}]}},"contentElement":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"An element or a function returning an element that wraps the content of the `<Overlay />`","tsType":{"name":"union","raw":"| Node\n| Window\n| ReactElement\n| Component\n| (() => Node | Window | null | undefined)\n| null","elements":[{"name":"Node"},{"name":"Window"},{"name":"ReactElement"},{"name":"Component"},{"name":"unknown"},{"name":"null"}]}},"shouldContainFocus":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"shouldReturnFocus":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"shouldCloseOnDocumentClick":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"shouldCloseOnEscape":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"transition":{"type":{"name":"custom","raw":"import { transitionTypePropType } from '@instructure/ui-motion'"},"required":false,"description":"The type of `<Transition />` to use for animating in/out","tsType":{"name":"TransitionType"}},"in":{"type":{"name":"bool"},"required":false,"description":"Show the component; triggers the enter or exit animation","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"unmountOnExit":{"type":{"name":"bool"},"required":false,"description":"Unmount the component (remove it from the DOM) when it is not shown","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"transitionOnMount":{"type":{"name":"bool"},"required":false,"description":"Run the enter animation when the component mounts, if it is initially\nshown","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"transitionEnter":{"type":{"name":"bool"},"required":false,"description":"Run the enter animation","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"transitionExit":{"type":{"name":"bool"},"required":false,"description":"Run the exit animation","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"onEnter":{"type":{"name":"func"},"required":false,"description":"Callback fired before the \"entering\" classes are applied","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onEntering":{"type":{"name":"func"},"required":false,"description":"Callback fired after the \"entering\" classes are applied","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onEntered":{"type":{"name":"func"},"required":false,"description":"Callback fired after the \"enter\" classes are applied","tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"TransitionType"},"name":"type"}],"return":{"name":"void"}}}},"onExit":{"type":{"name":"func"},"required":false,"description":"Callback fired before the \"exiting\" classes are applied","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onExiting":{"type":{"name":"func"},"required":false,"description":"Callback fired after the \"exiting\" classes are applied","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onExited":{"type":{"name":"func"},"required":false,"description":"Callback fired after the \"exited\" classes are applied","tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"TransitionType"},"name":"type"}],"return":{"name":"void"}}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-overlays/src/Overlay/index.tsx","extension":".tsx","srcPath":"packages/ui-overlays/src/Overlay/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-overlays/src/Overlay/index.tsx","packageName":"@instructure/ui-overlays","requirePath":"@instructure/ui-overlays/lib/Overlay/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-overlays/src/Overlay/index.tsx').default","esPath":"@instructure/ui-overlays/es/Overlay/index","id":"Overlay","title":"Overlay"}