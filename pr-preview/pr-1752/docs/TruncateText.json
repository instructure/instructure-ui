{"description":"\nA component for truncating text content.\n\n> For best results, avoid using TruncateText inside parent containers that are inline (`display: inline/inline-block`) or that default to inline display (span, link, etc.).\n\n### Single line\n\n```javascript\n---\ntype: example\n---\n\n<div>\n  <View\n    as=\"div\"\n    padding=\"xx-small none\"\n    maxWidth=\"480px\"\n    withVisualDebug\n  >\n    <Heading level=\"h1\">\n      <TruncateText>\n        {lorem.paragraph()}\n      </TruncateText>\n    </Heading>\n    <Text\n      as=\"p\"\n      weight=\"bold\"\n      size=\"large\"\n      transform=\"uppercase\"\n      letterSpacing=\"expanded\"\n    >\n      <TruncateText>\n        {lorem.paragraph()}\n      </TruncateText>\n    </Text>\n    <Text as=\"p\">\n      <TruncateText>\n        {lorem.paragraph()}\n      </TruncateText>\n    </Text>\n\n    <div>\n      <TruncateText\n        onUpdate={(truncated, text) => {\n          console.log(truncated, text)\n        }}\n      >\n        <span>\n          Regular sized text with <Link href=\"#\">A Text Link </Link>and <Text weight=\"bold\">some bold text.</Text>\n        </span>\n      </TruncateText>\n    </div>\n\n  </View>\n</div>\n```\n\n### Multiple lines\n\nYou can set the number of lines to display before truncation begins with the `maxLines` prop. Setting `maxLines` to `auto` will determine the number of lines that will fit.\n\n```javascript\n---\ntype: example\n---\n<div>\n  <View\n    as=\"div\"\n    padding=\"small none\"\n    maxWidth=\"480px\"\n    withVisualDebug\n  >\n    <Text as=\"p\" size=\"large\">\n      <TruncateText\n        maxLines={2}\n        truncate=\"word\"\n        ellipsis=\" (...)\"\n      >\n        {lorem.paragraph()}\n      </TruncateText>\n      <Link href=\"#\">Read More</Link>\n    </Text>\n\n    <Text as=\"p\" lineHeight=\"double\">\n      <TruncateText\n        maxLines={4}\n        truncate=\"word\"\n        ellipsis=\" (...)\"\n      >\n        Esse aliqua minim veniam duis consectetur non sunt ea deserunt qui cillum laboris officia. Minim nulla commodo dolore reprehenderit commodo occaecat veniam ad consectetur mollit consectetur partur consectetur eiusmod dolor incididunt incididunt.\n      </TruncateText>\n      <Link href=\"#\">Read More</Link>\n    </Text>\n  </View>\n  <br />\n  <View\n    as=\"div\"\n    padding=\"small none\"\n    maxWidth=\"480px\"\n    withVisualDebug\n  >\n    <Text as=\"p\">\n      <TruncateText maxLines={4} ellipsis=\" (...)\">\n        <span>Esse aliqua minim veniam duis consectetur non sunt ea deserunt qui cillum laboris officia. <Link href=\"#\">http://instructure.github.io/instructure-ui/#ui-elements</Link> occaecat veniam ad consectetur mollit consectetur partur consectetur eiusmod dolor incididunt incididunt.</span>\n      </TruncateText>\n    </Text>\n\n    <Text as=\"p\">\n      <TruncateText maxLines={4} ellipsis=\" (...)\">\n        <span>Qui cillum laboris officia. <strong>supercalifragilisticexpialidocious</strong> occaecat veniam ad consectetur mollit consectetur partur consectetur eiusmod dolor incididunt incididunt. Esse aliqua minim veniam duis consectetur non sunt ea deserunt.</span>\n      </TruncateText>\n    </Text>\n  </View>\n  <br />\n  <div style={{height: '78px', border: 'solid 1px red'}}>\n    <Text>\n      <TruncateText maxLines=\"auto\" ellipsis=\" (...)\">\n        Esse aliqua minim veniam duis consectetur non sunt ea deserunt qui cillum laboris officia. Minim nulla commodo dolore reprehenderit commodo occaecat veniam ad consectetur mollit consectetur partur consectetur eiusmod dolor incididunt incididunt.\n      </TruncateText>\n    </Text>\n  </div>\n</div>\n\n```\n\n### Truncate middle\n\nYou can set the position of the truncation using the `position` prop.\n\n```javascript\n---\ntype: example\n---\n<div>\n  <View\n    as=\"div\"\n    padding=\"small none\"\n    maxWidth=\"480px\"\n    withVisualDebug\n  >\n    <TruncateText position=\"middle\">\n      <span>This line of text should be truncated from the middle of the string <strong>instead of the end.</strong></span>\n    </TruncateText>\n  </View>\n  <br />\n  <View\n    as=\"div\"\n    padding=\"small none\"\n    maxWidth=\"480px\"\n    withVisualDebug\n  >\n    <Link href=\"#\">\n      <TruncateText\n        position=\"middle\"\n        truncate=\"word\"\n        ellipsis=\".../\"\n      >\n        @instructure/ui-elements/somefakedir/tomakethislonger/lib/longer/TruncateText\n      </TruncateText>\n    </Link>\n  </View>\n</div>\n```\n\n### Using tooltips\n\nIt's best practice to make the complete text of a truncated element available via a [Tooltip](#Tooltip).\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    isTruncated: false\n  }\n\n  handleUpdate = (isTruncated) => {\n    if (this.state.isTruncated !== isTruncated) {\n      this.setState({ isTruncated })\n    }\n  }\n\n  renderLink () {\n    return (\n      <Link href=\"#\">\n        <TruncateText onUpdate={this.handleUpdate}>\n          {this.props.message}\n        </TruncateText>\n      </Link>\n    )\n  }\n\n  render () {\n    return (\n      <View\n        as=\"div\"\n        padding=\"xx-small none\"\n        maxWidth=\"230px\"\n        withVisualDebug\n      >\n        {this.state.isTruncated ? (\n          <Tooltip\n            renderTip={this.props.message}\n            mountNode={() => document.getElementById('main')}\n          >\n            { this.renderLink() }\n          </Tooltip>\n        ) : this.renderLink()}\n      </View>\n    )\n  }\n}\n\nrender(<Example message=\"A tooltip will display only when this text is truncated\" />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use a <Link href=\"/#Tooltip\">Tooltip</Link> for all truncated items</Figure.Item>\n    <Figure.Item>Use when trying to restrict the number of lines that are visible</Figure.Item>\n    <Figure.Item>Use end ellipsis if the unique identifier is at the beginning of the string</Figure.Item>\n    <Figure.Item>Use middle ellipsis if the unique identifier is at the end of the string</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Use in <Link href=\"/#Button\">Buttons</Link>, <Link href=\"/#Navigation\">Nav Items</Link>, <Link href=\"/#TabList\">TabLists</Link></Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"TruncateText","methods":[],"props":{"children":{"type":{"name":"node"},"required":true,"description":"The content to be truncated.","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"maxLines":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"Number of lines to allow before truncating. `auto` will fit to parent.\nDefault is 1.","tsType":{"name":"union","raw":"'auto' | number","elements":[{"name":"literal","value":"'auto'"},{"name":"number"}]},"defaultValue":{"value":"1","computed":false}},"position":{"type":{"name":"enum","value":[{"value":"'end'","computed":false},{"value":"'middle'","computed":false}]},"required":false,"description":"Where to place the ellipsis within the string. Default is 'end'","tsType":{"name":"union","raw":"'end' | 'middle'","elements":[{"name":"literal","value":"'end'"},{"name":"literal","value":"'middle'"}]},"defaultValue":{"value":"'end'","computed":false}},"truncate":{"type":{"name":"enum","value":[{"value":"'character'","computed":false},{"value":"'word'","computed":false}]},"required":false,"description":"Add ellipsis after words or after any character. Default is 'character'","tsType":{"name":"union","raw":"'character' | 'word'","elements":[{"name":"literal","value":"'character'"},{"name":"literal","value":"'word'"}]},"defaultValue":{"value":"'character'","computed":false}},"ellipsis":{"type":{"name":"string"},"required":false,"description":"A string to use as the ellipsis","tsType":{"name":"string"},"defaultValue":{"value":"'\\u2026'","computed":false}},"ignore":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"Characters to ignore at truncated end of string. Default is ' ', '.', ','","tsType":{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"},"defaultValue":{"value":"[' ', '.', ',']","computed":false}},"debounce":{"type":{"name":"number"},"required":false,"description":"Debounce delay in milliseconds","tsType":{"name":"number"},"defaultValue":{"value":"0","computed":false}},"onUpdate":{"type":{"name":"func"},"required":false,"description":"Callback when truncated text has changed","tsType":{"name":"signature","type":"function","raw":"(isTruncated: boolean, truncatedText?: string) => void","signature":{"arguments":[{"type":{"name":"boolean"},"name":"isTruncated"},{"type":{"name":"string"},"name":"truncatedText"}],"return":{"name":"void"}}}},"shouldTruncateWhenInvisible":{"type":{"name":"bool"},"required":false,"description":"Force truncation of invisible elements (hack; will be removed in favor\nof a better fix)","tsType":{"name":"boolean"}}},"category":"components","relativePath":"packages/ui-truncate-text/src/TruncateText/index.tsx","extension":".tsx","srcPath":"packages/ui-truncate-text/src/TruncateText/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-truncate-text/src/TruncateText/index.tsx","packageName":"@instructure/ui-truncate-text","requirePath":"@instructure/ui-truncate-text/lib/TruncateText/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-truncate-text/src/TruncateText/index.tsx').default","esPath":"@instructure/ui-truncate-text/es/TruncateText/index","themePath":"packages/ui-truncate-text/src/TruncateText/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-truncate-text/src/TruncateText/theme.ts","id":"TruncateText","title":"TruncateText"}