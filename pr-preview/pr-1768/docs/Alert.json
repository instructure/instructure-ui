{"description":"\nThe Alert component can be used to notify the user. It supports several\nvariants to provide context to the message.\n\nAlert can optionally render as a dismissible 'dialog' with a close button.\n\nThe `margin` prop can be added to give\nspace above or below the alert.\n\n```js\n---\ntype: example\n---\n<div>\n  <Alert\n    variant=\"success\"\n    renderCloseButtonLabel=\"Close\"\n    margin=\"small\"\n    transition=\"none\"\n  >\n    Sample success alert text. I will close w/o a transition out if you close me\n  </Alert>\n  <Alert\n    variant=\"info\"\n    renderCloseButtonLabel=\"Close\"\n    margin=\"small\"\n  >\n    Sample info text. I will fade out if you close me.\n  </Alert>\n  <Alert\n    variant=\"error\"\n    renderCloseButtonLabel=\"Close\"\n    margin=\"small\"\n  >\n    Sample error text that continues for a while\n    to demonstrate what happens when the content stretches over\n    several lines. It really does take a lot of prose to get the\n    text to wrap when you are on a high resolution screen.\n  </Alert>\n  <Alert\n    variant=\"warning\"\n    margin=\"small\"\n  >\n    Sample warning text. This alert is not dismissible and cannot be closed.\n  </Alert>\n</div>\n```\n\nThe `timeout` prop can be used to automatically dismiss an alert after a time.\n\n```js\n---\ntype: example\n---\n<Alert\n  variant=\"info\"\n  margin=\"small\"\n  timeout={5000}\n>\n  Sample info text. I will fade out after 5 seconds\n</Alert>\n```\n\nGiven a `liveRegion` property, Alerts will guarantee a screenreader will announce their text.\nUse `liveRegionPoliteness` to choose an `aria-live` politeness setting of either `polite`\nor `assertive` (default). Use `isLiveRegionAtomic` to choose an `aria-atomic` setting\nof either `true` or `false` (default).\n\nDue to a bug in some screen readers, the live region element should be static, either through\nserver rendering or included in the static HTML file for the app. The Alert component will\nensure that element has the correct ARIA attributes.\n\nFor more information about live regions, see\n[this MDN article](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions).\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        alerts: []\n      }\n\n      this.i = 0\n      this.variants = ['info', 'success', 'warning', 'error']\n      this.politeness = ['polite', 'assertive']\n    }\n\n    addAlert() {\n      const variant = this.variants[this.i++ % this.variants.length]\n      const politeness = Math.random() < 0.5 ? 'polite' : 'assertive'\n      const alerts = [...this.state.alerts]\n      const key = new Number(this.i)\n      alerts.push({\n        key,\n        variant,\n        politeness,\n        onDismiss: () => this.closeAlert(key)\n      })\n      this.setState({ alerts })\n    }\n\n    closeAlert(key) {\n      const alerts = this.state.alerts.filter((alert) => {\n        return alert.key !== key\n      })\n      this.setState({ alerts })\n    }\n\n    render() {\n      return (\n        <div>\n          <Button onClick={this.addAlert.bind(this)}>Add Alert</Button>\n          {this.state.alerts.map((alert) => {\n            return (\n              <View key={alert.key} display=\"block\" margin=\"small 0\">\n                <Alert\n                  variant={alert.variant}\n                  renderCloseButtonLabel=\"Close\"\n                  onDismiss={alert.onDismiss}\n                  liveRegion={() => document.getElementById('flash-messages')}\n                  liveRegionPoliteness={alert.politeness}\n                  margin=\"small 0\"\n                >\n                  This is {alert.politeness === 'polite' ? 'a' : 'an'}{' '}\n                  {alert.politeness} {alert.variant} alert\n                </Alert>\n              </View>\n            )\n          })}\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [alerts, setAlerts] = useState([])\n    const [count, setcount] = useState(0)\n\n    const variants = ['info', 'success', 'warning', 'error']\n\n    const addAlert = () => {\n      const variant = variants[count % variants.length]\n      const politeness = Math.random() < 0.5 ? 'polite' : 'assertive'\n      setAlerts([\n        ...alerts,\n        {\n          key: count,\n          variant,\n          politeness\n        }\n      ])\n      setcount(count + 1)\n    }\n\n    const closeAlert = (key) =>\n      setAlerts(alerts.filter((alert) => alert.key !== key))\n\n    return (\n      <div>\n        <Button onClick={addAlert}>Add Alert</Button>\n        {alerts.map((alert) => {\n          return (\n            <View key={alert.key} display=\"block\" margin=\"small 0\">\n              <Alert\n                variant={alert.variant}\n                renderCloseButtonLabel=\"Close\"\n                onDismiss={() => closeAlert(alert.key)}\n                liveRegion={() => document.getElementById('flash-messages')}\n                liveRegionPoliteness={alert.politeness}\n                margin=\"small 0\"\n              >\n                This is {alert.politeness === 'polite' ? 'a' : 'an'}{' '}\n                {alert.politeness} {alert.variant} alert\n              </Alert>\n            </View>\n          )\n        })}\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\nAlerts can be used to emit screenreader only messages too\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        message: null,\n        count: 1\n      }\n    }\n\n    changeMessage = () => {\n      this.setState({\n        message: `this is message ${this.state.count}`,\n        count: this.state.count + 1\n      })\n    }\n\n    clearMessage = () => {\n      this.setState({\n        message: null,\n        count: this.state.count + 1\n      })\n    }\n\n    render() {\n      return (\n        <div>\n          <Button onClick={this.changeMessage}>Change Message</Button>\n          <Button onClick={this.clearMessage} margin=\"0 0 0 small\">\n            Clear Message\n          </Button>\n          <Alert\n            liveRegion={() => document.getElementById('flash-messages')}\n            isLiveRegionAtomic\n            screenReaderOnly\n          >\n            {this.state.message}\n          </Alert>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [message, setMessage] = useState(null)\n    const [count, setCount] = useState(1)\n\n    const changeMessage = () => {\n      setMessage(`this is message ${count}`)\n      setCount(count + 1)\n    }\n\n    const clearMessage = () => {\n      setMessage(null)\n      setCount(count + 1)\n    }\n\n    return (\n      <div>\n        <Button onClick={changeMessage}>Change Message</Button>\n        <Button onClick={clearMessage} margin=\"0 0 0 small\">\n          Clear Message\n        </Button>\n        <Alert\n          liveRegion={() => document.getElementById('flash-messages')}\n          isLiveRegionAtomic\n          screenReaderOnly\n        >\n          {message}\n        </Alert>\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\nWhen Alerts are used inline, the shadow can be removed with the `hasShadow` property.\n\n```js\n---\ntype: example\n---\n<View as=\"div\" background=\"primary\" padding=\"large\">\n  <View\n    as=\"div\"\n    background=\"primary\"\n    padding=\"small medium\"\n    borderWidth=\"small\"\n    borderRadius=\"small\"\n    margin=\"x-small 0\"\n  >\n    {lorem.paragraph()}\n  </View>\n  <Alert\n    variant=\"info\"\n    margin=\"x-small 0\"\n    renderCloseButtonLabel=\"Close\"\n    hasShadow={false}\n  >\n    This is an inline Alert, so it shouldn't have a shadow.\n  </Alert>\n  <View\n    as=\"div\"\n    background=\"primary\"\n    padding=\"small medium\"\n    borderWidth=\"small\"\n    borderRadius=\"small\"\n    margin=\"x-small 0\"\n  >\n    {lorem.paragraph()}\n  </View>\n</View>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use the Info alert to notify the user of more information</Figure.Item>\n    <Figure.Item>Use the Error alert to notify user of an error</Figure.Item>\n    <Figure.Item>Use the Warning alert to notify user of a warning</Figure.Item>\n    <Figure.Item>Use the Success alert to notify user of a success event or action</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Have alert messaging that is more than two lines long</Figure.Item>\n    <Figure.Item>Overuse alerts on the same page</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>If the alert requires user interaction to be dismissed, the alert should behave as a modal dialog. Focus should be set to the alert when it appears, remain in the alert until it is dismissed, and return to a logical place on the page when the alert is dismissed</Figure.Item>\n    <Figure.Item>aria-live=\"polite\" alerts will only be announced if the user is not currently doing anything. Polite should be used in most situations involving live regions that present new info to users</Figure.Item>\n    <Figure.Item>aria-live=\"assertive\" alerts will be announced to the user as soon as possible, but not necessarily immediately. Assertive should be used if there is information that a user must know about right away, for example, a warning message in a form that does validation on the fly</Figure.Item>\n    <Figure.Item>The aria-atomic=BOOLEAN is used to set whether or not the screen reader should always present the live region as a whole, even if only part of the region changes. The possible settings are: false or true. The default setting is false.</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Alert","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"content to be rendered within Alert","tsType":{"name":"ReactNode"},"defaultValue":{"value":"null","computed":false}},"variant":{"type":{"name":"enum","value":[{"value":"'info'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'error'","computed":false}]},"required":false,"description":"Determines color and icon","tsType":{"name":"union","raw":"'info' | 'success' | 'warning' | 'error'","elements":[{"name":"literal","value":"'info'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'warning'"},{"name":"literal","value":"'error'"}]},"defaultValue":{"value":"'info'","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"},"defaultValue":{"value":"'x-small 0'","computed":false}},"liveRegion":{"type":{"name":"func"},"required":false,"description":"Function that returns the DIV where screenreader alerts will be placed.","tsType":{"name":"signature","type":"function","raw":"() => Element","signature":{"arguments":[],"return":{"name":"Element"}}}},"liveRegionPoliteness":{"type":{"name":"enum","value":[{"value":"'polite'","computed":false},{"value":"'assertive'","computed":false}]},"required":false,"description":"Choose the politeness level of screenreader alerts.","tsType":{"name":"union","raw":"'polite' | 'assertive'","elements":[{"name":"literal","value":"'polite'"},{"name":"literal","value":"'assertive'"}]},"defaultValue":{"value":"'assertive'","computed":false}},"isLiveRegionAtomic":{"type":{"name":"bool"},"required":false,"description":"If the screenreader alert should be atomic","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"screenReaderOnly":{"type":{"name":"bool"},"required":false,"description":"If the alert should only be visible to screen readers","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"timeout":{"type":{"name":"number"},"required":false,"description":"Milliseconds until the Alert is dismissed automatically","tsType":{"name":"number"},"defaultValue":{"value":"0","computed":false}},"renderCloseButtonLabel":{"type":{"name":"union","value":[{"name":"func"},{"name":"node"}]},"required":false,"description":"Close button label. Can be a React component","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Callback after the alert is closed","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"transition":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'fade'","computed":false}]},"required":false,"description":"Transition used to make the alert appear and disappear","tsType":{"name":"union","raw":"'none' | 'fade'","elements":[{"name":"literal","value":"'none'"},{"name":"literal","value":"'fade'"}]},"defaultValue":{"value":"'fade'","computed":false}},"open":{"type":{"name":"bool"},"required":false,"description":"if open transitions from truthy to falsey, it's a signal to close and unmount the alert.\nThis is necessary to close the alert from the outside and still run the transition.","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"hasShadow":{"type":{"name":"bool"},"required":false,"description":"If the alert should have a shadow.","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}}},"category":"components","relativePath":"packages/ui-alerts/src/Alert/index.tsx","extension":".tsx","srcPath":"packages/ui-alerts/src/Alert/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-alerts/src/Alert/index.tsx","packageName":"@instructure/ui-alerts","requirePath":"@instructure/ui-alerts/lib/Alert/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-alerts/src/Alert/index.tsx').default","esPath":"@instructure/ui-alerts/es/Alert/index","themePath":"packages/ui-alerts/src/Alert/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-alerts/src/Alert/theme.ts","id":"Alert","title":"Alert"}