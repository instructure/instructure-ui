{"description":"\n### Where to use Link\n\n`Link` is intended for presenting actions **inline with other content**, such as within headings or sentences. Typically those actions navigate the user to a different view.\n\n```js\n---\ntype: example\n---\n<Text>The quick brown fox <Link href=\"https://instructure.github.io/instructure-ui/\">jumps</Link> over the lazy dog.</Text>\n```\n\n```js\n---\ntype: example\n---\n<View background=\"primary-inverse\" as=\"div\">\n  <Text color=\"primary-inverse\">The quick brown fox <Link color=\"link-inverse\" href=\"https://instructure.github.io/instructure-ui/\">jumps</Link> over the lazy dog.</Text>\n</View>\n```\n\n### Adding margin\n\nUse the `margin` prop to add space to the left or right of the Link. Because\nLink displays `inline`, **top and bottom margin will not work**. If you need\nto add margin to the top or bottom of Link, wrap it inside a `<View />`.\n\n```js\n---\ntype: example\n---\n<Text>The quick brown fox <Link href=\"https://instructure.github.io/instructure-ui/\" margin=\"0 small\">jumps</Link> over the lazy dog.</Text>\n```\n\n### Underlines\n\nLink's primary use is inline with other content, which is why it is underlined by default. For rare situations where Link needs\nto appear without surrounding text, the default underline can be configured to only show on hover by making `isWithinText={false}`. **Note: this only applies when outside high contrast mode. When inside high contrast mode, the link will always have an underline.**\n\n```js\n---\ntype: example\n---\n<Link\n  href=\"http://instructure.design\"\n  isWithinText={false}\n>\n  I have no default underline\n</Link>\n```\n\n### Truncating text\n\nUse [TruncateText](#TruncateText) to truncate text within Link. Note this will cause Link to display `inline-flex`,\nunless an alternate `display` prop is provided.\n\n```js\n---\ntype: example\n---\n<Link\n  onClick={() => console.log('clicked')}\n  isWithinText={false}\n  renderIcon={<IconUserLine size=\"small\" />}\n>\n  <TruncateText>{lorem.paragraph()}</TruncateText>\n</Link>\n```\n\n### Using icons\n\nUse the `renderIcon` property to put an [icon](#iconography) inside a Link. To position the\nicon _after_ the link text, change the `iconPlacement` property to `end`. You can also\nrender a Link with just an icon. Don't forget to add text for screen readers, though.\n\n```js\n---\ntype: example\n---\n<div>\n  <View as=\"div\" margin=\"0 0 small\">\n    <Link href=\"https://instructure.design\" renderIcon={<IconUserLine size=\"small\" />}>Icon before text</Link> with the quick brown fox\n  </View>\n  <View as=\"div\" margin=\"0 0 small\">\n    This Link has an icon and displays inline with text. <Link\n      href=\"https://instructure.design\"\n      renderIcon={<IconUserLine />}\n      iconPlacement=\"end\"\n    >\n      Icon appears after Link text\n    </Link>. This is more text after the link.\n  </View>\n  <View as=\"div\">\n    This Link consists of only an icon&nbsp;\n    <Link onClick={() => console.log('clicked!')} renderIcon={IconUserLine}>\n      <ScreenReaderContent>Descriptive text</ScreenReaderContent>\n    </Link>.\n  </View>\n</div>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Use <code>color=\"link-inverse\"</code> when a Link appears on a dark background to ensure adequate contrast</Figure.Item>\n    <Figure.Item>Links must have a non-empty href attribute to be considered true links and to be accessible to keyboard users</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Link","methods":[],"props":{"children":{"type":{"name":"node"},"required":true,"description":"The text and/or icon displayed by the link","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"href":{"type":{"name":"string"},"required":false,"description":"Sets the link's `href` attribute","tsType":{"name":"string"}},"color":{"type":{"name":"enum","value":[{"value":"'link'","computed":false},{"value":"'link-inverse'","computed":false}]},"required":false,"description":"Designates Link's text color to accommodate light and dark backgrounds","tsType":{"name":"union","raw":"'link' | 'link-inverse'","elements":[{"name":"literal","value":"'link'"},{"name":"literal","value":"'link-inverse'"}]},"defaultValue":{"value":"'link'","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the underlying HTML element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element type to render as (will default to `<a>` if href is provided)","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]}},"role":{"type":{"name":"string"},"required":false,"description":"The ARIA role of the element.","tsType":{"name":"string"}},"forceButtonRole":{"type":{"name":"bool"},"required":false,"description":"If the Link has an onClick handler but is not a button element,\nforce ARIA role to be \"button\".","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false}]},"required":false,"description":"Determines if the link is enabled or disabled","tsType":{"name":"union","raw":"'enabled' | 'disabled'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"}]},"defaultValue":{"value":"undefined","computed":true}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"renderIcon":{"type":{"name":"union","value":[{"name":"func"},{"name":"node"}]},"required":false,"description":"Add an SVG icon to the Link. Do not add icons directly as\nchildren.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"iconPlacement":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'end'","computed":false}]},"required":false,"description":"Place the icon before or after the text in the Link.","tsType":{"name":"union","raw":"'start' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"}]},"defaultValue":{"value":"'start'","computed":false}},"display":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'block'","computed":false},{"value":"'inline-block'","computed":false},{"value":"'flex'","computed":false},{"value":"'inline-flex'","computed":false}]},"required":false,"description":"Set the CSS display property of the Link element. 'auto' sets no display property.","tsType":{"name":"union","raw":"'auto' | 'block' | 'inline-block' | 'flex' | 'inline-flex'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'block'"},{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'flex'"},{"name":"literal","value":"'inline-flex'"}]}},"isWithinText":{"type":{"name":"bool"},"required":false,"description":"Set `false` to remove default underline if Link does not appear inline with text","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Fires when the Link loses focus","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<ViewOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"onClick":{"type":{"name":"func"},"required":false,"description":"Fires when the Link is clicked","tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<ViewOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"onFocus":{"type":{"name":"func"},"required":false,"description":"Fires when the Link gains focus","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<ViewOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"onMouseEnter":{"type":{"name":"func"},"required":false,"description":"Fires when the Link is hovered","tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<ViewOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""},"to":{"required":false,"tsType":{"name":"string"},"description":"Needed for React Router links\n@private"}},"category":"components","relativePath":"packages/ui-link/src/Link/index.tsx","extension":".tsx","srcPath":"packages/ui-link/src/Link/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-link/src/Link/index.tsx","packageName":"@instructure/ui-link","requirePath":"@instructure/ui-link/lib/Link/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-link/src/Link/index.tsx').default","esPath":"@instructure/ui-link/es/Link/index","themePath":"packages/ui-link/src/Link/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-link/src/Link/theme.ts","id":"Link","title":"Link"}