{"description":"\nA component for picking a color from a list of colors. Supports adding new colors either programmatically through the `colors` prop, or manually with the built in color picker.\n\n### Color Preset\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        selected: '',\n        colors: [\n          '#ffffff',\n          '#0CBF94',\n          '#0C89BF00',\n          '#BF0C6D',\n          '#BF8D0C',\n          '#ff0000',\n          '#576A66',\n          '#35423A',\n          '#35423F'\n        ]\n      }\n    }\n\n    render() {\n      return (\n        <div>\n          <ColorPreset\n            label=\"Choose a color\"\n            colors={this.state.colors}\n            selected={this.state.selected}\n            onSelect={(selected) => this.setState({ selected })}\n          />\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [selected, setSelected] = useState('')\n    const [colors, setColors] = useState([\n      '#ffffff',\n      '#0CBF94',\n      '#0C89BF00',\n      '#BF0C6D',\n      '#BF8D0C',\n      '#ff0000',\n      '#576A66',\n      '#35423A',\n      '#35423F'\n    ])\n\n    return (\n      <div>\n        <ColorPreset\n          label=\"Choose a color\"\n          colors={colors}\n          selected={selected}\n          onSelect={setSelected}\n        />\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Color Preset (with addition, deletion)\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        selected: '',\n        colors: [\n          '#ffffff',\n          '#0CBF94',\n          '#0C89BF00',\n          '#BF0C6D',\n          '#BF8D0C',\n          '#ff0000',\n          '#576A66',\n          '#35423A',\n          '#35423F'\n        ]\n      }\n    }\n\n    render() {\n      return (\n        <div>\n          <ColorPreset\n            colors={this.state.colors}\n            selected={this.state.selected}\n            onSelect={(selected) => this.setState({ selected })}\n            colorMixerSettings={{\n              addNewPresetButtonScreenReaderLabel:\n                'Add new preset button label',\n              selectColorLabel: 'Select',\n              removeColorLabel: 'Remove',\n              onPresetChange: (colors) => this.setState({ colors }),\n              popoverAddButtonLabel: 'Add',\n              popoverCloseButtonLabel: 'Cancel',\n              colorMixer: {\n                rgbRedInputScreenReaderLabel: 'Input field for red',\n                rgbGreenInputScreenReaderLabel: 'Input field for green',\n                rgbBlueInputScreenReaderLabel: 'Input field for blue',\n                rgbAlphaInputScreenReaderLabel: 'Input field for alpha',\n                colorSliderNavigationExplanationScreenReaderLabel: `You are on a color slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`,\n                alphaSliderNavigationExplanationScreenReaderLabel: `You are on an alpha slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`,\n                colorPaletteNavigationExplanationScreenReaderLabel: `You are on a color palette. To navigate on the palette up, left, down or right, use the 'W', 'A', 'S' and 'D' buttons respectively`\n              },\n              colorContrast: {\n                firstColor: '#FF0000',\n                label: 'Color Contrast Ratio',\n                successLabel: 'PASS',\n                failureLabel: 'FAIL',\n                normalTextLabel: 'Normal text',\n                largeTextLabel: 'Large text',\n                graphicsTextLabel: 'Graphics text',\n                firstColorLabel: 'Background',\n                secondColorLabel: 'Foreground'\n              }\n            }}\n          />\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [selected, setSelected] = useState('')\n    const [colors, setColors] = useState([\n      '#ffffff',\n      '#0CBF94',\n      '#0C89BF00',\n      '#BF0C6D',\n      '#BF8D0C',\n      '#ff0000',\n      '#576A66',\n      '#35423A',\n      '#35423F'\n    ])\n\n    return (\n      <div>\n        <ColorPreset\n          colors={colors}\n          selected={selected}\n          onSelect={setSelected}\n          colorMixerSettings={{\n            addNewPresetButtonScreenReaderLabel: 'Add new preset button label',\n            selectColorLabel: 'Select',\n            removeColorLabel: 'Remove',\n            onPresetChange: setColors,\n            popoverAddButtonLabel: 'Add',\n            popoverCloseButtonLabel: 'Cancel',\n            colorMixer: {\n              rgbRedInputScreenReaderLabel: 'Input field for red',\n              rgbGreenInputScreenReaderLabel: 'Input field for green',\n              rgbBlueInputScreenReaderLabel: 'Input field for blue',\n              rgbAlphaInputScreenReaderLabel: 'Input field for alpha',\n              colorSliderNavigationExplanationScreenReaderLabel: `You are on a color slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`,\n              alphaSliderNavigationExplanationScreenReaderLabel: `You are on an alpha slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`,\n              colorPaletteNavigationExplanationScreenReaderLabel: `You are on a color palette. To navigate on the palette up, left, down or right, use the 'W', 'A', 'S' and 'D' buttons respectively`\n            },\n            colorContrast: {\n              firstColor: '#FF0000',\n              label: 'Color Contrast Ratio',\n              successLabel: 'PASS',\n              failureLabel: 'FAIL',\n              normalTextLabel: 'Normal text',\n              largeTextLabel: 'Large text',\n              graphicsTextLabel: 'Graphics text',\n              firstColorLabel: 'Background',\n              secondColorLabel: 'Foreground'\n            }\n          }}\n        />\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n","displayName":"ColorPreset","methods":[],"props":{"colors":{"type":{"name":"array"},"required":true,"description":"Array of HEX strings which are the preset colors. Supports 8 character HEX (with alpha)","tsType":{"name":"Array","elements":[{"name":"string"}],"raw":"Array<string>"}},"onSelect":{"type":{"name":"func"},"required":true,"description":"The function gets called when a color gets selected","tsType":{"name":"signature","type":"function","raw":"(selected: string) => void","signature":{"arguments":[{"type":{"name":"string"},"name":"selected"}],"return":{"name":"void"}}}},"selected":{"type":{"name":"string"},"required":false,"description":"The currently selected HEX string","tsType":{"name":"string"}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Makes the component uninteractable","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the component's underlying html element.","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"label":{"type":{"name":"string"},"required":false,"description":"Label text of the component","tsType":{"name":"string"}},"popoverScreenReaderLabel":{"type":{"name":"string"},"required":false,"description":"Sets the ScreenReaderLabel for the popover","tsType":{"name":"string"}},"colorMixerSettings":{"type":{"name":"shape","value":{"addNewPresetButtonScreenReaderLabel":{"name":"string","required":true},"selectColorLabel":{"name":"string","required":true},"removeColorLabel":{"name":"string","required":true},"onPresetChange":{"name":"func","required":false},"popoverAddButtonLabel":{"name":"string","required":true},"popoverCloseButtonLabel":{"name":"string","required":true},"maxHeight":{"name":"string","required":false},"colorMixer":{"name":"shape","value":{"withAlpha":{"name":"bool","required":false},"rgbRedInputScreenReaderLabel":{"name":"string","required":true},"rgbGreenInputScreenReaderLabel":{"name":"string","required":true},"rgbBlueInputScreenReaderLabel":{"name":"string","required":true},"rgbAlphaInputScreenReaderLabel":{"name":"string","required":true},"colorSliderNavigationExplanationScreenReaderLabel":{"name":"string","required":true},"alphaSliderNavigationExplanationScreenReaderLabel":{"name":"string","required":true},"colorPaletteNavigationExplanationScreenReaderLabel":{"name":"string","required":true}},"required":true},"colorContrast":{"name":"shape","value":{"firstColor":{"name":"string","required":true},"label":{"name":"string","required":true},"successLabel":{"name":"string","required":true},"failureLabel":{"name":"string","required":true},"normalTextLabel":{"name":"string","required":true},"largeTextLabel":{"name":"string","required":true},"graphicsTextLabel":{"name":"string","required":true},"firstColorLabel":{"name":"string","required":true},"secondColorLabel":{"name":"string","required":true}},"required":false}}},"required":false,"description":"If set, a `plus` button will appear for the preset. Those components whose corresponding keys aren't provided (`colorMixer` or `colorContrast`)\nwill not be rendered.\nThe `onPresetChange` function gets called when a color gets added or removed from the preset list.\nIt will be called with the new list of colors","tsType":{"name":"signature","type":"object","raw":"{\n  /**\n   * screenReaderLabel for the add new preset button\n   */\n  addNewPresetButtonScreenReaderLabel: string\n  selectColorLabel: string\n  removeColorLabel: string\n  onPresetChange: (colors: ColorPresetOwnProps['colors']) => void\n  popoverAddButtonLabel: string\n  popoverCloseButtonLabel: string\n  maxHeight?: string\n  colorMixer: {\n    withAlpha?: boolean\n    rgbRedInputScreenReaderLabel: string\n    rgbGreenInputScreenReaderLabel: string\n    rgbBlueInputScreenReaderLabel: string\n    rgbAlphaInputScreenReaderLabel: string\n    colorSliderNavigationExplanationScreenReaderLabel: string\n    alphaSliderNavigationExplanationScreenReaderLabel: string\n    colorPaletteNavigationExplanationScreenReaderLabel: string\n  }\n  colorContrast?: {\n    firstColor: string\n    label: string\n    successLabel: string\n    failureLabel: string\n    normalTextLabel: string\n    largeTextLabel: string\n    graphicsTextLabel: string\n    firstColorLabel: string\n    secondColorLabel: string\n  }\n}","signature":{"properties":[{"key":"addNewPresetButtonScreenReaderLabel","value":{"name":"string","required":true},"description":"screenReaderLabel for the add new preset button"},{"key":"selectColorLabel","value":{"name":"string","required":true}},{"key":"removeColorLabel","value":{"name":"string","required":true}},{"key":"onPresetChange","value":{"name":"signature","type":"function","raw":"(colors: ColorPresetOwnProps['colors']) => void","signature":{"arguments":[{"type":{"name":"Array","raw":"ColorPresetOwnProps['colors']"},"name":"colors"}],"return":{"name":"void"}},"required":true}},{"key":"popoverAddButtonLabel","value":{"name":"string","required":true}},{"key":"popoverCloseButtonLabel","value":{"name":"string","required":true}},{"key":"maxHeight","value":{"name":"string","required":false}},{"key":"colorMixer","value":{"name":"signature","type":"object","raw":"{\n  withAlpha?: boolean\n  rgbRedInputScreenReaderLabel: string\n  rgbGreenInputScreenReaderLabel: string\n  rgbBlueInputScreenReaderLabel: string\n  rgbAlphaInputScreenReaderLabel: string\n  colorSliderNavigationExplanationScreenReaderLabel: string\n  alphaSliderNavigationExplanationScreenReaderLabel: string\n  colorPaletteNavigationExplanationScreenReaderLabel: string\n}","signature":{"properties":[{"key":"withAlpha","value":{"name":"boolean","required":false}},{"key":"rgbRedInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbGreenInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbBlueInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbAlphaInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"colorSliderNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}},{"key":"alphaSliderNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}},{"key":"colorPaletteNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}}]},"required":true}},{"key":"colorContrast","value":{"name":"signature","type":"object","raw":"{\n  firstColor: string\n  label: string\n  successLabel: string\n  failureLabel: string\n  normalTextLabel: string\n  largeTextLabel: string\n  graphicsTextLabel: string\n  firstColorLabel: string\n  secondColorLabel: string\n}","signature":{"properties":[{"key":"firstColor","value":{"name":"string","required":true}},{"key":"label","value":{"name":"string","required":true}},{"key":"successLabel","value":{"name":"string","required":true}},{"key":"failureLabel","value":{"name":"string","required":true}},{"key":"normalTextLabel","value":{"name":"string","required":true}},{"key":"largeTextLabel","value":{"name":"string","required":true}},{"key":"graphicsTextLabel","value":{"name":"string","required":true}},{"key":"firstColorLabel","value":{"name":"string","required":true}},{"key":"secondColorLabel","value":{"name":"string","required":true}}]},"required":false}}]}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-color-picker/src/ColorPreset/index.tsx","extension":".tsx","srcPath":"packages/ui-color-picker/src/ColorPreset/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-color-picker/src/ColorPreset/index.tsx","packageName":"@instructure/ui-color-picker","requirePath":"@instructure/ui-color-picker/lib/ColorPreset/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-color-picker/src/ColorPreset/index.tsx').default","esPath":"@instructure/ui-color-picker/es/ColorPreset/index","themePath":"packages/ui-color-picker/src/ColorPreset/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-color-picker/src/ColorPreset/theme.ts","id":"ColorPreset","title":"ColorPreset"}