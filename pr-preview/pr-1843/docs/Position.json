{"description":"\nA component that positions content with respect to a designated target.\n\n### Important Upgrade Notes\n\nCodemods are available to automatically update any props that have changed. However, there are some breaking changes that will need to be addressed manually. These changes and are described below.\n\n- `Position.Target` and `Position.Content` are no longer in use. The target is now defined via the `renderTarget` prop and the children of a Position will be rendered as the positioned content.\n\n### Internationalization\n\n`Position` placement can be internationalized for right to left languages. The\nfollowing examples are configured utilizing the [TextDirectionContext](#TextDirectionContext)\ncomponent in conjunction with the [mirrorHorizontalPlacement](#mirrorPlacement)\nutility function.\n\n```js\n---\ntype: example\n---\nconst fpo = lorem.sentence()\nclass Example extends React.Component {\n\nstatic contextType = TextDirectionContext\n\nconstructor (props) {\n  super(props)\n  this.state = { placement: 'end', adjusted: 'end' }\n}\n\nhandleButtonClick = () => {\n  const placements = [\n    'top',\n    'end',\n    'bottom',\n    'start',\n    'top start',\n    'start top',\n    'start center',\n    'start bottom',\n    'bottom start',\n    'bottom center',\n    'bottom end',\n    'end bottom',\n    'end center',\n    'end top',\n    'top end',\n    'top center',\n    'center end',\n    'center start'\n  ]\n  let { placement } = this.state\n  placement = placements[placements.indexOf(placement) + 1] || placements[0]\n  this.setState({ placement })\n};\n\nhandlePositionChanged = ({ placement }) => {\n  this.setState({ adjusted: placement })\n};\n\nrender () {\n  const { placement, adjusted } = this.state\n\n  let offset = {\n    x: 0,\n    y: 0\n  }\n\n  if (['top', 'bottom'].indexOf(placement.split(' ')[0]) >= 0) {\n    offset.y = 16\n  } else {\n    offset.x = 16\n  }\n  const rtl = this.context === 'rtl'\n  return (\n    <View\n      as=\"div\"\n      margin=\"x-large\"\n      padding=\"x-large\"\n      textAlign=\"center\"\n    >\n        <Position\n          placement={rtl ? mirrorHorizontalPlacement(placement, ' ') : placement}\n          offsetX={offset.x}\n          offsetY={offset.y}\n          onPositionChanged={this.handlePositionChanged}\n          renderTarget={\n            <Button color=\"primary\" onClick={this.handleButtonClick}>\n              Change Placement\n            </Button>\n          }\n        >\n          <ContextView\n            placement={rtl ? mirrorHorizontalPlacement(adjusted, ' ') : adjusted}\n            maxWidth=\"22rem\" padding=\"small\"\n          >\n            <Heading level=\"h3\">{placement}</Heading>\n            <p>{fpo}</p>\n          </ContextView>\n        </Position>\n    </View>\n  )\n}\n}\n\nrender(<Example />)\n```\n\nThe `mountNode` prop renders the positioned content inside the configured element (instead of the body).\n\n```js\n---\ntype: example\n---\n\nconst fpo = lorem.sentence()\nclass Example extends React.Component {\n\n  static contextType = TextDirectionContext\n\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      placement: 'end',\n      adjusted: 'end'\n    }\n  }\n\n  handleButtonClick = () => {\n    const placements = [\n      'top',\n      'end',\n      'bottom',\n      'start',\n      'top start',\n      'start top',\n      'start center',\n      'start bottom',\n      'bottom start',\n      'bottom center',\n      'bottom end',\n      'end bottom',\n      'end center',\n      'end top',\n      'top end',\n      'top center',\n      'center end',\n      'center start'\n    ]\n\n    let { placement } = this.state\n\n    placement = placements[placements.indexOf(placement) + 1] || placements[0]\n\n    this.setState({ placement })\n  };\n\n  handlePositionChanged = ({ placement }) => {\n    this.setState({ adjusted: placement })\n  };\n\n  render () {\n    const { placement, adjusted } = this.state\n\n    let offsetX = 0\n    let offsetY = 0\n\n    if (['top', 'bottom'].indexOf(placement.split(' ')[0]) >= 0) {\n      offsetY = 16\n    } else {\n      offsetX = 16\n    }\n    const rtl = this.context === 'rtl'\n\n    return (\n    <span>\n      <View\n        as=\"div\"\n        margin=\"x-large\"\n        padding=\"x-large\"\n        textAlign=\"center\"\n      >\n          <Position\n            placement={rtl ? mirrorHorizontalPlacement(placement, ' ') : placement}\n            offsetX={offsetX}\n            offsetY={offsetY}\n            mountNode={() => this._mountNode}\n            onPositionChanged={this.handlePositionChanged}\n            renderTarget={\n              <Button color=\"primary\" onClick={this.handleButtonClick}>\n                Change Placement\n              </Button>\n            }\n          >\n            <ContextView\n              placement={rtl ? mirrorHorizontalPlacement(adjusted, ' ') : adjusted}\n              maxWidth=\"20rem\"\n              padding=\"small\"\n            >\n              <Heading level=\"h3\">{placement}</Heading>\n              <p>\n                {fpo}\n              </p>\n            </ContextView>\n          </Position>\n      </View>\n      <div\n        style={{\n          position: 'relative',\n          padding: 100\n        }}\n        ref={(c) => { this._mountNode = c }}\n      />\n    </span>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n`shouldPositionOverTarget` prop with `stretch` placement.\n\n```js\n---\ntype: example\n---\nconst fpo = lorem.paragraphs(7)\n\nclass Example extends React.Component {\n\n  static contextType = TextDirectionContext\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      placement: 'top stretch'\n    }\n  }\n\n  handleButtonClick = () => {\n    const placements = [\n      'top stretch',\n      'bottom stretch',\n      'end stretch',\n      'start stretch'\n    ]\n\n    let { placement } = this.state\n\n    placement = placements[placements.indexOf(placement) + 1] || placements[0]\n\n    this.setState({ placement })\n  };\n\n  render () {\n    const { placement } = this.state\n    const rtl = this.context === 'rtl'\n    return (\n      <div>\n        <Position\n          placement={rtl ? mirrorHorizontalPlacement(placement, ' ') : placement}\n          shouldPositionOverTarget\n          insertAt=\"top\"\n          mountNode={() => this._mountNode}\n          renderTarget={\n            <div\n              ref={(c) => { this._mountNode = c }}\n              style={{\n                overflowY: 'auto',\n                maxHeight: '10rem',\n                marginBottom: '1rem',\n                padding: '0.5rem'\n              }}\n            >\n              {fpo}\n            </div>\n          }\n        >\n          <div\n            style={{\n              backgroundColor: 'white',\n              padding: '1rem'\n            }}\n          >\n            <Heading level=\"h3\">{placement}</Heading>\n          </div>\n        </Position>\n        <Button color=\"primary\" onClick={this.handleButtonClick}>\n          Change Placement\n        </Button>\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n","displayName":"Position","methods":[],"props":{"renderTarget":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"The node to use as the position target","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"target":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"The target to be used when not using `renderTarget`","tsType":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}]}},"placement":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false},{"value":"'start'","computed":false},{"value":"'end'","computed":false},{"value":"'top start'","computed":false},{"value":"'top center'","computed":false},{"value":"'top end'","computed":false},{"value":"'top stretch'","computed":false},{"value":"'bottom start'","computed":false},{"value":"'bottom center'","computed":false},{"value":"'bottom end'","computed":false},{"value":"'bottom stretch'","computed":false},{"value":"'start top'","computed":false},{"value":"'start center'","computed":false},{"value":"'start bottom'","computed":false},{"value":"'start stretch'","computed":false},{"value":"'end top'","computed":false},{"value":"'end center'","computed":false},{"value":"'end bottom'","computed":false},{"value":"'end stretch'","computed":false},{"value":"'center start'","computed":false},{"value":"'center end'","computed":false},{"value":"'offscreen'","computed":false}]},"required":false,"description":"The placement of the content in relation to the target","tsType":{"name":"union","raw":"| 'top'\n| 'bottom'\n| 'start'\n| 'end'\n| 'top start'\n| 'top center'\n| 'top end'\n| 'top stretch'\n| 'bottom start'\n| 'bottom center'\n| 'bottom end'\n| 'bottom stretch'\n| 'start top'\n| 'start center'\n| 'start bottom'\n| 'start stretch'\n| 'end top'\n| 'end center'\n| 'end bottom'\n| 'end stretch'\n| 'center start'\n| 'center end'\n| 'offscreen'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"},{"name":"literal","value":"'top start'"},{"name":"literal","value":"'top center'"},{"name":"literal","value":"'top end'"},{"name":"literal","value":"'top stretch'"},{"name":"literal","value":"'bottom start'"},{"name":"literal","value":"'bottom center'"},{"name":"literal","value":"'bottom end'"},{"name":"literal","value":"'bottom stretch'"},{"name":"literal","value":"'start top'"},{"name":"literal","value":"'start center'"},{"name":"literal","value":"'start bottom'"},{"name":"literal","value":"'start stretch'"},{"name":"literal","value":"'end top'"},{"name":"literal","value":"'end center'"},{"name":"literal","value":"'end bottom'"},{"name":"literal","value":"'end stretch'"},{"name":"literal","value":"'center start'"},{"name":"literal","value":"'center end'"},{"name":"literal","value":"'offscreen'"}]},"defaultValue":{"value":"'bottom center'","computed":false}},"mountNode":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"An element or a function returning an element to use as the mount node\nfor the `<Position />` (defaults to `document.body`)","tsType":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}]},"defaultValue":{"value":"null","computed":false}},"insertAt":{"type":{"name":"enum","value":[{"value":"'bottom'","computed":false},{"value":"'top'","computed":false}]},"required":false,"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'","tsType":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}]},"defaultValue":{"value":"'bottom'","computed":false}},"constrain":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"},{"name":"enum","value":[{"value":"'window'","computed":false},{"value":"'scroll-parent'","computed":false},{"value":"'parent'","computed":false},{"value":"'none'","computed":false}]}]},"required":false,"description":"The parent in which to constrain the placement.\nOne of?: 'window', 'scroll-parent', 'parent', 'none', an element,\nor a function returning an element","tsType":{"name":"union","raw":"| PositionMountNode\n| 'window'\n| 'scroll-parent'\n| 'parent'\n| 'none'","elements":[{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}]},{"name":"literal","value":"'window'"},{"name":"literal","value":"'scroll-parent'"},{"name":"literal","value":"'parent'"},{"name":"literal","value":"'none'"}]},"defaultValue":{"value":"'window'","computed":false}},"offsetX":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"The horizontal offset for the positioned content","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"defaultValue":{"value":"0","computed":false}},"offsetY":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"The vertical offset for the positioned content","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"defaultValue":{"value":"0","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":"An id will be generated if not provided","tsType":{"name":"string"}},"shouldTrackPosition":{"type":{"name":"bool"},"required":false,"description":"Whether or not position of the target should be tracked or just set statically on render","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"shouldPositionOverTarget":{"type":{"name":"bool"},"required":false,"description":"Whether or not you want the content to position over the target","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"onPositionChanged":{"type":{"name":"func"},"required":false,"description":"Callback fired when the position changes","tsType":{"name":"signature","type":"function","raw":"(position: PositionObject) => void","signature":{"arguments":[{"type":{"name":"intersection","raw":"ElementPosition['style'] & {\n  placement: ElementPosition['placement']\n}","elements":[{"name":"signature","raw":"ElementPosition['style']"},{"name":"signature","type":"object","raw":"{\n  placement: ElementPosition['placement']\n}","signature":{"properties":[{"key":"placement","value":{"name":"union","raw":"ElementPosition['placement']","required":true}}]}}]},"name":"position"}],"return":{"name":"void"}}}},"onPositioned":{"type":{"name":"func"},"required":false,"description":"Callback fired when `<Position />` content has been mounted and is initially positioned","tsType":{"name":"signature","type":"function","raw":"(position: PositionObject) => void","signature":{"arguments":[{"type":{"name":"intersection","raw":"ElementPosition['style'] & {\n  placement: ElementPosition['placement']\n}","elements":[{"name":"signature","raw":"ElementPosition['style']"},{"name":"signature","type":"object","raw":"{\n  placement: ElementPosition['placement']\n}","signature":{"properties":[{"key":"placement","value":{"name":"union","raw":"ElementPosition['placement']","required":true}}]}}]},"name":"position"}],"return":{"name":"void"}}}},"children":{"type":{"name":"node"},"required":false,"description":"The content to be positioned","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"defaultValue":{"value":"null","computed":false}},"containerDisplay":{"type":{"name":"enum","value":[{"value":"'inline-block'","computed":false},{"value":"'block'","computed":false}]},"required":false,"description":"Set the CSS `display` property on the outermost `<span>` container element","tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the underlying HTML root element (the target)","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}}},"category":"components/utilities","relativePath":"packages/ui-position/src/Position/index.tsx","extension":".tsx","srcPath":"packages/ui-position/src/Position/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-position/src/Position/index.tsx","packageName":"@instructure/ui-position","requirePath":"@instructure/ui-position/lib/Position/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-position/src/Position/index.tsx').default","esPath":"@instructure/ui-position/es/Position/index","themePath":"packages/ui-position/src/Position/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-position/src/Position/theme.ts","id":"Position","title":"Position"}