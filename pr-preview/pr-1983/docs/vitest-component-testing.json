{"description":"\n## Vitest component testing\n\n[Vitest](https://vitest.dev/guide/) is our fastest tool for in-memory testing of components and logic in a Node.js environment. We pair it with [React Testing Library](https://testing-library.com/docs/react-testing-library/intro) to validate behavior, rendering, and edge casesâ€”all without requiring a real browser.\n\n### Running Vitest\n\nVitest can be run from the project root with the following command. It's configured in our CI pipeline so pushing a branch to remote runs these tests automatically.\n\n```\nnpm run test:vitest\n```\n\n### Creating new tests\n\nCurrent tests can be found next to the component source code in the `__tests__` subfolder. New tests should be added there.\n\nVitest tests usually have a structure like this:\n\n```js\n---\ntype: code\n---\nimport { render, screen } from '@testing-library/react'\nimport { vi } from 'vitest'\n\nimport '@testing-library/jest-dom'\nimport ComponentToTest from '../index'\n\ndescribe('<ComponentToTest/>', () => {\n  it('works as intended...', () => {\n    const onClickMock = vi.fn()\n    render(<ComponentToTest onClick={onClickMock}/>)\n    // rest of the test comes here\n  })\n})\n```\n\n### Example\n\nThe `ui-avatar` tests can be found [here](https://github.com/instructure/instructure-ui/tree/master/packages/ui-avatar/src/Avatar/__tests__).\n\n### Debugging tests\n\nIf you need to debug a test in your IDE or print extra info, you can use:\n\n```\nconsole.log('Debug info')\n```\n\nTo inspect the rendered DOM and current test state, you can also use:\n\n```\nscreen.debug()\n```\n\n### Simulating Real User Interactions\n\nWhile fireEvent from React Testing Library works for basic interaction simulation, we use @testing-library/user-event for more realistic and accessible user interaction testing.\n[userEvent](https://testing-library.com/docs/user-event/intro/) is a companion library for Testing Library that provides more advanced simulation of browser interactions than the built-in fireEvent method.\nWhile fireEvent dispatches single DOM events, userEvent can fire multiple events and do additional checks along the way, making your tests closer to actual user experience.\n\nUse it in the following way:\n\n```js\n---\ntype: code\n---\nimport { render, screen } from '@testing-library/react'\nimport { vi } from 'vitest'\n\nimport '@testing-library/jest-dom'\nimport userEvent from '@testing-library/user-event'\nimport ComponentToTest from '../index'\n\ndescribe('<ComponentToTest/>', () => {\n  it('works as intended...', async () => {\n    const onKeyDownMock = vi.fn()\n    render(<ComponentToTest onKeyDown={onKeyDownMock}/>)\n\n    const input = screen.getByTestId('input')\n    await userEvent.type(input, 'foo bar{enter}')\n    // rest of the test comes here\n  })\n})\n```\n","title":"Vitest component testing","category":"Testing","order":2,"relativePath":"docs/testing/vitest-component-testing.md","extension":".md","srcPath":"docs/testing/vitest-component-testing.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/testing/vitest-component-testing.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/testing/vitest-component-testing","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/testing/vitest-component-testing.md').default","esPath":"@instructure/docs/testing/vitest-component-testing","themePath":"docs/testing/vitest-component-testing.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/testing/vitest-component-testing.md","id":"vitest-component-testing"}