{"description":"\nUse `<Tag />` to represent a category or group in a form.\n\n```js\n---\ntype: example\n---\n<Tag text=\"Static\" margin=\"0 xx-small 0 0\" />\n```\n\n### Dismissible\n\nWhen the `dismissible` prop is added to a clickable Tag, the button\nrenders an X/close icon (the Tag should be dismissed via the `onClick`\nprop). When implementing dismissable tags, be sure to add [AccessibleContent](AccessibleContent) to clarify that the tag is dismissible to screen readers.\n\n```js\n---\ntype: example\n---\n<Tag\n  text={\n    <AccessibleContent alt=\"Remove dismissible tag\">\n      Dismissible tag\n    </AccessibleContent>\n  }\n  dismissible\n  margin=\"0 xx-small 0 0\"\n  onClick={function () {\n    alert(\"This Tag was dismissed\")\n  }}\n/>\n```\n\n### Disabled\n\nA `disabled` Tag.\n\n```js\n---\ntype: example\n---\n<Tag\n  text=\"Dismissible Disabled\"\n  dismissible\n  disabled\n  margin=\"0 xx-small 0 0\"\n  onClick={function () {\n    alert(\"This Tag was dismissed. This shouldn't happen\")\n  }}\n/>\n```\n\n### Sizes\n\n`medium` is the default Tag size.\n\n```js\n---\ntype: example\n---\n<div>\n  <Tag text=\"Small\" size=\"small\" margin=\"0 xx-small 0 0\" />\n  <Tag text=\"Medium\" margin=\"0 xx-small 0 0\" />\n  <Tag text=\"Large\" size=\"large\" margin=\"0 xx-small 0 0\" />\n</div>\n```\n\n### Max-width\n\n> **DEPRECATED** Please do not make Tags that have overflowing text, it's an a11y anti-pattern. The issue is if text overflows it cannot be read by keyboard-only users. We could make the Tag focusable, but that would be an anti-pattern too because only elements that are interactive should be focusable (and just displaying a tooltip is not a real interaction)\n\n```js\n---\ntype: example\n---\n<Tag\n  text=\"Long string of text designed to trigger overflow\"\n/>\n```\n\n### Inline variant\n\nThis variant is designed to look similar to the surrounding text.\n\n```js\n---\ntype: example\n---\n<p>\n  This is an\n  <Tag\n    dismissible\n    onClick={() => alert('Tag dismissed')}\n    size=\"large\"\n    text={<AccessibleContent alt=\"Remove 'inline'\">\n      inline\n    </AccessibleContent>}\n    variant=\"inline\"\n  />\n  tag.\n</p>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>When implementing dismissable tags, be sure to add AccessibleContent to clarify that the tag is dismissible to screen readers</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Tag","methods":[{"name":"focused","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleClick","docblock":null,"modifiers":[],"params":[{"name":"e","optional":false,"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps & Element>","elements":[{"name":"intersection","raw":"ViewProps & Element","elements":[{"name":"ViewProps"},{"name":"Element"}]}],"alias":"React.MouseEvent"}}],"returns":null},{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"element","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null}],"props":{"className":{"required":false,"tsType":{"name":"string"},"description":""},"text":{"required":true,"tsType":{"name":"union","raw":"string | React.ReactNode","elements":[{"name":"string"},{"name":"ReactReactNode","raw":"React.ReactNode"}]},"description":""},"title":{"required":false,"tsType":{"name":"string"},"description":"@deprecated since version 10\nUse of the title attribute is highly problematic due to accessibility concerns"},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":"Whether or not to disable the tag","defaultValue":{"value":"false","computed":false}},"readOnly":{"required":false,"tsType":{"name":"boolean"},"description":"Works just like disabled but keeps the same styles as if it were active","defaultValue":{"value":"false","computed":false}},"dismissible":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Valid values are `0`, `none`, `auto`, `xxxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`."},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<ViewProps & Element>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps & Element>","elements":[{"name":"intersection","raw":"ViewProps & Element","elements":[{"name":"ViewProps"},{"name":"Element"}]}]},"name":"event"}],"return":{"name":"void"}}},"description":"If you add an onClick prop, Tag renders as a clickable button"},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a reference to the underlying html root element"},"size":{"required":false,"tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"description":"","defaultValue":{"value":"'medium'","computed":false}},"variant":{"required":false,"tsType":{"name":"union","raw":"'default' | 'inline'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'inline'"}]},"description":"","defaultValue":{"value":"'default'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-tag/src/Tag/index.tsx","extension":".tsx","srcPath":"packages/ui-tag/src/Tag/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-tag/src/Tag/index.tsx","packageName":"@instructure/ui-tag","requirePath":"@instructure/ui-tag/lib/Tag/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-tag/src/Tag/index.tsx').default","esPath":"@instructure/ui-tag/es/Tag/index","themePath":"packages/ui-tag/src/Tag/styles.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-tag/src/Tag/styles.ts","id":"Tag","title":"Tag"}