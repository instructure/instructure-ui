{"description":"@module TopNavBarMenuItems","displayName":"TopNavBarMenuItems","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]}}],"returns":null},{"name":"childrenArray","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"renderOptionContent","docblock":null,"modifiers":[],"params":[{"name":"children","optional":false,"type":null},{"name":"itemProps","optional":false,"type":null}],"returns":null},{"name":"renderHiddenItemsMenu","docblock":null,"modifiers":[],"params":[{"name":"hiddenItems","optional":false,"type":{"name":"Array","elements":[{"name":"ReactComponentElement","raw":"React.ComponentElement<TopNavBarItemProps, TopNavBarItem>","elements":[{"name":"intersection","raw":"TopNavBarItemOwnProps &\nWithStyleProps<TopNavBarItemTheme, TopNavBarItemStyle> &\nOtherHTMLAttributes<TopNavBarItemOwnProps> &\nWithDeterministicIdProps","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * the element type to render as (will default to `<a>` if href is provided)\n   */\n  as?: AsElementType\n\n  /**\n   * Required id, used for internal tracking,\n   * and it also appears as an id on the item element.\n   */\n  id: string\n\n  /**\n   * A required label of the navbar item.\n   *\n   * __Note__ that it is required even for the `variant=\"icon\"` type items: the label will be used as an accessible label for screen readers.\n   */\n  children: React.ReactNode\n\n  /**\n   * The display variant of the item.\n   *\n   * The __\"default\"__ variant is displayed as a normal menu item.\n   *\n   * The __\"button\"__ variant is displayed as a button.\n   *\n   * The __\"icon\"__ variant is displayed as an icon without label.\n   *\n   * The __\"avatar\"__ variant is displayed as an avatar without label.\n   *\n   * The __\"forceIconWithLabel\"__ variant is displayed as default on desktop and the same way (with label) on mobile.\n   */\n  variant?: 'default' | 'button' | 'icon' | 'avatar' | 'forceIconWithLabel'\n\n  /**\n   * The status of the item.\n   *\n   * The __\"active\"__ status indicates current page or currently active menu item.\n   * Only `variant=\"default\"` items can be set to active.\n   *\n   * The __\"disabled\"__ status indicates that the items is disabled.\n   */\n  status?: 'default' | 'active' | 'disabled'\n\n  /**\n   * Renders the submenu for the item.\n   * Accepts a [Drilldown](Drilldown) component.\n   * The menu toggle logic is controlled by the menu item.\n   *\n   * If you need more customization, use the `customPopoverConfig` prop.\n   */\n  renderSubmenu?: DrilldownSubmenu\n\n  /**\n   * Displays the open/close chevron next to the item,\n   * when it has a submenu or custom popover.\n   */\n  showSubmenuChevron?: boolean\n\n  /**\n   * Configures a custom Popover for the menu item.\n   * Accepts [Popover](Popover) props (except \"renderTrigger\").\n   *\n   * Use this prop for features like search, tooltips, etc., and use\n   * the `renderSubmenu` prop for the default submenu!\n   *\n   * In small viewport mode only items in `<TopNavBar.ActionItems>` can display custom popovers.\n   */\n  customPopoverConfig?: Omit<\n    PopoverProps,\n    'renderTrigger' | 'positionContainerDisplay'\n  >\n\n  /**\n   * Configures a Tooltip for the menu item.\n   *\n   * Tooltips can be useful for `variant=\"icon\"` or `variant=\"avatar\"` type\n   * menu items where there is no visible text.\n   *\n   * Accepts a string or a config object containing a subset of props from [Tooltip](Tooltip).\n   */\n  tooltip?: TopNavBarItemTooltipType\n\n  /**\n   * Config for displaying an avatar.\n   *\n   * Used only in `<TopNavBar.User>`, and it is a __required__ prop for the `variant=\"avatar\"` type menu items.\n   *\n   * - __avatarSrc__: Avatar url\n   * - __avatarName__: A __required__ name (user's name) for the avatar\n   * - __avatarAlt__: Accessible label for the avatar\n   */\n  renderAvatar?: {\n    avatarSrc?: string\n    avatarName: string\n    avatarAlt?: string\n  }\n\n  /**\n   * Renders an icon before the label, or by itself.\n   *\n   * It is __required__ for the `variant=\"icon\"` type menu items.\n   * It is also __required__ for items in `<TopNavBar.ActionItems>`\n   * in small viewport mode, because only the icons are displayed\n   * due to the lack of space.\n   */\n  renderIcon?: Renderable\n\n  /**\n   * If the item goes to a new page, pass a href.\n   * Items with submenus cannot have href prop.\n   */\n  href?: string\n\n  /**\n   * If the item does not go to a new page, pass an onClick.\n   * Items with submenus cannot have onClick prop, use the `onSubmenuToggle` prop instead.\n   */\n  onClick?: (\n    event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n  ) => void\n\n  /**\n   * Only fires when the item is hidden because of truncation or mobile view. Intended to be used for navigation when the item would otherwise be a link.\n   */\n  onHiddenClick?: (\n    event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n  ) => void\n\n  /**\n   * __In desktop mode__, the callback fired when the item's submenu ([Drilldown](Drilldown)) is toggled open/closed.\n   */\n  onSubmenuToggle?: DrilldownProps['onToggle']\n\n  /**\n   * __In desktop mode__, the callback fired when mouse is over item.\n   */\n  onMouseOver?: (event: React.MouseEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired when mouse leaves item.\n   */\n  onMouseOut?: (event: React.MouseEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired when the item is focused.\n   */\n  onFocus?: (event: React.FocusEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired when the item is blurred.\n   */\n  onBlur?: (event: React.FocusEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired on keydown.\n   */\n  onKeyDown?: (event: React.KeyboardEvent<ViewProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired on keyup.\n   */\n  onKeyUp?: (event: React.KeyboardEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: Element | null) => void\n\n  /**\n   * A function that returns a reference to the button/link HTML element\n   */\n  itemRef?: (el: HTMLButtonElement | HTMLLinkElement | null) => void\n\n  /**\n   * Should close the container menu component, if clicked on the option marked with this prop\n   */\n  shouldCloseOnClick?: ShouldCloseOnClick\n\n  /**\n   * Manually control if this component should display a focus outline.\n   *\n   * When left `undefined` (which is the default) the focus outline will display\n   * if this component is focusable and receives focus or has an open popover.\n   */\n  withFocusOutline?: boolean\n}","signature":{"properties":[{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"the element type to render as (will default to `<a>` if href is provided)"},{"key":"id","value":{"name":"string","required":true},"description":"Required id, used for internal tracking,\nand it also appears as an id on the item element."},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true},"description":"A required label of the navbar item.\n\n__Note__ that it is required even for the `variant=\"icon\"` type items: the label will be used as an accessible label for screen readers."},{"key":"variant","value":{"name":"union","raw":"'default' | 'button' | 'icon' | 'avatar' | 'forceIconWithLabel'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'button'"},{"name":"literal","value":"'icon'"},{"name":"literal","value":"'avatar'"},{"name":"literal","value":"'forceIconWithLabel'"}],"required":false},"description":"The display variant of the item.\n\nThe __\"default\"__ variant is displayed as a normal menu item.\n\nThe __\"button\"__ variant is displayed as a button.\n\nThe __\"icon\"__ variant is displayed as an icon without label.\n\nThe __\"avatar\"__ variant is displayed as an avatar without label.\n\nThe __\"forceIconWithLabel\"__ variant is displayed as default on desktop and the same way (with label) on mobile."},{"key":"status","value":{"name":"union","raw":"'default' | 'active' | 'disabled'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'active'"},{"name":"literal","value":"'disabled'"}],"required":false},"description":"The status of the item.\n\nThe __\"active\"__ status indicates current page or currently active menu item.\nOnly `variant=\"default\"` items can be set to active.\n\nThe __\"disabled\"__ status indicates that the items is disabled."},{"key":"renderSubmenu","value":{"name":"ReactComponentElement","raw":"React.ComponentElement<DrilldownProps, Drilldown>","elements":[{"name":"DrilldownProps"},{"name":"Drilldown"}],"required":false},"description":"Renders the submenu for the item.\nAccepts a [Drilldown](Drilldown) component.\nThe menu toggle logic is controlled by the menu item.\n\nIf you need more customization, use the `customPopoverConfig` prop."},{"key":"showSubmenuChevron","value":{"name":"boolean","required":false},"description":"Displays the open/close chevron next to the item,\nwhen it has a submenu or custom popover."},{"key":"customPopoverConfig","value":{"name":"Omit","elements":[{"name":"PopoverProps"},{"name":"union","raw":"'renderTrigger' | 'positionContainerDisplay'","elements":[{"name":"literal","value":"'renderTrigger'"},{"name":"literal","value":"'positionContainerDisplay'"}]}],"raw":"Omit<\n  PopoverProps,\n  'renderTrigger' | 'positionContainerDisplay'\n>","required":false},"description":"Configures a custom Popover for the menu item.\nAccepts [Popover](Popover) props (except \"renderTrigger\").\n\nUse this prop for features like search, tooltips, etc., and use\nthe `renderSubmenu` prop for the default submenu!\n\nIn small viewport mode only items in `<TopNavBar.ActionItems>` can display custom popovers."},{"key":"tooltip","value":{"name":"union","raw":"| string\n| {\n    renderTip: TooltipProps['renderTip']\n    color?: TooltipProps['color']\n    placement?: TooltipProps['placement']\n    offsetX?: TooltipProps['offsetX']\n    offsetY?: TooltipProps['offsetY']\n    onShowContent?: TooltipProps['onShowContent']\n    onHideContent?: TooltipProps['onHideContent']\n  }","elements":[{"name":"string"},{"name":"signature","type":"object","raw":"{\n  renderTip: TooltipProps['renderTip']\n  color?: TooltipProps['color']\n  placement?: TooltipProps['placement']\n  offsetX?: TooltipProps['offsetX']\n  offsetY?: TooltipProps['offsetY']\n  onShowContent?: TooltipProps['onShowContent']\n  onHideContent?: TooltipProps['onHideContent']\n}","signature":{"properties":[{"key":"renderTip","value":{"name":"TooltipProps['renderTip']","raw":"TooltipProps['renderTip']","required":true}},{"key":"color","value":{"name":"TooltipProps['color']","raw":"TooltipProps['color']","required":false}},{"key":"placement","value":{"name":"TooltipProps['placement']","raw":"TooltipProps['placement']","required":false}},{"key":"offsetX","value":{"name":"TooltipProps['offsetX']","raw":"TooltipProps['offsetX']","required":false}},{"key":"offsetY","value":{"name":"TooltipProps['offsetY']","raw":"TooltipProps['offsetY']","required":false}},{"key":"onShowContent","value":{"name":"TooltipProps['onShowContent']","raw":"TooltipProps['onShowContent']","required":false}},{"key":"onHideContent","value":{"name":"TooltipProps['onHideContent']","raw":"TooltipProps['onHideContent']","required":false}}]}}],"required":false},"description":"Configures a Tooltip for the menu item.\n\nTooltips can be useful for `variant=\"icon\"` or `variant=\"avatar\"` type\nmenu items where there is no visible text.\n\nAccepts a string or a config object containing a subset of props from [Tooltip](Tooltip)."},{"key":"renderAvatar","value":{"name":"signature","type":"object","raw":"{\n  avatarSrc?: string\n  avatarName: string\n  avatarAlt?: string\n}","signature":{"properties":[{"key":"avatarSrc","value":{"name":"string","required":false}},{"key":"avatarName","value":{"name":"string","required":true}},{"key":"avatarAlt","value":{"name":"string","required":false}}]},"required":false},"description":"Config for displaying an avatar.\n\nUsed only in `<TopNavBar.User>`, and it is a __required__ prop for the `variant=\"avatar\"` type menu items.\n\n- __avatarSrc__: Avatar url\n- __avatarName__: A __required__ name (user's name) for the avatar\n- __avatarAlt__: Accessible label for the avatar"},{"key":"renderIcon","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"Renders an icon before the label, or by itself.\n\nIt is __required__ for the `variant=\"icon\"` type menu items.\nIt is also __required__ for items in `<TopNavBar.ActionItems>`\nin small viewport mode, because only the icons are displayed\ndue to the lack of space."},{"key":"href","value":{"name":"string","required":false},"description":"If the item goes to a new page, pass a href.\nItems with submenus cannot have href prop."},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"If the item does not go to a new page, pass an onClick.\nItems with submenus cannot have onClick prop, use the `onSubmenuToggle` prop instead."},{"key":"onHiddenClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"Only fires when the item is hidden because of truncation or mobile view. Intended to be used for navigation when the item would otherwise be a link."},{"key":"onSubmenuToggle","value":{"name":"DrilldownProps['onToggle']","raw":"DrilldownProps['onToggle']","required":false},"description":"__In desktop mode__, the callback fired when the item's submenu ([Drilldown](Drilldown)) is toggled open/closed."},{"key":"onMouseOver","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired when mouse is over item."},{"key":"onMouseOut","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired when mouse leaves item."},{"key":"onFocus","value":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired when the item is focused."},{"key":"onBlur","value":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired when the item is blurred."},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<ViewProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired on keydown."},{"key":"onKeyUp","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired on keyup."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"},{"key":"itemRef","value":{"name":"signature","type":"function","raw":"(el: HTMLButtonElement | HTMLLinkElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLButtonElement | HTMLLinkElement | null","elements":[{"name":"HTMLButtonElement"},{"name":"HTMLLinkElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to the button/link HTML element"},{"key":"shouldCloseOnClick","value":{"name":"union","raw":"'auto' | 'always' | 'never'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'always'"},{"name":"literal","value":"'never'"}],"required":false},"description":"Should close the container menu component, if clicked on the option marked with this prop"},{"key":"withFocusOutline","value":{"name":"boolean","required":false},"description":"Manually control if this component should display a focus outline.\n\nWhen left `undefined` (which is the default) the focus outline will display\nif this component is focusable and receives focus or has an open popover."}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  fontSize: Typography['fontSizeMedium']\n  fontFamily: Typography['fontFamily']\n  fontWeight: Typography['fontWeightNormal']\n  color: string\n  colorInverse: string\n  itemInlinePadding: Spacing['xxSmall']\n  itemSpacing: Spacing['xSmall']\n  iconTextGap: Spacing['xSmall']\n  activeItemFontWeight: Typography['fontWeightBold']\n  activeItemIndicatorSpacing: Spacing['xSmall']\n  activeIndicatorWidth: Border['widthMedium']\n  activeIndicatorColor: Colors['contrasts']['white1010']\n  activeIndicatorColorInverse: Colors['contrasts']['grey125125']\n}","signature":{"properties":[{"key":"fontSize","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"fontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"fontWeight","value":{"name":"number","raw":"Typography['fontWeightNormal']","required":true}},{"key":"color","value":{"name":"string","required":true}},{"key":"colorInverse","value":{"name":"string","required":true}},{"key":"itemInlinePadding","value":{"name":"union","raw":"Spacing['xxSmall']","required":true}},{"key":"itemSpacing","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"iconTextGap","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"activeItemFontWeight","value":{"name":"number","raw":"Typography['fontWeightBold']","required":true}},{"key":"activeItemIndicatorSpacing","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"activeIndicatorWidth","value":{"name":"union","raw":"Border['widthMedium']","required":true}},{"key":"activeIndicatorColor","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"activeIndicatorColorInverse","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}}]}},{"name":"intersection","raw":"ComponentStyle<\n  | 'topNavBarItem'\n  | 'container'\n  | 'content'\n  | 'contentText'\n  | 'avatarContainer'\n  | 'submenuTriggerContainer'\n  | 'submenuIcon'\n> & {\n  focusOutlineOffset: string | 0\n  itemInlinePadding: string | 0\n}","elements":[{"name":"ComponentStyle","elements":[{"name":"union","raw":"| 'topNavBarItem'\n| 'container'\n| 'content'\n| 'contentText'\n| 'avatarContainer'\n| 'submenuTriggerContainer'\n| 'submenuIcon'","elements":[{"name":"literal","value":"'topNavBarItem'"},{"name":"literal","value":"'container'"},{"name":"literal","value":"'content'"},{"name":"literal","value":"'contentText'"},{"name":"literal","value":"'avatarContainer'"},{"name":"literal","value":"'submenuTriggerContainer'"},{"name":"literal","value":"'submenuIcon'"}]}],"raw":"ComponentStyle<\n  | 'topNavBarItem'\n  | 'container'\n  | 'content'\n  | 'contentText'\n  | 'avatarContainer'\n  | 'submenuTriggerContainer'\n  | 'submenuIcon'\n>"},{"name":"signature","type":"object","raw":"{\n  focusOutlineOffset: string | 0\n  itemInlinePadding: string | 0\n}","signature":{"properties":[{"key":"focusOutlineOffset","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}},{"key":"itemInlinePadding","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}}]}}]}],"raw":"WithStyleProps<TopNavBarItemTheme, TopNavBarItemStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * the element type to render as (will default to `<a>` if href is provided)\n   */\n  as?: AsElementType\n\n  /**\n   * Required id, used for internal tracking,\n   * and it also appears as an id on the item element.\n   */\n  id: string\n\n  /**\n   * A required label of the navbar item.\n   *\n   * __Note__ that it is required even for the `variant=\"icon\"` type items: the label will be used as an accessible label for screen readers.\n   */\n  children: React.ReactNode\n\n  /**\n   * The display variant of the item.\n   *\n   * The __\"default\"__ variant is displayed as a normal menu item.\n   *\n   * The __\"button\"__ variant is displayed as a button.\n   *\n   * The __\"icon\"__ variant is displayed as an icon without label.\n   *\n   * The __\"avatar\"__ variant is displayed as an avatar without label.\n   *\n   * The __\"forceIconWithLabel\"__ variant is displayed as default on desktop and the same way (with label) on mobile.\n   */\n  variant?: 'default' | 'button' | 'icon' | 'avatar' | 'forceIconWithLabel'\n\n  /**\n   * The status of the item.\n   *\n   * The __\"active\"__ status indicates current page or currently active menu item.\n   * Only `variant=\"default\"` items can be set to active.\n   *\n   * The __\"disabled\"__ status indicates that the items is disabled.\n   */\n  status?: 'default' | 'active' | 'disabled'\n\n  /**\n   * Renders the submenu for the item.\n   * Accepts a [Drilldown](Drilldown) component.\n   * The menu toggle logic is controlled by the menu item.\n   *\n   * If you need more customization, use the `customPopoverConfig` prop.\n   */\n  renderSubmenu?: DrilldownSubmenu\n\n  /**\n   * Displays the open/close chevron next to the item,\n   * when it has a submenu or custom popover.\n   */\n  showSubmenuChevron?: boolean\n\n  /**\n   * Configures a custom Popover for the menu item.\n   * Accepts [Popover](Popover) props (except \"renderTrigger\").\n   *\n   * Use this prop for features like search, tooltips, etc., and use\n   * the `renderSubmenu` prop for the default submenu!\n   *\n   * In small viewport mode only items in `<TopNavBar.ActionItems>` can display custom popovers.\n   */\n  customPopoverConfig?: Omit<\n    PopoverProps,\n    'renderTrigger' | 'positionContainerDisplay'\n  >\n\n  /**\n   * Configures a Tooltip for the menu item.\n   *\n   * Tooltips can be useful for `variant=\"icon\"` or `variant=\"avatar\"` type\n   * menu items where there is no visible text.\n   *\n   * Accepts a string or a config object containing a subset of props from [Tooltip](Tooltip).\n   */\n  tooltip?: TopNavBarItemTooltipType\n\n  /**\n   * Config for displaying an avatar.\n   *\n   * Used only in `<TopNavBar.User>`, and it is a __required__ prop for the `variant=\"avatar\"` type menu items.\n   *\n   * - __avatarSrc__: Avatar url\n   * - __avatarName__: A __required__ name (user's name) for the avatar\n   * - __avatarAlt__: Accessible label for the avatar\n   */\n  renderAvatar?: {\n    avatarSrc?: string\n    avatarName: string\n    avatarAlt?: string\n  }\n\n  /**\n   * Renders an icon before the label, or by itself.\n   *\n   * It is __required__ for the `variant=\"icon\"` type menu items.\n   * It is also __required__ for items in `<TopNavBar.ActionItems>`\n   * in small viewport mode, because only the icons are displayed\n   * due to the lack of space.\n   */\n  renderIcon?: Renderable\n\n  /**\n   * If the item goes to a new page, pass a href.\n   * Items with submenus cannot have href prop.\n   */\n  href?: string\n\n  /**\n   * If the item does not go to a new page, pass an onClick.\n   * Items with submenus cannot have onClick prop, use the `onSubmenuToggle` prop instead.\n   */\n  onClick?: (\n    event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n  ) => void\n\n  /**\n   * Only fires when the item is hidden because of truncation or mobile view. Intended to be used for navigation when the item would otherwise be a link.\n   */\n  onHiddenClick?: (\n    event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n  ) => void\n\n  /**\n   * __In desktop mode__, the callback fired when the item's submenu ([Drilldown](Drilldown)) is toggled open/closed.\n   */\n  onSubmenuToggle?: DrilldownProps['onToggle']\n\n  /**\n   * __In desktop mode__, the callback fired when mouse is over item.\n   */\n  onMouseOver?: (event: React.MouseEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired when mouse leaves item.\n   */\n  onMouseOut?: (event: React.MouseEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired when the item is focused.\n   */\n  onFocus?: (event: React.FocusEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired when the item is blurred.\n   */\n  onBlur?: (event: React.FocusEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired on keydown.\n   */\n  onKeyDown?: (event: React.KeyboardEvent<ViewProps>) => void\n\n  /**\n   * __In desktop mode__, the callback fired on keyup.\n   */\n  onKeyUp?: (event: React.KeyboardEvent<BaseButtonOwnProps>) => void\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: Element | null) => void\n\n  /**\n   * A function that returns a reference to the button/link HTML element\n   */\n  itemRef?: (el: HTMLButtonElement | HTMLLinkElement | null) => void\n\n  /**\n   * Should close the container menu component, if clicked on the option marked with this prop\n   */\n  shouldCloseOnClick?: ShouldCloseOnClick\n\n  /**\n   * Manually control if this component should display a focus outline.\n   *\n   * When left `undefined` (which is the default) the focus outline will display\n   * if this component is focusable and receives focus or has an open popover.\n   */\n  withFocusOutline?: boolean\n}","signature":{"properties":[{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"the element type to render as (will default to `<a>` if href is provided)"},{"key":"id","value":{"name":"string","required":true},"description":"Required id, used for internal tracking,\nand it also appears as an id on the item element."},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true},"description":"A required label of the navbar item.\n\n__Note__ that it is required even for the `variant=\"icon\"` type items: the label will be used as an accessible label for screen readers."},{"key":"variant","value":{"name":"union","raw":"'default' | 'button' | 'icon' | 'avatar' | 'forceIconWithLabel'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'button'"},{"name":"literal","value":"'icon'"},{"name":"literal","value":"'avatar'"},{"name":"literal","value":"'forceIconWithLabel'"}],"required":false},"description":"The display variant of the item.\n\nThe __\"default\"__ variant is displayed as a normal menu item.\n\nThe __\"button\"__ variant is displayed as a button.\n\nThe __\"icon\"__ variant is displayed as an icon without label.\n\nThe __\"avatar\"__ variant is displayed as an avatar without label.\n\nThe __\"forceIconWithLabel\"__ variant is displayed as default on desktop and the same way (with label) on mobile."},{"key":"status","value":{"name":"union","raw":"'default' | 'active' | 'disabled'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'active'"},{"name":"literal","value":"'disabled'"}],"required":false},"description":"The status of the item.\n\nThe __\"active\"__ status indicates current page or currently active menu item.\nOnly `variant=\"default\"` items can be set to active.\n\nThe __\"disabled\"__ status indicates that the items is disabled."},{"key":"renderSubmenu","value":{"name":"ReactComponentElement","raw":"React.ComponentElement<DrilldownProps, Drilldown>","elements":[{"name":"DrilldownProps"},{"name":"Drilldown"}],"required":false},"description":"Renders the submenu for the item.\nAccepts a [Drilldown](Drilldown) component.\nThe menu toggle logic is controlled by the menu item.\n\nIf you need more customization, use the `customPopoverConfig` prop."},{"key":"showSubmenuChevron","value":{"name":"boolean","required":false},"description":"Displays the open/close chevron next to the item,\nwhen it has a submenu or custom popover."},{"key":"customPopoverConfig","value":{"name":"Omit","elements":[{"name":"PopoverProps"},{"name":"union","raw":"'renderTrigger' | 'positionContainerDisplay'","elements":[{"name":"literal","value":"'renderTrigger'"},{"name":"literal","value":"'positionContainerDisplay'"}]}],"raw":"Omit<\n  PopoverProps,\n  'renderTrigger' | 'positionContainerDisplay'\n>","required":false},"description":"Configures a custom Popover for the menu item.\nAccepts [Popover](Popover) props (except \"renderTrigger\").\n\nUse this prop for features like search, tooltips, etc., and use\nthe `renderSubmenu` prop for the default submenu!\n\nIn small viewport mode only items in `<TopNavBar.ActionItems>` can display custom popovers."},{"key":"tooltip","value":{"name":"union","raw":"| string\n| {\n    renderTip: TooltipProps['renderTip']\n    color?: TooltipProps['color']\n    placement?: TooltipProps['placement']\n    offsetX?: TooltipProps['offsetX']\n    offsetY?: TooltipProps['offsetY']\n    onShowContent?: TooltipProps['onShowContent']\n    onHideContent?: TooltipProps['onHideContent']\n  }","elements":[{"name":"string"},{"name":"signature","type":"object","raw":"{\n  renderTip: TooltipProps['renderTip']\n  color?: TooltipProps['color']\n  placement?: TooltipProps['placement']\n  offsetX?: TooltipProps['offsetX']\n  offsetY?: TooltipProps['offsetY']\n  onShowContent?: TooltipProps['onShowContent']\n  onHideContent?: TooltipProps['onHideContent']\n}","signature":{"properties":[{"key":"renderTip","value":{"name":"TooltipProps['renderTip']","raw":"TooltipProps['renderTip']","required":true}},{"key":"color","value":{"name":"TooltipProps['color']","raw":"TooltipProps['color']","required":false}},{"key":"placement","value":{"name":"TooltipProps['placement']","raw":"TooltipProps['placement']","required":false}},{"key":"offsetX","value":{"name":"TooltipProps['offsetX']","raw":"TooltipProps['offsetX']","required":false}},{"key":"offsetY","value":{"name":"TooltipProps['offsetY']","raw":"TooltipProps['offsetY']","required":false}},{"key":"onShowContent","value":{"name":"TooltipProps['onShowContent']","raw":"TooltipProps['onShowContent']","required":false}},{"key":"onHideContent","value":{"name":"TooltipProps['onHideContent']","raw":"TooltipProps['onHideContent']","required":false}}]}}],"required":false},"description":"Configures a Tooltip for the menu item.\n\nTooltips can be useful for `variant=\"icon\"` or `variant=\"avatar\"` type\nmenu items where there is no visible text.\n\nAccepts a string or a config object containing a subset of props from [Tooltip](Tooltip)."},{"key":"renderAvatar","value":{"name":"signature","type":"object","raw":"{\n  avatarSrc?: string\n  avatarName: string\n  avatarAlt?: string\n}","signature":{"properties":[{"key":"avatarSrc","value":{"name":"string","required":false}},{"key":"avatarName","value":{"name":"string","required":true}},{"key":"avatarAlt","value":{"name":"string","required":false}}]},"required":false},"description":"Config for displaying an avatar.\n\nUsed only in `<TopNavBar.User>`, and it is a __required__ prop for the `variant=\"avatar\"` type menu items.\n\n- __avatarSrc__: Avatar url\n- __avatarName__: A __required__ name (user's name) for the avatar\n- __avatarAlt__: Accessible label for the avatar"},{"key":"renderIcon","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"Renders an icon before the label, or by itself.\n\nIt is __required__ for the `variant=\"icon\"` type menu items.\nIt is also __required__ for items in `<TopNavBar.ActionItems>`\nin small viewport mode, because only the icons are displayed\ndue to the lack of space."},{"key":"href","value":{"name":"string","required":false},"description":"If the item goes to a new page, pass a href.\nItems with submenus cannot have href prop."},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"If the item does not go to a new page, pass an onClick.\nItems with submenus cannot have onClick prop, use the `onSubmenuToggle` prop instead."},{"key":"onHiddenClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"Only fires when the item is hidden because of truncation or mobile view. Intended to be used for navigation when the item would otherwise be a link."},{"key":"onSubmenuToggle","value":{"name":"DrilldownProps['onToggle']","raw":"DrilldownProps['onToggle']","required":false},"description":"__In desktop mode__, the callback fired when the item's submenu ([Drilldown](Drilldown)) is toggled open/closed."},{"key":"onMouseOver","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired when mouse is over item."},{"key":"onMouseOut","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired when mouse leaves item."},{"key":"onFocus","value":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired when the item is focused."},{"key":"onBlur","value":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired when the item is blurred."},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<ViewProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired on keydown."},{"key":"onKeyUp","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"__In desktop mode__, the callback fired on keyup."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"},{"key":"itemRef","value":{"name":"signature","type":"function","raw":"(el: HTMLButtonElement | HTMLLinkElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLButtonElement | HTMLLinkElement | null","elements":[{"name":"HTMLButtonElement"},{"name":"HTMLLinkElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to the button/link HTML element"},{"key":"shouldCloseOnClick","value":{"name":"union","raw":"'auto' | 'always' | 'never'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'always'"},{"name":"literal","value":"'never'"}],"required":false},"description":"Should close the container menu component, if clicked on the option marked with this prop"},{"key":"withFocusOutline","value":{"name":"boolean","required":false},"description":"Manually control if this component should display a focus outline.\n\nWhen left `undefined` (which is the default) the focus outline will display\nif this component is focusable and receives focus or has an open popover."}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]},{"name":"WithDeterministicIdProps"}]},{"name":"TopNavBarItem"}]}],"raw":"ItemChild[]"}}],"returns":null},{"name":"renderChildren","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"required":false,"tsType":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"unknown"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}]},"description":"Children of type: `<TopNavBar.Item>`.\n\nIn __desktop__ mode the items are listed on the navbar. See `renderHiddenItemsMenuTriggerLabel` prop description for overflow logic.\n\nIn __smallViewport__ mode the items are accessible under the main \"hamburger\" menu."},"currentPageId":{"required":false,"tsType":{"name":"string"},"description":"The `id` of the link to the current page. Marks the item by setting `aria-current=\"page\"` attribute on it and setting its status to 'active'.\n\n(Note: only non-disabled, `variant=\"default\"` items can be set to current/active.)"},"renderHiddenItemsMenuTriggerLabel":{"required":true,"tsType":{"name":"signature","type":"function","raw":"(\n  hiddenChildrenCount: number\n) => React.ReactNode","signature":{"arguments":[{"type":{"name":"number"},"name":"hiddenChildrenCount"}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}},"description":"In __desktop__ mode, required label for the trigger item of the hidden list items menu.\n\nWhen there is not enough room to list all the menu items,\nthey will be accessible via a dropdown menu at the end of the list."},"listLabel":{"required":false,"tsType":{"name":"string"},"description":"In __desktop__ mode, 'aria-label' for the `<ul>` container."},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(el: HTMLUListElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}},"description":"A function that returns a reference to root HTML element"},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"parent":"TopNavBar","id":"TopNavBar.MenuItems","relativePath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarMenuItems/index.tsx","extension":".tsx","srcPath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarMenuItems/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarMenuItems/index.tsx","packageName":"@instructure/ui-top-nav-bar","requirePath":"@instructure/ui-top-nav-bar/lib/TopNavBar/TopNavBarMenuItems/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarMenuItems/index.tsx').default","esPath":"@instructure/ui-top-nav-bar/es/TopNavBar/TopNavBarMenuItems/index","themePath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarMenuItems/styles.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarMenuItems/styles.ts","title":"TopNavBar.MenuItems"}