{"description":"\n### Table layout\n\nIn stacked layout, column header is rendered in each cell, but not in row header.\n\n> If you are using [TruncateText](TruncateText) (or CSS ellipsis) in your Table, set the\n> layout to `fixed` or `stacked`, or the text truncation will not work. To force long strings to break and not\n> exceed the bounds of the table cell, use `fixed` or `stacked`, together with the [Text](Text) component:\n> `<Text wrap=\"break-word\">[long string]</Text>`.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [layout, setLayout] = useState('auto')\n  const [hover, setHover] = useState(false)\n\n  const handleChange = (field, value) => {\n    if (field === 'layout') {\n      setLayout(value)\n    } else if (field === 'hover') {\n      setHover(value)\n    }\n  }\n\n  const renderOptions = () => (\n    <Flex alignItems=\"start\">\n      <Flex.Item margin=\"small\">\n        <RadioInputGroup\n          name=\"layout\"\n          description=\"layout\"\n          value={layout}\n          onChange={(e, value) => handleChange('layout', value)}\n        >\n          <RadioInput label=\"auto\" value=\"auto\" />\n          <RadioInput label=\"fixed\" value=\"fixed\" />\n          <RadioInput label=\"stacked\" value=\"stacked\" />\n        </RadioInputGroup>\n      </Flex.Item>\n      <Flex.Item margin=\"small\">\n        <Checkbox\n          label=\"hover\"\n          checked={hover}\n          onChange={(e, value) => handleChange('hover', !hover)}\n        />\n      </Flex.Item>\n    </Flex>\n  )\n\n  return (\n    <div>\n      {renderOptions()}\n      <Table caption=\"Top rated movies\" layout={layout} hover={hover}>\n        <Table.Head>\n          <Table.Row>\n            <Table.ColHeader id=\"Rank\">Rank</Table.ColHeader>\n            <Table.ColHeader id=\"Title\">Title</Table.ColHeader>\n            <Table.ColHeader id=\"Year\">Year</Table.ColHeader>\n            <Table.ColHeader id=\"Rating\">Rating</Table.ColHeader>\n          </Table.Row>\n        </Table.Head>\n        <Table.Body>\n          <Table.Row>\n            <Table.RowHeader>1</Table.RowHeader>\n            <Table.Cell>The Shawshank Redemption</Table.Cell>\n            <Table.Cell>1994</Table.Cell>\n            <Table.Cell>9.3</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.RowHeader>2</Table.RowHeader>\n            <Table.Cell>The Godfather</Table.Cell>\n            <Table.Cell>1972</Table.Cell>\n            <Table.Cell>9.2</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.RowHeader>3</Table.RowHeader>\n            <Table.Cell>The Godfather: Part II</Table.Cell>\n            <Table.Cell>1974</Table.Cell>\n            <Table.Cell>9.0</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n\n### Column width and alignment\n\nEach column (`ColHeader`) can have a custom width, and each cell (`ColHeader`, `RowHeader` or `Cell`)\ncan be aligned differently.\n\n```js\n---\ntype: example\n---\nconst Example = ({ headers, rows }) => {\n  return (\n    <Responsive\n      query={{\n        small: { maxWidth: '40rem' },\n        large: { minWidth: '41rem' }\n      }}\n      props={{\n        small: { layout: 'stacked' },\n        large: { layout: 'fixed' }\n      }}\n    >\n      {({ layout }) => (\n        <div>\n          <Table caption=\"Top rated movies\" layout={layout}>\n            <Table.Head>\n              <Table.Row>\n                {(headers || []).map(({ id, text, width, textAlign }) => (\n                  <Table.ColHeader\n                    key={id}\n                    id={id}\n                    width={width}\n                    textAlign={textAlign}\n                  >\n                    {text}\n                  </Table.ColHeader>\n                ))}\n              </Table.Row>\n            </Table.Head>\n            <Table.Body>\n              {rows.map((row) => (\n                <Table.Row key={row.id}>\n                  {headers.map(({ id, renderCell, textAlign }) => (\n                    <Table.Cell\n                      key={id}\n                      textAlign={layout === 'stacked' ? 'start' : textAlign}\n                    >\n                      {renderCell ? renderCell(row[id], layout) : row[id]}\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </div>\n      )}\n    </Responsive>\n  )\n}\n\nconst renderSummary = (summary, layout) =>\n  layout === 'stacked' ? (\n    summary\n  ) : (\n    <TruncateText truncate=\"word\" ellipsis=\"...\">\n      {summary}\n    </TruncateText>\n  )\n\nrender(\n  <Example\n    headers={[\n      {\n        id: 'Title',\n        text: 'Title',\n        width: '25%',\n        textAlign: 'start'\n      },\n      {\n        id: 'Year',\n        text: 'Year',\n        width: '15%',\n        textAlign: 'start'\n      },\n      {\n        id: 'Summary',\n        text: 'Summary',\n        width: '40%',\n        renderCell: renderSummary,\n        textAlign: 'start'\n      },\n      {\n        id: 'BoxOffice',\n        text: 'Box Office',\n        width: '20%',\n        textAlign: 'end'\n      }\n    ]}\n    rows={[\n      {\n        id: '1',\n        Title: 'The Shawshank Redemption',\n        Year: 1994,\n        Summary:\n          'Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.',\n        BoxOffice: '$28,341,469'\n      },\n      {\n        id: '2',\n        Title: 'The Godfather',\n        Year: 1972,\n        Summary:\n          'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.',\n        BoxOffice: '$133,698,921'\n      },\n      {\n        id: '3',\n        Title: 'The Godfather: Part II',\n        Year: 1974,\n        Summary:\n          'The early life and career of Vito Corleone in 1920s New York City is portrayed, while his son, Michael, expands and tightens his grip on the family crime syndicate.',\n        BoxOffice: '$47,542,841'\n      }\n    ]}\n  />\n)\n```\n\n### A sortable table using our Responsive component\n\nResize the window to see how column headers transition into a `Select` for sorting table content when the traditional Table Header is no longer clickable. The Table layout itself switches from the horizontal view to the stacked view allowing content to be viewed without horizontal scrolling. See [Responsive](Responsive) for more examples.\n\nBy default, the options in the `Select` for sorting in stacked layout are generated from the `id` property of the `Table.ColHeader` components. If you want to display custom strings, use the `stackedSortByLabel` property.\n\n```js\n---\ntype: example\n---\nconst SortableTable = ({ caption, headers, rows }) => {\n  const initialColWidth = {}\n  headers.forEach((header) => {\n    initialColWidth[header.id] = 'start'\n  })\n\n  const [sortBy, setSortBy] = useState(headers && headers[0] && headers[0].id)\n  const [ascending, setAscending] = useState(true)\n  const [colTextAligns, setColTextAligns] = useState(initialColWidth)\n\n  const sortedRows = useMemo(() => {\n    if (!sortBy) return rows\n\n    const sorted = [...rows].sort((a, b) => {\n      return a[sortBy] > b[sortBy] ? 1 : a[sortBy] < b[sortBy] ? -1 : 0\n    })\n\n    return ascending ? sorted : sorted.reverse()\n  }, [sortBy, ascending, rows])\n\n  const handleSort = (event, { id }) => {\n    if (id === sortBy) {\n      setAscending(!ascending)\n    } else {\n      setSortBy(id)\n      setAscending(true)\n    }\n  }\n\n  const handleColTextAlignChange = (id, value) => {\n    setColTextAligns((prevState) => ({\n      ...prevState,\n      [id]: value\n    }))\n  }\n\n  const renderHeaderRow = (direction) => (\n    <Table.Row>\n      {(headers || []).map(({ id, text, width }) => (\n        <Table.ColHeader\n          key={id}\n          id={id}\n          width={width}\n          {...(direction && {\n            textAlign: colTextAligns[id],\n            stackedSortByLabel: text,\n            onRequestSort: handleSort,\n            sortDirection: id === sortBy ? direction : 'none'\n          })}\n        >\n          {id === sortBy ? (\n            text\n          ) : (\n            <>\n              <span aria-hidden=\"true\">{text}</span>\n              <ScreenReaderContent>sort by {text}</ScreenReaderContent>\n            </>\n          )}\n        </Table.ColHeader>\n      ))}\n    </Table.Row>\n  )\n\n  const renderOptions = () => (\n    <ToggleGroup\n      size=\"small\"\n      toggleLabel=\"Set text-align for columns\"\n      summary=\"Set text-align for columns\"\n      background=\"default\"\n    >\n      <Table caption=\"Set text-align for columns\">\n        <Table.Head>{renderHeaderRow()}</Table.Head>\n        <Table.Body>\n          <Table.Row>\n            {Object.entries(colTextAligns).map(([headerId, textAlign]) => (\n              <Table.Cell key={headerId}>\n                <RadioInputGroup\n                  description={\n                    <ScreenReaderContent>\n                      Set text-align for column: {headerId}\n                    </ScreenReaderContent>\n                  }\n                  name={`columnTextAlign_${headerId}`}\n                  value={textAlign}\n                  margin=\"0 0 small\"\n                  size=\"small\"\n                  onChange={(e, value) =>\n                    handleColTextAlignChange(headerId, value)\n                  }\n                >\n                  <RadioInput label=\"start\" value=\"start\" />\n                  <RadioInput label=\"center\" value=\"center\" />\n                  <RadioInput label=\"end\" value=\"end\" />\n                </RadioInputGroup>\n              </Table.Cell>\n            ))}\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </ToggleGroup>\n  )\n\n  const direction = ascending ? 'ascending' : 'descending'\n\n  return (\n    <Responsive\n      query={{\n        small: { maxWidth: '40rem' },\n        large: { minWidth: '41rem' }\n      }}\n      props={{\n        small: { layout: 'stacked' },\n        large: { layout: 'auto' }\n      }}\n    >\n      {(props) => (\n        <div>\n          {props.layout !== 'stacked' && (\n            <View display=\"block\" margin=\"0 0 medium\">\n              {renderOptions()}\n            </View>\n          )}\n\n          <Table\n            caption={`${caption}: sorted by ${sortBy} in ${direction} order`}\n            {...props}\n          >\n            <Table.Head renderSortLabel=\"Sort by\">\n              {renderHeaderRow(direction)}\n            </Table.Head>\n            <Table.Body>\n              {sortedRows.map((row) => (\n                <Table.Row key={row.id}>\n                  {headers.map(({ id, renderCell }) => (\n                    <Table.Cell key={id} textAlign={colTextAligns[id]}>\n                      {renderCell ? renderCell(row[id]) : row[id]}\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          <Alert\n            liveRegion={() => document.getElementById('flash-messages')}\n            liveRegionPoliteness=\"polite\"\n            screenReaderOnly\n          >\n            {`Sorted by ${sortBy} in ${direction} order`}\n          </Alert>\n        </div>\n      )}\n    </Responsive>\n  )\n}\n\nrender(\n  <SortableTable\n    caption=\"Top rated movies\"\n    headers={[\n      {\n        id: 'rank',\n        text: 'Rank',\n        width: '15%'\n      },\n      {\n        id: 'title',\n        text: 'Title',\n        width: '55%'\n      },\n      {\n        id: 'year',\n        text: 'Year',\n        width: '15%'\n      },\n      {\n        id: 'rating',\n        text: 'Rating',\n        width: '15%',\n        renderCell: (rating) => rating.toFixed(1)\n      }\n    ]}\n    rows={[\n      {\n        id: '1',\n        rank: 1,\n        title: 'The Shawshank Redemption',\n        year: 1994,\n        rating: 9.3\n      },\n      {\n        id: '2',\n        rank: 2,\n        title: 'The Godfather',\n        year: 1972,\n        rating: 9.2\n      },\n      {\n        id: '3',\n        rank: 3,\n        title: 'The Godfather: Part II',\n        year: 1974,\n        rating: 9.0\n      },\n      {\n        id: '4',\n        rank: 4,\n        title: 'The Dark Knight',\n        year: 2008,\n        rating: 9.0\n      },\n      {\n        id: '5',\n        rank: 5,\n        title: '12 Angry Men',\n        year: 1957,\n        rating: 8.9\n      }\n    ]}\n  />\n)\n```\n\n### A sortable table with selection and pagination\n\nThe composition order is important. `SelectableTable` -> `PaginatedTable` -> `SortableTable`, so\nthat selection does not re-paginate or re-sort the table, and pagination does not re-sort the table.\n\n```js\n---\ntype: example\n---\nconst SelectableTable = ({\n  caption,\n  headers,\n  rows,\n  onSort,\n  sortBy,\n  ascending,\n  rowIds\n}) => {\n  const [selected, setSelected] = useState(new Set())\n\n  const handleSelectAll = (allSelected) => {\n    setSelected(allSelected ? new Set() : new Set(rowIds))\n  }\n\n  const handleSelectRow = (rowSelected, rowId) => {\n    const copy = new Set(selected)\n    if (rowSelected) {\n      copy.delete(rowId)\n    } else {\n      copy.add(rowId)\n    }\n    setSelected(copy)\n  }\n\n  const allSelected =\n    selected.size > 0 && rowIds.every((id) => selected.has(id))\n  const someSelected = selected.size > 0 && !allSelected\n  const direction = ascending ? 'ascending' : 'descending'\n\n  return (\n    <Responsive\n      query={{\n        small: { maxWidth: '40rem' },\n        large: { minWidth: '41rem' }\n      }}\n      props={{\n        small: { layout: 'stacked' },\n        large: { layout: 'auto' }\n      }}\n    >\n      {(props) => (\n        <div>\n          <View as=\"div\" padding=\"small\" background=\"primary-inverse\">\n            {`${selected.size} of ${rowIds.length} selected`}\n          </View>\n          <Table\n            caption={`${caption}: sorted by ${sortBy} in ${direction} order`}\n            {...props}\n          >\n            <Table.Head\n              renderSortLabel={\n                <ScreenReaderContent>Sort by</ScreenReaderContent>\n              }\n            >\n              <Table.Row>\n                <Table.ColHeader id=\"select\" aria-label=\"Select\">\n                  <Checkbox\n                    label={\n                      <ScreenReaderContent>Select all rows</ScreenReaderContent>\n                    }\n                    onChange={() => handleSelectAll(allSelected)}\n                    checked={allSelected}\n                    indeterminate={someSelected}\n                  />\n                </Table.ColHeader>\n                {(headers || []).map(({ id, text, width }) => (\n                  <Table.ColHeader\n                    key={id}\n                    id={id}\n                    width={width}\n                    onRequestSort={onSort}\n                    sortDirection={id === sortBy ? direction : 'none'}\n                  >\n                    {id === sortBy ? (\n                      text\n                    ) : (\n                      <>\n                        <span aria-hidden=\"true\">{text}</span>\n                        <ScreenReaderContent>\n                          sort by {text}\n                        </ScreenReaderContent>\n                      </>\n                    )}\n                  </Table.ColHeader>\n                ))}\n              </Table.Row>\n            </Table.Head>\n            <Table.Body>\n              {(rows || []).map((row) => {\n                const rowSelected = selected.has(row.id)\n\n                return (\n                  <Table.Row key={row.id}>\n                    <Table.RowHeader>\n                      <Checkbox\n                        label={\n                          <ScreenReaderContent>\n                            Select row\n                          </ScreenReaderContent>\n                        }\n                        onChange={() => handleSelectRow(rowSelected, row.id)}\n                        checked={rowSelected}\n                      />\n                    </Table.RowHeader>\n                    {(headers || []).map(({ id, renderCell }) => (\n                      <Table.Cell key={id}>\n                        {renderCell ? renderCell(row[id]) : row[id]}\n                      </Table.Cell>\n                    ))}\n                  </Table.Row>\n                )\n              })}\n            </Table.Body>\n          </Table>\n          <Alert\n            liveRegion={() => document.getElementById('flash-messages')}\n            liveRegionPoliteness=\"polite\"\n            screenReaderOnly\n          >\n            {`${selected.size} of ${rowIds.length} selected`}\n          </Alert>\n        </div>\n      )}\n    </Responsive>\n  )\n}\n\nconst PaginatedTable = ({\n  caption,\n  headers,\n  rows,\n  onSort,\n  sortBy,\n  ascending,\n  perPage\n}) => {\n  const [page, setPage] = useState(0)\n\n  const handleClick = (page) => {\n    setPage(page)\n  }\n\n  const handleSort = (event, options) => {\n    setPage(0)\n    onSort(event, options)\n  }\n\n  const startIndex = page * perPage\n  const slicedRows = rows.slice(startIndex, startIndex + perPage)\n  const pageCount = perPage && Math.ceil(rows.length / perPage)\n\n  return (\n    <div>\n      <SelectableTable\n        caption={caption}\n        headers={headers}\n        rows={slicedRows}\n        onSort={handleSort}\n        sortBy={sortBy}\n        ascending={ascending}\n        rowIds={rows.map((row) => row.id)}\n      />\n      {pageCount > 1 && (\n        <Pagination\n          variant=\"compact\"\n          labelNext=\"Next Page\"\n          labelPrev=\"Previous Page\"\n          margin=\"large\"\n        >\n          {Array.from(Array(pageCount), (item, index) => (\n            <Pagination.Page\n              key={index}\n              onClick={() => handleClick(index)}\n              current={index === page}\n            >\n              {index + 1}\n            </Pagination.Page>\n          ))}\n        </Pagination>\n      )}\n      <Alert\n        liveRegion={() => document.getElementById('flash-messages')}\n        liveRegionPoliteness=\"polite\"\n        screenReaderOnly\n      >\n        {`Table page ${page + 1} of ${pageCount}`}\n      </Alert>\n    </div>\n  )\n}\n\nconst SortableTable = ({ caption, headers, rows, perPage }) => {\n  const [sortBy, setSortBy] = useState(headers && headers[0] && headers[0].id)\n  const [ascending, setAscending] = useState(true)\n\n  const sortedRows = useMemo(() => {\n    if (!sortBy) return rows\n\n    const sorted = [...rows].sort((a, b) => {\n      return a[sortBy] > b[sortBy] ? 1 : a[sortBy] < b[sortBy] ? -1 : 0\n    })\n\n    return ascending ? sorted : sorted.reverse()\n  }, [sortBy, ascending, rows])\n\n  const handleSort = (event, { id }) => {\n    if (id === sortBy) {\n      setAscending(!ascending)\n    } else {\n      setSortBy(id)\n      setAscending(true)\n    }\n  }\n\n  return (\n    <div>\n      <PaginatedTable\n        caption={caption}\n        headers={headers}\n        rows={sortedRows}\n        onSort={handleSort}\n        sortBy={sortBy}\n        ascending={ascending}\n        perPage={perPage}\n      />\n      <Alert\n        liveRegion={() => document.getElementById('flash-messages')}\n        liveRegionPoliteness=\"polite\"\n        screenReaderOnly\n      >\n        {`Sorted by ${sortBy} in ${\n          ascending ? 'ascending' : 'descending'\n        } order`}\n      </Alert>\n    </div>\n  )\n}\n\nconst renderRating = (rating) => (\n  <Rating label=\"Rating\" valueNow={rating} valueMax={10} iconCount={5} />\n)\n\nrender(\n  <SortableTable\n    caption=\"Top rated movies\"\n    headers={[\n      {\n        id: 'Rank',\n        text: 'Rank'\n      },\n      {\n        id: 'Title',\n        text: 'Title',\n        width: '40%'\n      },\n      {\n        id: 'Year',\n        text: 'Year'\n      },\n      {\n        id: 'Rating',\n        text: 'Rating',\n        renderCell: renderRating\n      }\n    ]}\n    rows={[\n      {\n        id: '1',\n        Rank: 1,\n        Title: 'The Shawshank Redemption',\n        Year: 1994,\n        Rating: 9.3\n      },\n      {\n        id: '2',\n        Rank: 2,\n        Title: 'The Godfather',\n        Year: 1972,\n        Rating: 9.2\n      },\n      {\n        id: '3',\n        Rank: 3,\n        Title: 'The Godfather: Part II',\n        Year: 1974,\n        Rating: 9.0\n      },\n      {\n        id: '4',\n        Rank: 4,\n        Title: 'The Dark Knight',\n        Year: 2008,\n        Rating: 9.0\n      },\n      {\n        id: '5',\n        Rank: 5,\n        Title: '12 Angry Men',\n        Year: 1957,\n        Rating: 8.9\n      }\n    ]}\n    perPage={3}\n  />\n)\n```\n\n### Using Custom Components as Children\n\nIn some cases you might want to use custom components in a `Table`, e.g. a HOC for `Table.Row` or `Table.Cell`. This is generally not recommended, but sometimes it could be beneficial for codesplitting or writing cleaner code for larger and more complex Tables.\n\n> Do not replace `Table.Body` and `Table.Head` with custom components\n\nWrapper HOCs are simple, just return the original component:\n\n```js\n---\ntype: example\n---\nconst CustomTableCell = ({ children, ...props }) => (\n  <Table.Cell {...props}>{children}</Table.Cell>\n)\n\nconst CustomTableRow = ({ children, ...props }) => (\n  <Table.Row {...props}>\n    <Table.RowHeader>1</Table.RowHeader>\n    <Table.Cell>The Shawshank Redemption</Table.Cell>\n    <Table.Cell>1994</Table.Cell>\n    <CustomTableCell>9.3</CustomTableCell>\n  </Table.Row>\n)\n\nconst Example = () => {\n  const [layout, setLayout] = useState('auto')\n  const [hover, setHover] = useState(false)\n\n  const handleChange = (field, value) => {\n    if (field === 'layout') {\n      setLayout(value)\n    } else if (field === 'hover') {\n      setHover(!hover)\n    }\n  }\n\n  const renderOptions = () => (\n    <Flex alignItems=\"start\">\n      <Flex.Item margin=\"small\">\n        <RadioInputGroup\n          name=\"layout2\"\n          description=\"layout2\"\n          value={layout}\n          onChange={(e, value) => handleChange('layout', value)}\n        >\n          <RadioInput label=\"auto\" value=\"auto\" />\n          <RadioInput label=\"fixed\" value=\"fixed\" />\n          <RadioInput label=\"stacked\" value=\"stacked\" />\n        </RadioInputGroup>\n      </Flex.Item>\n      <Flex.Item margin=\"small\">\n        <Checkbox\n          label=\"hover\"\n          checked={hover}\n          onChange={(e, value) => handleChange('hover', !hover)}\n        />\n      </Flex.Item>\n    </Flex>\n  )\n\n  return (\n    <div>\n      {renderOptions()}\n      <Table caption=\"Top rated movies\" layout={layout} hover={hover}>\n        <Table.Head>\n          <Table.Row>\n            <Table.ColHeader id=\"Rank\">Rank</Table.ColHeader>\n            <Table.ColHeader id=\"Title\">Title</Table.ColHeader>\n            <Table.ColHeader id=\"Year\">Year</Table.ColHeader>\n            <Table.ColHeader id=\"Rating\">Rating</Table.ColHeader>\n          </Table.Row>\n        </Table.Head>\n        <Table.Body>\n          <CustomTableRow />\n          <Table.Row>\n            <Table.RowHeader>2</Table.RowHeader>\n            <Table.Cell>The Godfather</Table.Cell>\n            <Table.Cell>1972</Table.Cell>\n            <Table.Cell>9.2</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.RowHeader>3</Table.RowHeader>\n            <Table.Cell>The Godfather: Part II</Table.Cell>\n            <Table.Cell>1974</Table.Cell>\n            <Table.Cell>9.0</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n\n#### Fully custom components\n\nIf you want to use fully custom components you have to pay attention to the following:\n\n- Render them as the appropriate HTML Table tags (`tr`, `th`, ...)\n- Read the `hover` prop from [TableContext](TableContext) to customize hover behaviour\n- A11y: Row header cells must have the `scope='row'` HTML attribute\n- A11y: Column header cells must have the `scope='col'` and `aria-sort` (if sortable) HTML attribute\n\nBasic fully custom table:\n\n```js\n---\ntype: example\n---\nconst CustomTableCell = ({ children, ...props }) => (\n  <td {...props}>{children}</td>\n)\n\nconst CustomTableRow = ({ children, ...props }) => {\n  const { hover } = useContext(TableContext)\n  const [isHovered, setIsHovered] = useState(false)\n\n  const rowStyle =\n    hover && isHovered\n      ? { backgroundColor: 'SeaGreen' }\n      : { backgroundColor: 'white' }\n\n  return (\n    <tr\n      style={rowStyle}\n      onMouseOver={() => setIsHovered(true)}\n      onMouseOut={() => setIsHovered(false)}\n    >\n      {children}\n    </tr>\n  )\n}\n\nconst Example = () => {\n  const [layout, setLayout] = useState('auto')\n  const [hover, setHover] = useState(false)\n\n  const handleChange = (field, value) => {\n    if (field === 'layout') {\n      setLayout(value)\n    } else if (field === 'hover') {\n      setHover(!hover)\n    }\n  }\n\n  const renderOptions = () => (\n    <Flex alignItems=\"start\">\n      <Flex.Item margin=\"small\">\n        <RadioInputGroup\n          name=\"Layout\"\n          description=\"Layout\"\n          value={layout}\n          onChange={(e, value) => handleChange('layout', value)}\n        >\n          <RadioInput label=\"auto\" value=\"auto\" />\n          <RadioInput label=\"fixed\" value=\"fixed\" />\n        </RadioInputGroup>\n      </Flex.Item>\n      <Flex.Item margin=\"small\">\n        <Checkbox\n          label=\"hover\"\n          checked={hover}\n          onChange={(e, value) => handleChange('hover', !hover)}\n        />\n      </Flex.Item>\n    </Flex>\n  )\n\n  return (\n    <div>\n      {renderOptions()}\n      <Table caption=\"Top rated movies\" layout={layout} hover={hover}>\n        <Table.Head>\n          <CustomTableRow>\n            <CustomTableCell scope=\"col\">Rank</CustomTableCell>\n            <CustomTableCell scope=\"col\">Title</CustomTableCell>\n            <CustomTableCell scope=\"col\">Year</CustomTableCell>\n            <CustomTableCell scope=\"col\">Rating</CustomTableCell>\n          </CustomTableRow>\n        </Table.Head>\n        <Table.Body>\n          <CustomTableRow>\n            <CustomTableCell scope=\"row\">1</CustomTableCell>\n            <CustomTableCell>The Godfather</CustomTableCell>\n            <CustomTableCell>1972</CustomTableCell>\n            <CustomTableCell>9.2</CustomTableCell>\n          </CustomTableRow>\n          <CustomTableRow>\n            <CustomTableCell scope=\"row\">2</CustomTableCell>\n            <CustomTableCell>The Godfather: Part II</CustomTableCell>\n            <CustomTableCell>1974</CustomTableCell>\n            <CustomTableCell>9.0</CustomTableCell>\n          </CustomTableRow>\n        </Table.Body>\n      </Table>\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n\n#### Fully custom components with `stacked` layout\n\nThis layout for small screens displays the table as a list. To accomplish this the headers are passed down to cells (in [TableContext](TableContext)), so they can display what column they are rendering.\nIn this layout for accessibility not render HTML table tags, just plain DOM elements (e.g. `div`) and use the appropriate ARIA role to signify that it's actually a `Table` (e.g. [`cell`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/cell_role), [`row`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/row_role), [`rowheader`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/rowheader_role)).  \nAlso you need the following props on the components:\n\n##### Table rows\n\n- It should read the `headers` array from [TableContext](TableContext) and pass its nth element to its nth child (if they have such prop).\n\n##### The children of the first row in `Table.Head` (`Table.ColHeader` by default)\n\n- If the table is sortable the Table needs `id`, `onRequestSort`, `sortDirection` and `stackedSortByLabel` props to render a `Select` to choose how to sort the `Table` (see the props of `Table.ColHeader` for types)\n\n##### Table cells\n\n- It needs to have an optional `header` prop and should display its value so the user knows which column the cell's value belongs to (you can read whether the table is using `stacked` layout from [TableContext](TableContext).\n\nCustom table with `stacked` layout support:\n\n```js\n---\ntype: example\n---\nconst CustomTableCell = ({ children, header }) => {\n  const { isStacked } = useContext(TableContext)\n  if (isStacked) {\n    let headerTxt\n    if (typeof header === 'function') {\n      headerTxt = React.createElement(header)\n    } else {\n      headerTxt = header\n    }\n    return (\n      <div role=\"cell\">\n        {headerTxt && headerTxt}\n        {headerTxt && ': '}\n        {children}\n      </div>\n    )\n  }\n  return <td>{children}</td>\n}\n\nconst CustomTableRow = ({ children }) => {\n  const { hover, headers, isStacked } = useContext(TableContext)\n  const [isHovered, setIsHovered] = useState(false)\n\n  const Tag = isStacked ? 'div' : 'tr'\n  const rowStyle =\n    hover && isHovered\n      ? { backgroundColor: 'SeaGreen' }\n      : { backgroundColor: 'white' }\n\n  return (\n    <Tag\n      style={rowStyle}\n      role={isStacked ? 'row' : undefined}\n      onMouseOver={() => setIsHovered(true)}\n      onMouseOut={() => setIsHovered(false)}\n    >\n      {React.Children.toArray(children)\n        .filter(React.isValidElement)\n        .map((child, index) => {\n          return React.cloneElement(child, {\n            key: child.props.name,\n            // used by `CustomTableCell` to render its column title in `stacked` layout\n            header: headers && headers[index]\n          })\n        })}\n    </Tag>\n  )\n}\n\nconst Example = () => {\n  const [layout, setLayout] = useState('auto')\n  const [hover, setHover] = useState(false)\n\n  const handleChange = (field, value) => {\n    if (field === 'layout') {\n      setLayout(value)\n    } else if (field === 'hover') {\n      setHover(!hover)\n    }\n  }\n\n  const renderOptions = () => (\n    <Flex alignItems=\"start\">\n      <Flex.Item margin=\"small\">\n        <RadioInputGroup\n          name=\"customStackedLayout\"\n          description=\"Layout\"\n          value={layout}\n          onChange={(e, value) => handleChange('layout', value)}\n        >\n          <RadioInput label=\"auto\" value=\"auto\" />\n          <RadioInput label=\"fixed\" value=\"fixed\" />\n          <RadioInput label=\"stacked\" value=\"stacked\" />\n        </RadioInputGroup>\n      </Flex.Item>\n      <Flex.Item margin=\"small\">\n        <Checkbox\n          label=\"hover\"\n          checked={hover}\n          onChange={(e, value) => handleChange('hover', !hover)}\n        />\n      </Flex.Item>\n    </Flex>\n  )\n\n  return (\n    <div>\n      {renderOptions()}\n      <Table caption=\"Top rated movies\" layout={layout} hover={hover}>\n        <Table.Head>\n          <CustomTableRow>\n            <CustomTableCell scope=\"col\">Rank</CustomTableCell>\n            <CustomTableCell scope=\"col\">Title</CustomTableCell>\n            <CustomTableCell scope=\"col\">Year</CustomTableCell>\n            <CustomTableCell scope=\"col\">Rating</CustomTableCell>\n          </CustomTableRow>\n        </Table.Head>\n        <Table.Body>\n          <CustomTableRow>\n            <CustomTableCell scope=\"row\">1</CustomTableCell>\n            <CustomTableCell>The Godfather</CustomTableCell>\n            <CustomTableCell>1972</CustomTableCell>\n            <CustomTableCell>9.2</CustomTableCell>\n          </CustomTableRow>\n          <CustomTableRow>\n            <CustomTableCell scope=\"row\">2</CustomTableCell>\n            <CustomTableCell>The Godfather: Part II</CustomTableCell>\n            <CustomTableCell>1974</CustomTableCell>\n            <CustomTableCell>9.0</CustomTableCell>\n          </CustomTableRow>\n        </Table.Body>\n      </Table>\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Column headers can be sortable</Figure.Item>\n    <Figure.Item>Use the <Link href=\"#CondensedButton\">CondensedButton</Link> and <strong>small</strong> inputs inside cells</Figure.Item>\n    <Figure.Item>Actions must relate to that row only</Figure.Item>\n    <Figure.Item>Use horizontal and vertical alignment that makes sense with the content</Figure.Item>\n    <Figure.Item>Start align US dates and apply i18n</Figure.Item>\n    <Figure.Item>Start align text and alphanumeric</Figure.Item>\n    <Figure.Item>Start align currency</Figure.Item>\n    <Figure.Item>End align quantities and decimals</Figure.Item>\n    <Figure.Item>Table headers should have the same start or end alignment as their column contents</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Center align more than 4 characters/numbers, choose start or end</Figure.Item>\n    <Figure.Item>Use to create a layout</Figure.Item>\n    <Figure.Item>Use zebra stripes</Figure.Item>\n    <Figure.Item>Bottom align ever</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>In the case of a Table with selection, to prevent screenreaders from announcing the label of the select all checkbox when navigating in the rows, an aria-label should be added to the corresponding Table.Colheader like in our example above.\n    </Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Table","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"getHeaders","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"caption":{"required":true,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"Provide a screen reader friendly description. Anything passed to this\nprop will be wrapped by `<ScreenReaderContent>` when it is rendered."},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`."},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provide a reference to the underlying html element"},"hover":{"required":false,"tsType":{"name":"boolean"},"description":"Highlight each row on hover","defaultValue":{"value":"false","computed":false}},"layout":{"required":false,"tsType":{"name":"union","raw":"'auto' | 'fixed' | 'stacked'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'fixed'"},{"name":"literal","value":"'stacked'"}]},"description":"`auto` lets the browser determine table column widths based on cell content,\nwhile `fixed` forces columns of equal width (sets the\n[tableLayout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout)\nCSS prop to `fixed`).\n\n`stacked` renders table in one column to be more readable on narrow screens","defaultValue":{"value":"'auto'","computed":false}},"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"`Table.Head` or `Table.Body`","defaultValue":{"value":"null","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-table/src/Table/index.tsx","extension":".tsx","srcPath":"packages/ui-table/src/Table/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-table/src/Table/index.tsx","packageName":"@instructure/ui-table","requirePath":"@instructure/ui-table/lib/Table/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-table/src/Table/index.tsx').default","esPath":"@instructure/ui-table/es/Table/index","themePath":"packages/ui-table/src/Table/styles.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-table/src/Table/styles.ts","id":"Table","title":"Table"}