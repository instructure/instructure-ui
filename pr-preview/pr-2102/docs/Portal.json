{"description":"@module Portal\nThe `<Portal/>` component allows you to render a subtree into a DOM element.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [isPortalOpen, setIsPortalOpen] = useState(false)\n  const mountNodeRef = useRef(null)\n\n  const handleButtonClick = () => {\n    setIsPortalOpen(!isPortalOpen)\n  }\n\n  const firstParagraph = lorem.paragraph()\n  const secondParagraph = lorem.paragraph()\n\n  return (\n    <div>\n      <Button onClick={handleButtonClick}>\n        {isPortalOpen ? 'Close' : 'Open'} the Portal\n      </Button>\n      <Portal\n        mountNode={mountNodeRef.current}\n        open={isPortalOpen}\n      >\n        <ContextView placement=\"center start\" padding=\"0 x-small\">\n          <p>Greetings from the portal!</p>\n        </ContextView>\n      </Portal>\n      <Text>\n        <p>{firstParagraph}</p>\n        <div ref={mountNodeRef}></div>\n        <p>{secondParagraph}</p>\n      </Text>\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n","displayName":"Portal","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}],"alias":"PortalNode"}}],"returns":null},{"name":"removeNode","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"insertNode","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"findMountNode","docblock":null,"modifiers":[],"params":[{"name":"props","optional":false,"type":{"name":"intersection","raw":"PortalOwnProps & OtherHTMLAttributes<PortalOwnProps>","elements":[{"name":"intersection","raw":"{\n  /**\n   * Whether or not the `<Portal />` is open\n   */\n  open?: boolean\n\n  /**\n   * Callback fired when `<Portal />` content has been mounted in the DOM. Ha the Portal DOMNode as parameter.\n   */\n  onOpen?: (DOMNode: PortalNode) => void\n\n  /**\n   * Callback fired when `<Portal />` has been unmounted from the DOM\n   */\n  onClose?: () => void\n\n  /**\n   * An element or a function returning an element to use as the mount node\n   * for the `<Portal />` (defaults to `document.body`)\n   */\n  mountNode?: Element | (() => Element | null) | null\n\n  /**\n   * Insert the element at the 'top' of the mountNode or at the 'bottom'\n   */\n  insertAt?: 'bottom' | 'top'\n\n  /**\n   * The children to be rendered within the `<Portal />`\n   */\n  children?: React.ReactNode\n\n  /**\n   * Provides a reference to the underlying html element. Has the Portal DOMNode as parameter.\n   */\n  elementRef?: (el?: PortalNode) => void\n} & TextDirectionContextConsumerProps","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Whether or not the `<Portal />` is open\n   */\n  open?: boolean\n\n  /**\n   * Callback fired when `<Portal />` content has been mounted in the DOM. Ha the Portal DOMNode as parameter.\n   */\n  onOpen?: (DOMNode: PortalNode) => void\n\n  /**\n   * Callback fired when `<Portal />` has been unmounted from the DOM\n   */\n  onClose?: () => void\n\n  /**\n   * An element or a function returning an element to use as the mount node\n   * for the `<Portal />` (defaults to `document.body`)\n   */\n  mountNode?: Element | (() => Element | null) | null\n\n  /**\n   * Insert the element at the 'top' of the mountNode or at the 'bottom'\n   */\n  insertAt?: 'bottom' | 'top'\n\n  /**\n   * The children to be rendered within the `<Portal />`\n   */\n  children?: React.ReactNode\n\n  /**\n   * Provides a reference to the underlying html element. Has the Portal DOMNode as parameter.\n   */\n  elementRef?: (el?: PortalNode) => void\n}","signature":{"properties":[{"key":"open","value":{"name":"boolean","required":false},"description":"Whether or not the `<Portal />` is open"},{"key":"onOpen","value":{"name":"signature","type":"function","raw":"(DOMNode: PortalNode) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}]},"name":"DOMNode"}],"return":{"name":"void"}},"required":false},"description":"Callback fired when `<Portal />` content has been mounted in the DOM. Ha the Portal DOMNode as parameter."},{"key":"onClose","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":false},"description":"Callback fired when `<Portal />` has been unmounted from the DOM"},{"key":"mountNode","value":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}],"required":false},"description":"An element or a function returning an element to use as the mount node\nfor the `<Portal />` (defaults to `document.body`)"},{"key":"insertAt","value":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}],"required":false},"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false},"description":"The children to be rendered within the `<Portal />`"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el?: PortalNode) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"Provides a reference to the underlying html element. Has the Portal DOMNode as parameter."}]}},{"name":"TextDirectionContextConsumerProps"}]},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"intersection","raw":"{\n  /**\n   * Whether or not the `<Portal />` is open\n   */\n  open?: boolean\n\n  /**\n   * Callback fired when `<Portal />` content has been mounted in the DOM. Ha the Portal DOMNode as parameter.\n   */\n  onOpen?: (DOMNode: PortalNode) => void\n\n  /**\n   * Callback fired when `<Portal />` has been unmounted from the DOM\n   */\n  onClose?: () => void\n\n  /**\n   * An element or a function returning an element to use as the mount node\n   * for the `<Portal />` (defaults to `document.body`)\n   */\n  mountNode?: Element | (() => Element | null) | null\n\n  /**\n   * Insert the element at the 'top' of the mountNode or at the 'bottom'\n   */\n  insertAt?: 'bottom' | 'top'\n\n  /**\n   * The children to be rendered within the `<Portal />`\n   */\n  children?: React.ReactNode\n\n  /**\n   * Provides a reference to the underlying html element. Has the Portal DOMNode as parameter.\n   */\n  elementRef?: (el?: PortalNode) => void\n} & TextDirectionContextConsumerProps","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Whether or not the `<Portal />` is open\n   */\n  open?: boolean\n\n  /**\n   * Callback fired when `<Portal />` content has been mounted in the DOM. Ha the Portal DOMNode as parameter.\n   */\n  onOpen?: (DOMNode: PortalNode) => void\n\n  /**\n   * Callback fired when `<Portal />` has been unmounted from the DOM\n   */\n  onClose?: () => void\n\n  /**\n   * An element or a function returning an element to use as the mount node\n   * for the `<Portal />` (defaults to `document.body`)\n   */\n  mountNode?: Element | (() => Element | null) | null\n\n  /**\n   * Insert the element at the 'top' of the mountNode or at the 'bottom'\n   */\n  insertAt?: 'bottom' | 'top'\n\n  /**\n   * The children to be rendered within the `<Portal />`\n   */\n  children?: React.ReactNode\n\n  /**\n   * Provides a reference to the underlying html element. Has the Portal DOMNode as parameter.\n   */\n  elementRef?: (el?: PortalNode) => void\n}","signature":{"properties":[{"key":"open","value":{"name":"boolean","required":false},"description":"Whether or not the `<Portal />` is open"},{"key":"onOpen","value":{"name":"signature","type":"function","raw":"(DOMNode: PortalNode) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}]},"name":"DOMNode"}],"return":{"name":"void"}},"required":false},"description":"Callback fired when `<Portal />` content has been mounted in the DOM. Ha the Portal DOMNode as parameter."},{"key":"onClose","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":false},"description":"Callback fired when `<Portal />` has been unmounted from the DOM"},{"key":"mountNode","value":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}],"required":false},"description":"An element or a function returning an element to use as the mount node\nfor the `<Portal />` (defaults to `document.body`)"},{"key":"insertAt","value":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}],"required":false},"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false},"description":"The children to be rendered within the `<Portal />`"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el?: PortalNode) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"Provides a reference to the underlying html element. Has the Portal DOMNode as parameter."}]}},{"name":"TextDirectionContextConsumerProps"}]},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}],"alias":"PortalProps"}}],"returns":null},{"name":"node","docblock":null,"modifiers":["get"],"params":[],"returns":null}],"props":{"open":{"required":false,"tsType":{"name":"boolean"},"description":"Whether or not the `<Portal />` is open","defaultValue":{"value":"false","computed":false}},"onOpen":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(DOMNode: PortalNode) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}]},"name":"DOMNode"}],"return":{"name":"void"}}},"description":"Callback fired when `<Portal />` content has been mounted in the DOM. Ha the Portal DOMNode as parameter.","defaultValue":{"value":"() => {}","computed":false}},"onClose":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired when `<Portal />` has been unmounted from the DOM","defaultValue":{"value":"() => {}","computed":false}},"mountNode":{"required":false,"tsType":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}]},"description":"An element or a function returning an element to use as the mount node\nfor the `<Portal />` (defaults to `document.body`)","defaultValue":{"value":"null","computed":false}},"insertAt":{"required":false,"tsType":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}]},"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'","defaultValue":{"value":"'bottom'","computed":false}},"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"The children to be rendered within the `<Portal />`","defaultValue":{"value":"null","computed":false}},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(el?: PortalNode) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}},"description":"Provides a reference to the underlying html element. Has the Portal DOMNode as parameter.","defaultValue":{"value":"() => {}","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components/utilities","relativePath":"packages/ui-portal/src/Portal/index.tsx","extension":".tsx","srcPath":"packages/ui-portal/src/Portal/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-portal/src/Portal/index.tsx","packageName":"@instructure/ui-portal","requirePath":"@instructure/ui-portal/lib/Portal/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-portal/src/Portal/index.tsx').default","esPath":"@instructure/ui-portal/es/Portal/index","id":"Portal","title":"Portal"}