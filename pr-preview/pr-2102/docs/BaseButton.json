{"description":"\n`BaseButton` is a low level utility component used to compose Instructure UI buttons. In most cases, it should not be used directly.\nUse [Button](Button), [CloseButton](CloseButton), [IconButton](IconButton), or [CondensedButton](CondensedButton) instead.\n\n```js\n---\ntype: example\n---\n<View display=\"block\" margin=\"medium\">\n  <BaseButton>Click me</BaseButton>\n</View>\n```\n","displayName":"BaseButton","methods":[{"name":"makeStylesVariables","docblock":null,"modifiers":["get"],"params":[],"returns":{"type":{"name":"signature","type":"object","raw":"{\n  isDisabled: boolean\n  hasOnlyIconVisible: boolean\n  isEnabled: boolean\n}","signature":{"properties":[{"key":"isDisabled","value":{"name":"boolean","required":true}},{"key":"hasOnlyIconVisible","value":{"name":"boolean","required":true}},{"key":"isEnabled","value":{"name":"boolean","required":true}}]}}}},{"name":"hasOnlyIconVisible","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"elementType","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"interaction","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isDisabled","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isReadOnly","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isEnabled","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focusColor","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focused","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleElementRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]}}],"returns":null},{"name":"handleClick","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps & Element>","elements":[{"name":"intersection","raw":"ViewProps & Element","elements":[{"name":"ViewProps"},{"name":"Element"}]}],"alias":"React.MouseEvent"}}],"returns":null},{"name":"handleKeyDown","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps & Element>","elements":[{"name":"intersection","raw":"ViewProps & Element","elements":[{"name":"ViewProps"},{"name":"Element"}]}],"alias":"React.KeyboardEvent"}}],"returns":null},{"name":"renderChildren","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"Specifies the `Button` children."},"type":{"required":false,"tsType":{"name":"union","raw":"'button' | 'submit' | 'reset'","elements":[{"name":"literal","value":"'button'"},{"name":"literal","value":"'submit'"},{"name":"literal","value":"'reset'"}]},"description":"Specifies the type of the `Button`'s underlying html element.","defaultValue":{"value":"'button'","computed":false}},"size":{"required":false,"tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"description":"The size of the `Button`","defaultValue":{"value":"'medium'","computed":false}},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a reference to the `Button`'s underlying html element."},"as":{"required":false,"tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"description":"The element to render as the component root, `Button` by default.","defaultValue":{"value":"'button'","computed":false}},"interaction":{"required":false,"tsType":{"name":"InteractionType"},"description":"Specifies if interaction with the `Button` is enabled, disabled, or readonly.","defaultValue":{"value":"undefined","computed":true}},"color":{"required":false,"tsType":{"name":"union","raw":"| 'primary'\n| 'primary-inverse'\n| 'secondary'\n| 'success'\n| 'danger'\n| 'ai-primary'\n| 'ai-secondary'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'danger'"},{"name":"literal","value":"'ai-primary'"},{"name":"literal","value":"'ai-secondary'"}]},"description":"Specifies the color for the `Button`.","defaultValue":{"value":"'secondary'","computed":false}},"focusColor":{"required":false,"tsType":{"name":"union","raw":"'info' | 'inverse'","elements":[{"name":"literal","value":"'info'"},{"name":"literal","value":"'inverse'"}]},"description":"Override the `Button`'s default focus outline color."},"display":{"required":false,"tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"description":"The `Button` display property. When set to `inline-block`, the `Button` displays inline with other elements.\nWhen set to block, the `Button` expands to fill the width of the container.","defaultValue":{"value":"'inline-block'","computed":false}},"textAlign":{"required":false,"tsType":{"name":"union","raw":"'start' | 'center'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"}]},"description":"Sets the alignment of the `Button` children and/or icon.","defaultValue":{"value":"'start'","computed":false}},"shape":{"required":false,"tsType":{"name":"union","raw":"'rectangle' | 'circle'","elements":[{"name":"literal","value":"'rectangle'"},{"name":"literal","value":"'circle'"}]},"description":"Specifies if the `Button` shape should be a circle or rectangle.","defaultValue":{"value":"'rectangle'","computed":false}},"withBackground":{"required":false,"tsType":{"name":"boolean"},"description":"Specifies if the `Button` should render with a solid background. When false, the background is transparent.","defaultValue":{"value":"true","computed":false}},"withBorder":{"required":false,"tsType":{"name":"boolean"},"description":"Specifies if the `Button` should render with a border.","defaultValue":{"value":"true","computed":false}},"isCondensed":{"required":false,"tsType":{"name":"boolean"},"description":"Designates if the `Button` should render without padding. This option should only be set when `withBorder` and\n`withBackground` are also set to false.","defaultValue":{"value":"false","computed":false}},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","defaultValue":{"value":"'0'","computed":false}},"cursor":{"required":false,"tsType":{"name":"union","raw":"| 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'grab'\n| 'grabbing'\n| 'all-scroll'\n| 'col-resize'\n| 'row-resize'\n| 'n-resize'\n| 'e-resize'\n| 's-resize'\n| 'w-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'ew-resize'\n| 'ns-resize'\n| 'nesw-resize'\n| 'nwse-resize'\n| 'zoom-in'\n| 'zoom-out'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'default'"},{"name":"literal","value":"'none'"},{"name":"literal","value":"'context-menu'"},{"name":"literal","value":"'help'"},{"name":"literal","value":"'pointer'"},{"name":"literal","value":"'progress'"},{"name":"literal","value":"'wait'"},{"name":"literal","value":"'cell'"},{"name":"literal","value":"'crosshair'"},{"name":"literal","value":"'text'"},{"name":"literal","value":"'vertical-text'"},{"name":"literal","value":"'alias'"},{"name":"literal","value":"'copy'"},{"name":"literal","value":"'move'"},{"name":"literal","value":"'no-drop'"},{"name":"literal","value":"'not-allowed'"},{"name":"literal","value":"'grab'"},{"name":"literal","value":"'grabbing'"},{"name":"literal","value":"'all-scroll'"},{"name":"literal","value":"'col-resize'"},{"name":"literal","value":"'row-resize'"},{"name":"literal","value":"'n-resize'"},{"name":"literal","value":"'e-resize'"},{"name":"literal","value":"'s-resize'"},{"name":"literal","value":"'w-resize'"},{"name":"literal","value":"'ne-resize'"},{"name":"literal","value":"'nw-resize'"},{"name":"literal","value":"'se-resize'"},{"name":"literal","value":"'sw-resize'"},{"name":"literal","value":"'ew-resize'"},{"name":"literal","value":"'ns-resize'"},{"name":"literal","value":"'nesw-resize'"},{"name":"literal","value":"'nwse-resize'"},{"name":"literal","value":"'zoom-in'"},{"name":"literal","value":"'zoom-out'"}]},"description":"Specify a mouse cursor to use when hovering over the button.\nThe `pointer` cursor is used by default.","defaultValue":{"value":"'pointer'","computed":false}},"href":{"required":false,"tsType":{"name":"string"},"description":"Specifies an href attribute for the `Button`'s underlying html element."},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired when the `Button` is clicked."},"onKeyDown":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<ViewProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired when the `Button` receives a keydown event."},"renderIcon":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"An icon, or function that returns an icon."},"tabIndex":{"required":false,"tsType":{"name":"number"},"description":"Specifies the tabindex of the `Button`."},"withFocusOutline":{"required":false,"tsType":{"name":"boolean"},"description":"Manually control if the `Button` should display a focus outline.\n\nWhen left `undefined` (which is the default) the focus outline will display\nif this component is focusable and receives focus."},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""},"to":{"required":false,"tsType":{"name":"string"},"description":"Needed for React Router links\n@private"}},"category":"components/utilities","relativePath":"packages/ui-buttons/src/BaseButton/index.tsx","extension":".tsx","srcPath":"packages/ui-buttons/src/BaseButton/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/BaseButton/index.tsx","packageName":"@instructure/ui-buttons","requirePath":"@instructure/ui-buttons/lib/BaseButton/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-buttons/src/BaseButton/index.tsx').default","esPath":"@instructure/ui-buttons/es/BaseButton/index","themePath":"packages/ui-buttons/src/BaseButton/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/BaseButton/theme.ts","id":"BaseButton","title":"BaseButton"}