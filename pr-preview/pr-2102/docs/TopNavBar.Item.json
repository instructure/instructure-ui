{"description":"@module TopNavBarItem","displayName":"TopNavBarItem","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]}}],"returns":null},{"name":"handleItemRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLButtonElement | HTMLLinkElement | null","elements":[{"name":"HTMLButtonElement"},{"name":"HTMLLinkElement"},{"name":"null"}]}}],"returns":null},{"name":"makeStylesVariables","docblock":null,"modifiers":["get"],"params":[],"returns":{"type":{"name":"signature","type":"object","raw":"{\n  layout: TopNavBarContextType['layout']\n  inverseColor: TopNavBarContextType['inverseColor']\n}","signature":{"properties":[{"key":"layout","value":{"name":"union","raw":"TopNavBarContextType['layout']","required":true}},{"key":"inverseColor","value":{"name":"boolean","raw":"TopNavBarContextType['inverseColor']","required":true}}]}}}},{"name":"shouldRenderSubmenu","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"shouldRenderPopover","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isCustomPopoverControlled","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"hasOpenPopover","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isDefaultVariant","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isButtonVariant","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isIconVariant","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isAvatarOnlyVariant","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"hasAvatar","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"submenuIcon","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"buttonThemeOverride","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"colorProps","docblock":null,"modifiers":["get"],"params":[],"returns":{"type":{"name":"Pick","elements":[{"name":"BaseButtonProps"},{"name":"union","raw":"'color' | 'focusColor'","elements":[{"name":"literal","value":"'color'"},{"name":"literal","value":"'focusColor'"}]}],"raw":"Pick<BaseButtonProps, 'color' | 'focusColor'>"}}},{"name":"ariaProps","docblock":null,"modifiers":["get"],"params":[],"returns":{"type":{"name":"Pick","elements":[{"name":"ReactAriaAttributes","raw":"React.AriaAttributes"},{"name":"union","raw":"'aria-haspopup' | 'aria-expanded'","elements":[{"name":"literal","value":"'aria-haspopup'"},{"name":"literal","value":"'aria-expanded'"}]}],"raw":"Pick<\n  React.AriaAttributes,\n  'aria-haspopup' | 'aria-expanded'\n>"}}},{"name":"itemProps","docblock":null,"modifiers":["get"],"params":[],"returns":{"type":{"name":"union","raw":"BaseButtonProps | null","elements":[{"name":"BaseButtonProps"},{"name":"null"}]}}},{"name":"onFocus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"onBlur","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleKeyDown","docblock":null,"modifiers":[],"params":[{"name":"e","optional":false,"type":null}],"returns":null},{"name":"handleMenuToggle","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":null},{"name":"args","optional":false,"type":null}],"returns":null},{"name":"renderContent","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"wrapButtonInTooltip","docblock":null,"modifiers":[],"params":[{"name":"button","optional":false,"type":{"name":"ComponentElement","elements":[{"name":"BaseButtonProps"},{"name":"BaseButton"}],"raw":"ComponentElement<BaseButtonProps, BaseButton>","alias":"BaseButtonElement"}},{"name":"content","optional":false,"type":{"name":"ReactReactNode","raw":"React.ReactNode","alias":"React.ReactNode"}}],"returns":null},{"name":"renderAvatar","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderDropdownMenu","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderPopover","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"as":{"required":false,"tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"description":"the element type to render as (will default to `<a>` if href is provided)"},"id":{"required":true,"tsType":{"name":"string"},"description":"Required id, used for internal tracking,\nand it also appears as an id on the item element."},"children":{"required":true,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"A required label of the navbar item.\n\n__Note__ that it is required even for the `variant=\"icon\"` type items: the label will be used as an accessible label for screen readers."},"variant":{"required":false,"tsType":{"name":"union","raw":"'default' | 'button' | 'icon' | 'avatar' | 'forceIconWithLabel'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'button'"},{"name":"literal","value":"'icon'"},{"name":"literal","value":"'avatar'"},{"name":"literal","value":"'forceIconWithLabel'"}]},"description":"The display variant of the item.\n\nThe __\"default\"__ variant is displayed as a normal menu item.\n\nThe __\"button\"__ variant is displayed as a button.\n\nThe __\"icon\"__ variant is displayed as an icon without label.\n\nThe __\"avatar\"__ variant is displayed as an avatar without label.\n\nThe __\"forceIconWithLabel\"__ variant is displayed as default on desktop and the same way (with label) on mobile.","defaultValue":{"value":"'default'","computed":false}},"status":{"required":false,"tsType":{"name":"union","raw":"'default' | 'active' | 'disabled'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'active'"},{"name":"literal","value":"'disabled'"}]},"description":"The status of the item.\n\nThe __\"active\"__ status indicates current page or currently active menu item.\nOnly `variant=\"default\"` items can be set to active.\n\nThe __\"disabled\"__ status indicates that the items is disabled.","defaultValue":{"value":"'default'","computed":false}},"renderSubmenu":{"required":false,"tsType":{"name":"ReactComponentElement","raw":"React.ComponentElement<DrilldownProps, Drilldown>","elements":[{"name":"DrilldownProps"},{"name":"Drilldown"}]},"description":"Renders the submenu for the item.\nAccepts a [Drilldown](Drilldown) component.\nThe menu toggle logic is controlled by the menu item.\n\nIf you need more customization, use the `customPopoverConfig` prop."},"showSubmenuChevron":{"required":false,"tsType":{"name":"boolean"},"description":"Displays the open/close chevron next to the item,\nwhen it has a submenu or custom popover.","defaultValue":{"value":"true","computed":false}},"customPopoverConfig":{"required":false,"tsType":{"name":"Omit","elements":[{"name":"PopoverProps"},{"name":"union","raw":"'renderTrigger' | 'positionContainerDisplay'","elements":[{"name":"literal","value":"'renderTrigger'"},{"name":"literal","value":"'positionContainerDisplay'"}]}],"raw":"Omit<\n  PopoverProps,\n  'renderTrigger' | 'positionContainerDisplay'\n>"},"description":"Configures a custom Popover for the menu item.\nAccepts [Popover](Popover) props (except \"renderTrigger\").\n\nUse this prop for features like search, tooltips, etc., and use\nthe `renderSubmenu` prop for the default submenu!\n\nIn small viewport mode only items in `<TopNavBar.ActionItems>` can display custom popovers."},"tooltip":{"required":false,"tsType":{"name":"union","raw":"| string\n| {\n    renderTip: TooltipProps['renderTip']\n    color?: TooltipProps['color']\n    placement?: TooltipProps['placement']\n    offsetX?: TooltipProps['offsetX']\n    offsetY?: TooltipProps['offsetY']\n    onShowContent?: TooltipProps['onShowContent']\n    onHideContent?: TooltipProps['onHideContent']\n  }","elements":[{"name":"string"},{"name":"signature","type":"object","raw":"{\n  renderTip: TooltipProps['renderTip']\n  color?: TooltipProps['color']\n  placement?: TooltipProps['placement']\n  offsetX?: TooltipProps['offsetX']\n  offsetY?: TooltipProps['offsetY']\n  onShowContent?: TooltipProps['onShowContent']\n  onHideContent?: TooltipProps['onHideContent']\n}","signature":{"properties":[{"key":"renderTip","value":{"name":"TooltipProps['renderTip']","raw":"TooltipProps['renderTip']","required":true}},{"key":"color","value":{"name":"TooltipProps['color']","raw":"TooltipProps['color']","required":false}},{"key":"placement","value":{"name":"TooltipProps['placement']","raw":"TooltipProps['placement']","required":false}},{"key":"offsetX","value":{"name":"TooltipProps['offsetX']","raw":"TooltipProps['offsetX']","required":false}},{"key":"offsetY","value":{"name":"TooltipProps['offsetY']","raw":"TooltipProps['offsetY']","required":false}},{"key":"onShowContent","value":{"name":"TooltipProps['onShowContent']","raw":"TooltipProps['onShowContent']","required":false}},{"key":"onHideContent","value":{"name":"TooltipProps['onHideContent']","raw":"TooltipProps['onHideContent']","required":false}}]}}]},"description":"Configures a Tooltip for the menu item.\n\nTooltips can be useful for `variant=\"icon\"` or `variant=\"avatar\"` type\nmenu items where there is no visible text.\n\nAccepts a string or a config object containing a subset of props from [Tooltip](Tooltip)."},"renderAvatar":{"required":false,"tsType":{"name":"signature","type":"object","raw":"{\n  avatarSrc?: string\n  avatarName: string\n  avatarAlt?: string\n}","signature":{"properties":[{"key":"avatarSrc","value":{"name":"string","required":false}},{"key":"avatarName","value":{"name":"string","required":true}},{"key":"avatarAlt","value":{"name":"string","required":false}}]}},"description":"Config for displaying an avatar.\n\nUsed only in `<TopNavBar.User>`, and it is a __required__ prop for the `variant=\"avatar\"` type menu items.\n\n- __avatarSrc__: Avatar url\n- __avatarName__: A __required__ name (user's name) for the avatar\n- __avatarAlt__: Accessible label for the avatar"},"renderIcon":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"Renders an icon before the label, or by itself.\n\nIt is __required__ for the `variant=\"icon\"` type menu items.\nIt is also __required__ for items in `<TopNavBar.ActionItems>`\nin small viewport mode, because only the icons are displayed\ndue to the lack of space."},"href":{"required":false,"tsType":{"name":"string"},"description":"If the item goes to a new page, pass a href.\nItems with submenus cannot have href prop."},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}}},"description":"If the item does not go to a new page, pass an onClick.\nItems with submenus cannot have onClick prop, use the `onSubmenuToggle` prop instead."},"onHiddenClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}}},"description":"Only fires when the item is hidden because of truncation or mobile view. Intended to be used for navigation when the item would otherwise be a link."},"onSubmenuToggle":{"required":false,"tsType":{"name":"DrilldownProps['onToggle']","raw":"DrilldownProps['onToggle']"},"description":"__In desktop mode__, the callback fired when the item's submenu ([Drilldown](Drilldown)) is toggled open/closed."},"onMouseOver":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}},"description":"__In desktop mode__, the callback fired when mouse is over item."},"onMouseOut":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}},"description":"__In desktop mode__, the callback fired when mouse leaves item."},"onFocus":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}},"description":"__In desktop mode__, the callback fired when the item is focused."},"onBlur":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}},"description":"__In desktop mode__, the callback fired when the item is blurred."},"onKeyDown":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<ViewProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},"name":"event"}],"return":{"name":"void"}}},"description":"__In desktop mode__, the callback fired on keydown."},"onKeyUp":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}},"description":"__In desktop mode__, the callback fired on keyup."},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(el: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}},"description":"A function that returns a reference to root HTML element"},"itemRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(el: HTMLButtonElement | HTMLLinkElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLButtonElement | HTMLLinkElement | null","elements":[{"name":"HTMLButtonElement"},{"name":"HTMLLinkElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}},"description":"A function that returns a reference to the button/link HTML element"},"shouldCloseOnClick":{"required":false,"tsType":{"name":"union","raw":"'auto' | 'always' | 'never'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'always'"},{"name":"literal","value":"'never'"}]},"description":"Should close the container menu component, if clicked on the option marked with this prop","defaultValue":{"value":"'auto'","computed":false}},"withFocusOutline":{"required":false,"tsType":{"name":"boolean"},"description":"Manually control if this component should display a focus outline.\n\nWhen left `undefined` (which is the default) the focus outline will display\nif this component is focusable and receives focus or has an open popover."},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"parent":"TopNavBar","id":"TopNavBar.Item","relativePath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/index.tsx","extension":".tsx","srcPath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/index.tsx","packageName":"@instructure/ui-top-nav-bar","requirePath":"@instructure/ui-top-nav-bar/lib/TopNavBar/TopNavBarItem/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/index.tsx').default","esPath":"@instructure/ui-top-nav-bar/es/TopNavBar/TopNavBarItem/index","themePath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/theme.ts","title":"TopNavBar.Item"}