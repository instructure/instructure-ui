{"description":"\n`Expandable` handles the show/hide functionality for both [`ToggleDetails`](#ToggleDetails)\nand [`ToggleGroup`](#ToggleGroup). `getToggleProps` and `getDetailsProps` are needed for the component to function properly, these add necessary ARIA tags and event listeners.\n\n### Basic example\n\n```javascript\n---\ntype: example\n---\n<Expandable onToggle={(event, expanded) => console.log(event, expanded)}>\n  {({ expanded, getToggleProps, getDetailsProps }) => {\n    return (\n      <div>\n        <Button margin=\"small 0\"\n                {...getToggleProps()}\n                display=\"block\"\n                textAlign=\"start\"\n        >\n          I am expanded? {expanded.toString()}\n        </Button>\n        {expanded ? <div {...getDetailsProps()}>\n          This is the content that will display under the Expandable\n        </div> : null}\n      </div>\n    )\n  }}\n</Expandable>\n```\n","displayName":"Expandable","methods":[{"name":"expanded","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isControlled","docblock":null,"modifiers":[],"params":[{"name":"props","optional":true,"type":null}],"returns":null},{"name":"handleToggle","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"union","raw":"React.MouseEvent<ViewProps> | React.KeyboardEvent<ViewProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]}}],"returns":null}],"props":{"expanded":{"type":{"name":"custom","raw":"controllable(PropTypes.bool, 'onToggle', 'defaultExpanded')"},"required":false,"description":"Whether the content is expanded or hidden. Makes the component controlled, so if provided, the `onToggle` handler has to be provided too.","tsType":{"name":"boolean"}},"defaultExpanded":{"type":{"name":"bool"},"required":false,"description":"Whether the content is initially expanded or hidden (uncontrolled)","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"onToggle":{"type":{"name":"func"},"required":false,"description":"Function invoked when this component is expanded/collapsed","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>,\n  expanded: boolean\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"},{"type":{"name":"boolean"},"name":"expanded"}],"return":{"name":"void"}}}},"children":{"type":{"name":"func"},"required":false,"description":"Must be a function that returns a JSX element. It receives and object which\ncontains whether its expanded and objects that need to be spread on the\ntrigger and details elements.","tsType":{"name":"signature","type":"function","raw":"(props: RenderProps) => JSX.Element","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  expanded: boolean\n  /**\n   * Props to be spread onto the trigger element\n   */\n  getToggleProps: ExpandableToggleProps\n\n  /**\n   * Props to be spread onto the details element\n   */\n  getDetailsProps: () => { id: string }\n}","signature":{"properties":[{"key":"expanded","value":{"name":"boolean","required":true}},{"key":"getToggleProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  onClick?: (\n    event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n  ) => void\n  [key: string]: unknown\n}) => {\n  'aria-controls': string\n  'aria-expanded': boolean\n  onClick: (\n    event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n  ) => void\n  [key: string]: unknown\n}","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  onClick?: (\n    event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n  ) => void\n  [key: string]: unknown\n}","signature":{"properties":[{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}},"name":"props"}],"return":{"name":"signature","type":"object","raw":"{\n  'aria-controls': string\n  'aria-expanded': boolean\n  onClick: (\n    event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n  ) => void\n  [key: string]: unknown\n}","signature":{"properties":[{"key":"aria-controls","value":{"name":"string","required":true}},{"key":"aria-expanded","value":{"name":"boolean","required":true}},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":true}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}}},"required":true},"description":"Props to be spread onto the trigger element"},{"key":"getDetailsProps","value":{"name":"signature","type":"function","raw":"() => { id: string }","signature":{"arguments":[],"return":{"name":"signature","type":"object","raw":"{ id: string }","signature":{"properties":[{"key":"id","value":{"name":"string","required":true}}]}}},"required":true},"description":"Props to be spread onto the details element"}]}},"name":"props"}],"return":{"name":"JSX.Element"}}}},"render":{"type":{"name":"func"},"required":false,"description":"Must be a function that returns a JSX element. It receives and object which\ncontains whether its expanded and objects that need to be spread on the\ntrigger and details elements.\nIdentical to children","tsType":{"name":"signature","type":"function","raw":"(props: RenderProps) => JSX.Element","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  expanded: boolean\n  /**\n   * Props to be spread onto the trigger element\n   */\n  getToggleProps: ExpandableToggleProps\n\n  /**\n   * Props to be spread onto the details element\n   */\n  getDetailsProps: () => { id: string }\n}","signature":{"properties":[{"key":"expanded","value":{"name":"boolean","required":true}},{"key":"getToggleProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  onClick?: (\n    event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n  ) => void\n  [key: string]: unknown\n}) => {\n  'aria-controls': string\n  'aria-expanded': boolean\n  onClick: (\n    event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n  ) => void\n  [key: string]: unknown\n}","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  onClick?: (\n    event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n  ) => void\n  [key: string]: unknown\n}","signature":{"properties":[{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}},"name":"props"}],"return":{"name":"signature","type":"object","raw":"{\n  'aria-controls': string\n  'aria-expanded': boolean\n  onClick: (\n    event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n  ) => void\n  [key: string]: unknown\n}","signature":{"properties":[{"key":"aria-controls","value":{"name":"string","required":true}},{"key":"aria-expanded","value":{"name":"boolean","required":true}},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":true}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}}},"required":true},"description":"Props to be spread onto the trigger element"},{"key":"getDetailsProps","value":{"name":"signature","type":"function","raw":"() => { id: string }","signature":{"arguments":[],"return":{"name":"signature","type":"object","raw":"{ id: string }","signature":{"properties":[{"key":"id","value":{"name":"string","required":true}}]}}},"required":true},"description":"Props to be spread onto the details element"}]}},"name":"props"}],"return":{"name":"JSX.Element"}}}}},"category":"components/utilities","relativePath":"packages/ui-expandable/src/Expandable/index.tsx","extension":".tsx","srcPath":"packages/ui-expandable/src/Expandable/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-expandable/src/Expandable/index.tsx","packageName":"@instructure/ui-expandable","requirePath":"@instructure/ui-expandable/lib/Expandable/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-expandable/src/Expandable/index.tsx').default","esPath":"@instructure/ui-expandable/es/Expandable/index","id":"Expandable","title":"Expandable"}