{"description":"\n> **Important:** You can now use are updated version [`DateInput2`](/#DateInput2) which is easier to configure for developers, has a better UX, better accessibility features and a year picker. We recommend using that instead of `DateInput` which will be deprecated in the future.\n\nThe `DateInput` component provides a visual interface for inputting date data.\n\n### Composing a DateInput in your Application\n\n`DateInput` uses `Calendar` internally. See [Calendar](#Calendar) for more detailed\ndocumentation and guided examples. `DateInput` shares many of the same `Calendar`\nprops and it is created the same way with some additional attributes and callback\nmethods for the input. The following example is configured similar to the `Calendar`\nexamples using [Moment.js](https://momentjs.com/docs/#/parsing/).\n\n```javascript\n---\ntype: example\n---\n\nclass Example extends React.Component {\n  state = {\n    value: '',\n    isShowingCalendar: false,\n    todayDate: parseDate('2019-08-28').toISOString(),\n    selectedDate: null,\n    renderedDate: parseDate('2019-08-01').toISOString(),\n    disabledDates: [\n      parseDate('2019-08-14').toISOString(),\n      parseDate('2019-08-19').toISOString(),\n      parseDate('2019-08-29').toISOString()\n    ],\n    messages: []\n  }\n\n  generateMonth = (renderedDate = this.state.renderedDate) => {\n    const date = parseDate(renderedDate)\n      .startOf('month')\n      .startOf('week')\n\n    return Array.apply(null, Array(Calendar.DAY_COUNT)).map(() => {\n      const currentDate = date.clone()\n      date.add(1, 'days')\n      return currentDate\n    })\n  }\n\n  formatDate = (dateInput) => {\n    const date = parseDate(dateInput)\n    return `${date.format('MMMM')} ${date.format('D')}, ${date.format('YYYY')}`\n  }\n\n  handleChange = (event, { value }) => {\n    const newDateStr = parseDate(value).toISOString()\n\n    this.setState(({ renderedDate }) => ({\n      value,\n      selectedDate: newDateStr,\n      renderedDate: newDateStr || renderedDate,\n      messages: []\n    }))\n  }\n\n  handleShowCalendar = (event) => {\n    this.setState({ isShowingCalendar: true })\n  }\n\n  handleHideCalendar = (event) => {\n    this.setState(({ selectedDate, disabledDates, value }) => ({\n      isShowingCalendar: false,\n      value: selectedDate ? this.formatDate(selectedDate) : value\n    }))\n  }\n\n  handleValidateDate = (event) => {\n    this.setState(({ selectedDate, value }) => {\n      // We don't have a selectedDate but we have a value. That means that the value\n      // could not be parsed and so the date is invalid\n      if (!selectedDate && value) {\n        return {\n          messages: [{ type: 'error', text: 'This date is invalid' }],\n        }\n      }\n      // Display a message if the user has typed in a value that corresponds to a\n      // disabledDate\n      if (this.isDisabledDate(parseDate(selectedDate))) {\n        return {\n          messages: [{ type: 'error', text: 'This date is disabled' }],\n        }\n      }\n    })\n  }\n\n  handleDayClick = (event, { date }) => {\n    this.setState({\n      selectedDate: date,\n      renderedDate: date,\n      messages: []\n    })\n  }\n\n  handleSelectNextDay = (event) => {\n    this.modifySelectedDate('day', 1)\n  }\n\n  handleSelectPrevDay = (event) => {\n    this.modifySelectedDate('day', -1)\n  }\n\n  handleRenderNextMonth = (event) => {\n    this.modifyRenderedDate('month', 1)\n  }\n\n  handleRenderPrevMonth = (event) => {\n    this.modifyRenderedDate('month', -1)\n  }\n\n  modifyRenderedDate = (type, step) => {\n    this.setState(({ renderedDate }) => {\n      return { renderedDate: this.modifyDate(renderedDate, type, step) }\n    })\n  }\n\n  modifySelectedDate = (type, step) => {\n    this.setState(({ selectedDate, renderedDate }) => {\n      // We are either going to increase or decrease our selectedDate by 1 day.\n      // If we do not have a selectedDate yet, we'll just select the first day of\n      // the currently rendered month instead.\n      const newDate = selectedDate\n        ? this.modifyDate(selectedDate, type, step)\n        : parseDate(renderedDate).startOf('month').toISOString()\n\n      return {\n        selectedDate: newDate,\n        renderedDate: newDate,\n        value: this.formatDate(newDate),\n        messages: []\n      }\n    })\n  }\n\n  modifyDate = (dateStr, type, step) => {\n    const date = parseDate(dateStr)\n    date.add(step, type)\n    return date.toISOString()\n  }\n\n  isDisabledDate = (date, disabledDates = this.state.disabledDates) => {\n    return disabledDates.reduce((result, disabledDate) => {\n      return result || date.isSame(disabledDate, 'day')\n    }, false)\n  }\n\n  renderWeekdayLabels = () => {\n    const date = parseDate(this.state.renderedDate).startOf('week')\n\n    return Array.apply(null, Array(7)).map(() => {\n      const currentDate = date.clone()\n      date.add(1, 'day')\n\n      return (\n        <AccessibleContent alt={currentDate.format('dddd')}>\n          {currentDate.format('dd')}\n        </AccessibleContent>\n      )\n    })\n  }\n\n  renderDays () {\n    const {\n      renderedDate,\n      selectedDate,\n      todayDate,\n    } = this.state\n\n    return this.generateMonth().map((date) => {\n      const dateStr = date.toISOString()\n\n      return (\n        <DateInput.Day\n          key={dateStr}\n          date={dateStr}\n          interaction={this.isDisabledDate(date) ? 'disabled' : 'enabled'}\n          isSelected={date.isSame(selectedDate, 'day')}\n          isToday={date.isSame(todayDate, 'day')}\n          isOutsideMonth={!date.isSame(renderedDate, 'month')}\n          label={`${date.format('D')} ${date.format('MMMM')} ${date.format('YYYY')}`}\n          onClick={this.handleDayClick}\n        >\n          {date.format('D')}\n        </DateInput.Day>\n      )\n    })\n  }\n\n  render () {\n    const {\n      value,\n      isShowingCalendar,\n      renderedDate,\n      messages\n    } = this.state\n\n    const date = parseDate(this.state.renderedDate)\n\n    const buttonProps = (type = 'prev') => ({\n      size: 'small',\n      withBackground: false,\n      withBorder: false,\n      renderIcon: type === 'prev'\n        ? <IconArrowOpenStartSolid color=\"primary\" />\n        : <IconArrowOpenEndSolid color=\"primary\" />,\n      screenReaderLabel: type === 'prev' ? 'Previous month' : 'Next month'\n    })\n\n    return (\n      <DateInput\n        renderLabel=\"Choose a date\"\n        assistiveText=\"Type a date or use arrow keys to navigate date picker.\"\n        value={value}\n        onChange={this.handleChange}\n        width=\"20rem\"\n        isInline\n        messages={messages}\n        isShowingCalendar = {this.state.isShowingCalendar}\n        onRequestValidateDate={this.handleValidateDate}\n        onRequestShowCalendar={this.handleShowCalendar}\n        onRequestHideCalendar={this.handleHideCalendar}\n        onRequestSelectNextDay={this.handleSelectNextDay}\n        onRequestSelectPrevDay={this.handleSelectPrevDay}\n        onRequestRenderNextMonth={this.handleRenderNextMonth}\n        onRequestRenderPrevMonth={this.handleRenderPrevMonth}\n        renderNavigationLabel={\n          <span>\n            <div>{date.format('MMMM')}</div>\n            <div>{date.format('YYYY')}</div>\n          </span>\n        }\n        renderPrevMonthButton={<IconButton {...buttonProps('prev')} />}\n        renderNextMonthButton={<IconButton {...buttonProps('next')} />}\n        renderWeekdayLabels={this.renderWeekdayLabels()}\n      >\n        {this.renderDays()}\n      </DateInput>\n    )\n  }\n}\n\nconst locale = 'en-us'\nconst timezone = 'America/Denver'\n\nconst parseDate = (dateStr) => {\n  return moment.tz(dateStr, [moment.ISO_8601, 'llll', 'LLLL', 'lll', 'LLL', 'll', 'LL', 'l', 'L'], locale, timezone)\n}\n\nrender(<Example />)\n```\n\n#### Some dates to keep track of\n\n- `todayDate` - the date that represents today\n- `selectedDate` - the user's selected date\n- `renderedDate` - the date that the user is viewing as they navigate the `Calendar`\n- `disabledDates` - any dates that are disabled\n\n#### Rendering `DateInput.Day` children\n\n`DateInput` accepts children of type `DateInput.Day`. Both `DateInput.Day` and\n`Calendar.Day` are exporting the same `Day` component. The documentation for\n`Day` can be found in [Calendar](#Calendar).\n\n#### Handling onChange\n\nWhen the `DateInput` fires an `onChange` event:\n\n- The value should be updated and any messages should be cleared\n- Verify if the value can be parsed as a date\n- If it can be parsed, update the `selectedDate` and `renderedDate` with that date\n- If it cannot be parsed, the `selectedDate` is set to null and the `renderedDate`\n  stays the same\n\n#### Handling onRequestHideCalendar\n\nWhen the `DateInput` fires `onRequestHideCalendar`:\n\n- The calendar should be hidden\n- The value should be updated with a formatted version of the `selectedDate` if\n  it exists. See \"Formatting user input\" below\n\n#### Formatting user input\n\nDate formats can vary widely (ex. '8-9-19' vs '8/9/19'). When the `Calendar` is\nhidden, the input value should be converted to a consistent, standardized format.\nThe formatted result of the raw input '8/9/19'\ncould be \"August 9, 2019\".\n\n#### Handling onRequestValidateDate\n\nWhen the `DateInput` fires `onRequestValidateDate`, the provided user input\nshould be validated. If the value cannot be parsed as a valid date, or if the\n`selectedDate` is disabled, the user should be notified via the `messages` prop.\n","displayName":"DateInput","methods":[],"props":{"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":true,"description":"Specifies the input label.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"value":{"type":{"name":"custom","raw":"controllable(PropTypes.string)"},"required":false,"description":"Specifies the input value.","tsType":{"name":"string"},"defaultValue":{"value":"''","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"Specifies the input size.","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Html placeholder text to display when the input has no value. This should\nbe hint text, not a label replacement.","tsType":{"name":"string"}},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a change event.\n@param {Object} event - the event object\n@param {Object} data - additional data\n@param data.value - the new value","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.ChangeEvent<HTMLInputElement>,\n  value: { value: string }\n) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ value: string }","signature":{"properties":[{"key":"value","value":{"name":"string","required":true}}]}},"name":"value"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a blur event.","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}},"defaultValue":{"value":"() => {}","computed":false}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"Specifies if the input is required.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"isInline":{"type":{"name":"bool"},"required":false,"description":"Controls whether the input is rendered inline with other elements or if it\nis rendered as a block level element.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"assistiveText":{"type":{"name":"string"},"required":false,"description":"Additional helpful text to provide to screen readers about the operation\nof the component.","tsType":{"name":"string"}},"layout":{"type":{"name":"enum","value":[{"value":"'stacked'","computed":false},{"value":"'inline'","computed":false}]},"required":false,"description":"Controls the layout. When set to `stacked`, the label rests on top of the\ninput. When set to `inline` the label is next to the input.","tsType":{"name":"union","raw":"'stacked' | 'inline'","elements":[{"name":"literal","value":"'stacked'"},{"name":"literal","value":"'inline'"}]},"defaultValue":{"value":"'stacked'","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"Specifies the width of the input.","tsType":{"name":"string"}},"display":{"type":{"name":"enum","value":[{"value":"'inline-block'","computed":false},{"value":"'block'","computed":false}]},"required":false,"description":"Specifies the display property of the container.","tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"defaultValue":{"value":"'inline-block'","computed":false}},"inputRef":{"type":{"name":"func"},"required":false,"description":"Provides a ref to the underlying input element.","tsType":{"name":"signature","type":"function","raw":"(element: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Displays messages and validation for the input. It should be an object\nwith the following shape:\n`{\n  text: PropTypes.node,\n  type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"placement":{"type":{"name":"custom","raw":"PositionPropTypes.placement"},"required":false,"description":"The placement of the calendar in relation to the input.","tsType":{"name":"PlacementPropValues"},"defaultValue":{"value":"'bottom center'","computed":false}},"isShowingCalendar":{"type":{"name":"bool"},"required":false,"description":"Controls whether the calendar is showing.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"onRequestValidateDate":{"type":{"name":"func"},"required":false,"description":"Callback fired when the input is blurred. Feedback should be provided\nto the user when this function is called if the selected date or input\nvalue is not valid. The component calculates date validity and if it's\ndisabled or nor and passes that information to this callback.","tsType":{"name":"signature","type":"function","raw":"(\n  event: SyntheticEvent,\n  dateString?: string,\n  validation?: FormMessage[]\n) => void | FormMessage[]","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"},{"type":{"name":"string"},"name":"dateString"},{"type":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"name":"validation"}],"return":{"name":"union","raw":"void | FormMessage[]","elements":[{"name":"void"},{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}]}}}},"onRequestShowCalendar":{"type":{"name":"func"},"required":false,"description":"Callback fired requesting the calendar be shown.","tsType":{"name":"signature","type":"function","raw":"(event: SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestHideCalendar":{"type":{"name":"func"},"required":false,"description":"Callback fired requesting the calendar be hidden.","tsType":{"name":"signature","type":"function","raw":"(event: SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestSelectNextDay":{"type":{"name":"func"},"required":false,"description":"Callback fired requesting the next day be selected. If no date is currently\nselected should default to the first day of the currently rendered month.","tsType":{"name":"signature","type":"function","raw":"(event: SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestSelectPrevDay":{"type":{"name":"func"},"required":false,"description":"Callback fired requesting the previous day be selected. If no date is currently\nselected should default to the first day of the currently rendered month.","tsType":{"name":"signature","type":"function","raw":"(event: SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestRenderNextMonth":{"type":{"name":"func"},"required":false,"description":"Callback fired requesting the next month be rendered.","tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"}],"return":{"name":"void"}}}},"onRequestRenderPrevMonth":{"type":{"name":"func"},"required":false,"description":"Callback fired requesting the previous month be rendered.","tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"}],"return":{"name":"void"}}}},"renderNavigationLabel":{"type":{"name":"union","value":[{"name":"func"},{"name":"node"}]},"required":false,"description":"Content to render in the calendar navigation header. The recommendation is\nto include the name of the current rendered month along with the year.","tsType":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}]}},"renderWeekdayLabels":{"type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"func"},{"name":"node"}]}},"required":false,"description":"An array of labels containing the name of each day of the week. The visible\nportion of the label should be abbreviated (no longer than three characters).\nNote that screen readers will read this content preceding each date as the\n`<Calendar />` is navigated. Consider using\n[AccessibleContent](#AccessibleContent) with the `alt` prop containing the\nfull day name for assistive technologies and the children containing the\nabbreviation. ex. `[<AccessibleContent alt=\"Sunday\">Sun</AccessibleContent>, ...]`","tsType":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(React.ReactNode | (() => React.ReactNode))[]"}},"renderNextMonthButton":{"type":{"name":"union","value":[{"name":"func"},{"name":"node"}]},"required":false,"description":"A button to render in the calendar navigation header. The recommendation is\nto compose it with the [Button](#Button) component, setting the `variant`\nprop to `icon`, the `size` prop to `small`, and setting the `icon` prop to\n[IconArrowOpenEnd](#iconography).","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderPrevMonthButton":{"type":{"name":"union","value":[{"name":"func"},{"name":"node"}]},"required":false,"description":"A button to render in the calendar navigation header. The recommendation is\nto compose it with the [Button](#Button) component, setting the `variant`\nprop to `icon`, the `size` prop to `small`, and setting the `icon` prop to\n[IconArrowOpenStart](#iconography).","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([Calendar.Day])"},"required":false,"description":"children of type `<DateInput.Day />` There should be exactly 42 provided (6\nweeks).","tsType":{"name":"Array","elements":[{"name":"ReactElement","elements":[{"name":"CalendarDayProps"}],"raw":"ReactElement<CalendarDayProps>"}],"raw":"ReactElement<CalendarDayProps>[]"}},"disabledDates":{"type":{"name":"union","value":[{"name":"array"},{"name":"func"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string[] | ((isoDateToCheck: string) => boolean)","elements":[{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"},{"name":"unknown"}]}},"currentDate":{"type":{"name":"string"},"required":false,"description":"ISO date string for the current date if necessary. Defaults to the current\ndate in the user's timezone.","tsType":{"name":"string"}},"disabledDateErrorMessage":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":false,"description":"Error message shown to the user if they enter a date that is disabled.\nIf not specified the component will show the `invalidDateTimeMessage`.","tsType":{"name":"union","raw":"string | ((rawDateValue: string) => FormMessage)","elements":[{"name":"string"},{"name":"unknown"}]}},"invalidDateErrorMessage":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":false,"description":"The message shown to the user when the data is invalid.\nIf a string, shown to the user anytime the input is invalid.\n\nIf a function, receives a single parameter:\n- *rawDateValue*: the string entered as a date by the user.","tsType":{"name":"union","raw":"string | ((rawDateValue: string) => FormMessage)","elements":[{"name":"string"},{"name":"unknown"}]}},"locale":{"type":{"name":"string"},"required":false,"description":"A standard language identifier.\n\nSee [Moment.js](https://momentjs.com/timezone/docs/#/using-timezones/parsing-in-zone/) for\nmore details.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's locale will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"timezone":{"type":{"name":"string"},"required":false,"description":"A timezone identifier in the format: *Area/Location*\n\nSee [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list\nof possible options.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's timezone will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"withYearPicker":{"type":{"name":"object"},"required":false,"description":"If set, years can be picked from a dropdown.\nIt accepts an object.\nscreenReaderLabel: string // e.g.: i18n(\"pick a year\")\n\nonRequestYearChange?:(e: React.MouseEvent,requestedYear: number): void // if set, on year change, only this will be called and no internal change will take place\n\nstartYear: number // e.g.: 2001, sets the start year of the selectable list\n\nendYear: number // e.g.: 2030, sets the end year of the selectable list","tsType":{"name":"signature","type":"object","raw":"{\n  screenReaderLabel: string\n  onRequestYearChange?: (e: any, requestedYear: number) => void\n  startYear: number\n  endYear: number\n}","signature":{"properties":[{"key":"screenReaderLabel","value":{"name":"string","required":true}},{"key":"onRequestYearChange","value":{"name":"signature","type":"function","raw":"(e: any, requestedYear: number) => void","signature":{"arguments":[{"type":{"name":"any"},"name":"e"},{"type":{"name":"number"},"name":"requestedYear"}],"return":{"name":"void"}},"required":false}},{"key":"startYear","value":{"name":"number","required":true}},{"key":"endYear","value":{"name":"number","required":true}}]}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-date-input/src/DateInput/index.tsx","extension":".tsx","srcPath":"packages/ui-date-input/src/DateInput/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-date-input/src/DateInput/index.tsx","packageName":"@instructure/ui-date-input","requirePath":"@instructure/ui-date-input/lib/DateInput/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-date-input/src/DateInput/index.tsx').default","esPath":"@instructure/ui-date-input/es/DateInput/index","id":"DateInput","title":"DateInput"}