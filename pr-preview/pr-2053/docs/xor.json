{"name":"xor","description":"Verify that a prop cannot be given if one or more other props are also\ngiven.\n\n```js-code\n import { xor } from '@instructure/ui-prop-types'\n\n class Foo extends Component {\n   static propTypes = {\n     decimalPrecision: xor(PropTypes.number, 'significantDigits'),\n     significantDigits: xor(PropTypes.number, 'decimalPrecision')\n   }\n ...\n```\n\nThis will throw an error if both the `decimalPrecision` and\n`significantDigits` props are provided.","params":[{"name":"propType","type":"Validator<T>","optional":false,"description":"- validates the prop type. Returns null if valid, error otherwise"},{"name":"otherPropNames","type":"string[]","optional":false,"description":"- reject if any of these other props are also given"}],"genericParameters":[{"name":"T"}],"returns":{"description":"A function that returns Error if any of the other props\nare also given, null otherwise","type":"(props: Record<string, any>, propName: string, componentName: string) => Error"},"category":"utilities/PropTypes","relativePath":"packages/ui-prop-types/src/xor.ts","extension":".ts","srcPath":"packages/ui-prop-types/src/xor.ts","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-prop-types/src/xor.ts","packageName":"@instructure/ui-prop-types","requirePath":"@instructure/ui-prop-types/lib/xor","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-prop-types/src/xor.ts').default","esPath":"@instructure/ui-prop-types/es/xor","themePath":"packages/ui-prop-types/src/xor.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-prop-types/src/xor.ts","id":"xor","title":"xor"}