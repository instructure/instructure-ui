{"description":"\nA component used to select a time value.\n`TimeSelect` component is a higher level abstraction of [Select](#Select) specifically for selecting time values. The list of possible values can be configured via the component's props.\n\n### Uncontrolled\n\nFor the most basic implementations, `TimeSelect` can be uncontrolled. If desired, the `defaultValue` prop can be used to set the initial selection.\n\n```javascript\n---\ntype: example\n---\n<TimeSelect\n  renderLabel=\"Choose a time\"\n  onChange={(e, { value }) => console.log(value)}\n  onHideOptions={(e)=> console.log(\"hide opts\")}\n  // defaultValue={new Date().toISOString()}\n/>\n```\n\n### Controlled\n\nTo use `TimeSelect` controlled, simply provide the `value` prop an ISO string. The `onChange` callback provides the ISO value of the corresponding option that was selected. Use this value to update the state.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [value, setValue] = useState('2020-05-18T23:59:00')\n\n  const handleChange = (e, { value }) => {\n    setValue(value)\n  }\n\n  return (\n    <TimeSelect\n      renderLabel=\"Choose a time\"\n      placeholder=\"e.g., 4:00:00 PM\"\n      value={value}\n      step={15}\n      format=\"LTS\"\n      onChange={handleChange}\n    />\n  )\n}\n\nrender(<Example />)\n```\n\n### Freeform input\n\nBy default, the user can only set a value that is divisible by `step` (although the component allows to set any valid time value programmatically). You can allow the user to set any valid value with typing in by setting `allowNonStepInput` to `true`. You can use the `onInputChange` event to see whether the current input is valid and its current value.\nNote that the exact value needed to be typed by the user depends on their `locale`:\n\n```javascript\n---\ntype: example\n---\n<TimeSelect\n  renderLabel=\"Choose a time\"\n  onChange={(e, { value }) => console.log(\"change\",value)}\n  onInputChange={(e, value, isoValue)=> console.log(\"inputChange\", value, isoValue)}\n  defaultValue=\"2022-05-12T05:30:00.000Z\"\n  locale=\"en_AU\"\n  timezone='US/Eastern'\n  allowNonStepInput\n/>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use a default value of 11:59 pm for implementations that have to do with due dates</Figure.Item>\n    <Figure.Item>Respect the user's `locale` and `timezone` browser settings (the component does this by itself when not setting `locale` or `timezone`).</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"TimeSelect","methods":[{"name":"focus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"blur","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"_select","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isControlled","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"interaction","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focused","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"id","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"locale","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"timezone","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getFormattedId","docblock":null,"modifiers":[],"params":[{"name":"date","optional":false,"type":{"name":"Moment","alias":"Moment"}}],"returns":null},{"name":"getInitialOption","docblock":null,"modifiers":[],"params":[{"name":"options","optional":false,"type":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{\n  // the ID of this option, ISO date without spaces\n  id: string\n  // the actual date value\n  value: Moment\n  // the label shown to the user\n  label: string\n}","signature":{"properties":[{"key":"id","value":{"name":"string","required":true}},{"key":"value","value":{"name":"Moment","required":true}},{"key":"label","value":{"name":"string","required":true}}]}}],"raw":"TimeSelectOptions[]"}}],"returns":null},{"name":"getOption","docblock":null,"modifiers":[],"params":[{"name":"field","optional":false,"type":null},{"name":"value","optional":false,"type":null},{"name":"options","optional":true,"type":null}],"returns":null},{"name":"getBaseDate","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"generateOptions","docblock":null,"modifiers":[],"params":[],"returns":{"type":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{\n  // the ID of this option, ISO date without spaces\n  id: string\n  // the actual date value\n  value: Moment\n  // the label shown to the user\n  label: string\n}","signature":{"properties":[{"key":"id","value":{"name":"string","required":true}},{"key":"value","value":{"name":"Moment","required":true}},{"key":"label","value":{"name":"string","required":true}}]}}],"raw":"TimeSelectOptions[]"}}},{"name":"filterOptions","docblock":null,"modifiers":[],"params":[{"name":"inputValue","optional":false,"type":{"name":"string"}}],"returns":null},{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"node","optional":false,"type":{"name":"Select","alias":"Select"}}],"returns":null},{"name":"handleBlur","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}],"alias":"React.FocusEvent"}}],"returns":null},{"name":"handleInputChange","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}],"alias":"React.ChangeEvent"}}],"returns":null},{"name":"onKeyDown","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<any>","elements":[{"name":"any"}],"alias":"React.KeyboardEvent"}}],"returns":null},{"name":"handleShowOptions","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent","alias":"React.SyntheticEvent"}}],"returns":null},{"name":"handleBlurOrEsc","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":null}],"returns":null},{"name":"handleSelectOption","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":null},{"name":"data","optional":false,"type":null}],"returns":null},{"name":"handleHighlightOption","docblock":null,"modifiers":[],"params":[{"name":"_event","optional":false,"type":null},{"name":"data","optional":false,"type":null}],"returns":null},{"name":"renderOptions","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderEmptyOption","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"parseInputText","docblock":null,"modifiers":[],"params":[{"name":"inputValue","optional":false,"type":{"name":"string"}}],"returns":null}],"props":{"renderLabel":{"required":true,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"The form field label."},"defaultToFirstOption":{"required":false,"tsType":{"name":"boolean"},"description":"Whether to default to the first option when `defaultValue` hasn't been specified.","defaultValue":{"value":"false","computed":false}},"value":{"required":false,"tsType":{"name":"string"},"description":"An ISO 8601 formatted date string representing the current selected value. If defined,\nthe component will act controlled and will not manage its own state."},"defaultValue":{"required":false,"tsType":{"name":"string"},"description":"An ISO 8601 formatted date string to use if `value` isn't provided."},"id":{"required":false,"tsType":{"name":"string"},"description":"The id of the text input. One is generated if not supplied."},"format":{"required":false,"tsType":{"name":"string"},"description":"The format to use when displaying the possible and currently selected options.\nThis component currently rounds seconds down to the minute.\nDefaults to `LT`, which is localized time without seconds, e.g. \"16:45\" or\n\"4:45 PM\"\n\nSee [moment](https://momentjs.com/docs/#/displaying/format/) for the list\nof available formats.","defaultValue":{"value":"'LT'","computed":false}},"step":{"required":false,"tsType":{"name":"union","raw":"5 | 10 | 15 | 20 | 30 | 60","elements":[{"name":"literal","value":"5"},{"name":"literal","value":"10"},{"name":"literal","value":"15"},{"name":"literal","value":"20"},{"name":"literal","value":"30"},{"name":"literal","value":"60"}]},"description":"The number of minutes to increment by when generating the allowable options.","defaultValue":{"value":"30","computed":false}},"interaction":{"required":false,"tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions, but it keeps the same styles as if it were enabled."},"placeholder":{"required":false,"tsType":{"name":"string"},"description":"Html placeholder text to display when the input has no value. This should\nbe hint text, not a label replacement."},"isRequired":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"isInline":{"required":false,"tsType":{"name":"boolean"},"description":"Whether the input is rendered inline with other elements or if it\nis rendered as a block level element.","defaultValue":{"value":"false","computed":false}},"width":{"required":false,"tsType":{"name":"string"},"description":"The width of the text input."},"optionsMaxWidth":{"required":false,"tsType":{"name":"string"},"description":"The max width the options list can be before option text wraps. If not\nset, the list will only display as wide as the text input."},"visibleOptionsCount":{"required":false,"tsType":{"name":"number"},"description":"The number of options that should be visible before having to scroll.","defaultValue":{"value":"8","computed":false}},"messages":{"required":false,"tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"description":"Displays messages and validation for the input. It should be an array of\nobjects with the following shape:\n`{\n    text: ReactNode,\n    type: One of: ['newError', 'error', 'hint', 'success', 'screenreader-only']\n}`"},"placement":{"required":false,"tsType":{"name":"PlacementPropValues"},"description":"The placement of the options list.","defaultValue":{"value":"'bottom stretch'","computed":false}},"constrain":{"required":false,"tsType":{"name":"PositionConstraint"},"description":"The parent in which to constrain the placement.","defaultValue":{"value":"'window'","computed":false}},"mountNode":{"required":false,"tsType":{"name":"PositionMountNode"},"description":"An element or a function returning an element to use mount the options\nlist to in the DOM (defaults to `document.body`)"},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  event: React.SyntheticEvent,\n  data: { value: string; inputText: string }\n) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ value: string; inputText: string }","signature":{"properties":[{"key":"value","value":{"name":"string","required":true}},{"key":"inputText","value":{"name":"string","required":true}}]}},"name":"data"}],"return":{"name":"void"}}},"description":"Callback fired when a new option is selected. This can happen in the\nfollowing ways:\n1. User clicks/presses enter on an option in the dropdown and focuses away\n2. User enters a valid time manually and focuses away\n@param event - the event object\n@param data - additional data containing the value and the input string"},"onFocus":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired when text input receives focus."},"onBlur":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired when text input loses focus."},"onShowOptions":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired when the options list is shown."},"onHideOptions":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired when the options list is hidden."},"inputRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(inputElement: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"inputElement"}],"return":{"name":"void"}}},"description":"A ref to the html `input` element."},"listRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(listElement: HTMLUListElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]},"name":"listElement"}],"return":{"name":"void"}}},"description":"A ref to the html `ul` element."},"renderEmptyOption":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"Content to display in the list when no options are available.","defaultValue":{"value":"'---'","computed":false}},"renderBeforeInput":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"Content to display before the text input. This will commonly be an icon."},"renderAfterInput":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"Content to display after the text input. This content will replace the\ndefault arrow icons."},"locale":{"required":false,"tsType":{"name":"string"},"description":"A standard language identifier.\n\nSee [moment.js i18n](https://momentjs.com/docs/#/i18n/) for more details.\n\nThis property can also be set via a context property and if both are set then the component property takes\nprecedence over the context property.\n\nThe web browser's locale will be used if no value is set via a component property or a context\nproperty."},"timezone":{"required":false,"tsType":{"name":"string"},"description":"A timezone identifier in the format: Area/Location\n\nSee [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list\nof possible options.\n\nThis property can also be set via a context property and if both are set then the component property takes\nprecedence over the context property.\n\nThe web browser's timezone will be used if no value is set via a component property or a context\nproperty."},"allowNonStepInput":{"required":false,"tsType":{"name":"boolean"},"description":"Whether to allow the user to enter non-step divisible values in the input field.\nNote that even if this is set to `false` one can enter non-step divisible values programatically.\nThe user will need to enter the value exactly (except for lower/uppercase) as specified by the `format` prop  for\nit to be accepted.\n\nDefault is `false`","defaultValue":{"value":"false","computed":false}},"onInputChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  /**\n   * The raw HTML input event\n   */\n  event: React.ChangeEvent<HTMLInputElement>,\n  /**\n   * The text value in the input field.\n   */\n  value: string,\n  /**\n   * Current value as ISO datetime string, undefined it its a non-valid value.\n   */\n  valueAsISOString?: string\n) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"},{"type":{"name":"string"},"name":"value"},{"type":{"name":"string"},"name":"valueAsISOString"}],"return":{"name":"void"}}},"description":"Callback fired when text input value changes."},"allowClearingSelection":{"required":false,"tsType":{"name":"boolean"},"description":"Whether to allow for the user to clear the selected option in the input field.\nIf `false`, the input field will return the last selected option after the input is cleared and loses focus.","defaultValue":{"value":"false","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-time-select/src/TimeSelect/index.tsx","extension":".tsx","srcPath":"packages/ui-time-select/src/TimeSelect/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-time-select/src/TimeSelect/index.tsx","packageName":"@instructure/ui-time-select","requirePath":"@instructure/ui-time-select/lib/TimeSelect/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-time-select/src/TimeSelect/index.tsx').default","esPath":"@instructure/ui-time-select/es/TimeSelect/index","id":"TimeSelect","title":"TimeSelect"}