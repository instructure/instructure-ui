{"description":"\nThe `Menu` component is a special type of Popover that is meant to be used as a list of actions or functions (`<Menu.Items/>` that are keyboard accessible) that the user may want to invoke often related to or controlling some other content on the page.\n\n- Menu should not be used for navigation.\n- Menu should not be used as a form input.\n- Menu is usually triggered on click of a trigger element (often a ‘...’ or cog icon button).\n- The Menu provides custom focus management, trapping focus within the ContextView, allowing navigation between Menu.Items via arrow keys.\n- Menu uses Popover internally and provides additional semantic markup and focus behavior.\n\nPassing a node to the `trigger` prop will render a toggle button which, when clicked, shows or hides\nthe [Menu](Menu) in a [Popover](Popover).\n\nNote: `<Menu/>` cannot contain content that is not a `<Menu.Item/>` (links or buttons). If\nyou need to include more complex content, take a look at [Popover](Popover).\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        singleSelection: ['itemOne'],\n        multipleSelection: ['optionOne', 'optionThree']\n      }\n    }\n\n    handleSingleSelect = (e, newSelected) => {\n      this.setState({\n        singleSelection: newSelected\n      })\n    }\n\n    handleMultipleSelect = (e, newSelected) => {\n      this.setState({\n        multipleSelection: newSelected\n      })\n    }\n\n    render() {\n      return (\n        <View padding=\"medium\" textAlign=\"center\">\n          <Menu\n            placement=\"bottom\"\n            trigger={<Button>Menu</Button>}\n            mountNode={() => document.getElementById('main')}\n          >\n            <Menu.Item value=\"mastery\">Learning Mastery</Menu.Item>\n            <Menu.Item\n              href=\"https://instructure.github.io/instructure-ui/\"\n              target=\"_blank\"\n            >\n              Default (Grid view)\n            </Menu.Item>\n            <Menu.Item disabled>Individual (List view)</Menu.Item>\n            <Menu label=\"More Options\">\n              <Menu.Group\n                allowMultiple\n                label=\"Select Many\"\n                selected={this.state.multipleSelection}\n                onSelect={this.handleMultipleSelect}\n              >\n                <Menu.Item value=\"optionOne\">Option 1</Menu.Item>\n                <Menu.Item value=\"optionTwo\">Option 2</Menu.Item>\n                <Menu.Item value=\"optionThree\">Option 3</Menu.Item>\n              </Menu.Group>\n              <Menu.Separator />\n              <Menu.Item value=\"navigation\">Navigation</Menu.Item>\n              <Menu.Item value=\"set\">Set as default</Menu.Item>\n            </Menu>\n            <Menu.Separator />\n            <Menu.Group\n              label=\"Select One\"\n              selected={this.state.singleSelection}\n              onSelect={this.handleSingleSelect}\n            >\n              <Menu.Item value=\"itemOne\">Item 1</Menu.Item>\n              <Menu.Item value=\"itemTwo\">Item 2</Menu.Item>\n            </Menu.Group>\n            <Menu.Separator />\n            <Menu.Item value=\"baz\">Open grading history...</Menu.Item>\n          </Menu>\n        </View>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [singleSelection, setSingleSelection] = useState(['itemOne'])\n    const [multipleSelection, setMultipleSelection] = useState([\n      'optionOne',\n      'optionThree'\n    ])\n\n    const handleSingleSelect = (e, newSelected) => {\n      setSingleSelection(newSelected)\n    }\n\n    const handleMultipleSelect = (e, newSelected) => {\n      setMultipleSelection(newSelected)\n    }\n\n    return (\n      <View padding=\"medium\" textAlign=\"center\">\n        <Menu\n          placement=\"bottom\"\n          trigger={<Button>Menu</Button>}\n          mountNode={() => document.getElementById('main')}\n        >\n          <Menu.Item value=\"mastery\">Learning Mastery</Menu.Item>\n          <Menu.Item\n            href=\"https://instructure.github.io/instructure-ui/\"\n            target=\"_blank\"\n          >\n            Default (Grid view)\n          </Menu.Item>\n          <Menu.Item disabled>Individual (List view)</Menu.Item>\n          <Menu label=\"More Options\">\n            <Menu.Group\n              allowMultiple\n              label=\"Select Many\"\n              selected={multipleSelection}\n              onSelect={handleMultipleSelect}\n            >\n              <Menu.Item value=\"optionOne\">Option 1</Menu.Item>\n              <Menu.Item value=\"optionTwo\">Option 2</Menu.Item>\n              <Menu.Item value=\"optionThree\">Option 3</Menu.Item>\n            </Menu.Group>\n            <Menu.Separator />\n            <Menu.Item value=\"navigation\">Navigation</Menu.Item>\n            <Menu.Item value=\"set\">Set as default</Menu.Item>\n          </Menu>\n          <Menu.Separator />\n          <Menu.Group\n            label=\"Select One\"\n            selected={singleSelection}\n            onSelect={handleSingleSelect}\n          >\n            <Menu.Item value=\"itemOne\">Item 1</Menu.Item>\n            <Menu.Item value=\"itemTwo\">Item 2</Menu.Item>\n          </Menu.Group>\n          <Menu.Separator />\n          <Menu.Item value=\"baz\">Open grading history...</Menu.Item>\n        </Menu>\n      </View>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Make the text within Menu direct so users can quickly decide on an action</Figure.Item>\n    <Figure.Item>Use for radio or checkbox type interactions</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Nest Menu.Items more than two levels deep</Figure.Item>\n    <Figure.Item>Use content that is not a Menu.Item (links or buttons)</Figure.Item>\n    <Figure.Item>Include complex content</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Menu","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]}}],"returns":null},{"name":"registerMenuItem","docblock":null,"modifiers":[],"params":[{"name":"item","optional":false,"type":{"name":"MenuItem","alias":"MenuItem"}}],"returns":null},{"name":"removeMenuItem","docblock":null,"modifiers":[],"params":[{"name":"item","optional":false,"type":{"name":"MenuItem","alias":"MenuItem"}}],"returns":null},{"name":"menuItems","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"getMenuItemIndex","docblock":null,"modifiers":[],"params":[{"name":"item","optional":false,"type":{"name":"MenuItem","alias":"MenuItem"}}],"returns":null},{"name":"handleTriggerKeyDown","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent","alias":"React.KeyboardEvent"}}],"returns":null},{"name":"handleTriggerMouseOver","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent","alias":"React.MouseEvent"}}],"returns":null},{"name":"handleToggle","docblock":null,"modifiers":[],"params":[{"name":"shown","optional":false,"type":{"name":"boolean"}}],"returns":null},{"name":"handleMenuKeyDown","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLElement>","elements":[{"name":"HTMLElement"}],"alias":"React.KeyboardEvent"}}],"returns":null},{"name":"handleMenuItemSelect","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":null},{"name":"value","optional":false,"type":null},{"name":"selected","optional":false,"type":null},{"name":"item","optional":false,"type":null}],"returns":null},{"name":"handleMenuItemFocus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleMenuItemBlur","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleMenuItemMouseOver","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":null},{"name":"menuItem","optional":false,"type":null}],"returns":null},{"name":"hideActiveSubMenu","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"union","raw":"React.MouseEvent | React.KeyboardEvent","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent"},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent"}]}}],"returns":null},{"name":"handleSubMenuToggle","docblock":null,"modifiers":[],"params":[{"name":"shown","optional":false,"type":null},{"name":"subMenu","optional":false,"type":null}],"returns":null},{"name":"handleSubMenuDismiss","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"union","raw":"React.UIEvent | React.FocusEvent","elements":[{"name":"ReactUIEvent","raw":"React.UIEvent"},{"name":"ReactFocusEvent","raw":"React.FocusEvent"}]}},{"name":"documentClick","optional":false,"type":{"name":"boolean"}}],"returns":null},{"name":"hide","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"union","raw":"React.UIEvent | React.FocusEvent","elements":[{"name":"ReactUIEvent","raw":"React.UIEvent"},{"name":"ReactFocusEvent","raw":"React.FocusEvent"}]}}],"returns":null},{"name":"show","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"union","raw":"React.MouseEvent | React.KeyboardEvent","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent"},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent"}]}}],"returns":null},{"name":"focus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"focused","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"focusedIndex","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"moveFocus","docblock":null,"modifiers":[],"params":[{"name":"step","optional":false,"type":{"name":"number"}}],"returns":null},{"name":"shown","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"renderChildren","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderMenu","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"Children of type `Menu.Item`, `Menu.Group`, `Menu.Separator`, or `Menu`"},"label":{"required":false,"tsType":{"name":"string"},"description":"Description of the `<Menu />`. The component uses it to add its value to\nthe `aria-label` attribute.","defaultValue":{"value":"null","computed":false}},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":"Is the `<Menu />` disabled","defaultValue":{"value":"false","computed":false}},"trigger":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"The trigger element, if the `<Menu />` is to render as a popover","defaultValue":{"value":"null","computed":false}},"placement":{"required":false,"tsType":{"name":"PlacementPropValues"},"description":"If a trigger is supplied, where should the `<Menu />` be placed (relative to the trigger)","defaultValue":{"value":"'bottom center'","computed":false}},"defaultShow":{"required":false,"tsType":{"name":"boolean"},"description":"Should the `<Menu />` be open for the initial render","defaultValue":{"value":"false","computed":false}},"show":{"required":false,"tsType":{"name":"boolean"},"description":"Is the `<Menu />` open (should be accompanied by `onToggle`)"},"onToggle":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(show: boolean, menu: Menu) => void","signature":{"arguments":[{"type":{"name":"boolean"},"name":"show"},{"type":{"name":"Menu"},"name":"menu"}],"return":{"name":"void"}}},"description":"Callback fired when the `<Menu />` is toggled open/closed. When used with `show`,\nthe component will not control its own state."},"onSelect":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  e: React.MouseEvent,\n  value: MenuItemProps['value'] | MenuItemProps['value'][],\n  selected: MenuItemProps['selected'],\n  args: MenuItem\n) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"union","raw":"MenuItemProps['value'] | MenuItemProps['value'][]","elements":[{"name":"intersection['value']","raw":"MenuItemProps['value']"},{"name":"Array","elements":[{"name":"intersection['value']","raw":"MenuItemProps['value']"}],"raw":"MenuItemProps['value'][]"}]},"name":"value"},{"type":{"name":"intersection['selected']","raw":"MenuItemProps['selected']"},"name":"selected"},{"type":{"name":"MenuItem"},"name":"args"}],"return":{"name":"void"}}},"description":"Callback fired when an item within the `<Menu />` is selected"},"onDismiss":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  event: React.UIEvent | React.FocusEvent,\n  documentClick: boolean\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.UIEvent | React.FocusEvent","elements":[{"name":"ReactUIEvent","raw":"React.UIEvent"},{"name":"ReactFocusEvent","raw":"React.FocusEvent"}]},"name":"event"},{"type":{"name":"boolean"},"name":"documentClick"}],"return":{"name":"void"}}},"description":"If a trigger is supplied, callback fired when the `<Menu />` is closed"},"onFocus":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent"},"name":"event"}],"return":{"name":"void"}}},"description":"If a trigger is supplied, callback fired when the `<Menu />` trigger is focused"},"onMouseOver":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"event"}],"return":{"name":"void"}}},"description":"If a trigger is supplied, callback fired onMouseOver for the `<Menu />` trigger"},"onKeyDown":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<HTMLElement>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLElement>","elements":[{"name":"HTMLElement"}]},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired on the onKeyDown of the `<Menu />`"},"onKeyUp":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<HTMLElement>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLElement>","elements":[{"name":"HTMLElement"}]},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired on the onKeyUp of the `<Menu />`"},"menuRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}},"description":"A function that returns a reference to the `<Menu />`"},"popoverRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(el: Popover | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Popover | null","elements":[{"name":"Popover"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}},"description":"A function that returns a reference to the `<Popover />`"},"mountNode":{"required":false,"tsType":{"name":"PositionMountNode"},"description":"If a trigger is supplied, an element or a function returning an element to use as the mount node\nfor the `<Menu />` (defaults to `document.body`)","defaultValue":{"value":"null","computed":false}},"constrain":{"required":false,"tsType":{"name":"PositionConstraint"},"description":"The parent in which to constrain the menu.\nOne of: 'window', 'scroll-parent', 'parent', 'none', an element,\nor a function returning an element","defaultValue":{"value":"'window'","computed":false}},"shouldHideOnSelect":{"required":false,"tsType":{"name":"boolean"},"description":"If a trigger is supplied, should the `<Menu />` hide when an item is selected","defaultValue":{"value":"true","computed":false}},"shouldFocusTriggerOnClose":{"required":false,"tsType":{"name":"boolean"},"description":"If a trigger is supplied, should the `<Menu />` focus the trigger on after closing","defaultValue":{"value":"true","computed":false}},"positionContainerDisplay":{"required":false,"tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"description":"If a trigger is supplied, this prop can set the CSS `display` property on the `<span>` container element of the underlying Position component"},"type":{"required":false,"tsType":{"name":"literal","value":"'flyout'"},"description":"The type of `<Menu />`"},"id":{"required":false,"tsType":{"name":"string"},"description":""},"withArrow":{"required":false,"tsType":{"name":"boolean"},"description":"Whether or not an arrow pointing to the trigger should be rendered","defaultValue":{"value":"true","computed":false}},"offsetX":{"required":false,"tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"description":"The horizontal offset for the positioned content.\nWorks only if `trigger` is provided.","defaultValue":{"value":"0","computed":false}},"offsetY":{"required":false,"tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"description":"The vertical offset for the positioned content.\nWorks only if `trigger` is provided.","defaultValue":{"value":"0","computed":false}},"maxHeight":{"required":false,"tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]},"description":"The maximum height the menu can be. If not set, the menu won't\nscroll and will be as tall as the content requires"},"renderLabelInfo":{"required":false,"tsType":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}]},"description":"Content to render in the label's info region. It is only visible on nested Menus."},"controls":{"required":false,"tsType":{"name":"ReactAriaAttributes['aria-controls']","raw":"React.AriaAttributes['aria-controls']"},"description":""}},"category":"components","relativePath":"packages/ui-menu/src/Menu/index.tsx","extension":".tsx","srcPath":"packages/ui-menu/src/Menu/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-menu/src/Menu/index.tsx","packageName":"@instructure/ui-menu","requirePath":"@instructure/ui-menu/lib/Menu/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-menu/src/Menu/index.tsx').default","esPath":"@instructure/ui-menu/es/Menu/index","themePath":"packages/ui-menu/src/Menu/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-menu/src/Menu/theme.ts","id":"Menu","title":"Menu"}