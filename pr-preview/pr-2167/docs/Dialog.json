{"description":"@module Dialog\nThe `Dialog` component is a utility that is used by\n[Popover](Popover), [Modal](Modal) and [Tray](Tray) for keyboard accessibility.\n\nElements outside of the `Dialog` are hidden from screen readers automatically when `shouldContainFocus` is set to `true` or `screenreader`. The `liveRegion` prop can be used to specify any elements that should not be hidden.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = { open: false }\n    }\n\n    render() {\n      return (\n        <View as=\"div\" padding=\"large\">\n          <Button onClick={() => this.setState({ open: true })}>\n            Open the Dialog\n          </Button>\n          <Portal open={this.state.open}>\n            <Mask>\n              <Dialog\n                open={this.state.open}\n                shouldContainFocus\n                defaultFocusElement={() => this._firstName}\n                shouldReturnFocus\n                onDismiss={() => this.setState({ open: false })}\n                label=\"Full name form\"\n              >\n                <View\n                  as=\"div\"\n                  maxWidth=\"40rem\"\n                  maxHeight=\"30rem\"\n                  background=\"primary\"\n                  shadow=\"above\"\n                  style={{ position: 'relative' }}\n                  padding=\"medium\"\n                >\n                  <CloseButton\n                    placement=\"end\"\n                    onClick={() => this.setState({ open: false })}\n                    screenReaderLabel=\"Close\"\n                  />\n                  <FormFieldGroup\n                    description={\n                      <Heading level=\"h4\" as=\"span\">\n                        Full name\n                      </Heading>\n                    }\n                    layout=\"columns\"\n                  >\n                    <TextInput\n                      width=\"12rem\"\n                      renderLabel=\"First name\"\n                      inputRef={(c) => (this._firstName = c)}\n                    />\n                    <TextInput width=\"12rem\" renderLabel=\"Last name\" />\n                  </FormFieldGroup>\n                </View>\n              </Dialog>\n            </Mask>\n          </Portal>\n        </View>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [open, setOpen] = useState(false)\n\n    return (\n      <View as=\"div\" padding=\"large\">\n        <Button onClick={() => setOpen(true)}>Open the Dialog</Button>\n        <Portal open={open}>\n          <Mask>\n            <Dialog\n              open={open}\n              shouldContainFocus\n              defaultFocusElement={() => this._firstName}\n              shouldReturnFocus\n              onDismiss={() => setOpen(false)}\n              label=\"Full name form\"\n            >\n              <View\n                as=\"div\"\n                maxWidth=\"40rem\"\n                maxHeight=\"30rem\"\n                background=\"primary\"\n                shadow=\"above\"\n                style={{ position: 'relative' }}\n                padding=\"medium\"\n              >\n                <CloseButton\n                  placement=\"end\"\n                  onClick={() => setOpen(false)}\n                  screenReaderLabel=\"Close\"\n                />\n                <FormFieldGroup\n                  description={\n                    <Heading level=\"h4\" as=\"span\">\n                      Full name\n                    </Heading>\n                  }\n                  layout=\"columns\"\n                >\n                  <TextInput\n                    width=\"12rem\"\n                    renderLabel=\"First name\"\n                    inputRef={(c) => (this._firstName = c)}\n                  />\n                  <TextInput width=\"12rem\" renderLabel=\"Last name\" />\n                </FormFieldGroup>\n              </View>\n            </Dialog>\n          </Mask>\n        </Portal>\n      </View>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Keyboard focus must be set to a dialog when it appears; usually on the first interactive element within the dialog</Figure.Item>\n    <Figure.Item>A modal dialog must contain keyboard focus until it closes, so that keyboard or screen reader users won't mistakenly interact with background content that is meant to be hidden or inaccessible</Figure.Item>\n    <Figure.Item>A non-modal dialog must close when it loses focus</Figure.Item>\n    <Figure.Item>When the user closes a dialog, focus must return to a logical place within the page. This is usually to the element that triggered the dialog</Figure.Item>\n    <Figure.Item>When dialogs are triggered by buttons or links (buttons are recommended), accessibility can be further enhanced by applying aria-haspopup=\"dialog\" to the trigger. This will notify screen reader users that the trigger opens a dialog</Figure.Item>\n    <Figure.Item>We recommend that dialogs begin with a heading (typically an H2)</Figure.Item>\n    <Figure.Item>Dialogs should be able to be closed by clicking away, esc key and/or a close button</Figure.Item>\n    <Figure.Item>It is recommended to provide a label for the dialog because, when specified, it will automatically set role=\"dialog\". Alternatively, you can set aria-labelledby on the dialog to reference the ID of the visible title and set role=\"dialog\" manually.</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Dialog","methods":[{"name":"_root","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"open","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"close","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"focus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"blur","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"contentElement","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focused","docblock":null,"modifiers":["get"],"params":[],"returns":null}],"props":{"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"The children to be rendered within the `<Dialog />`"},"as":{"required":false,"tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"description":"The element to render as the component root, `span` by default"},"display":{"required":false,"tsType":{"name":"union","raw":"'auto' | 'block' | 'inline-block'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'block'"},{"name":"literal","value":"'inline-block'"}]},"description":""},"label":{"required":false,"tsType":{"name":"string"},"description":"The aria-label to read for screen reader. When specified, it will automatically set role=\"dialog\"."},"open":{"required":false,"tsType":{"name":"boolean"},"description":"Whether or not the `<Dialog />` is open","defaultValue":{"value":"false","computed":false}},"contentElement":{"required":false,"tsType":{"name":"union","raw":"| Node\n| Window\n| ReactElement\n| Component\n| (() => Node | Window | null | undefined)\n| null","elements":[{"name":"Node"},{"name":"Window"},{"name":"ReactElement"},{"name":"Component"},{"name":"unknown"},{"name":"null"}]},"description":"An element or a function returning an element that wraps the content of the `<Dialog />`"},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""},"shouldFocusOnOpen":{"defaultValue":{"value":"true","computed":false},"required":false},"shouldContainFocus":{"defaultValue":{"value":"false","computed":false},"required":false},"shouldReturnFocus":{"defaultValue":{"value":"false","computed":false},"required":false},"shouldCloseOnDocumentClick":{"defaultValue":{"value":"true","computed":false},"required":false},"shouldCloseOnEscape":{"defaultValue":{"value":"true","computed":false},"required":false}},"category":"components/utilities","relativePath":"packages/ui-dialog/src/Dialog/index.tsx","extension":".tsx","srcPath":"packages/ui-dialog/src/Dialog/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-dialog/src/Dialog/index.tsx","packageName":"@instructure/ui-dialog","requirePath":"@instructure/ui-dialog/lib/Dialog/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-dialog/src/Dialog/index.tsx').default","esPath":"@instructure/ui-dialog/es/Dialog/index","id":"Dialog","title":"Dialog"}