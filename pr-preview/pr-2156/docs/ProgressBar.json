{"description":"\n`<ProgressBar />` is a styled HTML `<progress />` element, complete\nwith the aria attributes required to support screen readers.\n\n### `size`\n\n```js\n---\ntype: example\n---\n<div>\n  <ProgressBar\n    size=\"x-small\"\n    screenReaderLabel=\"Loading completion\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n  <ProgressBar\n    size=\"small\"\n    screenReaderLabel=\"Loading completion\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n  <ProgressBar\n    size=\"large\"\n    screenReaderLabel=\"Loading completion\"\n    valueNow={40}\n    valueMax={60}\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n</div>\n```\n\n### `color`\n\n`<ProgressBar />`'s `color` property controls the overall color scheme of the\ncomponent. Set it to `primary-inverse` when the component is used on dark backgrounds.\n\n```js\n---\ntype: example\n---\n<View background=\"primary-inverse\" as=\"div\">\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    color=\"primary-inverse\"\n    valueNow={30}\n    valueMax={60}\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n</View>\n```\n\n### `meterColor`\n\nThe color of the progress meter is set separately through the `meterColor` property.\n\n```js\n---\ntype: example\n---\n<div>\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"info\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"success\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"alert\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"warning\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"danger\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n    renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  />\n</div>\n```\n\n`meterColor` can also be passed in as a function that takes `valueNow / valueMax`\nas parameters. This allows you to adjust the color of the meter based on the\ncurrent value.\n\n```js\n---\ntype: example\n---\n<ProgressBar\n  screenReaderLabel=\"Loading completion\"\n  meterColor={({ valueNow, valueMax }) => {\n    if (valueNow < 20) {\n      return 'danger'\n    } else if (valueNow / valueMax >= 1) {\n      return 'success'\n    } else {\n      return 'info'\n    }\n  }}\n  valueNow={10}\n  valueMax={60}\n  renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n/>\n```\n\n> `<ProgressBar />` defaults to setting the meter color to `success` when\n> complete.\n\n### `renderValue` / `formatScreenReaderValue`\n\nVia the `renderValue` prop, developers can use `valueMax` and `valueNow` props to format the\nvalue that `<ProgressBar />` displays.\n\n> `renderValue` will not be spoken by screen readers. Any essential information\n> in `renderValue` must also be conveyed via `formatScreenReaderValue` for screen reader users.\n\n```js\n---\ntype: example\n---\n<ProgressBar\n  screenReaderLabel=\"Percent complete\"\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  valueMax={88}\n  valueNow={33}\n/>\n```\n\n### `shouldAnimate`\n\nThe `shouldAnimate` prop makes the progress bar animate the transition between value changes, giving it a smoother look.\n\n- ```js\n  class Example extends React.Component {\n    MIN = 0\n    MAX = 100\n\n    state = {\n      value: 25,\n      shouldAnimate: true\n    }\n\n    bound(n) {\n      if (n < this.MIN) return this.MIN\n      if (n > this.MAX) return this.MAX\n      return n\n    }\n\n    setNumber(n) {\n      return { value: this.bound(n) }\n    }\n\n    handleChange = (event, value) => {\n      const newValue = Number(value)\n\n      if (isNaN(newValue)) {\n        return\n      }\n\n      this.setState({\n        value: newValue\n      })\n    }\n\n    handleDecrement = (event) =>\n      this.setState(({ value }) => {\n        if (Number.isInteger(value)) {\n          return this.setNumber(value - 1)\n        }\n        return this.setNumber(Math.floor(value))\n      })\n\n    handleIncrement = (event) =>\n      this.setState(({ value }) => {\n        if (Number.isInteger(value)) {\n          return this.setNumber(value + 1)\n        }\n        return this.setNumber(Math.ceil(value))\n      })\n\n    handleBlur = (event) =>\n      this.setState(({ value }) => {\n        return this.setNumber(Math.round(value))\n      })\n\n    render() {\n      return (\n        <div>\n          <View\n            as=\"div\"\n            background=\"primary\"\n            padding=\"medium\"\n            margin=\"0 0 large 0\"\n          >\n            <FormFieldGroup\n              description={<ScreenReaderContent>Settings</ScreenReaderContent>}\n            >\n              <Checkbox\n                label=\"Should animate\"\n                checked={this.state.shouldAnimate}\n                onChange={() => {\n                  this.setState({ shouldAnimate: !this.state.shouldAnimate })\n                }}\n                variant=\"toggle\"\n              />\n\n              <NumberInput\n                renderLabel={`ProgressBar value (${this.MIN}-${this.MAX})`}\n                display=\"inline-block\"\n                onBlur={this.handleBlur}\n                onChange={this.handleChange}\n                onDecrement={this.handleDecrement}\n                onIncrement={this.handleIncrement}\n                showArrows\n                value={this.state.value}\n              />\n            </FormFieldGroup>\n          </View>\n\n          <ProgressBar\n            screenReaderLabel=\"Loading completion\"\n            valueNow={this.state.value}\n            valueMax={this.MAX}\n            shouldAnimate={this.state.shouldAnimate}\n            renderValue={({ valueNow, valueMax }) => {\n              return <Text>{Math.round((valueNow / valueMax) * 100)}%</Text>\n            }}\n            formatScreenReaderValue={({ valueNow, valueMax }) => {\n              return Math.round((valueNow / valueMax) * 100) + ' percent'\n            }}\n          />\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const MIN = 0\n    const MAX = 100\n\n    const [value, setValue] = useState(25)\n    const [shouldAnimate, setShouldAnimate] = useState(true)\n\n    const bound = (n) => {\n      if (n < MIN) return MIN\n      if (n > MAX) return MAX\n      return n\n    }\n\n    const handleChange = (event, value) => {\n      const newValue = Number(value)\n      if (isNaN(newValue)) {\n        return\n      }\n      setValue(newValue)\n    }\n\n    const handleDecrement = () => {\n      if (Number.isInteger(value)) {\n        setValue((value) => bound(value - 1))\n      }\n      setValue((value) => bound(Math.floor(value)))\n    }\n\n    const handleIncrement = () => {\n      if (Number.isInteger(value)) {\n        setValue((value) => bound(value + 1))\n      }\n      setValue((value) => bound(Math.ceil(value)))\n    }\n\n    const handleBlur = () => {\n      setValue((value) => bound(Math.round(value)))\n    }\n\n    return (\n      <div>\n        <View\n          as=\"div\"\n          background=\"primary\"\n          padding=\"medium\"\n          margin=\"0 0 large 0\"\n        >\n          <FormFieldGroup\n            description={<ScreenReaderContent>Settings</ScreenReaderContent>}\n          >\n            <Checkbox\n              label=\"Should animate\"\n              checked={shouldAnimate}\n              onChange={() => {\n                setShouldAnimate((shouldAnimate) => !shouldAnimate)\n              }}\n              variant=\"toggle\"\n            />\n\n            <NumberInput\n              renderLabel={`ProgressBar value (${MIN}-${MAX})`}\n              display=\"inline-block\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              onDecrement={handleDecrement}\n              onIncrement={handleIncrement}\n              showArrows\n              value={value}\n            />\n          </FormFieldGroup>\n        </View>\n\n        <ProgressBar\n          screenReaderLabel=\"Loading completion\"\n          valueNow={value}\n          valueMax={MAX}\n          shouldAnimate={shouldAnimate}\n          renderValue={({ valueNow, valueMax }) => {\n            return <Text>{Math.round((valueNow / valueMax) * 100)}%</Text>\n          }}\n          formatScreenReaderValue={({ valueNow, valueMax }) => {\n            return Math.round((valueNow / valueMax) * 100) + ' percent'\n          }}\n        />\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>If the progress bar conveys more information than just an approximate progress of a task (for example \"5 or 23 items downloaded\") then show this information as text too.</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"ProgressBar","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null}],"props":{"screenReaderLabel":{"required":true,"tsType":{"name":"string"},"description":"A label is required for accessibility"},"size":{"required":false,"tsType":{"name":"union","raw":"'x-small' | 'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'x-small'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"description":"Control the height of the progress bar","defaultValue":{"value":"'medium'","computed":false}},"valueMax":{"required":false,"tsType":{"name":"number","raw":"Values['valueMax']"},"description":"Maximum value (defaults to 100)","defaultValue":{"value":"100","computed":false}},"valueNow":{"required":false,"tsType":{"name":"number","raw":"Values['valueNow']"},"description":"Receives the progress of the event","defaultValue":{"value":"0","computed":false}},"formatScreenReaderValue":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(values: Values) => string","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{ valueNow: number; valueMax: number }","signature":{"properties":[{"key":"valueNow","value":{"name":"number","required":true}},{"key":"valueMax","value":{"name":"number","required":true}}]}},"name":"values"}],"return":{"name":"string"}}},"description":"A function for formatting the text provided to screen readers via `aria-valuenow`","defaultValue":{"value":"({ valueNow, valueMax }: Values) =>\n`${valueNow} / ${valueMax}`","computed":false}},"renderValue":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"signature","type":"object","raw":"{ valueNow: number; valueMax: number }","signature":{"properties":[{"key":"valueNow","value":{"name":"number","required":true}},{"key":"valueMax","value":{"name":"number","required":true}}]}},{"name":"ClassicComponent","elements":[{"name":"signature","type":"object","raw":"{ valueNow: number; valueMax: number }","signature":{"properties":[{"key":"valueNow","value":{"name":"number","required":true}},{"key":"valueMax","value":{"name":"number","required":true}}]}},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"signature","type":"object","raw":"{ valueNow: number; valueMax: number }","signature":{"properties":[{"key":"valueNow","value":{"name":"number","required":true}},{"key":"valueMax","value":{"name":"number","required":true}}]}}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"A function to format the displayed value. If null the value will not display.\nTakes `valueNow` and `valueMax` as parameters."},"color":{"required":false,"tsType":{"name":"union","raw":"'primary' | 'primary-inverse'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"}]},"description":"Controls the overall color scheme of the component","defaultValue":{"value":"'primary'","computed":false}},"meterColor":{"required":false,"tsType":{"name":"union","raw":"| ((values: Values) => ProgressBarMeterColor)\n| ProgressBarMeterColor","elements":[{"name":"unknown"},{"name":"union","raw":"| 'info'\n| 'warning'\n| 'danger'\n| 'alert'\n| 'success'\n| 'brand'","elements":[{"name":"literal","value":"'info'"},{"name":"literal","value":"'warning'"},{"name":"literal","value":"'danger'"},{"name":"literal","value":"'alert'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'brand'"}]}]},"description":"Control the color of the progress meter. Defaults to showing theme success\ncolor on completion, based on `valueNow` and `valueMax`.","defaultValue":{"value":"({ valueNow, valueMax }: Values) =>\nvalueNow / valueMax >= 1 ? 'success' : 'brand'","computed":false}},"shouldAnimate":{"required":false,"tsType":{"name":"boolean"},"description":"Whether the change of value should have a transition","defaultValue":{"value":"false","computed":false}},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`."},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a reference to the component's root HTML element"},"as":{"required":false,"tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"description":"Set the element type of the component's root","defaultValue":{"value":"'div'","computed":false}},"renderValueInside":{"required":false,"tsType":{"name":"boolean"},"description":"If true, displays the `renderValue` inside the progress meter for customization.\n\nNote: This should not be used in most cases. When enabled, ensure `renderValue` is styled for proper\nlegibility and alignment across themes and sizes."},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-progress/src/ProgressBar/index.tsx","extension":".tsx","srcPath":"packages/ui-progress/src/ProgressBar/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-progress/src/ProgressBar/index.tsx","packageName":"@instructure/ui-progress","requirePath":"@instructure/ui-progress/lib/ProgressBar/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-progress/src/ProgressBar/index.tsx').default","esPath":"@instructure/ui-progress/es/ProgressBar/index","themePath":"packages/ui-progress/src/ProgressBar/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-progress/src/ProgressBar/theme.ts","id":"ProgressBar","title":"ProgressBar"}