{"description":"\nA Mask component covers its closest positioned parent (either absolute or relative).\n\n```js\n---\ntype: example\n---\n<View\n  padding=\"large\"\n  margin=\"medium\"\n  textAlign=\"center\"\n  as=\"div\"\n  style={{ position: 'relative' }}\n>\n  <Heading>Some content that is masked</Heading>\n  <Mask />\n</View>\n```\n\nThe Mask component can be configured to cover the full screen if it is rendered inside a [Portal](#Portal).\n\n```js\n---\ntype: example\n---\n\n class Example extends React.Component {\n   constructor (props) {\n     super(props)\n\n     this.state = {\n       open: false\n     }\n   }\n\n   handleButtonClick = () => {\n     this.setState(function (state) {\n       return { open: !state.open }\n     })\n   };\n\n   render () {\n     return (\n       <div>\n         <Button onClick={this.handleButtonClick}>\n           {this.state.open ? 'Close' : 'Open'} the Mask\n         </Button>\n         <Portal\n           open={this.state.open}\n         >\n            <Mask\n              fullscreen\n              onClick={() => { this.setState({ open: false }) }}\n            >\n              <Heading>Click anywhere around this text to close the Mask</Heading>\n            </Mask>\n          </Portal>\n       </div>\n     )\n   }\n }\n\n render(<Example />)\n```\n","displayName":"Mask","methods":[{"name":"handleElementRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"contentRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":null}],"returns":null}],"props":{"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"placement":{"required":false,"tsType":{"name":"union","raw":"'top' | 'center' | 'bottom' | 'stretch'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'stretch'"}]},"description":"","defaultValue":{"value":"'center'","computed":false}},"fullscreen":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<HTMLSpanElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLSpanElement>","elements":[{"name":"HTMLSpanElement"}]},"name":"event"}],"return":{"name":"void"}}},"description":""},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"provides a reference to the underlying html root element"},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components/utilities","relativePath":"packages/ui-overlays/src/Mask/index.tsx","extension":".tsx","srcPath":"packages/ui-overlays/src/Mask/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-overlays/src/Mask/index.tsx","packageName":"@instructure/ui-overlays","requirePath":"@instructure/ui-overlays/lib/Mask/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-overlays/src/Mask/index.tsx').default","esPath":"@instructure/ui-overlays/es/Mask/index","themePath":"packages/ui-overlays/src/Mask/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-overlays/src/Mask/theme.ts","id":"Mask","title":"Mask"}