{"description":"","displayName":"MenuItemGroup","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"handleSelect","docblock":null,"modifiers":[],"params":[{"name":"e","optional":false,"type":null},{"name":"value","optional":false,"type":null},{"name":"selected","optional":false,"type":null},{"name":"item","optional":false,"type":null}],"returns":null},{"name":"updateSelected","docblock":null,"modifiers":[],"params":[{"name":"e","optional":false,"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent","alias":"React.MouseEvent"}},{"name":"value","optional":false,"type":{"name":"intersection['value']","raw":"MenuItemProps['value']"}},{"name":"items","optional":false,"type":{"name":"Array","raw":"MenuGroupState['selected']"}},{"name":"selected","optional":false,"type":{"name":"intersection['selected']","raw":"MenuItemProps['selected']"}},{"name":"item","optional":false,"type":{"name":"MenuItem","alias":"MenuItem"}}],"returns":null},{"name":"selectedFromChildren","docblock":null,"modifiers":[],"params":[{"name":"props","optional":false,"type":{"name":"intersection","raw":"MenuGroupOwnProps &\nWithStyleProps<MenuGroupTheme, MenuGroupStyle> &\nOtherHTMLAttributes<MenuGroupOwnProps> &\nWithDeterministicIdProps","elements":[{"name":"signature","type":"object","raw":"{\n  label: React.ReactNode\n  allowMultiple?: boolean\n  /**\n   * children of type `Menu.Item`, `Menu.Separator`\n   */\n  children?: React.ReactNode // TODO: oneOf([MenuItem, MenuItemSeparator])\n  /**\n   * an array of the values (or indices by default) for the selected items\n   */\n  selected?: (string | number)[] // TODO: controllable(PropTypes.array, 'onSelect', 'defaultSelected')\n  /**\n   * an array of the values (or indices by default) for the selected items on initial render\n   */\n  defaultSelected?: (string | number)[]\n  /**\n   * call this function when a menu item is selected\n   */\n  onSelect?: (\n    e: React.MouseEvent,\n    updated: MenuItemProps['value'][],\n    selected: MenuItemProps['selected'],\n    item: MenuItem\n  ) => void\n  onMouseOver?: (e: React.MouseEvent, args: MenuItem) => void\n  /**\n   * the id of the element that the menu items will act upon\n   */\n  controls?: string\n  /**\n   * returns a reference to the `MenuItem`\n   */\n  itemRef?: (element: MenuItem | null) => void\n  disabled?: boolean\n  /**\n   * should the group appear in the tab order (the first item will have a tabIndex of 0)\n   */\n  isTabbable?: boolean\n}","signature":{"properties":[{"key":"label","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true}},{"key":"allowMultiple","value":{"name":"boolean","required":false}},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false},"description":"children of type `Menu.Item`, `Menu.Separator`"},{"key":"selected","value":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number)[]","required":false},"description":"an array of the values (or indices by default) for the selected items"},{"key":"defaultSelected","value":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number)[]","required":false},"description":"an array of the values (or indices by default) for the selected items on initial render"},{"key":"onSelect","value":{"name":"signature","type":"function","raw":"(\n  e: React.MouseEvent,\n  updated: MenuItemProps['value'][],\n  selected: MenuItemProps['selected'],\n  item: MenuItem\n) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"Array","elements":[{"name":"intersection['value']","raw":"MenuItemProps['value']"}],"raw":"MenuItemProps['value'][]"},"name":"updated"},{"type":{"name":"intersection['selected']","raw":"MenuItemProps['selected']"},"name":"selected"},{"type":{"name":"MenuItem"},"name":"item"}],"return":{"name":"void"}},"required":false},"description":"call this function when a menu item is selected"},{"key":"onMouseOver","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent, args: MenuItem) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"MenuItem"},"name":"args"}],"return":{"name":"void"}},"required":false}},{"key":"controls","value":{"name":"string","required":false},"description":"the id of the element that the menu items will act upon"},{"key":"itemRef","value":{"name":"signature","type":"function","raw":"(element: MenuItem | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"MenuItem | null","elements":[{"name":"MenuItem"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"returns a reference to the `MenuItem`"},{"key":"disabled","value":{"name":"boolean","required":false}},{"key":"isTabbable","value":{"name":"boolean","required":false},"description":"should the group appear in the tab order (the first item will have a tabIndex of 0)"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  fontSize: Typography['fontSizeMedium']\n  fontFamily: Typography['fontFamily']\n  fontWeight: Typography['fontWeightBold']\n  padding: string | 0\n  color: Colors['contrasts']['grey125125']\n  background: Colors['contrasts']['white1010']\n}","signature":{"properties":[{"key":"fontSize","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"fontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"fontWeight","value":{"name":"number","raw":"Typography['fontWeightBold']","required":true}},{"key":"padding","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}},{"key":"color","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"background","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"'menuItemGroup' | 'label' | 'items'","elements":[{"name":"literal","value":"'menuItemGroup'"},{"name":"literal","value":"'label'"},{"name":"literal","value":"'items'"}]}],"raw":"ComponentStyle<'menuItemGroup' | 'label' | 'items'>"}],"raw":"WithStyleProps<MenuGroupTheme, MenuGroupStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * the menu item label\n   */\n  children: React.ReactNode\n  /**\n   * whether to set the menu item state to selected or not on initial render\n   */\n  defaultSelected?: boolean\n  /**\n   * whether the menu item is selected or not (must be accompanied by an `onSelect` prop)\n   */\n  selected?: boolean // TODO: controllable(PropTypes.bool, 'onSelect', 'defaultSelected')\n  /**\n   * when used with the `selected` prop, the component will not control its own state\n   */\n  onSelect?: OnMenuItemSelect\n  onClick?: (e: React.MouseEvent) => void\n  onKeyDown?: (e: React.KeyboardEvent) => void\n  onKeyUp?: (e: React.KeyboardEvent) => void\n  onMouseOver?: (e: React.MouseEvent, args: MenuItem) => void\n  /**\n   * the id of the element that the menu item will act upon\n   */\n  controls?: string\n  disabled?: boolean\n  /**\n   * the element type to render as (will default to `<a>` if href is provided)\n   */\n  as?: AsElementType\n  /**\n   * How this component should be rendered. If it's `checkbox` or `radio` it will\n   * display a checkmark based on its own 'selected' state, if it's `flyout` it will\n   * render an arrow after the label.\n   */\n  type?: 'button' | 'checkbox' | 'radio' | 'flyout'\n  /**\n   * Arbitrary value that you can store in this component. Is sent out by the\n   * `onSelect` event\n   */\n  value?: string | number\n  /**\n   * Value of the `href` prop that will be put on the underlying DOM element.\n   */\n  href?: string\n  /**\n   * Where to display the linked URL, as the name for a browsing context (a tab, window, or <iframe>).\n   */\n  target?: string\n  /**\n   * Content to render in the label's info region\n   */\n  renderLabelInfo?: React.ReactNode | (() => React.ReactNode)\n}","signature":{"properties":[{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":true},"description":"the menu item label"},{"key":"defaultSelected","value":{"name":"boolean","required":false},"description":"whether to set the menu item state to selected or not on initial render"},{"key":"selected","value":{"name":"boolean","required":false},"description":"whether the menu item is selected or not (must be accompanied by an `onSelect` prop)"},{"key":"onSelect","value":{"name":"signature","type":"function","raw":"(\n  e: React.MouseEvent,\n  value: MenuItemProps['value'],\n  selected: MenuItemProps['selected'],\n  args: MenuItem\n) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"MenuItemProps['value']","raw":"MenuItemProps['value']"},"name":"value"},{"type":{"name":"MenuItemProps['selected']","raw":"MenuItemProps['selected']"},"name":"selected"},{"type":{"name":"MenuItem"},"name":"args"}],"return":{"name":"void"}},"required":false},"description":"when used with the `selected` prop, the component will not control its own state"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(e: React.KeyboardEvent) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent"},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyUp","value":{"name":"signature","type":"function","raw":"(e: React.KeyboardEvent) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent"},"name":"e"}],"return":{"name":"void"}},"required":false}},{"key":"onMouseOver","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent, args: MenuItem) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"MenuItem"},"name":"args"}],"return":{"name":"void"}},"required":false}},{"key":"controls","value":{"name":"string","required":false},"description":"the id of the element that the menu item will act upon"},{"key":"disabled","value":{"name":"boolean","required":false}},{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"the element type to render as (will default to `<a>` if href is provided)"},{"key":"type","value":{"name":"union","raw":"'button' | 'checkbox' | 'radio' | 'flyout'","elements":[{"name":"literal","value":"'button'"},{"name":"literal","value":"'checkbox'"},{"name":"literal","value":"'radio'"},{"name":"literal","value":"'flyout'"}],"required":false},"description":"How this component should be rendered. If it's `checkbox` or `radio` it will\ndisplay a checkmark based on its own 'selected' state, if it's `flyout` it will\nrender an arrow after the label."},{"key":"value","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false},"description":"Arbitrary value that you can store in this component. Is sent out by the\n`onSelect` event"},{"key":"href","value":{"name":"string","required":false},"description":"Value of the `href` prop that will be put on the underlying DOM element."},{"key":"target","value":{"name":"string","required":false},"description":"Where to display the linked URL, as the name for a browsing context (a tab, window, or <iframe>)."},{"key":"renderLabelInfo","value":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}],"required":false},"description":"Content to render in the label's info region"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]},{"name":"WithDeterministicIdProps"}],"alias":"MenuGroupProps"}}],"returns":null},{"name":"selected","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"renderLabel","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderChildren","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"label":{"type":{"name":"node"},"required":true,"description":"","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"allowMultiple":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([MenuItem, MenuItemSeparator])"},"required":false,"description":"children of type `Menu.Item`, `Menu.Separator`","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"defaultValue":{"value":"null","computed":false}},"selected":{"type":{"name":"custom","raw":"controllable(PropTypes.array, 'onSelect', 'defaultSelected')"},"required":false,"description":"an array of the values (or indices by default) for the selected items","tsType":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number)[]"}},"defaultSelected":{"type":{"name":"array"},"required":false,"description":"an array of the values (or indices by default) for the selected items on initial render","tsType":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number)[]"},"defaultValue":{"value":"[]","computed":false}},"onSelect":{"type":{"name":"func"},"required":false,"description":"call this function when a menu item is selected","tsType":{"name":"signature","type":"function","raw":"(\n  e: React.MouseEvent,\n  updated: MenuItemProps['value'][],\n  selected: MenuItemProps['selected'],\n  item: MenuItem\n) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"Array","elements":[{"name":"intersection['value']","raw":"MenuItemProps['value']"}],"raw":"MenuItemProps['value'][]"},"name":"updated"},{"type":{"name":"intersection['selected']","raw":"MenuItemProps['selected']"},"name":"selected"},{"type":{"name":"MenuItem"},"name":"item"}],"return":{"name":"void"}}}},"onMouseOver":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent, args: MenuItem) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"MenuItem"},"name":"args"}],"return":{"name":"void"}}}},"controls":{"type":{"name":"string"},"required":false,"description":"the id of the element that the menu items will act upon","tsType":{"name":"string"}},"itemRef":{"type":{"name":"func"},"required":false,"description":"returns a reference to the `MenuItem`","tsType":{"name":"signature","type":"function","raw":"(element: MenuItem | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"MenuItem | null","elements":[{"name":"MenuItem"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"disabled":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"isTabbable":{"type":{"name":"bool"},"required":false,"description":"should the group appear in the tab order (the first item will have a tabIndex of 0)","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"parent":"Menu","id":"Menu.Group","relativePath":"packages/ui-menu/src/Menu/MenuItemGroup/index.tsx","extension":".tsx","srcPath":"packages/ui-menu/src/Menu/MenuItemGroup/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-menu/src/Menu/MenuItemGroup/index.tsx","packageName":"@instructure/ui-menu","requirePath":"@instructure/ui-menu/lib/Menu/MenuItemGroup/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-menu/src/Menu/MenuItemGroup/index.tsx').default","esPath":"@instructure/ui-menu/es/Menu/MenuItemGroup/index","themePath":"packages/ui-menu/src/Menu/MenuItemGroup/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-menu/src/Menu/MenuItemGroup/theme.ts","title":"Menu.Group"}