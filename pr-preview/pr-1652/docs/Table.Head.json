{"description":"","displayName":"Head","methods":[{"name":"isSortable","docblock":"Returns `true` if the first child's children have a `onRequestSort` prop","modifiers":["get"],"params":[],"returns":null,"description":"Returns `true` if the first child's children have a `onRequestSort` prop"},{"name":"renderSelect","docblock":"This `Select` is used in `stacked` layout. It's populated by iterating\nthrough the first child's children (by default `ColHeader`) and reading\nthere the `id`, `stackedSortByLabel`, `sortDirection`, `onRequestSort` props","modifiers":[],"params":[],"returns":null,"description":"This `Select` is used in `stacked` layout. It's populated by iterating\nthrough the first child's children (by default `ColHeader`) and reading\nthere the `id`, `stackedSortByLabel`, `sortDirection`, `onRequestSort` props"}],"props":{"children":{"type":{"name":"node"},"required":false,"description":"The header row(s).\nDefault type: `Table.Row`\n\nIts first child is treated specially if the table is sortable and has\n`stacked` layout:\n\nA `Select` is created which reads options from the first child's\nchildren, that tries to read the following props: `id`,\n`stackedSortByLabel`,`sortDirection`, `onRequestSort` (Available on\n`Table.ColHeader`).\nThese are used to sort the table in this layout.","tsType":{"name":"ReactReactElement","raw":"React.ReactElement<{ children: React.ReactElement }>","elements":[{"name":"signature","type":"object","raw":"{ children: React.ReactElement }","signature":{"properties":[{"key":"children","value":{"name":"ReactReactElement","raw":"React.ReactElement","required":true}}]}}]},"defaultValue":{"value":"null","computed":false}},"renderSortLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"The sort `Select`'s label when using `stacked` layout and the table is\nsortable.\nIf you don't want to display anything you should use `ScreenReaderContent`\nso screen readers can read the `Select`'s purpose","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"parent":"Table","id":"Table.Head","relativePath":"packages/ui-table/src/Table/Head/index.tsx","extension":".tsx","srcPath":"packages/ui-table/src/Table/Head/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-table/src/Table/Head/index.tsx","packageName":"@instructure/ui-table","requirePath":"@instructure/ui-table/lib/Table/Head/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-table/src/Table/Head/index.tsx').default","esPath":"@instructure/ui-table/es/Table/Head/index","themePath":"packages/ui-table/src/Table/Head/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-table/src/Table/Head/theme.ts","title":"Table.Head"}