{"description":"\nCondensedButton is a button component that renders without padding. It is meant specifically for tight spaces, or areas where the button padding would prevent the button content from aligning correctly with other elements.\n\n```js\n---\ntype: example\n---\n<View display=\"block\" background=\"primary\" padding=\"small\">\n  <CondensedButton>Click Me</CondensedButton>\n</View>\n```\n\nIn the following example, CondensedButton is used so that the button content can align with the rest of the table cell content.\n\n```js\n---\ntype: example\n---\n<Table caption='Tallest Roller Coasters'>\n  <Table.Head>\n    <Table.Row>\n      <Table.ColHeader id=\"Roller Coaster\">\n        Roller Coaster\n      </Table.ColHeader>\n      <Table.ColHeader id=\"Height\">\n        Height\n      </Table.ColHeader>\n      <Table.ColHeader id=\"Amusement Park\">\n        Amusement Park\n      </Table.ColHeader>\n    </Table.Row>\n  </Table.Head>\n  <Table.Body>\n    <Table.Row>\n      <Table.Cell>\n        Kingda Ka<br />\n        <CondensedButton>View Advanced Stats</CondensedButton>\n      </Table.Cell>\n      <Table.Cell>\n        456.0ft\n      </Table.Cell>\n      <Table.Cell>\n        Six Flags Great America\n      </Table.Cell>\n    </Table.Row>\n    <Table.Row>\n      <Table.Cell>\n        Top Thrill Dragster<br />\n        <CondensedButton>View Advanced Stats</CondensedButton>\n      </Table.Cell>\n      <Table.Cell>\n        420.0ft\n      </Table.Cell>\n      <Table.Cell>\n        Cedar Point\n      </Table.Cell>\n    </Table.Row>\n    <Table.Row>\n      <Table.Cell>\n        Superman: Escape from Krypton<br />\n        <CondensedButton>View Advanced Stats</CondensedButton>\n      </Table.Cell>\n      <Table.Cell>\n        415.0ft\n      </Table.Cell>\n      <Table.Cell>\n        Six Flags Magic Mountain\n      </Table.Cell>\n    </Table.Row>\n  </Table.Body>\n</Table>\n```\n","displayName":"CondensedButton","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"Specifies the `CondensedButton` children.","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"type":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'submit'","computed":false},{"value":"'reset'","computed":false}]},"required":false,"description":"Specifies the type of the `CondensedButton`'s underlying html element.","tsType":{"name":"union","raw":"'button' | 'submit' | 'reset'","elements":[{"name":"literal","value":"'button'"},{"name":"literal","value":"'submit'"},{"name":"literal","value":"'reset'"}]},"defaultValue":{"value":"'button'","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the `CondensedButton`","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the `CondensedButton`'s underlying html element.","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render as the component root, `button` by default.","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'button'","computed":false}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the `CondensedButton` is enabled, disabled, or readonly.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"defaultValue":{"value":"undefined","computed":true}},"color":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'primary-inverse'","computed":false},{"value":"'secondary'","computed":false}]},"required":false,"description":"Specifies the color for the `CondensedButton`.","tsType":{"name":"union","raw":"'primary' | 'primary-inverse' | 'secondary'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"},{"name":"literal","value":"'secondary'"}]},"defaultValue":{"value":"'primary'","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"},"defaultValue":{"value":"'0'","computed":false}},"cursor":{"type":{"name":"string"},"required":false,"description":"Specify a mouse cursor to use when hovering over the button.\nThe `pointer` cursor is used by default.","tsType":{"name":"Cursor"},"defaultValue":{"value":"'pointer'","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":"Specifies an href attribute for the `CondensedButton`'s underlying html element.","tsType":{"name":"string"}},"renderIcon":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"An icon, or function that returns an icon.","tsType":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}]}},"onClick":{"type":{"name":"func"},"required":false,"description":"Callback fired when the `CondensedButton` is clicked.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""},"to":{"required":false,"tsType":{"name":"string"},"description":"Needed for React Router links\n@private"}},"category":"components","relativePath":"packages/ui-buttons/src/CondensedButton/index.tsx","extension":".tsx","srcPath":"packages/ui-buttons/src/CondensedButton/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/CondensedButton/index.tsx","packageName":"@instructure/ui-buttons","requirePath":"@instructure/ui-buttons/lib/CondensedButton/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-buttons/src/CondensedButton/index.tsx').default","esPath":"@instructure/ui-buttons/es/CondensedButton/index","themePath":"packages/ui-buttons/src/CondensedButton/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/CondensedButton/theme.ts","id":"CondensedButton","title":"CondensedButton"}