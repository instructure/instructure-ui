{"description":"@module TopNavBarItem","displayName":"TopNavBarItem","methods":[],"props":{"id":{"type":{"name":"string"},"required":true,"description":"Required id, used for internal tracking,\nand it also appears as an id on the item element.","tsType":{"name":"string"}},"as":{"type":{"name":"elementType"},"required":false,"description":"the element type to render as (will default to `<a>` if href is provided)","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]}},"children":{"type":{"name":"node"},"required":true,"description":"A required label of the navbar item.\n\n__Note__ that it is required even for the `variant=\"icon\"` type items: the label will be used as an accessible label for screen readers.","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"variant":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'button'","computed":false},{"value":"'icon'","computed":false},{"value":"'avatar'","computed":false}]},"required":false,"description":"The display variant of the item.\n\nThe __\"default\"__ variant is displayed as a normal menu item.\n\nThe __\"button\"__ variant is displayed as a button.\n\nThe __\"icon\"__ variant is displayed as an icon without label.\n\nThe __\"avatar\"__ variant is displayed as an avatar without label.\n\nThe __\"forceIconWithLabel\"__ variant is displayed as default on desktop and the same way (with label) on mobile.","tsType":{"name":"union","raw":"'default' | 'button' | 'icon' | 'avatar' | 'forceIconWithLabel'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'button'"},{"name":"literal","value":"'icon'"},{"name":"literal","value":"'avatar'"},{"name":"literal","value":"'forceIconWithLabel'"}]},"defaultValue":{"value":"'default'","computed":false}},"status":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'active'","computed":false},{"value":"'disabled'","computed":false}]},"required":false,"description":"The status of the item.\n\nThe __\"active\"__ status indicates current page or currently active menu item.\nOnly `variant=\"default\"` items can be set to active.\n\nThe __\"disabled\"__ status indicates that the items is disabled.","tsType":{"name":"union","raw":"'default' | 'active' | 'disabled'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'active'"},{"name":"literal","value":"'disabled'"}]},"defaultValue":{"value":"'default'","computed":false}},"renderSubmenu":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([Drilldown])"},"required":false,"description":"Renders the submenu for the item.\nAccepts a [Drilldown](#Drilldown) component.\nThe menu toggle logic is controlled by the menu item.\n\nIf you need more customization, use the `customPopoverConfig` prop.","tsType":{"name":"ReactComponentElement","raw":"React.ComponentElement<DrilldownProps, Drilldown>","elements":[{"name":"DrilldownProps"},{"name":"Drilldown"}]}},"showSubmenuChevron":{"type":{"name":"bool"},"required":false,"description":"Displays the open/close chevron next to the item,\nwhen it has a submenu or custom popover.","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"customPopoverConfig":{"type":{"name":"object"},"required":false,"description":"Configures a custom Popover for the menu item.\nAccepts [Popover](#Popover) props (except \"renderTrigger\").\n\nUse this prop for features like search, tooltips, etc., and use\nthe `renderSubmenu` prop for the default submenu!\n\nIn small viewport mode only items in `<TopNavBar.ActionItems>` can display custom popovers.","tsType":{"name":"Omit","elements":[{"name":"PopoverProps"},{"name":"union","raw":"'renderTrigger' | 'positionContainerDisplay'","elements":[{"name":"literal","value":"'renderTrigger'"},{"name":"literal","value":"'positionContainerDisplay'"}]}],"raw":"Omit<\n  PopoverProps,\n  'renderTrigger' | 'positionContainerDisplay'\n>"}},"tooltip":{"type":{"name":"union","value":[{"name":"string"},{"name":"shape","value":{"renderTip":{"name":"union","value":[{"name":"node"},{"name":"func"}],"required":true},"color":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'primary-inverse'","computed":false}],"required":false},"placement":{"name":"string","required":false},"offsetX":{"name":"union","value":[{"name":"string"},{"name":"number"}],"required":false},"offsetY":{"name":"union","value":[{"name":"string"},{"name":"number"}],"required":false},"onShowContent":{"name":"func","required":false},"onHideContent":{"name":"func","required":false}}}]},"required":false,"description":"Configures a Tooltip for the menu item.\n\nTooltips can be useful for `variant=\"icon\"` or `variant=\"avatar\"` type\nmenu items where there is no visible text.\n\nAccepts a string or a config object containing a subset of props from [Tooltip](#Tooltip).","tsType":{"name":"union","raw":"| string\n| {\n    renderTip: TooltipProps['renderTip']\n    color?: TooltipProps['color']\n    placement?: TooltipProps['placement']\n    offsetX?: TooltipProps['offsetX']\n    offsetY?: TooltipProps['offsetY']\n    onShowContent?: TooltipProps['onShowContent']\n    onHideContent?: TooltipProps['onHideContent']\n  }","elements":[{"name":"string"},{"name":"signature","type":"object","raw":"{\n  renderTip: TooltipProps['renderTip']\n  color?: TooltipProps['color']\n  placement?: TooltipProps['placement']\n  offsetX?: TooltipProps['offsetX']\n  offsetY?: TooltipProps['offsetY']\n  onShowContent?: TooltipProps['onShowContent']\n  onHideContent?: TooltipProps['onHideContent']\n}","signature":{"properties":[{"key":"renderTip","value":{"name":"TooltipProps['renderTip']","raw":"TooltipProps['renderTip']","required":true}},{"key":"color","value":{"name":"TooltipProps['color']","raw":"TooltipProps['color']","required":false}},{"key":"placement","value":{"name":"TooltipProps['placement']","raw":"TooltipProps['placement']","required":false}},{"key":"offsetX","value":{"name":"TooltipProps['offsetX']","raw":"TooltipProps['offsetX']","required":false}},{"key":"offsetY","value":{"name":"TooltipProps['offsetY']","raw":"TooltipProps['offsetY']","required":false}},{"key":"onShowContent","value":{"name":"TooltipProps['onShowContent']","raw":"TooltipProps['onShowContent']","required":false}},{"key":"onHideContent","value":{"name":"TooltipProps['onHideContent']","raw":"TooltipProps['onHideContent']","required":false}}]}}]}},"renderAvatar":{"type":{"name":"shape","value":{"avatarName":{"name":"string","required":true},"avatarSrc":{"name":"string","required":false},"avatarAlt":{"name":"string","required":false}}},"required":false,"description":"Config for displaying an avatar.\n\nUsed only in `<TopNavBar.User>`, and it is a __required__ prop for the `variant=\"avatar\"` type menu items.\n\n- __avatarSrc__: Avatar url\n- __avatarName__: A __required__ name (user's name) for the avatar\n- __avatarAlt__: Accessible label for the avatar","tsType":{"name":"signature","type":"object","raw":"{\n  avatarSrc?: string\n  avatarName: string\n  avatarAlt?: string\n}","signature":{"properties":[{"key":"avatarSrc","value":{"name":"string","required":false}},{"key":"avatarName","value":{"name":"string","required":true}},{"key":"avatarAlt","value":{"name":"string","required":false}}]}}},"renderIcon":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Renders an icon before the label, or by itself.\n\nIt is __required__ for the `variant=\"icon\"` type menu items.\nIt is also __required__ for items in `<TopNavBar.ActionItems>`\nin small viewport mode, because only the icons are displayed\ndue to the lack of space.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"href":{"type":{"name":"string"},"required":false,"description":"If the item goes to a new page, pass a href.\nItems with submenus cannot have href prop.","tsType":{"name":"string"}},"onClick":{"type":{"name":"func"},"required":false,"description":"If the item does not go to a new page, pass an onClick.\nItems with submenus cannot have onClick prop, use the `onSubmenuToggle` prop instead.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}}}},"onHiddenClick":{"type":{"name":"func"},"required":false,"description":"Only fires when the item is hidden because of truncation or mobile view. Intended to be used for navigation when the item would otherwise be a link.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}}}},"onSubmenuToggle":{"type":{"name":"func"},"required":false,"description":"__In desktop mode__, the callback fired when the item's submenu ([Drilldown](#Drilldown)) is toggled open/closed.","tsType":{"name":"DrilldownProps['onToggle']","raw":"DrilldownProps['onToggle']"}},"onMouseOver":{"type":{"name":"func"},"required":false,"description":"__In desktop mode__, the callback fired when mouse is over item.","tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"onMouseOut":{"type":{"name":"func"},"required":false,"description":"__In desktop mode__, the callback fired when mouse leaves item.","tsType":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"onFocus":{"type":{"name":"func"},"required":false,"description":"__In desktop mode__, the callback fired when the item is focused.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"__In desktop mode__, the callback fired when the item is blurred.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"__In desktop mode__, the callback fired on keydown.","tsType":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<ViewProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},"name":"event"}],"return":{"name":"void"}}}},"onKeyUp":{"type":{"name":"func"},"required":false,"description":"__In desktop mode__, the callback fired on keyup.","tsType":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<BaseButtonOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<BaseButtonOwnProps>","elements":[{"name":"BaseButtonOwnProps"}]},"name":"event"}],"return":{"name":"void"}}}},"elementRef":{"type":{"name":"func"},"required":false,"description":"A function that returns a reference to root HTML element","tsType":{"name":"signature","type":"function","raw":"(el: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}}},"itemRef":{"type":{"name":"func"},"required":false,"description":"A function that returns a reference to the button/link HTML element","tsType":{"name":"signature","type":"function","raw":"(el: HTMLButtonElement | HTMLLinkElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLButtonElement | HTMLLinkElement | null","elements":[{"name":"HTMLButtonElement"},{"name":"HTMLLinkElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}}},"shouldCloseOnClick":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'always'","computed":false},{"value":"'never'","computed":false}]},"required":false,"description":"Should close the container menu component, if clicked on the option marked with this prop","tsType":{"name":"union","raw":"'auto' | 'always' | 'never'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'always'"},{"name":"literal","value":"'never'"}]},"defaultValue":{"value":"'auto'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"parent":"TopNavBar","id":"TopNavBar.Item","relativePath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/index.tsx","extension":".tsx","srcPath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/index.tsx","packageName":"@instructure/ui-top-nav-bar","requirePath":"@instructure/ui-top-nav-bar/lib/TopNavBar/TopNavBarItem/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/index.tsx').default","esPath":"@instructure/ui-top-nav-bar/es/TopNavBar/TopNavBarItem/index","themePath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarItem/theme.ts","title":"TopNavBar.Item"}