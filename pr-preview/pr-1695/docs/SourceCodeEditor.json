{"description":"\nA wrapper around the popular [CodeMirror](https://codemirror.net/) code editor component. CodeMirror provides a text input field with features like line gutters, syntax highlighting, and autocompletion.\n\n```javascript\n---\ntype: embed\n---\n<ToggleBlockquote\n  summary=\"Upgrade from CodeEditor!\"\n>\n  <ToggleBlockquote.Paragraph>\n    If you are currently using our <Link href=\"/#CodeEditor\">CodeEditor</Link> component, we suggest upgrading to SourceCodeEditor, because it has many more features and is way more accessible.\n  </ToggleBlockquote.Paragraph>\n  <ToggleBlockquote.Paragraph>\n    See the <Link href=\"/#CodeEditor/#migration-guide\">migration guide</Link> at the bottom of the CodeEditor docs page for more info.\n  </ToggleBlockquote.Paragraph>\n</ToggleBlockquote>\n```\n\n### Built-in features\n\nSourceCodeEditor has a lot of built-in features that makes editing code easier.\n\n##### Command keybinding\n\nThe editor has a lot of handy key bindings for commands like copying and deleting lines, moving lines up and down, selection and indentation, etc. See the keymaps here: [defaultKeymap](https://codemirror.net/docs/ref/#commands.defaultKeymap), [closeBracketsKeymap](https://codemirror.net/docs/ref/#autocomplete.closeBracketsKeymap), [historyKeymap](https://codemirror.net/docs/ref/#commands.historyKeymap), [foldKeymap](https://codemirror.net/docs/ref/#language.foldKeymap), [completionKeymap](https://codemirror.net/docs/ref/#autocomplete.completionKeymap), [lintKeymap](https://codemirror.net/docs/ref/#lint.lintKeymap).\n\n##### History\n\nThe history feature remembers the steps of the code editing and selections, and lets you undo and redo them.\n\n##### Cursor and selection\n\nInstead of using the browser's native selection and cursor, SourceCodeEditor uses its own system. This allows the editor to display secondary selection ranges, and tends to produce a type of selection more in line with that users expect in a text editor.\n\nIt also allows **multiple** cursors to be placed (`Cmd/Ctrl` + click), multiple ranges to be selected and edited at the same time.\n\n**Rectangular selections:** by default, it will react to left mouse drag with the `Option/Alt` key held down. When such a selection occurs, the text within the rectangle that was dragged over will be selected, as one selection range per line.\n\nThe editor highlights text that matches the current selection.\n\n##### Bracket matching and closing\n\nWhenever the cursor is next to a bracket, that bracket and the one it matches are highlighted. Or, when no matching bracket is found, another highlighting style is used to indicate this.\n\nWhen a closeable bracket is typed, its closing bracket is immediately inserted after the cursor.\n\n### Language support\n\nSetting the correct language adds **syntax highlighting** and other helpful features to the editor, like **code folding**, **auto-indentation**, **syntax-aware selection** and **autocompletion** features.\n\n**Note:** In case you need support for additional languages, please contact us on [GitHub](https://github.com/instructure/instructure-ui)!\n\n```js\n---\ntype: example\n---\n\nconst languages = {\n  json: `{\n  \"name\": \"@instructure/ui-source-code-editor\",\n  \"version\": \"8.24.2\",\n  \"description\": \"A UI component library made by Instructure Inc.\",\n  \"author\": \"Instructure, Inc. Engineering and Product Design\",\n  \"module\": \"./es/index.js\",\n  \"main\": \"./lib/index.js\",\n  \"types\": \"./types/index.d.ts\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/instructure/instructure-ui.git\"\n  },\n}`,\n  javascript: `const fruit: string = \"apple\"\n\nconst re = new RegExp('ab+c')\n\nfunction exampleMethod(props: Props) {\n  return props ? props.value : null\n}\n\n/**\n * This is an example\n * @param {Object} props\n */\nconst Example = () => {\n  return (\n    <View as=\"div\" padding={'large'}>\n      <Position\n        renderTarget={<GoodComponent />}\n        placement='end center'\n        offsetX='20px'\n      >\n        <span style={{ padding: '8px', background: 'white' }}>\n          Positioned content\n        </span>\n      </Position>\n    </View>\n  )\n}\n\nrender(<Example />)`,\n  html: `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Example app</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      <button onclick=\"myFunction()\">Click me</button>\n    </div>\n\n    <script src=\"script.js\"></script>\n  </body>\n</html>`,\n  css: `a {\n  text-decoration: none;\n\n  &:hover { text-decoration: underline; }\n}\n\na:link, a:visited, a:hover, a:active {\n  background-color: green;\n  color: white;\n  padding: 10px 25px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n}\n\n.centertext { text-align: center; }\n\nimg { opacity: 0.5; filter: alpha(opacity=50); }`,\n  markdown: `#### The quarterly results look great!\n\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n\n*Everything* is going according to **plan**.\n\n---\ntype: example\n---`,\n  shell: `#!/bin/bash\n\n# example of using arguments to a script\necho \"My first name is $1\"\necho \"My surname is $2\"\necho \"Total number of arguments is $#\"\n\n________________________________________\n\n$ chmod a+x name.sh\n$ ./name.sh Hans-Wolfgang Loidl\nMy first name is Hans-Wolfgang\nMy surname is Loidl\nTotal number of arguments is 2`,\n  yml: `---\n doe: \"a deer, a female deer\"\n ray: \"a drop of golden sun\"\n pi: 3.14159\n xmas: true\n french-hens: 3\n calling-birds:\n   - huey\n   - dewey\n   - louie\n   - fred\n xmas-fifth-day:\n   calling-birds: four\n   french-hens: 3\n   golden-rings: 5\n   partridges:\n     count: 1\n     location: \"a pear tree\"\n   turtle-doves: two`\n}\n\nconst languageMap = {\n  json: languages.json,\n  js: languages.javascript,\n  jsx: languages.javascript,\n  javascript: languages.javascript,\n  html: languages.html,\n  css: languages.css,\n  markdown: languages.markdown,\n  sh: languages.shell,\n  shell: languages.shell,\n  bash: languages.shell,\n  yml: languages.yml,\n  yaml: languages.yml,\n}\n\nclass LanguageExamples extends React.Component {\n  state = {\n    currentLanguage: 'javascript',\n    currentValue: languageMap.javascript,\n  }\n\n  render() {\n    const languageKeys = Object.keys(languageMap)\n\n    return (\n      <Flex alignItems='start'>\n        <Flex.Item>\n          <RadioInputGroup\n            name=\"languageOptions\"\n            value={this.state.currentLanguage}\n            description=\"Language\"\n            onChange={(e, currentLanguage) => {\n              this.setState({\n                currentLanguage,\n                currentValue: languageMap[currentLanguage]\n              })\n            }}\n          >\n            {languageKeys.map(language => (\n              <RadioInput\n                key={language}\n                label={language}\n                value={language}\n              />))}\n          </RadioInputGroup>\n        </Flex.Item>\n\n        <Flex.Item padding=\"0 0 0 large\" shouldGrow shouldShrink>\n          <SourceCodeEditor\n            label={`${this.state.currentLanguage} code editor`}\n            language={this.state.currentLanguage}\n            value={this.state.currentValue}\n            onChange={(value) => {\n              this.setState({\n                currentValue: value\n              })\n            }}\n            lineNumbers\n            lineWrapping\n            highlightActiveLine\n            highlightActiveLineGutter\n          />\n        </Flex.Item>\n      </Flex>\n    )\n  }\n}\n\nrender(<LanguageExamples />)\n\n```\n\n### Controlled mode\n\nSourceCodeEditor works best as an uncontrolled component (with the `defaultValue` prop), and that is how we recommend it to be used. As an uncontrolled component, the underlying CodeMirror component can take care of all interactions.\n\nWe've implemented the \"controlled\" usage, but please let us know if you run into any performance issues or bugs.\n\n```js\n---\ntype: example\n---\nclass ControlledExample extends React.Component {\n  state = {\n    value: `const fruit: string = \"apple\"\n\nfunction exampleMethod(props: Props) {\n  return props ? props.value : null\n}`\n  }\n\n  textAreaRef = null\n\n  render () {\n    return (\n      <View display=\"block\" background=\"primary\">\n        <Flex alignItems='start'>\n          <Flex.Item shouldGrow shouldShrink padding=\"0 large 0 0\">\n            <FormField\n              label='Controlled code editor'\n              id='controlledCodeEditor'\n              messages={[{\n                type: 'hint',\n                text: 'Type in the editor or set the value from the textarea.'\n              }]}\n            >\n              <SourceCodeEditor\n                label='controlled code editor'\n                value={this.state.value}\n                onChange={(value) => {\n                  this.setState({ value })\n                }}\n                highlightActiveLine\n                highlightActiveLineGutter\n                lineWrapping\n                lineNumbers\n                foldGutter\n                spellcheck\n              />\n            </FormField>\n          </Flex.Item>\n          <Flex.Item size='50%' padding=\"0 0 0 large\">\n            <FormFieldGroup\n              description='Set value from the outside'\n              name='setValue'\n            >\n              <TextArea\n                label={<ScreenReaderContent>Change value</ScreenReaderContent>}\n                textareaRef={(e) => { this.textAreaRef = e }}\n                defaultValue={this.state.value}\n              />\n              <Button color='primary' onClick={() => {\n                this.setState({ value: this.textAreaRef.value })\n              }}>\n                Update value\n              </Button>\n            </FormFieldGroup>\n          </Flex.Item>\n        </Flex>\n      </View>\n    )\n  }\n}\n\nrender(<ControlledExample />)\n```\n\n### Editable and readOnly\n\nThe editability of the content can be set with the combination of the `editable` and `readOnly` props.\n\nThe `readOnly` prop works like a \"preventDefault\" and disables any interaction by the user or API calls (e.g. copy-paste).\nIf the `editable` prop is set to `false`, the editor is also not focusable, and the `contenteditable=\"false\"` is set on the content.\n\n```js\n---\ntype: example\n---\nclass EditableExample extends React.Component {\n  state = {\n    editable: true,\n    readOnly: false\n  }\n\n  render () {\n    return (\n      <View display=\"block\" padding=\"medium medium small\" background=\"primary\">\n        <View display=\"block\" margin=\"small none large\">\n          <FormFieldGroup description=\"Settings\" rowSpacing=\"small\">\n            {['editable', 'readOnly'].map((prop) => (\n              <Checkbox\n                label={prop}\n                key={prop}\n                defaultChecked={this.state[prop]}\n                onChange={() => {\n                  this.setState({ [prop]: !this.state[prop] })\n                }}\n              />\n            ))}\n          </FormFieldGroup>\n        </View>\n\n        <SourceCodeEditor\n          label='editable code editor'\n          language=\"jsx\"\n          editable={this.state.editable}\n          readOnly={this.state.readOnly}\n          defaultValue={`function example() {\n  console.log('example')\n}`}\n        />\n      </View>\n    )\n  }\n}\n\nrender(<EditableExample />)\n```\n\n### Gutter settings\n\nThe `lineNumbers` prop displays the line numbers in the side gutter, and the `foldGutter` prop displays the toggleable fold icon next to foldable code blocks.\n\nIf any of these two props are active, the gutter is displayed, and the `highlightActiveLineGutter` highlights the active line in the gutter. (The `highlightActiveLine` prop highlights the line itself.)\n\n```js\n---\ntype: example\n---\nclass GutterExample extends React.Component {\n  state = {\n    lineNumbers: true,\n    foldGutter: true,\n    highlightActiveLineGutter: true,\n    highlightActiveLine: true,\n  }\n\n  render () {\n    return (\n      <View display=\"block\" padding=\"medium medium small\" background=\"primary\">\n        <View display=\"block\" margin=\"small none large\">\n          <FormFieldGroup description=\"Settings\" rowSpacing=\"small\">\n            {['lineNumbers', 'foldGutter', 'highlightActiveLineGutter', 'highlightActiveLine'].map((prop) => (\n              <Checkbox\n                label={prop}\n                key={prop}\n                defaultChecked={this.state[prop]}\n                onChange={() => {\n                  this.setState({ [prop]: !this.state[prop] })\n                }}\n              />\n            ))}\n          </FormFieldGroup>\n        </View>\n\n        <SourceCodeEditor\n          label='gutter example'\n          language=\"jsx\"\n          lineNumbers={this.state.lineNumbers}\n          foldGutter={this.state.foldGutter}\n          highlightActiveLineGutter={this.state.highlightActiveLineGutter}\n          highlightActiveLine={this.state.highlightActiveLine}\n          defaultValue={`const fruit: string = \"apple\"\n\nfunction exampleMethod(props: Props) {\n  return props ? props.value : null\n}\n\n/**\n * This is an example\n * @param {Object} props\n */\nconst Example = () => {\n  return (\n    <View as=\"div\" padding={'large'}>\n      <Position\n        renderTarget={<GoodComponent />}\n        placement='end center'\n        offsetX='20px'\n      >\n        <span style={{ padding: '8px', background: 'white' }}>\n          Positioned content\n        </span>\n      </Position>\n    </View>\n  )\n}\n\nrender(<Example />)`}\n        />\n      </View>\n    )\n  }\n}\n\nrender(<GutterExample />)\n```\n\n### Indentation\n\n##### auto-indent\n\nThe editor automatically indents the lines on input. The `indentOnLoad` prop indents the code on the initial load and when the `value` prop is updated.\n\n##### indent with tab\n\nWhen the `indentWithTab` feature is turned on, Tab and Shift-Tab will indent the code.\nBy default, it is turned off, and tabbing will focus the next element in the tab order.\n\n**Accessibility note**: Even if `indentWithTab` is on, pressing Escape before tabbing will not handle indentation and will handle focus instead. When using this feature, it is recommended to add info about this behaviour in your documentation.\n\n##### indent unit\n\nYou can also override the unit by which indentation happens (defaults to 2 spaces).\nThe `indentUnitCount` prop should be a string consisting either entirely of spaces or entirely of tabs.\n\n##### manual re-indent\n\nAnother useful feature is the `indentAll` public method on the `SourceCodeEditor` component that can be called anytime to trigger a re-indent on the content.\n\n```js\n---\ntype: example\n---\nclass IndentExample extends React.Component {\n  state = {\n    indentWithTab: true,\n    indentUnitCount: '2',\n  }\n\n  editor = null\n\n  get indentUnit() {\n    return Array(parseInt(this.state.indentUnitCount)).fill(' ').join('')\n  }\n\n  reIndent () {\n    this.editor.indentAll()\n  }\n\n  indentCurrentSelection () {\n    this.editor.indentCurrentSelection()\n  }\n\n  render () {\n    return (\n      <View display=\"block\" padding=\"medium medium small\" background=\"primary\">\n        <View display=\"block\" margin=\"small none large\">\n          <FormFieldGroup description=\"Settings\">\n            <Checkbox\n              label=\"indentWithTab\"\n              defaultChecked={this.state.indentWithTab}\n              onChange={() => {\n                this.setState({ indentWithTab: !this.state.indentWithTab })\n              }}\n            />\n            <RadioInputGroup\n              name=\"indentUnitCount\"\n              value={this.state.indentUnitCount}\n              description=\"indent space count\"\n              onChange={(e, indentUnitCount) => {\n                this.setState({indentUnitCount})\n                this.reIndent()\n              }}\n            >\n              {['2', '4', '8'].map(count => <RadioInput key={count} label={count} value={count} />)}\n            </RadioInputGroup>\n            <Button onClick={() => {\n              this.reIndent()\n            }}>\n              Re-indent code\n            </Button>\n            <Button onClick={() => {\n              this.indentCurrentSelection()\n            }}>\n              Indent current selection\n            </Button>\n          </FormFieldGroup>\n        </View>\n\n        <SourceCodeEditor\n          label='indent example'\n          ref={(component) => { this.editor = component }}\n          language=\"jsx\"\n          indentWithTab={this.state.indentWithTab}\n          indentUnit={this.indentUnit}\n          defaultValue={`const fruit: string = \"apple\"\n\nfunction exampleMethod(props: Props) {\n  return props ? props.value : null\n}\n\n/**\n * This is an example\n * @param {Object} props\n */\nconst Example = () => {\n  return (\n    <View as=\"div\" padding={'large'}>\n      <Position\n        renderTarget={<GoodComponent />}\n        placement='end center'\n        offsetX='20px'\n      >\n        <span style={{ padding: '8px', background: 'white' }}>\n          Positioned content\n        </span>\n      </Position>\n    </View>\n  )\n}\n\nrender(<Example />)`}\n        />\n      </View>\n    )\n  }\n}\n\nrender(<IndentExample />)\n```\n\n### Direction\n\nSourceCodeEditor is a bidirectional component. It will inherit the text-direction from the context, and can be set directly on the component with the `direction` prop. The `rtl` mode will flip the overall layout and selects base paragraph direction to RTL.\n\nThe `rtlMoveVisually` prop controls the cursor movement in RTL mode, whether it should be **visual** (pressing the left arrow moves the cursor left) or **logical** (pressing the left arrow moves to the next lower index in the string, which is visually right in RTL text).\n\n```js\n---\ntype: example\n---\nclass DirectionExample extends React.Component {\n  state = {\n    contextDir: 'unset',\n    editorDir: 'unset',\n    rtlMoveVisually: true,\n  }\n\n  render () {\n    return (\n      <InstUISettingsProvider dir={this.state.contextDir !== 'unset'\n        ? this.state.contextDir\n        : undefined\n      }>\n        <View\n          display=\"block\"\n          padding=\"medium medium small\"\n          background=\"primary\"\n        >\n          <View\n            display=\"block\"\n            margin=\"small none large\"\n          >\n            <FormFieldGroup description=\"Settings\" layout='columns' vAlign='top'>\n              <RadioInputGroup\n                name=\"contextDir\"\n                value={this.state.contextDir}\n                description=\"context direction\"\n                onChange={(e, contextDir) => {\n                  this.setState({contextDir})\n                }}\n              >\n                {['unset', 'ltr', 'rtl'].map(dir => <RadioInput key={dir} label={dir} value={dir} />)}\n              </RadioInputGroup>\n              <RadioInputGroup\n                name=\"editorDir\"\n                value={this.state.editorDir}\n                description=\"editor direction\"\n                onChange={(e, editorDir) => {\n                  this.setState({editorDir})\n                }}\n              >\n                {['unset', 'ltr', 'rtl'].map(dir => <RadioInput key={dir} label={dir} value={dir} />)}\n              </RadioInputGroup>\n              <Checkbox\n                label=\"rtlMoveVisually\"\n                defaultChecked={this.state.rtlMoveVisually}\n                onChange={() => {\n                  this.setState({ rtlMoveVisually: !this.state.rtlMoveVisually })\n                }}\n              />\n            </FormFieldGroup>\n          </View>\n\n          <SourceCodeEditor\n            label='editable code editor'\n            language=\"jsx\"\n            direction={this.state.editorDir !== 'unset'\n              ? this.state.editorDir\n              : undefined\n            }\n            rtlMoveVisually={this.state.rtlMoveVisually}\n            defaultValue={`function directionExample(dir?: 'ltr' | 'rtl') {\n  console.log(dir)\n}`}\n          />\n        </View>\n      </InstUISettingsProvider>\n    )\n  }\n}\n\nrender(<DirectionExample />)\n```\n\n### Focus management\n\nBy default, SourceCodeEditor is tabbable/focusable, and once it is in focus, tabbing will move the focus on the page. These behaviours can be changed with the [editable](/#SourceCodeEditor/#editable-and-readonly) and [indentWithTab](/#SourceCodeEditor/#indentation-indent-with-tab) props.\n\nThe `autofocus` prop will automatically focus the editor on the initial render.\n\nYou can also manually focus the editor with its public `focus` method (the `hasFocus` getter is also available).\n\n```js\n---\ntype: example\n---\nclass FocusExample extends React.Component {\n  state = {\n    indentWithTab: true,\n    indentUnitCount: '2',\n  }\n\n  editor = null\n\n  render () {\n    return (\n      <View display=\"block\" padding=\"medium medium small\" background=\"primary\">\n        <View display=\"block\" margin=\"small none large\">\n          <Button onClick={() => {\n            console.log('manual focus')\n            this.editor.focus()\n          }}>\n            Focus editor\n          </Button>\n        </View>\n\n        <SourceCodeEditor\n          label='focus example'\n          ref={(component) => { this.editor = component }}\n          language=\"jsx\"\n          onFocus={() => {\n            console.log('onFocus')\n            console.log({ hasFocus: this.editor.hasFocus })\n          }}\n          onBlur={() => {\n            console.log('onBlur')\n            console.log({ hasFocus: this.editor.hasFocus })\n          }}\n          defaultValue={`function exampleMethod(props: Props) {\n  return props ? props.value : null\n}`}\n        />\n      </View>\n    )\n  }\n}\n\nrender(<FocusExample />)\n```\n\n### Attachment\n\nThe `attachment` prop removes the top/bottom border-radius and margin of the editor, so it can be attached to the top or bottom of another element.\n\n```js\n---\ntype: example\n---\nclass AttachmentExample extends React.Component {\n  state = {\n    attachment: 'none'\n  }\n\n  render () {\n    const viewProps = {\n      as: 'div',\n      background: 'primary-inverse',\n      padding: 'small'\n    }\n\n    return (\n      <View display=\"block\" padding=\"medium medium small\" background=\"primary\">\n        <View display=\"block\" margin=\"small none large\">\n          <RadioInputGroup\n            name=\"attachmentExample\"\n            value={this.state.attachment}\n            description=\"attachment\"\n            onChange={(e, attachment) => {\n              this.setState({attachment})\n            }}\n          >\n            {['none', 'top', 'bottom'].map(attachment => <RadioInput key={attachment} label={attachment} value={attachment} />)}\n          </RadioInputGroup>\n        </View>\n\n        {this.state.attachment === 'bottom' && (\n          <View {...viewProps}>\n            CodeEditor is attached to the bottom of this element\n          </View>\n        )}\n        <SourceCodeEditor\n          label='attachment example'\n          language=\"jsx\"\n          attachment={this.state.attachment === 'none' ? undefined : this.state.attachment}\n          defaultValue={`const fruit: string = \"apple\"\n\nfunction exampleMethod(props: Props) {\n  return props ? props.value : null\n}`}\n        />\n        {this.state.attachment === 'top' && (\n          <View {...viewProps}>\n            CodeEditor is attached to the top of this element\n          </View>\n        )}\n      </View>\n    )\n  }\n}\n\nrender(<AttachmentExample />)\n```\n\n### Search\n\nTo enable the search panel use the `searchConfig` prop.\n\nYou can open the search panel in the code editor by pressing `cmd/ctrl+f` when the editor is in focus (otherwise the browser's search will open). The reason you would use this instead of the browser native search is because it will miss results that are far out of view in the text rendered by the editor. This is the limitation of the underlying CodeMirror component.\n\nHitting `Enter` jumps to the next result and `Shift+Enter` to the previous. Alternatively you can use the up and down buttons to the right of the input field.\n\nPlacement: the search panel will open at the bottom of the editor. This cannot be changed unfortunately due to a limitation in CodeMirror.\n\n```js\n---\ntype: example\n---\n<SourceCodeEditor\n  label=\"lorem\"\n  language=\"markdown\"\n  defaultValue={`Lorem ipsum dolor sit amet, officia excepteur ex fugiat reprehenderit\nenim labore culpa sint ad nisi Lorem pariatur mollit ex esse exercitation amet.\nNisi anim cupidatat excepteur officia.\n`}\n  searchConfig={{\n    placeholder: 'Find in code...',\n    nextResultLabel: 'Next result',\n    prevResultLabel: 'Previouse result',\n  }}\n/>\n```\n","displayName":"SourceCodeEditor","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"The label text that screen readers will read when this component gets\nfocus.","tsType":{"name":"string"}},"language":{"type":{"name":"enum","value":[{"value":"'sh'","computed":false},{"value":"'js'","computed":false},{"value":"'json'","computed":false},{"value":"'javascript'","computed":false},{"value":"'jsx'","computed":false},{"value":"'shell'","computed":false},{"value":"'css'","computed":false},{"value":"'html'","computed":false},{"value":"'markdown'","computed":false},{"value":"'yaml'","computed":false},{"value":"'yml'","computed":false},{"value":"'bash'","computed":false}]},"required":false,"description":"The language to use (adds autocomplete and syntax highlighting).","tsType":{"name":"union","raw":"| 'sh'\n| 'js'\n| 'json'\n| 'javascript'\n| 'jsx'\n| 'shell'\n| 'css'\n| 'html'\n| 'markdown'\n| 'yaml'\n| 'yml'\n| 'bash'","elements":[{"name":"literal","value":"'sh'"},{"name":"literal","value":"'js'"},{"name":"literal","value":"'json'"},{"name":"literal","value":"'javascript'"},{"name":"literal","value":"'jsx'"},{"name":"literal","value":"'shell'"},{"name":"literal","value":"'css'"},{"name":"literal","value":"'html'"},{"name":"literal","value":"'markdown'"},{"name":"literal","value":"'yaml'"},{"name":"literal","value":"'yml'"},{"name":"literal","value":"'bash'"}]},"defaultValue":{"value":"'jsx'","computed":false}},"readOnly":{"type":{"name":"bool"},"required":false,"description":"This disables editing of the editor content by the user and API calls.\n\n__Note:__ The editor is still focusable in readOnly mode. Read more at the [codemirror documentation](https://codemirror.net/6/docs/ref/#state.EditorState%5EreadOnly).","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"editable":{"type":{"name":"bool"},"required":false,"description":"Controls whether the editor content DOM is editable.\n\n__Note:__ When set to false, the editor is not focusable.\n(This doesn't affect API calls that change the editor content, e.g.: copy-paste,\neven when those are bound to keys or buttons.) Read more at the [codemirror documentation](https://codemirror.net/6/docs/ref/#view.EditorView%5Eeditable).","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"lineNumbers":{"type":{"name":"bool"},"required":false,"description":"Whether to display the line numbers in the gutter","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"foldGutter":{"type":{"name":"bool"},"required":false,"description":"Whether to show a fold status indicator before foldable lines (which can be clicked to fold or unfold the line)","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"highlightActiveLineGutter":{"type":{"name":"bool"},"required":false,"description":"Whether to highlight gutter elements on the active line (visible only when a gutter is visible)","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"highlightActiveLine":{"type":{"name":"bool"},"required":false,"description":"Highlights the lines that have a cursor on them","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"lineWrapping":{"type":{"name":"bool"},"required":false,"description":"Whether it should scroll or wrap for long lines. Defaults to false (scroll)","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"autofocus":{"type":{"name":"bool"},"required":false,"description":"Whether the editor should focus itself on initialization","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"spellcheck":{"type":{"name":"bool"},"required":false,"description":"Whether spellcheck will be enabled on the input","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"direction":{"type":{"name":"enum","value":[{"value":"'ltr'","computed":false},{"value":"'rtl'","computed":false}]},"required":false,"description":"Flips overall layout and selects base paragraph direction to be \"LTR\" or \"RTL\".","tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]}},"rtlMoveVisually":{"type":{"name":"bool"},"required":false,"description":"Whether horizontal cursor movement through \"RTL\" text is visual\n(pressing the left arrow moves the cursor left) or logical\n(pressing the left arrow moves to the next lower index in the string,\nwhich is visually right in \"RTL\" text)","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"indentOnLoad":{"type":{"name":"bool"},"required":false,"description":"Whether the editor should auto-indent the code on this initial load\nand when the `value` is changed","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"indentWithTab":{"type":{"name":"bool"},"required":false,"description":"When this feature is on, Tab and Shift-Tab will indent the code. By default, it is turned off, and tabbing will focus the next element in the tab order.\n\n__Note__: Even if this feature is on, pressing Escape before tabbing will not handle indentation and will handle focus instead.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"indentUnit":{"type":{"name":"string"},"required":false,"description":"Overrides the unit by which indentation happens (defaults to 2 spaces).\nShould be a string consisting either entirely of spaces or entirely of tabs.","tsType":{"name":"string"}},"defaultValue":{"type":{"name":"string"},"required":false,"description":"The default value of the editor (in uncontrolled mode)","tsType":{"name":"string"},"defaultValue":{"value":"''","computed":false}},"value":{"type":{"name":"custom","raw":"controllable(PropTypes.string, 'onChange', 'defaultValue')"},"required":false,"description":"The selected value for the controlled version\n(needs an onChange handler to work)","tsType":{"name":"string"}},"onChange":{"type":{"name":"func"},"required":false,"description":"Called when the value of the component changes.","tsType":{"name":"signature","type":"function","raw":"(value: string) => void","signature":{"arguments":[{"type":{"name":"string"},"name":"value"}],"return":{"name":"void"}}}},"onFocus":{"type":{"name":"func"},"required":false,"description":"Called when the editor receives focus","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Called when the editor loses focus","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"attachment":{"type":{"name":"enum","value":[{"value":"'bottom'","computed":false},{"value":"'top'","computed":false}]},"required":false,"description":"Sets minor visual styles (border radius & top/bottom margin)","tsType":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}]}},"height":{"type":{"name":"string"},"required":false,"description":"The height of the editor.","tsType":{"name":"string"},"defaultValue":{"value":"'auto'","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"The width of the editor.","tsType":{"name":"string"}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"containerRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the html element of the editor's container","tsType":{"name":"signature","type":"function","raw":"(element: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"searchConfig":{"type":{"name":"object"},"required":false,"description":"enable search panel in editor when pressing ctrl/cmd+f","tsType":{"name":"signature","type":"object","raw":"{\n  placeholder: string\n  nextResultLabel: string\n  prevResultLabel: string\n}","signature":{"properties":[{"key":"placeholder","value":{"name":"string","required":true}},{"key":"nextResultLabel","value":{"name":"string","required":true}},{"key":"prevResultLabel","value":{"name":"string","required":true}}]}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-source-code-editor/src/SourceCodeEditor/index.tsx","extension":".tsx","srcPath":"packages/ui-source-code-editor/src/SourceCodeEditor/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-source-code-editor/src/SourceCodeEditor/index.tsx","packageName":"@instructure/ui-source-code-editor","requirePath":"@instructure/ui-source-code-editor/lib/SourceCodeEditor/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-source-code-editor/src/SourceCodeEditor/index.tsx').default","esPath":"@instructure/ui-source-code-editor/es/SourceCodeEditor/index","themePath":"packages/ui-source-code-editor/src/SourceCodeEditor/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-source-code-editor/src/SourceCodeEditor/theme.ts","id":"SourceCodeEditor","title":"SourceCodeEditor"}