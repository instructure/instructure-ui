{"description":"\n## Accessing the DOM\n\nAccessing the DOM directly in React is discouraged, because it pierces the DOM abstraction. Still there are some cases when InstUI is required to do so (for example for focus management or positioning). This happens with the [findDOMNode](#findDOMNode) utility function.\n\nFor custom React components this method first tries to access a `ref` property. If this does not exist, then:\n\n- For React 19 or newer it will return `undefined` because `ReactDOM.findDOMNode()` was removed. This means that **custom components without the `ref` prop will not work in React 19 or newer!**\n- For React 18 or older it will call `ReactDOM.findDOMNode()`\n\nPlaces where the `ref` prop is needed for custom components (you can use any InstUI component, they have this prop already:\n- [Tooltip](#Tooltip)'s children (if there is no `as` prop)\n- [Popover](#Popover)'s `renderTrigger` prop\n- [Menu](#Menu)'s `trigger` prop\n- [AiInformation](#AiInformation)'s `trigger` prop\n- [Position](#Position)'s child and `target` prop\n- [Transition](#Transition)'s child\n- [Dialog](#Dialog)'s `contentElement`prop\n- ... and possibly others, please check your console for errors!\n\n\nTo fix the issue add a `ref` property to the component that returns the underlying DOM node:\n\n```javascript\n---\ntype: code\n---\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef()\n  }\n  render() {\n    return <div ref={this.ref}>Content</div>\n  }\n}\n```\n\n```javascript\n---\ntype: code\n---\nconst MyComponent = React.forwardRef((props, ref) => {\n  return <div ref={ref}>Content</div>\n})\n```\n\nGood Usage Example with `ref`:\n\n- ```js\n  class GoodComponent extends React.Component {\n    constructor(props) {\n      super(props)\n      this.ref = React.createRef()\n    }\n    render() {\n      return <span ref={this.ref}>Good Position target component</span>\n    }\n  }\n  const Example = () => {\n    return (\n      <View as=\"div\" padding={'large'}>\n        <Position\n          renderTarget={<GoodComponent />}\n          placement=\"end center\"\n          offsetX=\"20px\"\n        >\n          <span style={{ padding: '8px', background: 'white' }}>\n            Positioned content\n          </span>\n        </Position>\n      </View>\n    )\n  }\n  render(<Example />)\n  ```\n\n- ```js\n  const GoodComponent = React.forwardRef((props, ref) => {\n    return <span ref={ref}>Good Position target component</span>\n  })\n\n  const Example = () => {\n    return (\n      <View as=\"div\" padding={'large'}>\n        <Position\n          renderTarget={<GoodComponent />}\n          placement=\"end center\"\n          offsetX=\"20px\"\n        >\n          <span style={{ padding: '8px', background: 'white' }}>\n            Positioned content\n          </span>\n        </Position>\n      </View>\n    )\n  }\n  render(<Example />)\n  ```\n\nBad Usage Example without `ref`, that will result in InstUI calling `ReactDOM.findDOMNode()` and throw warnings. Also, this code will **NOT** work with React 19+:\n\n- ```js\n  class BadComponent extends React.Component {\n    constructor(props) {\n      super(props)\n    }\n    render() {\n      return <span>Bad Position target component</span>\n    }\n  }\n\n  const Example = () => {\n    return (\n      <View as=\"div\" padding={'large'}>\n        <Position\n          renderTarget={<BadComponent />}\n          placement=\"end center\"\n          offsetX=\"20px\"\n        >\n          <span style={{ padding: '8px', background: 'white' }}>\n            Positioned content\n          </span>\n        </Position>\n      </View>\n    )\n  }\n  render(<Example />)\n  ```\n\n- ```js\n  const BadComponent = React.forwardRef((props, ref) => {\n    return <span>Bad Position target component</span>\n  })\n\n  const Example = () => {\n    return (\n      <View as=\"div\" padding={'large'}>\n        <Position\n          renderTarget={<BadComponent />}\n          placement=\"end center\"\n          offsetX=\"20px\"\n        >\n          <span style={{ padding: '8px', background: 'white' }}>\n            Positioned content\n          </span>\n        </Position>\n      </View>\n    )\n  }\n  render(<Example />)\n  ```\n","title":"Accessing the DOM","category":"Guides","order":5,"relativePath":"docs/guides/accessing-the-dom.md","extension":".md","srcPath":"docs/guides/accessing-the-dom.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/guides/accessing-the-dom.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/guides/accessing-the-dom","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/guides/accessing-the-dom.md').default","esPath":"@instructure/docs/guides/accessing-the-dom","themePath":"docs/guides/accessing-the-dom.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/guides/accessing-the-dom.md","id":"accessing-the-dom"}