{"description":"\n`TruncateList` is a special kind of list component that can be configured to adapt to small screen widths by truncating its items that donâ€™t fit within the available space. It is a utility component that can be used on its own, but its intended use is to handle the truncation logic of menu items in navigation bars.\n\n### Visible items\n\nThe `onUpdate` function prop returns the number of visible items, and the `visibleItemsCount` prop controls how many items are currently visible.\n\nIt is a controlled component, so without and `onUpdate` prop it won't be responsive to changes. When `visibleItemsCount` is not set, the list is not truncated.\n\nWhen the list is truncated, it is recommended to pass an element that lists the rest of the hidden items. The `renderHiddenItemMenu` prop accepts a function with the `hiddenChildren` as its parameter, and it should return a dropdown menu (e.g.: [Drilldown](/#Drilldown), [Menu](/#Menu)) or link, etc.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = { visibleItemsCount: undefined }\n\n  render() {\n    return (\n      <View as=\"div\" background=\"primary\" padding=\"x-small\">\n        <TruncateList\n          itemSpacing='0.25rem'\n          visibleItemsCount={this.state.visibleItemsCount}\n          onUpdate={({ visibleItemsCount }) => {\n            this.setState({ visibleItemsCount })\n          }}\n          renderHiddenItemMenu={(hiddenChildren) => {\n            return (\n              <Drilldown\n                rootPageId=\"root\"\n                trigger={(\n                  <Button margin=\"0 0 0 small\">\n                    {hiddenChildren.length} More\n                  </Button>\n                )}\n                width=\"15rem\"\n                maxHeight=\"10rem\"\n                placement='bottom'\n              >\n                <Drilldown.Page id=\"root\">\n                  {hiddenChildren.map((child, idx) => {\n                    return (\n                      <Drilldown.Option\n                        key={`option-${idx}`}\n                        id={`option-${idx}`}\n                      >\n                        {child}\n                      </Drilldown.Option>\n                    )\n                  })}\n                </Drilldown.Page>\n              </Drilldown>\n            )\n          }}\n        >\n          {Array.from(Array(16)).map((item, idx) => {\n            return (\n              <View\n                key={idx}\n                padding=\"x-small\"\n              >\n                Item {idx + 1}\n              </View>\n            )\n          })}\n        </TruncateList>\n      </View>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Layout settings\n\nThe `itemSpacing` prop adds spacing between the items. The width of the list item containing the menu trigger can be set to a fixed value with the `fixMenuTriggerWidth` prop.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    visibleItemsCount: undefined,\n    spacing: '0.5rem',\n    menuTriggerWidth: 'none'\n  }\n\n  render() {\n    return (\n      <View as=\"div\" padding=\"medium\">\n        <View display=\"block\" margin=\"small none large\">\n          <FormFieldGroup\n            description=\"Settings\"\n            rowSpacing=\"small\"\n            layout='columns'\n          >\n            <RadioInputGroup\n              name=\"spacing\"\n              description=\"Spacing\"\n              value={this.state.spacing}\n              onChange={(event, value) => {\n                this.setState({ spacing: value })\n              }}>\n                {[\n                  '0',\n                  '0.5rem',\n                  '1em',\n                  '48px'\n                ].map((spacingValue) => (\n                  <RadioInput\n                    key={spacingValue}\n                    label={spacingValue}\n                    value={spacingValue}\n                  />\n                ))}\n            </RadioInputGroup>\n\n            <RadioInputGroup\n              name=\"menuTriggerWidth\"\n              description=\"Fix menu trigger width\"\n              value={this.state.menuTriggerWidth}\n              onChange={(event, value) => {\n                this.setState({ menuTriggerWidth: value })\n              }}>\n                {[\n                  'none',\n                  '10rem',\n                  '8em',\n                  '240px'\n                ].map((menuTriggerWidthValue) => (\n                  <RadioInput\n                    key={menuTriggerWidthValue}\n                    label={menuTriggerWidthValue}\n                    value={menuTriggerWidthValue}\n                  />\n                ))}\n            </RadioInputGroup>\n          </FormFieldGroup>\n        </View>\n\n        <View as=\"div\" background=\"primary\" padding=\"x-small\">\n          <TruncateList\n            itemSpacing={this.state.spacing}\n            fixMenuTriggerWidth={this.state.menuTriggerWidth === 'none'\n              ? undefined\n              : this.state.menuTriggerWidth\n            }\n            visibleItemsCount={this.state.visibleItemsCount}\n            onUpdate={({ visibleItemsCount }) => {\n              this.setState({ visibleItemsCount })\n            }}\n            renderHiddenItemMenu={(hiddenChildren) => {\n              return (\n                <Drilldown\n                  rootPageId=\"root\"\n                  trigger={(\n                    <Button display=\"block\">\n                      {hiddenChildren.length} More\n                    </Button>\n                  )}\n                  positionContainerDisplay=\"block\"\n                  width=\"15rem\"\n                  maxHeight=\"10rem\"\n                  placement='bottom'\n                >\n                  <Drilldown.Page id=\"root\">\n                    {hiddenChildren.map((child, idx) => {\n                      return (\n                        <Drilldown.Option\n                          key={`option-${idx}`}\n                          id={`option-${idx}`}\n                        >\n                          {child}\n                        </Drilldown.Option>\n                      )\n                    })}\n                  </Drilldown.Page>\n                </Drilldown>\n              )\n            }}\n          >\n            {Array.from(Array(16)).map((item, idx) => {\n              return <div key={idx}>Item {idx + 1}</div>\n            })}\n          </TruncateList>\n        </View>\n      </View>\n    )\n  }\n}\n\nrender(<Example />)\n```\n","displayName":"TruncateList","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]}}],"returns":null},{"name":"childrenArray","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"visibleChildren","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"hiddenChildren","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"calcMenuTriggerWidth","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"measureItems","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleResize","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"List of items in the truncated list"},"visibleItemsCount":{"required":false,"tsType":{"name":"number"},"description":"Sets the number of navigation items that are visible.\nIf not set, the list is not truncated."},"renderHiddenItemMenu":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  hiddenChildren: Exclude<React.ReactNode, boolean | null | undefined>[]\n) => React.ReactElement","signature":{"arguments":[{"type":{"name":"Array","elements":[{"name":"Exclude","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"union","raw":"boolean | null | undefined","elements":[{"name":"boolean"},{"name":"null"},{"name":"undefined"}]}],"raw":"Exclude<React.ReactNode, boolean | null | undefined>"}],"raw":"Exclude<React.ReactNode, boolean | null | undefined>[]"},"name":"hiddenChildren"}],"return":{"name":"ReactReactElement","raw":"React.ReactElement"}}},"description":"When there are list items hidden, an optional element\n(dropdown menu, link, etc.) can be provided to display them\n(renders at the end of the list)."},"onUpdate":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(visibleItemsCount: { visibleItemsCount: number }) => void","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{ visibleItemsCount: number }","signature":{"properties":[{"key":"visibleItemsCount","value":{"name":"number","required":true}}]}},"name":"visibleItemsCount"}],"return":{"name":"void"}}},"description":"Called whenever the navigation items are updated or the size of\nthe navigation changes. Passes in the `visibleItemsCount` as\na parameter."},"itemSpacing":{"required":false,"tsType":{"name":"string"},"description":"The spacing between list items (in 'rem', 'em' or 'px')","defaultValue":{"value":"'0'","computed":false}},"fixMenuTriggerWidth":{"required":false,"tsType":{"name":"string"},"description":"Fix width of the Menu trigger (in 'rem', 'em' or 'px')"},"debounce":{"required":false,"tsType":{"name":"number"},"description":"The rate (in ms) the component responds to container resizing or\nan update to one of its child items","defaultValue":{"value":"300","computed":false}},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: HTMLUListElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a reference to the underlying ul element"},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components/utilities","relativePath":"packages/ui-truncate-list/src/TruncateList/index.tsx","extension":".tsx","srcPath":"packages/ui-truncate-list/src/TruncateList/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-truncate-list/src/TruncateList/index.tsx","packageName":"@instructure/ui-truncate-list","requirePath":"@instructure/ui-truncate-list/lib/TruncateList/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-truncate-list/src/TruncateList/index.tsx').default","esPath":"@instructure/ui-truncate-list/es/TruncateList/index","id":"TruncateList","title":"TruncateList"}