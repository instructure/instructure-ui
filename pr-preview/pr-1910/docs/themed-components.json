{"description":"\n## Making InstUI-like components with theming\n\nInstUI uses [Emotion](https://emotion.sh/docs/introduction) under the hood to theme and style its components.\nIf you want to read about the design behind the system and how to build `class-based` components with InstUI, please read [this](https://instructure.design/#emotion).\n\nThis page will show you how to build `functional` react components with InstUI.\n\n### Anatomy of a functional InstUI component\n\nTo make similar and similarly maintainable components to InstUI, you should follow a basic structure. This is not strictly necessary but recommended and this guide will assume you do use it.\n\nA fully equipped InstUI component has three files: `index.tsx`, `style.ts`, `theme.ts` and uses the `useStyles` hook.\n\nLet's take a look at the simplest example possible:\n\n```html\n---\ntype: code\n---\n\n// index.tsx // /** @jsx jsx */ import { jsx, useStyle } from\n'@instructure/emotion' import generateStyle from './styles' import\ngenerateComponentTheme from './theme' const InstUIComponent = (props: PropsType)\n=> { const styles = useStyle({ generateStyle, generateComponentTheme,\ncomponentId: \"InstUIComponent_id\", //any unique id params: { color: props.color,\nvariant: props.variant, themeOverride: props.themeOverride } }) return (\n<div css=\"{\" styles?.root }>content</div>\n) } export default InstUIComponent\n```\n\n```html\n---\ntype: code\n---\n\n// style.ts const generateStyle = ( componentTheme: componentThemeType, params:\nParamType): AvatarStyle => { const { color, variant } = params // assuming you\npassed the `color` and `variant` to the useStyle hook const variantStyles = {\ncircle: { width: '2.5em', position: 'relative', borderRadius: '100%', overflow:\n'hidden' }, rectangle: { width: '3em' } } const colorVariants = { default:\ncomponentTheme.defaultColor, green: componentTheme.niceGreenColor,\nnonThemedColor: \"pink\" } return { instUIComponent: { //for the root element's\nstyle label: 'instUIComponent', color: colorVariants[color], backgroundColor:\ncomponentTheme.bgColor, ...variantStyles[variant], }, aChildElement: { label:\n'instUIComponent_aChildElement', // this label is needed. Please prefix it with\nthe root label fontWeight: \"400\" //you can hardcode values. Don't need to get\nthem from the theme necessarily . } } } export default generateStyle\n```\n\n```html\n---\ntype: code\n---\n\n// theme.ts import type { Theme } from '@instructure/ui-themes' const\ngenerateComponentTheme = (theme: Theme) => { const { colors } = theme // the\ntheme you are using. See instUI's theme docs as well const componentVariables =\n{ defaultColor: colors?.contrasts?.white1010, niceGreenColor:\ncolors.contrasts.green4570, bgColor: \"purple\" //this is hardcoded, but added to\nthe theme, so it can be overridden } return { ...componentVariables } } export\ndefault generateComponentTheme\n```\n\nLet's take a look at the key parts of the examples:\n\nThe `useStyle` hook calculates the styles for the component. It needs an object with:\n\n- `generateStyle` function, this function contains all the `css` information (`style.ts` file in the example).\n- `generateComponentTheme` is an optional param. This provides variables that act as the theme of the components. These can be derived from the global theme object or hardcoded. All can be overridden.\n- `componentId` depends on `generateComponentTheme`. It's mandatory if `generateComponentTheme` is provided. It must be a unique string to identify the component by and used for [component level overrides](https://instructure.design/#using-theme-overrides/#Overriding%20theme%20for%20a%20specific%20component%20in%20a%20subtree).\n- `params` is an optional object with any data you need to pass to `generateStyle`. To enable themeOverrides on the component, you must pass the `themeOverride` prop to `params`.\n\n`useStyle` returns an object with the css classes. Pass it to the DOM through emotion's `css` prop (see example).\n\n#### The `generateComponentTheme`\n\nThe `generateComponentTheme` defines, calculates and exposes variables that are considered `component theme variables`. These variables will be used in the `generateStyle` method to \"theme\" the component's style. These variables are overwritable by the [various override methods](https://instructure.design/#using-theme-overrides).\n`generateComponentTheme` gets the `theme` as parameter. Return an object (`componentVariables`) with keys that will act as the `component theme variables`. This method will be injected to `generateStyle`.\n\n#### The `generateStyle`\n\nYou define the css in the `generateStyle` method. It has access to the themes, defined in the `generateComponentTheme` (in the example: `componentTheme`) and the `params` which are passed to the `useStyle` hook.\nNote: if you set the `label` to a unique value for every css class, it makes testing and debugging much easier because emotion appends to the end of the hashed class name it generates.\n","title":"Themed components","category":"Contributor Guides","order":10,"relativePath":"docs/contributor-docs/themed-components.md","extension":".md","srcPath":"docs/contributor-docs/themed-components.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/themed-components.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/contributor-docs/themed-components","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/contributor-docs/themed-components.md').default","esPath":"@instructure/docs/contributor-docs/themed-components","themePath":"docs/contributor-docs/themed-components.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/themed-components.md","id":"themed-components"}