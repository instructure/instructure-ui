{"description":"\nThe `ColorPicker` is a versatile component that can be used to select colors and check their contrast ratios. It has 2 modes of operation:\n\n- In the simple, color input mode, it lets the user enter hex codes. It will display the color, validate the hex and check the contrast.\n- In the more complex, color picker mode, the same functionality is available as for the simpler mode, but there is the option to pick a color from a visual color mixer component or from any other method added in a popover.\n\nThe component can be either `uncontrolled` or `controlled`. If the `onChange` and `value` props are used, it will behave in a `controlled` manner, otherwise `uncontrolled`.\n\n### ColorPicker with default popover content\n\n```js\n---\ntype: example\n---\n<ColorPicker\n  label=\"Color Input\"\n  tooltip=\"This is an example\"\n  placeholderText=\"Enter HEX\"\n  popoverButtonScreenReaderLabel=\"Open color mixer popover\"\n  withAlpha\n  colorMixerSettings={{\n    popoverAddButtonLabel: \"Add\",\n    popoverCloseButtonLabel: \"Cancel\",\n    colorMixer: {\n      withAlpha: false,\n      rgbRedInputScreenReaderLabel:'Input field for red',\n      rgbGreenInputScreenReaderLabel:'Input field for green',\n      rgbBlueInputScreenReaderLabel:'Input field for blue',\n      rgbAlphaInputScreenReaderLabel:'Input field for alpha',\n      colorSliderNavigationExplanationScreenReaderLabel:`You are on a color slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`,\n      alphaSliderNavigationExplanationScreenReaderLabel:`You are on an alpha slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`,\n      colorPaletteNavigationExplanationScreenReaderLabel:`You are on a color palette. To navigate on the palette up, left, down or right, use the 'W', 'A', 'S' and 'D' buttons respectively`\n    },\n    colorPreset: {\n      label: \"Choose a nice color\",\n      colors: [\n        \"#ffffff\",\n        \"#0CBF94\",\n        \"#0C89BF00\",\n        \"#BF0C6D\",\n        \"#BF8D0C\",\n        \"#ff0000\",\n        \"#576A66\",\n        \"#35423A\",\n        \"#35423F\",\n      ],\n    },\n    colorContrast: {\n      firstColor: \"#FFFF00\",\n      label: \"Color Contrast Ratio\",\n      successLabel: \"PASS\",\n      failureLabel: \"FAIL\",\n      normalTextLabel: \"Normal text\",\n      largeTextLabel: \"Large text\",\n      graphicsTextLabel: \"Graphics text\",\n      firstColorLabel: \"Background\",\n      secondColorLabel: \"Foreground\",\n    },\n  }}\n/>\n```\n\n### ColorPicker with custom popover content\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        value: ''\n      }\n    }\n    renderPopoverContent = (value, onChange, handleAdd, handleClose) => (\n      <div>\n        <div style={{ padding: '20px' }}>\n          <ColorMixer\n            withAlpha\n            value={value}\n            onChange={onChange}\n            rgbRedInputScreenReaderLabel=\"Input field for red\"\n            rgbGreenInputScreenReaderLabel=\"Input field for green\"\n            rgbBlueInputScreenReaderLabel=\"Input field for blue\"\n            rgbAlphaInputScreenReaderLabel=\"Input field for alpha\"\n            colorSliderNavigationExplanationScreenReaderLabel={`You are on a color slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`}\n            alphaSliderNavigationExplanationScreenReaderLabel={`You are on an alpha slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`}\n            colorPaletteNavigationExplanationScreenReaderLabel={`You are on a color palette. To navigate on the palette up, left, down or right, use the 'W', 'A', 'S' and 'D' buttons respectively`}\n          />\n          <div\n            style={{\n              borderTop: 'solid',\n              borderWidth: '1px',\n              borderColor: '#C7CDD1',\n              margin: '20px 0 20px 0'\n            }}\n          />\n          <ColorPreset\n            label=\"Choose a color\"\n            colors={[\n              '#ffffff',\n              '#0CBF94',\n              '#0C89BF00',\n              '#BF0C6D',\n              '#BF8D0C',\n              '#ff0000',\n              '#576A66',\n              '#35423A',\n              '#35423F'\n            ]}\n            selected={value}\n            onSelect={onChange}\n          />\n          <div\n            style={{\n              borderTop: 'solid',\n              borderWidth: '1px',\n              borderColor: '#C7CDD1',\n              margin: '20px 0 20px 0'\n            }}\n          />\n          <ColorContrast\n            firstColor=\"#FFFFFF\"\n            secondColor={value}\n            label=\"Color Contrast Ratio\"\n            successLabel=\"PASS\"\n            failureLabel=\"FAIL\"\n            normalTextLabel=\"Normal text\"\n            largeTextLabel=\"Large text\"\n            graphicsTextLabel=\"Graphics text\"\n            firstColorLabel=\"Background\"\n            secondColorLabel=\"Foreground\"\n          />\n        </div>\n        <div\n          style={{\n            backgroundColor: '#F5F5F5',\n            display: 'flex',\n            flexDirection: 'row-reverse',\n            padding: '7px',\n            borderTop: 'solid 1px #C7CDD1'\n          }}\n        >\n          <Button onClick={handleAdd} color=\"primary\" margin=\"xx-small\">\n            Add\n          </Button>\n          <Button onClick={handleClose} color=\"secondary\" margin=\"xx-small\">\n            Close\n          </Button>\n        </div>\n      </div>\n    )\n\n    render() {\n      return (\n        <div>\n          <ColorPicker\n            value={this.state.value}\n            onChange={(value) => {\n              this.setState({ value })\n            }}\n            label=\"Color Input\"\n            tooltip=\"This is an example\"\n            placeholderText=\"Enter HEX\"\n            popoverButtonScreenReaderLabel=\"Open color mixer popover\"\n          >\n            {this.renderPopoverContent}\n          </ColorPicker>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [value, setValue] = useState('')\n\n    const renderPopoverContent = (value, onChange, handleAdd, handleClose) => (\n      <div>\n        <div style={{ padding: '20px' }}>\n          <ColorMixer\n            withAlpha\n            value={value}\n            onChange={onChange}\n            rgbRedInputScreenReaderLabel=\"Input field for red\"\n            rgbGreenInputScreenReaderLabel=\"Input field for green\"\n            rgbBlueInputScreenReaderLabel=\"Input field for blue\"\n            rgbAlphaInputScreenReaderLabel=\"Input field for alpha\"\n            colorSliderNavigationExplanationScreenReaderLabel={`You are on a color slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`}\n            alphaSliderNavigationExplanationScreenReaderLabel={`You are on an alpha slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`}\n            colorPaletteNavigationExplanationScreenReaderLabel={`You are on a color palette. To navigate on the palette up, left, down or right, use the 'W', 'A', 'S' and 'D' buttons respectively`}\n          />\n          <div\n            style={{\n              borderTop: 'solid',\n              borderWidth: '1px',\n              borderColor: '#C7CDD1',\n              margin: '20px 0 20px 0'\n            }}\n          />\n          <ColorPreset\n            label=\"Choose a color\"\n            colors={[\n              '#ffffff',\n              '#0CBF94',\n              '#0C89BF00',\n              '#BF0C6D',\n              '#BF8D0C',\n              '#ff0000',\n              '#576A66',\n              '#35423A',\n              '#35423F'\n            ]}\n            selected={value}\n            onSelect={onChange}\n          />\n          <div\n            style={{\n              borderTop: 'solid',\n              borderWidth: '1px',\n              borderColor: '#C7CDD1',\n              margin: '20px 0 20px 0'\n            }}\n          />\n          <ColorContrast\n            firstColor=\"#FFFFFF\"\n            secondColor={value}\n            label=\"Color Contrast Ratio\"\n            successLabel=\"PASS\"\n            failureLabel=\"FAIL\"\n            normalTextLabel=\"Normal text\"\n            largeTextLabel=\"Large text\"\n            graphicsTextLabel=\"Graphics text\"\n            firstColorLabel=\"Background\"\n            secondColorLabel=\"Foreground\"\n          />\n        </div>\n        <div\n          style={{\n            backgroundColor: '#F5F5F5',\n            display: 'flex',\n            flexDirection: 'row-reverse',\n            padding: '7px',\n            borderTop: 'solid 1px #C7CDD1'\n          }}\n        >\n          <Button onClick={handleAdd} color=\"primary\" margin=\"xx-small\">\n            Add\n          </Button>\n          <Button onClick={handleClose} color=\"secondary\" margin=\"xx-small\">\n            Close\n          </Button>\n        </div>\n      </div>\n    )\n\n    return (\n      <div>\n        <ColorPicker\n          value={value}\n          onChange={(val) => {\n            setValue(val)\n          }}\n          label=\"Color Input\"\n          tooltip=\"This is an example\"\n          placeholderText=\"Enter HEX\"\n          popoverButtonScreenReaderLabel=\"Open color mixer popover\"\n        >\n          {renderPopoverContent}\n        </ColorPicker>\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Complex Color input example\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        value: '',\n        withCheckContrast: undefined,\n        contrastStrength: 'mid',\n        isStrict: false,\n        disabled: false,\n        isRequired: false,\n        contrastAgainst: '#ffffff',\n        colors: [\n          '#ffffff',\n          '#0CBF94',\n          '#0C89BF00',\n          '#BF0C6D',\n          '#BF8D0C',\n          '#ff0000',\n          '#576A66',\n          '#35423A',\n          '#35423F'\n        ],\n        withAlpha: false\n      }\n    }\n\n    render() {\n      const {\n        withCheckContrast,\n        contrastStrength,\n        isStrict,\n        contrastAgainst,\n        disabled,\n        isRequired,\n        withAlpha,\n        value\n      } = this.state\n\n      return (\n        <View as=\"div\">\n          <ColorPicker\n            onChange={(value) => this.setState({ value })}\n            value={value}\n            placeholderText=\"Enter HEX\"\n            label=\"Color Input\"\n            tooltip=\"This is an example\"\n            disabled={disabled}\n            isRequired={isRequired}\n            withAlpha={withAlpha}\n            popoverButtonScreenReaderLabel=\"Open color mixer popover\"\n            checkContrast={\n              withCheckContrast && {\n                isStrict,\n                contrastStrength,\n                contrastAgainst,\n                renderContrastErrorMessage: (contrast, minContrast) => [\n                  {\n                    type: 'error',\n                    text: `Not high enough contrast. Minimum required is ${minContrast}:1, current is ${contrast}:1`\n                  }\n                ]\n              }\n            }\n            renderInvalidColorMessage={(hexCode) => [\n              {\n                type: 'error',\n                text: `Not valid hex color. It should be either 3, 6 or 8 character long.`\n              }\n            ]}\n            renderIsRequiredMessage={() => [\n              {\n                type: 'error',\n                text: `This field is required, please enter a valid hex code`\n              }\n            ]}\n          />\n          <hr />\n          <FormFieldGroup description=\"Settings\">\n            <Checkbox\n              label=\"isRequired\"\n              value=\"small\"\n              variant=\"toggle\"\n              size=\"small\"\n              inline\n              checked={isRequired}\n              onChange={() =>\n                this.setState({\n                  isRequired: !isRequired\n                })\n              }\n            />\n            <Checkbox\n              label=\"withAlpha\"\n              value=\"small\"\n              variant=\"toggle\"\n              size=\"small\"\n              inline\n              checked={withAlpha}\n              onChange={() =>\n                this.setState({\n                  withAlpha: !withAlpha,\n                  value: value.slice(0, 6)\n                })\n              }\n            />\n\n            <Checkbox\n              label=\"Disabled\"\n              value=\"small\"\n              variant=\"toggle\"\n              size=\"small\"\n              inline\n              checked={disabled}\n              onChange={() => this.setState({ disabled: !disabled })}\n            />\n\n            <Checkbox\n              label=\"With contrast checking (checkContrast)\"\n              value=\"small\"\n              variant=\"toggle\"\n              size=\"small\"\n              inline\n              checked={withCheckContrast}\n              onChange={() =>\n                this.setState({ withCheckContrast: !withCheckContrast })\n              }\n            />\n\n            {withCheckContrast && (\n              <FormFieldGroup description=\"Check contrast options\">\n                <Checkbox\n                  label=\"isStrict\"\n                  value=\"small\"\n                  variant=\"toggle\"\n                  size=\"small\"\n                  checked={isStrict}\n                  onChange={() => this.setState({ isStrict: !isStrict })}\n                />\n                <RadioInputGroup\n                  name=\"contrastStrength\"\n                  description=\"contrastStrength\"\n                  layout=\"columns\"\n                  value={contrastStrength}\n                  onChange={(event, value) =>\n                    this.setState({ contrastStrength: value })\n                  }\n                >\n                  <RadioInput label=\"min (3:1)\" value=\"min\" />\n                  <RadioInput label=\"mid (4.5:1)\" value=\"mid\" />\n                  <RadioInput label=\"max (7:1)\" value=\"max\" />\n                </RadioInputGroup>\n\n                <ColorPreset\n                  label=\"contrastAgainst\"\n                  colors={this.state.colors}\n                  selected={this.state.contrastAgainst}\n                  onSelect={(contrastAgainst) =>\n                    this.setState({ contrastAgainst })\n                  }\n                />\n              </FormFieldGroup>\n            )}\n          </FormFieldGroup>\n        </View>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [value, setValue] = useState('')\n    const [withCheckContrast, setWithCheckContrast] = useState(undefined)\n    const [contrastStrength, setContrastStrength] = useState('mid')\n    const [isStrict, setIsStrict] = useState(false)\n    const [disabled, setDisabled] = useState(false)\n    const [isRequired, setIsRequired] = useState(false)\n    const [withAlpha, setWithAlpha] = useState(false)\n    const [contrastAgainst, setContrastAgainst] = useState('#ffffff')\n    const [colors, setColors] = useState([\n      '#ffffff',\n      '#0CBF94',\n      '#0C89BF00',\n      '#BF0C6D',\n      '#BF8D0C',\n      '#ff0000',\n      '#576A66',\n      '#35423A',\n      '#35423F'\n    ])\n\n    return (\n      <View as=\"div\">\n        <ColorPicker\n          onChange={(val) => setValue(val)}\n          value={value}\n          placeholderText=\"Enter HEX\"\n          label=\"Color Input\"\n          tooltip=\"This is an example\"\n          disabled={disabled}\n          isRequired={isRequired}\n          withAlpha={withAlpha}\n          popoverButtonScreenReaderLabel=\"Open color mixer popover\"\n          checkContrast={\n            withCheckContrast && {\n              isStrict,\n              contrastStrength,\n              contrastAgainst,\n              renderContrastErrorMessage: (contrast, minContrast) => [\n                {\n                  type: 'error',\n                  text: `Not high enough contrast. Minimum required is ${minContrast}:1, current is ${contrast}:1`\n                }\n              ]\n            }\n          }\n          renderInvalidColorMessage={(hexCode) => [\n            {\n              type: 'error',\n              text: `Not valid hex color. It should be either 3, 6 or 8 character long.`\n            }\n          ]}\n          renderIsRequiredMessage={() => [\n            {\n              type: 'error',\n              text: `This field is required, please enter a valid hex code`\n            }\n          ]}\n        />\n        <hr />\n        <FormFieldGroup description=\"Settings\">\n          <Checkbox\n            label=\"isRequired\"\n            value=\"small\"\n            variant=\"toggle\"\n            size=\"small\"\n            inline\n            checked={isRequired}\n            onChange={() => setIsRequired(!isRequired)}\n          />\n          <Checkbox\n            label=\"withAlpha\"\n            value=\"small\"\n            variant=\"toggle\"\n            size=\"small\"\n            inline\n            checked={withAlpha}\n            onChange={() => {\n              setWithAlpha(!withAlpha)\n              setValue(value.slice(0, 6))\n            }}\n          />\n\n          <Checkbox\n            label=\"Disabled\"\n            value=\"small\"\n            variant=\"toggle\"\n            size=\"small\"\n            inline\n            checked={disabled}\n            onChange={() => setDisabled(!disabled)}\n          />\n\n          <Checkbox\n            label=\"With contrast checking (checkContrast)\"\n            value=\"small\"\n            variant=\"toggle\"\n            size=\"small\"\n            inline\n            checked={withCheckContrast}\n            onChange={() => setWithCheckContrast(!withCheckContrast)}\n          />\n\n          {withCheckContrast && (\n            <FormFieldGroup description=\"Check contrast options\">\n              <Checkbox\n                label=\"isStrict\"\n                value=\"small\"\n                variant=\"toggle\"\n                size=\"small\"\n                checked={isStrict}\n                onChange={() => setIsStrict(!isStrict)}\n              />\n              <RadioInputGroup\n                name=\"contrastStrength\"\n                description=\"contrastStrength\"\n                layout=\"columns\"\n                value={contrastStrength}\n                onChange={(_, strength) => setContrastStrength(strength)}\n              >\n                <RadioInput label=\"min (3:1)\" value=\"min\" />\n                <RadioInput label=\"mid (4.5:1)\" value=\"mid\" />\n                <RadioInput label=\"max (7:1)\" value=\"max\" />\n              </RadioInputGroup>\n\n              <ColorPreset\n                label=\"contrastAgainst\"\n                colors={colors}\n                selected={contrastAgainst}\n                onSelect={(val) => setContrastAgainst(val)}\n              />\n            </FormFieldGroup>\n          )}\n        </FormFieldGroup>\n      </View>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Uncontrolled Color Input\n\n```js\n---\ntype: example\n---\n<div>\n  <ColorPicker\n    label=\"Color\"\n    checkContrast={{\n      isStrict: false,\n      renderContrastSuccessMessage: () => [\n        { type: \"success\", text: \"I am a contrast success message\" },\n      ],\n      renderContrastErrorMessage: () => [\n        { type: \"error\", text: \"I am a contrast warning message\" },\n      ],\n    }}\n    renderMessages={() => [\n      { type: \"hint\", text: \"I can display anything, at any time\" },\n    ]}\n    renderInvalidColorMessage={() => [\n      { type: \"error\", text: \"I am an invalid color message\" },\n    ]}\n    renderIsRequiredMessage={() => [\n      { type: \"error\", text: \"I am a required message\" },\n    ]}\n    placeholderText=\"Enter HEX\"\n  />\n</div>\n\n```\n","displayName":"ColorPicker","methods":[],"props":{"checkContrast":{"type":{"name":"shape","value":{"isStrict":{"name":"bool","required":false},"contrastStrength":{"name":"enum","value":[{"value":"'min'","computed":false},{"value":"'mid'","computed":false},{"value":"'max'","computed":false}],"required":false},"contrastAgainst":{"name":"string","required":false},"renderContrastSuccessMessage":{"name":"func","required":false},"renderContrastErrorMessage":{"name":"func","required":false}}},"required":false,"description":"Configures the contrast checker. If not provided, there will be no checking.\n\n\nisStrict: if it's true, it will display an error if false, a warning\n\ncontrastStrength: can be one of ('min','mid','max'), which translates to 3:1, 4.5:1, 7:1 contrast, defalts to 'mid'\n\ncontrastAgainst: is the color which the component checks the contrast against. Accepts hex, defaults to #ffffff\n\nrenderContrastSuccessMessage: if set and the contrast is high enough, it will display the message\n\nrenderContrastErrorMessage: if set and the contrast is not high enough, it will display the message\n\nFormMessage[]: Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"signature","type":"object","raw":"{\n  isStrict?: boolean\n  contrastStrength?: ContrastStrength\n  contrastAgainst?: string\n  renderContrastSuccessMessage?: (\n    contrast: number,\n    minContrast: number\n  ) => FormMessage[]\n  renderContrastErrorMessage?: (\n    contrast: number,\n    minContrast: number\n  ) => FormMessage[]\n}","signature":{"properties":[{"key":"isStrict","value":{"name":"boolean","required":false}},{"key":"contrastStrength","value":{"name":"union","raw":"'min' | 'mid' | 'max'","elements":[{"name":"literal","value":"'min'"},{"name":"literal","value":"'mid'"},{"name":"literal","value":"'max'"}],"required":false}},{"key":"contrastAgainst","value":{"name":"string","required":false}},{"key":"renderContrastSuccessMessage","value":{"name":"signature","type":"function","raw":"(\n  contrast: number,\n  minContrast: number\n) => FormMessage[]","signature":{"arguments":[{"type":{"name":"number"},"name":"contrast"},{"type":{"name":"number"},"name":"minContrast"}],"return":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"required":false}},{"key":"renderContrastErrorMessage","value":{"name":"signature","type":"function","raw":"(\n  contrast: number,\n  minContrast: number\n) => FormMessage[]","signature":{"arguments":[{"type":{"name":"number"},"name":"contrast"},{"type":{"name":"number"},"name":"minContrast"}],"return":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"required":false}}]}}},"colorMixerSettings":{"type":{"name":"shape","value":{"popoverAddButtonLabel":{"name":"string","required":true},"popoverCloseButtonLabel":{"name":"string","required":true},"colorMixer":{"name":"shape","value":{"withAlpha":{"name":"bool","required":false},"rgbRedInputScreenReaderLabel":{"name":"string","required":true},"rgbGreenInputScreenReaderLabel":{"name":"string","required":true},"rgbBlueInputScreenReaderLabel":{"name":"string","required":true},"rgbAlphaInputScreenReaderLabel":{"name":"string","required":true},"colorSliderNavigationExplanationScreenReaderLabel":{"name":"string","required":true},"alphaSliderNavigationExplanationScreenReaderLabel":{"name":"string","required":true},"colorPaletteNavigationExplanationScreenReaderLabel":{"name":"string","required":true}},"required":false},"colorPreset":{"name":"shape","value":{"colors":{"name":"arrayOf","value":{"name":"string"},"required":true},"label":{"name":"string","required":true}},"required":false},"colorContrast":{"name":"shape","value":{"firstColor":{"name":"string","required":true},"label":{"name":"string","required":true},"successLabel":{"name":"string","required":true},"failureLabel":{"name":"string","required":true},"normalTextLabel":{"name":"string","required":true},"largeTextLabel":{"name":"string","required":true},"graphicsTextLabel":{"name":"string","required":true},"firstColorLabel":{"name":"string","required":true},"secondColorLabel":{"name":"string","required":true}},"required":false}}},"required":false,"description":"If set, the default popover will appear for the picker. Those components whose corresponding keys aren't provided (e.g. `colorMixer`, `colorPreset` or `colorContrast`)\nwill not be rendered.","tsType":{"name":"signature","type":"object","raw":"{\n  popoverAddButtonLabel: string\n  popoverCloseButtonLabel: string\n  colorMixer?: {\n    withAlpha?: boolean\n    rgbRedInputScreenReaderLabel: string\n    rgbGreenInputScreenReaderLabel: string\n    rgbBlueInputScreenReaderLabel: string\n    rgbAlphaInputScreenReaderLabel: string\n    colorSliderNavigationExplanationScreenReaderLabel: string\n    alphaSliderNavigationExplanationScreenReaderLabel: string\n    colorPaletteNavigationExplanationScreenReaderLabel: string\n  }\n  colorPreset?: {\n    colors: Array<string>\n    label: string\n  }\n  colorContrast?: {\n    firstColor: string\n    label: string\n    successLabel: string\n    failureLabel: string\n    normalTextLabel: string\n    largeTextLabel: string\n    graphicsTextLabel: string\n    firstColorLabel: string\n    secondColorLabel: string\n  }\n}","signature":{"properties":[{"key":"popoverAddButtonLabel","value":{"name":"string","required":true}},{"key":"popoverCloseButtonLabel","value":{"name":"string","required":true}},{"key":"colorMixer","value":{"name":"signature","type":"object","raw":"{\n  withAlpha?: boolean\n  rgbRedInputScreenReaderLabel: string\n  rgbGreenInputScreenReaderLabel: string\n  rgbBlueInputScreenReaderLabel: string\n  rgbAlphaInputScreenReaderLabel: string\n  colorSliderNavigationExplanationScreenReaderLabel: string\n  alphaSliderNavigationExplanationScreenReaderLabel: string\n  colorPaletteNavigationExplanationScreenReaderLabel: string\n}","signature":{"properties":[{"key":"withAlpha","value":{"name":"boolean","required":false}},{"key":"rgbRedInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbGreenInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbBlueInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbAlphaInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"colorSliderNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}},{"key":"alphaSliderNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}},{"key":"colorPaletteNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}}]},"required":false}},{"key":"colorPreset","value":{"name":"signature","type":"object","raw":"{\n  colors: Array<string>\n  label: string\n}","signature":{"properties":[{"key":"colors","value":{"name":"Array","elements":[{"name":"string"}],"raw":"Array<string>","required":true}},{"key":"label","value":{"name":"string","required":true}}]},"required":false}},{"key":"colorContrast","value":{"name":"signature","type":"object","raw":"{\n  firstColor: string\n  label: string\n  successLabel: string\n  failureLabel: string\n  normalTextLabel: string\n  largeTextLabel: string\n  graphicsTextLabel: string\n  firstColorLabel: string\n  secondColorLabel: string\n}","signature":{"properties":[{"key":"firstColor","value":{"name":"string","required":true}},{"key":"label","value":{"name":"string","required":true}},{"key":"successLabel","value":{"name":"string","required":true}},{"key":"failureLabel","value":{"name":"string","required":true}},{"key":"normalTextLabel","value":{"name":"string","required":true}},{"key":"largeTextLabel","value":{"name":"string","required":true}},{"key":"graphicsTextLabel","value":{"name":"string","required":true}},{"key":"firstColorLabel","value":{"name":"string","required":true}},{"key":"secondColorLabel","value":{"name":"string","required":true}}]},"required":false}}]}}},"children":{"type":{"name":"func"},"required":false,"description":"If a child function is provided, the component will render it to the popover.","tsType":{"name":"signature","type":"function","raw":"(\n  value: string,\n  onChange: (hex: string) => void,\n  handleAdd: () => void,\n  handleClose: () => void\n) => React.ReactNode","signature":{"arguments":[{"type":{"name":"string"},"name":"value"},{"type":{"name":"signature","type":"function","raw":"(hex: string) => void","signature":{"arguments":[{"type":{"name":"string"},"name":"hex"}],"return":{"name":"void"}}},"name":"onChange"},{"type":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"name":"handleAdd"},{"type":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"name":"handleClose"}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Sets the input to disabled state","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"If true, it will display a red error ring or a message after a blur event and remove it after a change event","tsType":{"name":"boolean"}},"label":{"type":{"name":"node"},"required":true,"description":"The label of the component","tsType":{"name":"string"}},"onChange":{"type":{"name":"func"},"required":false,"description":"If 'value' is set, this must be set. It'll be called on every change","tsType":{"name":"signature","type":"function","raw":"(value: string) => void","signature":{"arguments":[{"type":{"name":"string"},"name":"value"}],"return":{"name":"void"}}}},"placeholderText":{"type":{"name":"string"},"required":true,"description":"Placeholder for the input field","tsType":{"name":"string"}},"popoverScreenReaderLabel":{"type":{"name":"string"},"required":false,"description":"Sets the ScreenReaderLabel for the popover","tsType":{"name":"string"}},"popoverButtonScreenReaderLabel":{"type":{"name":"string"},"required":false,"description":"Sets the ScreenReaderLabel for the popover Button","tsType":{"name":"string"}},"popoverMaxHeight":{"type":{"name":"string"},"required":false,"description":"If set, it will set the popover's max height.\nUseful when the popover is too big","tsType":{"name":"string"},"defaultValue":{"value":"'100vh'","computed":false}},"renderInvalidColorMessage":{"type":{"name":"func"},"required":false,"description":"If set and the hex is invalid, it will display the message after a blur event and remove it after a change event\n\nFormMessage[]: Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"signature","type":"function","raw":"(hexCode: string) => FormMessage[]","signature":{"arguments":[{"type":{"name":"string"},"name":"hexCode"}],"return":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}}}},"renderIsRequiredMessage":{"type":{"name":"func"},"required":false,"description":"If set, isRequired is true and the input is empty, it will display the message after a blur event and remove it after a change event\n\nFormMessage[]: Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"signature","type":"function","raw":"() => FormMessage[]","signature":{"arguments":[],"return":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}}}},"renderMessages":{"type":{"name":"func"},"required":false,"description":"If set, it will display the message it returns\n\nFormMessage[]: Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"signature","type":"function","raw":"(\n  hexCode: string,\n  isValidHex: boolean,\n  minContrast: number,\n  contrast?: number\n) => FormMessage[]","signature":{"arguments":[{"type":{"name":"string"},"name":"hexCode"},{"type":{"name":"boolean"},"name":"isValidHex"},{"type":{"name":"number"},"name":"minContrast"},{"type":{"name":"number"},"name":"contrast"}],"return":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}}}},"tooltip":{"type":{"name":"node"},"required":false,"description":"If set, an info icon with a tooltip will be displayed","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"id":{"type":{"name":"string"},"required":false,"description":"The id of the text input. One is generated if not supplied.","tsType":{"name":"string"}},"value":{"type":{"name":"string"},"required":false,"description":"If set, the component will behave as controlled","tsType":{"name":"string"}},"width":{"type":{"name":"string"},"required":false,"description":"The width of the input.","tsType":{"name":"string"},"defaultValue":{"value":"'22.5rem'","computed":false}},"withAlpha":{"type":{"name":"bool"},"required":false,"description":"If true, alpha slider will be rendered. Defaults to false","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-color-picker/src/ColorPicker/index.tsx","extension":".tsx","srcPath":"packages/ui-color-picker/src/ColorPicker/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-color-picker/src/ColorPicker/index.tsx","packageName":"@instructure/ui-color-picker","requirePath":"@instructure/ui-color-picker/lib/ColorPicker/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-color-picker/src/ColorPicker/index.tsx').default","esPath":"@instructure/ui-color-picker/es/ColorPicker/index","themePath":"packages/ui-color-picker/src/ColorPicker/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-color-picker/src/ColorPicker/theme.ts","id":"ColorPicker","title":"ColorPicker"}