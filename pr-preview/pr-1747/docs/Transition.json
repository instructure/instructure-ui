{"description":"@module Transition\nThe `Transition` wrapper helps you easily transition elements in and out of\nyour UI. The component defaults to the `fade` opacity transition.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      in: true\n    }\n  }\n\n  handleButtonClick = () => {\n    this.setState((state) => {\n      return {\n        in: !state.in\n      }\n    })\n  };\n\n  render () {\n    return (\n      <div>\n        <div>\n          <Button margin=\"small 0\" size=\"small\" onClick={this.handleButtonClick}>\n            Fade {this.state.in ? 'Out' : 'In'}\n          </Button>\n        </div>\n        <Transition\n          transitionOnMount\n          in={this.state.in}\n          type=\"fade\"\n        >\n          <Avatar name=\"Fade\" />\n        </Transition>\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n`scale` transitions both the opacity and size of the element.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      in: true\n    }\n  }\n\n  handleButtonClick = () => {\n    this.setState((state) => {\n      return {\n        in: !state.in\n      }\n    })\n  };\n\n  render () {\n    return (\n      <div>\n        <div>\n          <Button margin=\"small 0\" size=\"small\" onClick={this.handleButtonClick}>\n            {this.state.in ? 'Collapse' : 'Expand'}\n          </Button>\n        </div>\n        <Transition\n          transitionOnMount\n          unmountOnExit\n          in={this.state.in}\n          type=\"scale\"\n        >\n          <Avatar name=\"Collapse\" />\n        </Transition>\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n`slide` transitions the horizontal or vertical position of the element. The slide direction can be\ninternationalized for right to left (rtl) languages. The following example uses the\n[TextDirectionContext](#TextDirectionContext) util to mirror the slide direction for rtl.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n\n  static contextType = TextDirectionContext\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      direction: 'left',\n      in: true\n    }\n  }\n\n  handleDirectionChange = (e, value) => {\n    this.setState({\n      direction: value,\n      in: true\n    })\n  };\n\n  handleButtonClick = () => {\n    this.setState((state) => {\n      return {\n        in: !state.in\n      }\n    })\n  };\n\n  mirrorDirection (direction) {\n    const mirror = {\n      left: 'right',\n      right: 'left',\n      up: 'up',\n      down: 'down'\n    }\n    return mirror[direction]\n  };\n\n  render () {\n    const rtl = this.context === 'rtl'\n    const direction = rtl ? this.mirrorDirection(this.state.direction) : this.state.direction\n    const directionVariants = [\n      {value: 'left', label: 'Start'},\n      {value: 'right', label: 'End'},\n      {value: 'down', label: 'Down'},\n      {value: 'up', label: 'Up'}\n    ]\n    return (\n      <div>\n        <div>\n          <RadioInputGroup\n            onChange={this.handleDirectionChange}\n            name=\"slideExample\"\n            description={<ScreenReaderContent>Select a direction</ScreenReaderContent>}\n            value={direction}\n            variant=\"toggle\"\n          >\n            {directionVariants.map(dir => <RadioInput key={dir.value} value={dir.value} label={dir.label} />)}\n          </RadioInputGroup>\n          <Button size=\"small\" margin=\"medium none small\" onClick={this.handleButtonClick}>\n            Slide {this.state.in ? 'Out' : 'In'}\n          </Button>\n        </div>\n        <div style={{\n          position: 'relative',\n          overflow: 'hidden',\n          height: '15rem',\n          display: 'flex',\n          justifyContent: (this.state.direction === 'right') ? 'flex-end' : 'flex-start'\n        }}>\n          <Transition\n            transitionOnMount\n            unmountOnExit\n            in={this.state.in}\n            type={`slide-${direction}`}\n          >\n            <Avatar name=\"Slide\" />\n          </Transition>\n        </div>\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n","displayName":"Transition","methods":[],"props":{"type":{"type":{"name":"enum","value":[{"value":"'fade'","computed":false},{"value":"'scale'","computed":false},{"value":"'slide-down'","computed":false},{"value":"'slide-up'","computed":false},{"value":"'slide-left'","computed":false},{"value":"'slide-right'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"| 'fade'\n| 'scale'\n| 'slide-down'\n| 'slide-up'\n| 'slide-left'\n| 'slide-right'","elements":[{"name":"literal","value":"'fade'"},{"name":"literal","value":"'scale'"},{"name":"literal","value":"'slide-down'"},{"name":"literal","value":"'slide-up'"},{"name":"literal","value":"'slide-left'"},{"name":"literal","value":"'slide-right'"}]},"defaultValue":{"value":"'fade'","computed":false}},"in":{"type":{"name":"bool"},"required":false,"description":"Show the component? Triggers the enter or exit animation.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"unmountOnExit":{"type":{"name":"bool"},"required":false,"description":"Unmount the component (remove it from the DOM) when it is not shown.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"transitionOnMount":{"type":{"name":"bool"},"required":false,"description":"Run the enter animation when the component mounts, if it is initially\nshown","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"transitionEnter":{"type":{"name":"bool"},"required":false,"description":"Run the enter animation","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"transitionExit":{"type":{"name":"bool"},"required":false,"description":"Run the exit animation","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"onTransition":{"type":{"name":"func"},"required":false,"description":"Callback fired when transitioning to the next state","tsType":{"name":"signature","type":"function","raw":"(\n  toState: BaseTransitionStatesType,\n  fromState: BaseTransitionStatesType\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"-2 | -1 | 1 | 2","elements":[{"name":"literal","value":"-2"},{"name":"literal","value":"-1"},{"name":"literal","value":"1"},{"name":"literal","value":"2"}]},"name":"toState"},{"type":{"name":"union","raw":"-2 | -1 | 1 | 2","elements":[{"name":"literal","value":"-2"},{"name":"literal","value":"-1"},{"name":"literal","value":"1"},{"name":"literal","value":"2"}]},"name":"fromState"}],"return":{"name":"void"}}}},"onEnter":{"type":{"name":"func"},"required":false,"description":"Callback fired before the \"entering\" classes are applied","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onEntering":{"type":{"name":"func"},"required":false,"description":"Callback fired after the \"entering\" classes are applied","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onEntered":{"type":{"name":"func"},"required":false,"description":"Callback fired after the \"enter\" classes are applied","tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| 'fade'\n| 'scale'\n| 'slide-down'\n| 'slide-up'\n| 'slide-left'\n| 'slide-right'","elements":[{"name":"literal","value":"'fade'"},{"name":"literal","value":"'scale'"},{"name":"literal","value":"'slide-down'"},{"name":"literal","value":"'slide-up'"},{"name":"literal","value":"'slide-left'"},{"name":"literal","value":"'slide-right'"}]},"name":"type"}],"return":{"name":"void"}}}},"onExit":{"type":{"name":"func"},"required":false,"description":"Callback fired before the \"exiting\" classes are applied","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onExiting":{"type":{"name":"func"},"required":false,"description":"Callback fired after the \"exiting\" classes are applied","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onExited":{"type":{"name":"func"},"required":false,"description":"Callback fired after the \"exited\" classes are applied","tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| 'fade'\n| 'scale'\n| 'slide-down'\n| 'slide-up'\n| 'slide-left'\n| 'slide-right'","elements":[{"name":"literal","value":"'fade'"},{"name":"literal","value":"'scale'"},{"name":"literal","value":"'slide-down'"},{"name":"literal","value":"'slide-up'"},{"name":"literal","value":"'slide-left'"},{"name":"literal","value":"'slide-right'"}]},"name":"type"}],"return":{"name":"void"}}}},"children":{"type":{"name":"node"},"required":false,"description":"A single element to animate in and out","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}}},"category":"components/utilities","relativePath":"packages/ui-motion/src/Transition/index.tsx","extension":".tsx","srcPath":"packages/ui-motion/src/Transition/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-motion/src/Transition/index.tsx","packageName":"@instructure/ui-motion","requirePath":"@instructure/ui-motion/lib/Transition/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-motion/src/Transition/index.tsx').default","esPath":"@instructure/ui-motion/es/Transition/index","themePath":"packages/ui-motion/src/Transition/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-motion/src/Transition/theme.ts","id":"Transition","title":"Transition"}