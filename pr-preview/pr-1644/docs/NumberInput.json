{"description":"\nA controlled number input field. Note that this field **does not work\nuncontrolled** - you must pass event handlers if you want it to respond to\nuser input.\n\nThis example handles arrow buttons, up/down arrow keys, and typing into\nthe input. It also includes an `onBlur` handler that displays an error message\nif the input is invalid or missing.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  MIN = 0\n  MAX = 999\n\n  state = {\n    disabled: false,\n    inline: false,\n    messages: null,\n    number: null,\n    readOnly: false,\n    showArrows: true,\n    value: ''\n  }\n\n  handleChange = (event, value) => this.setState({\n    messages: null,\n    number: value ? Number(value) : null,\n    value\n  })\n\n  handleDecrement = (event) => this.setState(({ number }) => {\n    if (isNaN(number)) return\n    if (number === null) return this.setNumber(this.MIN)\n    if (isInteger(number)) return this.setNumber(number - 1)\n    return this.setNumber(Math.floor(number))\n  })\n\n  handleIncrement = (event) => this.setState(({ number }) => {\n    if (isNaN(number)) return\n    if (number === null) return this.setNumber(this.MIN + 1)\n    if (isInteger(number)) return this.setNumber(number + 1)\n    return this.setNumber(Math.ceil(number))\n  })\n\n  handleBlur = (event) => this.setState(({ number, value }) => {\n    if (isNaN(number)) return this.invalidNumber(value)\n    if (number === null) return this.required()\n    return this.setNumber(Math.round(number))\n  })\n\n  setNumber (n) {\n    const number = this.bound(n)\n    return {\n      messages: null,\n      number,\n      value: number\n    }\n  }\n\n  bound (n) {\n    if (n < this.MIN) return this.MIN\n    if (n > this.MAX) return this.MAX\n    return n\n  }\n\n  invalidNumber (value) {\n    return {\n      messages: [{ text: `'${value}' is not a valid number.`, type: 'error' }]\n    }\n  }\n\n  required () {\n    return {\n      messages: [{ text: 'This is required.', type: 'error' }]\n    }\n  }\n\n  toggleDisabled = (event) => this.setState(({ disabled }) => ({ disabled: !disabled }))\n\n  toggleInline = (event) => this.setState(({ inline }) => ({ inline: !inline }))\n\n  toggleReadOnly = (event) => this.setState(({ readOnly }) => ({ readOnly: !readOnly }))\n\n  toggleShowArrows = (event) => this.setState(({ showArrows }) => ({ showArrows: !showArrows }))\n\n  render () {\n    return (\n      <FormFieldGroup description=\"Controlled NumberInput example\">\n        <Checkbox\n          checked={this.state.showArrows}\n          label=\"Show arrows\"\n          onChange={this.toggleShowArrows}\n        />\n        <Checkbox\n          checked={this.state.disabled}\n          label=\"Disabled\"\n          onChange={this.toggleDisabled}\n        />\n        <Checkbox\n          checked={this.state.readOnly}\n          label=\"Read only\"\n          onChange={this.toggleReadOnly}\n        />\n        <Checkbox\n          checked={this.state.inline}\n          label=\"Inline display\"\n          onChange={this.toggleInline}\n        />\n        <NumberInput\n          renderLabel={`How old are you? (${this.MIN}-${this.MAX})`}\n          display={this.state.inline ? 'inline-block' : null}\n          messages={this.state.messages}\n          onBlur={this.handleBlur}\n          onChange={this.handleChange}\n          onDecrement={this.handleDecrement}\n          onIncrement={this.handleIncrement}\n          placeholder=\"Age (in years)\"\n          interaction={this.state.disabled\n            ? 'disabled'\n            : this.state.readOnly ? 'readonly' : 'enabled'\n          }\n          isRequired\n          showArrows={this.state.showArrows}\n          value={this.state.value}\n        />\n      </FormFieldGroup>\n    )\n  }\n}\n\n// IE11 doesn't support Number.isInteger\nfunction isInteger (number) {\n  return Math.floor(number) === number\n}\n\nrender(<Example />)\n```\n\n> Note: `NumberInput` accepts a string or number as its `value`. However, the value returned by the `onChange` callback is always a string and should be converted to a number before attempting to augment it.\n\nNumberInput comes in 2 sizes. The default size is \"medium\".\n\n```js\n---\ntype: example\n---\n<div>\n  <NumberInput renderLabel=\"Default-size input\" /><br/>\n  <NumberInput size=\"large\" renderLabel=\"Large-size input\" />\n</div>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use when the input is limited to a number (integer, rational, or irrational expressed with decimal points)</Figure.Item>\n    <Figure.Item>Use labels at the top or to the left of the input field</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Place labels or text strings to the right of the input field</Figure.Item>\n    <Figure.Item>Use for alphanumeric input</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"NumberInput","methods":[],"props":{"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":true,"description":"The form field label.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"id":{"type":{"name":"string"},"required":false,"description":"The id of the input. One is generated if not supplied.","tsType":{"name":"string"}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled.","tsType":{"name":"InteractionType"},"defaultValue":{"value":"undefined","computed":true}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"defaultValue":{"value":"[]","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Html placeholder text to display when the input has no value. This\nshould be hint text, not a label replacement.","tsType":{"name":"string"}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"Whether or not the text input is required.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"showArrows":{"type":{"name":"bool"},"required":false,"description":"Whether or not to display the up/down arrow buttons.","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the input.","tsType":{"name":"union","raw":"'medium' | 'large'","elements":[{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"The value of the input (should be accompanied by an `onChange` prop).","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"width":{"type":{"name":"string"},"required":false,"description":"The width of the input.","tsType":{"name":"string"}},"display":{"type":{"name":"enum","value":[{"value":"'inline-block'","computed":false},{"value":"'block'","computed":false}]},"required":false,"description":"The display of the root element.","tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"defaultValue":{"value":"'block'","computed":false}},"inputRef":{"type":{"name":"func"},"required":false,"description":"A function that provides a reference to the actual input element.","tsType":{"name":"signature","type":"function","raw":"(element: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"onFocus":{"type":{"name":"func"},"required":false,"description":"Callback fired when input receives focus.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Callback fired when the input loses focus.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a change event.\n@param {Object} event - the event object\n@param {string} value - the string value of the input","tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent<HTMLInputElement>, value: string) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"},{"type":{"name":"string"},"name":"value"}],"return":{"name":"void"}}}},"onDecrement":{"type":{"name":"func"},"required":false,"description":"Called when the down arrow button is clicked, or the down arrow key is\npressed.","tsType":{"name":"signature","type":"function","raw":"(\n  event:\n    | React.KeyboardEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLButtonElement>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| React.KeyboardEvent<HTMLInputElement>\n| React.MouseEvent<HTMLButtonElement>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLButtonElement>","elements":[{"name":"HTMLButtonElement"}]}]},"name":"event"}],"return":{"name":"void"}}}},"onIncrement":{"type":{"name":"func"},"required":false,"description":"Called when the up arrow button is clicked, or the up arrow key is\npressed.","tsType":{"name":"signature","type":"function","raw":"(\n  event:\n    | React.KeyboardEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLButtonElement>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| React.KeyboardEvent<HTMLInputElement>\n| React.MouseEvent<HTMLButtonElement>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLButtonElement>","elements":[{"name":"HTMLButtonElement"}]}]},"name":"event"}],"return":{"name":"void"}}}},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"Callback fired when a key is pressed.","tsType":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"inputMode":{"type":{"name":"enum","value":[{"value":"'numeric'","computed":false},{"value":"'decimal'","computed":false},{"value":"'tel'","computed":false}]},"required":false,"description":"The inputMode attribute of the underlying `input` element can be one of ['numeric', 'decimal', 'tel']","tsType":{"name":"union","raw":"'numeric' | 'decimal' | 'tel'","elements":[{"name":"literal","value":"'numeric'"},{"name":"literal","value":"'decimal'"},{"name":"literal","value":"'tel'"}]},"defaultValue":{"value":"'numeric'","computed":false}},"textAlign":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'center'","computed":false}]},"required":false,"description":"The text alignment of the input.","tsType":{"name":"union","raw":"'start' | 'center'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"}]},"defaultValue":{"value":"'start'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","id":"NumberInput","relativePath":"packages/ui-number-input/src/NumberInput/index.tsx","extension":".tsx","srcPath":"packages/ui-number-input/src/NumberInput/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-number-input/src/NumberInput/index.tsx","packageName":"@instructure/ui-number-input","requirePath":"@instructure/ui-number-input/lib/NumberInput/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-number-input/src/NumberInput/index.tsx').default","esPath":"@instructure/ui-number-input/es/NumberInput/index","themePath":"packages/ui-number-input/src/NumberInput/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-number-input/src/NumberInput/theme.ts","title":"NumberInput"}