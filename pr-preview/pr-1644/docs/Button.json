{"description":"\nButton allows users to perform actions or trigger changes. If selecting the Button causes the user to navigate to a different location, consider using the [Link](#Link) component instead.\n\n```js\n---\ntype: example\n---\n<Button>Hello Instructure</Button>\n```\n\n### Color\n\nThe `color` prop will change the Button's color scheme.\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <Button color=\"primary\" margin=\"small\">Primary</Button>\n  <Button color=\"secondary\" margin=\"small\">Secondary</Button>\n  <Button color=\"success\" margin=\"small\">Success</Button>\n  <Button color=\"danger\" margin=\"small\">Danger</Button>\n  <Button color=\"primary-inverse\" margin=\"small\">Primary Inverse</Button>\n</View>\n```\n\n### Size\n\nTo specify the Button `size`, set the size prop to `small`, `medium` (default) or `large`.\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <Button size=\"small\" margin=\"small\">Small</Button>\n  <Button margin=\"small\">Medium</Button>\n  <Button size=\"large\" margin=\"small\">Large</Button>\n</View>\n```\n\n### Rendering icons in Buttons\n\nAn icon can be rendered alongside the Button content using the `renderIcon` prop. Use [IconButton](#IconButton) instead if your Button only displays an Icon with no other visual content.\n\n```js\n---\ntype: example\n---\n<Button renderIcon={IconAddLine}>Add Item</Button>\n```\n\n### Text wrapping\n\nJust like native HTML buttons, the Button text will wrap to the next line when it does not have enough room.\n\n```js\n---\ntype: example\n---\n<View\n  display=\"block\"\n  width=\"10rem\"\n  margin=\"small\"\n  padding=\"small none\"\n  withVisualDebug\n>\n  <Button color=\"primary\">\n    A Button With a Whole Lot of Text\n  </Button>\n</View>\n```\n\nIf you need to prevent text wrapping, you can use the [TruncateText](#TruncateText) util. You can also conditionally render a [Tooltip](#Tooltip) with the full text when truncation occurs.\n\n- ```js\n  class Example extends React.Component {\n    state = {\n      isTruncated: false\n    }\n\n    handleUpdate = (isTruncated) => {\n      if (this.state.isTruncated !== isTruncated) {\n        this.setState({ isTruncated })\n      }\n    }\n\n    renderButton() {\n      return (\n        <Button color=\"primary\">\n          <TruncateText onUpdate={this.handleUpdate}>\n            {this.props.message}\n          </TruncateText>\n        </Button>\n      )\n    }\n\n    render() {\n      return (\n        <View\n          display=\"block\"\n          width=\"10rem\"\n          margin=\"small\"\n          padding=\"small none\"\n          withVisualDebug\n        >\n          {this.state.isTruncated ? (\n            <Tooltip\n              renderTip={this.props.message}\n              mountNode={() => document.getElementById('main')}\n            >\n              {this.renderButton()}\n            </Tooltip>\n          ) : (\n            this.renderButton()\n          )}\n        </View>\n      )\n    }\n  }\n\n  render(<Example message=\"A Button With a Whole Lot of Text\" />)\n  ```\n\n- ```js\n  const Example = ({ message }) => {\n    const [isTruncated, setIsTruncated] = useState(false)\n\n    const handleUpdate = (shouldBeTruncated) => {\n      if (isTruncated !== shouldBeTruncated) {\n        setIsTruncated(shouldBeTruncated)\n      }\n    }\n\n    const renderButton = () => {\n      return (\n        <Button color=\"primary\">\n          <TruncateText onUpdate={handleUpdate}>{message}</TruncateText>\n        </Button>\n      )\n    }\n\n    return (\n      <View\n        display=\"block\"\n        width=\"10rem\"\n        margin=\"small\"\n        padding=\"small none\"\n        withVisualDebug\n      >\n        {isTruncated ? (\n          <Tooltip\n            renderTip={message}\n            mountNode={() => document.getElementById('main')}\n          >\n            {renderButton()}\n          </Tooltip>\n        ) : (\n          renderButton()\n        )}\n      </View>\n    )\n  }\n\n  render(<Example message=\"A Button With a Whole Lot of Text\" />)\n  ```\n\n### Display\n\nBy default, the Button displays inline with other elements. If you need it to expand to fill the width of it's container, set the `display` prop to `block`.\n\n```js\n---\ntype: example\n---\n<View\n  display=\"block\"\n  width=\"30rem\"\n  margin=\"small\"\n  padding=\"small none\"\n  withVisualDebug\n>\n  <Button\n    renderIcon={IconUserLine}\n    display=\"block\"\n    textAlign=\"center\"\n    color=\"success\"\n  >\n    User Details\n  </Button>\n</View>\n```\n\n### Rendering Buttons without backgrounds\n\nUse backgroundless buttons for interfaces on dark backgrounds or when there is a need to deemphasize the button from another primary action on the page. Be sure to use border/text colors that meet the proper contrast ratios with whatever background they are placed on.\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <View display=\"inline-block\" background=\"primary\">\n    <Button renderIcon={IconAddLine} withBackground={false} color=\"primary\" margin=\"small\">Click here</Button>\n  </View>\n  <View display=\"inline-block\" background=\"primary-inverse\">\n    <Button renderIcon={IconAddLine} withBackground={false} color=\"primary-inverse\" margin=\"small\">Click here</Button>\n  </View>\n</View>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use 'Title Case' for button text</Figure.Item>\n    <Figure.Item>Use buttons with color set to <code>primary</code> only once for each section of content</Figure.Item>\n    <Figure.Item>Use buttons with color set to <code>primary</code> when the task of the view requires an action to be taken</Figure.Item>\n    <Figure.Item>Use the <code>success</code> and <code>danger</code> colors for grading activities</Figure.Item>\n    <Figure.Item>Use the <code>danger</code> color to warn the user of potentially destructive actions</Figure.Item>\n    <Figure.Item>Use a button with color set to <code>secondary</code> as a secondary or tertiary option for actions such as Cancel</Figure.Item>\n    <Figure.Item>The <code>primary-inverse</code> color can be used as a secondary option instead of the <code>secondary</code> color when the background would otherwise match the <code>secondary</code> button color (example: ModalFooter). Set the focusColor to `info` as well with this configuration.</Figure.Item>\n    <Figure.Item>The maximum string length of any button, including spaces, should be 20 characters</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Use more than one button with color set to <code>primary</code> per section of content\n</Figure.Item>\n    <Figure.Item>Use buttons without backgrounds excessively</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>When using buttons on a dark background, use the <code>primary-inverse</code> color to ensure adequate contrast</Figure.Item>\n    <Figure.Item>Buttons are activated with both Enter and Spacebar keys, and either key press will fire an `onClick` event</Figure.Item>\n    <Figure.Item>Disabled buttons do not need to meet color contrast ratio requirements or receive keyboard focus but will be read as \"disabled\" or \"dimmed\" by screen readers</Figure.Item>\n    <Figure.Item>Icon only buttons must have ScreenReaderContent added so screen readers indicate what the button is used for</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Button","methods":[],"props":{"children":{"type":{"name":"node"},"required":false,"description":"Specifies the `Button` children.","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"type":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'submit'","computed":false},{"value":"'reset'","computed":false}]},"required":false,"description":"Specifies the type of the `Button`'s underlying html element.","tsType":{"name":"union","raw":"'button' | 'submit' | 'reset'","elements":[{"name":"literal","value":"'button'"},{"name":"literal","value":"'submit'"},{"name":"literal","value":"'reset'"}]},"defaultValue":{"value":"'button'","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the `Button`","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the `Button`'s underlying html element.","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render as the component root, `Button` by default.","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'button'","computed":false}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the `Button` is enabled, disabled, or readonly.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"defaultValue":{"value":"undefined","computed":true}},"color":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'primary-inverse'","computed":false},{"value":"'secondary'","computed":false},{"value":"'success'","computed":false},{"value":"'danger'","computed":false}]},"required":false,"description":"Specifies the color for the `Button`.","tsType":{"name":"union","raw":"'primary' | 'primary-inverse' | 'secondary' | 'success' | 'danger'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'danger'"}]},"defaultValue":{"value":"'secondary'","computed":false}},"focusColor":{"type":{"name":"enum","value":[{"value":"'info'","computed":false},{"value":"'inverse'","computed":false}]},"required":false,"description":"Override the `Button`'s default focus outline color.","tsType":{"name":"union","raw":"'info' | 'inverse'","elements":[{"name":"literal","value":"'info'"},{"name":"literal","value":"'inverse'"}]}},"display":{"type":{"name":"enum","value":[{"value":"'inline-block'","computed":false},{"value":"'block'","computed":false}]},"required":false,"description":"The `Button` display property. When set to `inline-block`, the `Button` displays inline with other elements.\nWhen set to block, the `Button` expands to fill the width of the container.","tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"defaultValue":{"value":"'inline-block'","computed":false}},"textAlign":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'center'","computed":false}]},"required":false,"description":"Sets the alignment of the `Button` children and/or icon.","tsType":{"name":"union","raw":"'start' | 'center'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"}]},"defaultValue":{"value":"'center'","computed":false}},"withBackground":{"type":{"name":"bool"},"required":false,"description":"Specifies if the `Button` should render with a solid background. When false, the background is transparent.","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"},"defaultValue":{"value":"'0'","computed":false}},"cursor":{"type":{"name":"string"},"required":false,"description":"Specify a mouse cursor to use when hovering over the button.\nThe `pointer` cursor is used by default.","tsType":{"name":"Cursor"},"defaultValue":{"value":"'pointer'","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":"Specifies an href attribute for the `Button`'s underlying html element.","tsType":{"name":"string"}},"renderIcon":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"An icon, or function that returns an icon.","tsType":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}]}},"onClick":{"type":{"name":"func"},"required":false,"description":"Callback fired when the `Button` is clicked.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""},"to":{"required":false,"tsType":{"name":"string"},"description":"Needed for React Router links\n@private"}},"category":"components","relativePath":"packages/ui-buttons/src/Button/index.tsx","extension":".tsx","srcPath":"packages/ui-buttons/src/Button/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/Button/index.tsx","packageName":"@instructure/ui-buttons","requirePath":"@instructure/ui-buttons/lib/Button/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-buttons/src/Button/index.tsx').default","esPath":"@instructure/ui-buttons/es/Button/index","themePath":"packages/ui-buttons/src/Button/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/Button/theme.ts","id":"Button","title":"Button"}