{"description":"\n`Options` is a view-only component for creating option lists and menus, like those used in [Select](#Select) and [Menu](#Menu). It should only be used if an existing component doesn't offer the level of customization needed.\n\nThe `variant` prop of `Option.Item` provides several visual treatments. Use the `highlighted` variant to indicate that an option is being hovered, focused, or otherwise interacted with and the `selected` variant to indicate the selected option.\n\n```js\n---\ntype: example\n---\n<View display=\"block\" width=\"300px\">\n  <Options>\n    <Options.Item onClick={() => console.log('clicked!')}>\n      Default option\n    </Options.Item>\n    <Options.Item variant=\"highlighted\">\n      Highlighted option\n    </Options.Item>\n    <Options.Item variant=\"selected\">\n      Selected option\n    </Options.Item>\n    <Options.Item variant=\"disabled\">\n      Disabled option\n    </Options.Item>\n    <Options.Item variant=\"highlighted-disabled\">\n      Highlighted disabled option\n    </Options.Item>\n  </Options>\n</View>\n```\n\n`Options` components can be nested to create sub menus. Icons may be added to any `Options.Item` before or after its text content using `renderBeforeLabel` and `renderAfterLabel` respectively.\n\n> `Options` and `Options.Item` receive default roles of `list` and `listitem` respectively, but the most applicable roles should be used. These will commonly be `listbox`/`option` or `menu`/`menuitem`.\n\n```js\n---\ntype: example\n---\n<View display=\"block\" width=\"300px\">\n  <Options role=\"menu\" as=\"ul\">\n    <Options.Item role=\"menuitem\">\n      Option one\n    </Options.Item>\n    <Options.Item role=\"menuitem\" variant=\"highlighted\">\n      Option two\n    </Options.Item>\n    <Options.Item role=\"menuitem\" renderAfterLabel={IconArrowOpenEndSolid}>\n      Flyout menu option\n    </Options.Item>\n    <Options.Separator as=\"li\" />\n    <Options role=\"menu\" as=\"ul\" renderLabel={'Sub menu'}>\n      <Options.Item role=\"menuitem\">\n        Sub option one\n      </Options.Item>\n      <Options.Item role=\"menuitem\">\n        Sub option two\n      </Options.Item>\n    </Options>\n    <Options.Separator />\n    <Options role=\"menu\" as=\"ul\" renderLabel={'Radio group'}>\n      <Options.Item\n        role=\"menuitemradio\"\n        aria-checked=\"true\"\n        renderBeforeLabel={IconCheckSolid}\n      >\n        Radio option one\n      </Options.Item>\n      <Options.Item\n        role=\"menuitemradio\"\n        aria-checked=\"false\"\n        renderBeforeLabel={\n          <IconCheckLine style={{opacity: 0}} />\n        }\n      >\n        Radio option two\n      </Options.Item>\n    </Options>\n    <Options.Separator />\n    <Options.Item role=\"menuitem\">\n      Option three\n    </Options.Item>\n  </Options>\n</View>\n```\n\n`Options` does not manage any state or react to any user interaction. The consuming component or app should listen for events on items and update the `variant` props accordingly via its own state.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        highlighted: -1,\n        selected: -1\n      }\n    }\n\n    handleKeyDown = (event) => {\n      const { highlighted } = this.state\n      let index = highlighted\n\n      if (event.keyCode === 40 && highlighted < this.props.options.length - 1) {\n        // down arrow\n        event.preventDefault()\n        index = highlighted + 1\n      } else if (event.keyCode === 38 && highlighted > 0) {\n        // up arrow\n        event.preventDefault()\n        index = highlighted - 1\n      } else if (event.keyCode === 13 && highlighted > -1) {\n        // enter\n        this.setState({ selected: index })\n      }\n      this.setState({ highlighted: index })\n    }\n\n    handleFocus = (event, index) => {\n      this.setState({ highlighted: index })\n    }\n\n    handleMouseOver = (event, index) => {\n      this.setState({ highlighted: index })\n    }\n\n    handleClick = (event, index) => {\n      this.setState({ selected: index })\n    }\n\n    render() {\n      return (\n        <View display=\"block\" width=\"300px\" shadow=\"above\">\n          <Options\n            onKeyDown={this.handleKeyDown}\n            onMouseOut={(e) => this.setState({ highlighted: -1 })}\n            tabIndex=\"0\"\n          >\n            {this.props.options.map((option, index) => {\n              let variant = 'default'\n              if (this.state.highlighted === index) {\n                variant = 'highlighted'\n              } else if (this.state.selected === index) {\n                variant = 'selected'\n              }\n              return (\n                <Options.Item\n                  key={option}\n                  variant={variant}\n                  tabIndex=\"-1\"\n                  onMouseOver={(e) => this.handleMouseOver(e, index)}\n                  onFocus={(e) => this.handleFocus(e, index)}\n                  onClick={(e) => this.handleClick(e, index)}\n                >\n                  {option}\n                </Options.Item>\n              )\n            })}\n          </Options>\n        </View>\n      )\n    }\n  }\n\n  render(\n    <Example\n      options={[\n        'Option one',\n        'Option two',\n        'Option three',\n        'Option four',\n        'Option five'\n      ]}\n    />\n  )\n  ```\n\n- ```js\n  const Example = ({ options }) => {\n    const [highlighted, setHighlighted] = useState(-1)\n    const [selected, setSelected] = useState(-1)\n\n    const handleKeyDown = (event) => {\n      let index = highlighted\n\n      if (event.keyCode === 40 && highlighted < options.length - 1) {\n        // down arrow\n        event.preventDefault()\n        index = highlighted + 1\n      } else if (event.keyCode === 38 && highlighted > 0) {\n        // up arrow\n        event.preventDefault()\n        index = highlighted - 1\n      } else if (event.keyCode === 13 && highlighted > -1) {\n        // enter\n        setSelected(index)\n      }\n\n      setHighlighted(index)\n    }\n\n    const handleFocus = (index) => {\n      setHighlighted(index)\n    }\n\n    const handleMouseOver = (index) => {\n      setHighlighted(index)\n    }\n\n    const handleClick = (index) => {\n      setSelected(index)\n    }\n\n    return (\n      <View display=\"block\" width=\"300px\" shadow=\"above\">\n        <Options\n          onKeyDown={handleKeyDown}\n          onMouseOut={() => setHighlighted(-1)}\n          tabIndex=\"0\"\n        >\n          {options.map((option, index) => {\n            let variant = 'default'\n            if (highlighted === index) {\n              variant = 'highlighted'\n            } else if (selected === index) {\n              variant = 'selected'\n            }\n\n            return (\n              <Options.Item\n                key={option}\n                variant={variant}\n                tabIndex=\"-1\"\n                onMouseOver={(e) => handleMouseOver(index)}\n                onFocus={() => handleFocus(index)}\n                onClick={() => handleClick(index)}\n              >\n                {option}\n              </Options.Item>\n            )\n          })}\n        </Options>\n      </View>\n    )\n  }\n\n  render(\n    <Example\n      options={[\n        'Option one',\n        'Option two',\n        'Option three',\n        'Option four',\n        'Option five'\n      ]}\n    />\n  )\n  ```\n\nYou can recolor the text and the background of the items for their `default`, `highlighted` and `selected` variants.\n\nBy default, the icons in the `Option.Item` have the same color as the text. If you want to set the color of the icon separately, pass a function to the `renderBeforeLabel` or `renderAfterLabel` prop. This function will have a `props` parameter, so you can access the properties of that `Option.Item` (e.g. the current `variant`). The available props are: `[ variant, as, role, children ]`.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        highlighted: -1,\n        selected: -1\n      }\n    }\n\n    handleKeyDown = (event) => {\n      const { highlighted } = this.state\n      let index = highlighted\n\n      if (event.keyCode === 40 && highlighted < this.props.options.length - 1) {\n        // down arrow\n        event.preventDefault()\n        index = highlighted + 1\n      } else if (event.keyCode === 38 && highlighted > 0) {\n        // up arrow\n        event.preventDefault()\n        index = highlighted - 1\n      } else if (event.keyCode === 13 && highlighted > -1) {\n        // enter\n        this.setState({ selected: index })\n      }\n      this.setState({ highlighted: index })\n    }\n\n    handleFocus = (event, index) => {\n      this.setState({ highlighted: index })\n    }\n\n    handleMouseOver = (event, index) => {\n      this.setState({ highlighted: index })\n    }\n\n    handleClick = (event, index) => {\n      this.setState({ selected: index })\n    }\n\n    render() {\n      return (\n        <View display=\"block\" width=\"300px\" shadow=\"above\">\n          <Options\n            onKeyDown={this.handleKeyDown}\n            onMouseOut={(e) => this.setState({ highlighted: -1 })}\n            tabIndex=\"0\"\n          >\n            {this.props.options.map((option, index) => {\n              let variant = 'default'\n              if (this.state.highlighted === index) {\n                variant = 'highlighted'\n              } else if (this.state.selected === index) {\n                variant = 'selected'\n              }\n              return (\n                <Options.Item\n                  key={option.label}\n                  variant={variant}\n                  tabIndex=\"-1\"\n                  onMouseOver={(e) => this.handleMouseOver(e, index)}\n                  onFocus={(e) => this.handleFocus(e, index)}\n                  onClick={(e) => this.handleClick(e, index)}\n                  {...option.extraProps}\n                >\n                  {option.label}\n                </Options.Item>\n              )\n            })}\n          </Options>\n        </View>\n      )\n    }\n  }\n\n  render(\n    <Example\n      options={[\n        {\n          label: 'Default item',\n          extraProps: {\n            renderBeforeLabel: IconCheckSolid\n          }\n        },\n        {\n          label: 'Text is green',\n          extraProps: {\n            renderBeforeLabel: IconCheckSolid,\n            themeOverride: { color: '#0B874B' }\n          }\n        },\n        {\n          label: 'Highlighted text is black',\n          extraProps: {\n            renderBeforeLabel: IconCheckSolid,\n            themeOverride: { highlightedLabelColor: '#2D3B45' }\n          }\n        },\n        {\n          label: 'Highlighted background is purple',\n          extraProps: {\n            renderBeforeLabel: IconCheckSolid,\n            themeOverride: { highlightedBackground: '#BF32A4' }\n          }\n        },\n        {\n          label: 'Only the icon is red',\n          extraProps: {\n            renderBeforeLabel: (props) => {\n              return (\n                <IconCheckSolid\n                  {...(props.variant === 'default' && { color: 'warning' })}\n                />\n              )\n            }\n          }\n        }\n      ]}\n    />\n  )\n  ```\n\n- ```js\n  const Example = ({ options }) => {\n    const [highlighted, setHighlighted] = useState(-1)\n    const [selected, setSelected] = useState(-1)\n\n    const handleKeyDown = (event) => {\n      let index = highlighted\n\n      if (event.keyCode === 40 && highlighted < options.length - 1) {\n        // down arrow\n        event.preventDefault()\n        index = highlighted + 1\n      } else if (event.keyCode === 38 && highlighted > 0) {\n        // up arrow\n        event.preventDefault()\n        index = highlighted - 1\n      } else if (event.keyCode === 13 && highlighted > -1) {\n        // enter\n        setSelected(index)\n      }\n\n      setHighlighted(index)\n    }\n\n    const handleFocus = (event, index) => {\n      setHighlighted(index)\n    }\n\n    const handleMouseOver = (event, index) => {\n      setHighlighted(index)\n    }\n\n    const handleClick = (event, index) => {\n      setSelected(index)\n    }\n\n    return (\n      <View display=\"block\" width=\"300px\" shadow=\"above\">\n        <Options\n          onKeyDown={handleKeyDown}\n          onMouseOut={() => setHighlighted(-1)}\n          tabIndex=\"0\"\n        >\n          {options.map((option, index) => {\n            let variant = 'default'\n            if (highlighted === index) {\n              variant = 'highlighted'\n            } else if (selected === index) {\n              variant = 'selected'\n            }\n\n            return (\n              <Options.Item\n                key={option.label}\n                variant={variant}\n                tabIndex=\"-1\"\n                onMouseOver={(e) => handleMouseOver(e, index)}\n                onFocus={(e) => handleFocus(e, index)}\n                onClick={(e) => handleClick(e, index)}\n                {...option.extraProps}\n              >\n                {option.label}\n              </Options.Item>\n            )\n          })}\n        </Options>\n      </View>\n    )\n  }\n\n  render(\n    <Example\n      options={[\n        {\n          label: 'Default item',\n          extraProps: {\n            renderBeforeLabel: IconCheckSolid\n          }\n        },\n        {\n          label: 'Text is green',\n          extraProps: {\n            renderBeforeLabel: IconCheckSolid,\n            themeOverride: { color: '#0B874B' }\n          }\n        },\n        {\n          label: 'Highlighted text is black',\n          extraProps: {\n            renderBeforeLabel: IconCheckSolid,\n            themeOverride: { highlightedLabelColor: '#2D3B45' }\n          }\n        },\n        {\n          label: 'Highlighted background is purple',\n          extraProps: {\n            renderBeforeLabel: IconCheckSolid,\n            themeOverride: { highlightedBackground: '#BF32A4' }\n          }\n        },\n        {\n          label: 'Only the icon is red',\n          extraProps: {\n            renderBeforeLabel: (props) => {\n              return (\n                <IconCheckSolid\n                  {...(props.variant === 'default' && { color: 'warning' })}\n                />\n              )\n            }\n          }\n        }\n      ]}\n    />\n  )\n  ```\n\nAdditional/secondary text can be added via the `description` prop, and the ARIA role of it can be set with the `descriptionRole` prop.\n\nFor longer, multi-line options the problem of the vertical alignment comes up. The content of the `renderBeforeLabel` and `renderAfterLabel` props are vertically centered by default. This can be changed with the `beforeLabelContentVAlign` and `afterLabelContentVAlign` props.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        highlighted: -1\n      }\n    }\n\n    handleMouseOver = (index) => {\n      this.setState({ highlighted: index })\n    }\n\n    render() {\n      return (\n        <View display=\"block\" width=\"300px\">\n          <Options onMouseOut={(e) => this.setState({ highlighted: -1 })}>\n            <Options.Item\n              onMouseOver={(e) => this.handleMouseOver(1)}\n              variant={this.state.highlighted === 1 ? 'highlighted' : 'default'}\n              description=\"Curabitur fringilla, urna ut efficitur molestie, nibh lacus tincidunt elit, ut tempor ipsum nunc sit amet massa.\"\n              renderBeforeLabel={IconCheckSolid}\n              renderAfterLabel={IconArrowOpenEndSolid}\n              beforeLabelContentVAlign=\"start\"\n              afterLabelContentVAlign=\"start\"\n            >\n              Option one\n            </Options.Item>\n            <Options.Item\n              onMouseOver={(e) => this.handleMouseOver(2)}\n              variant={this.state.highlighted === 2 ? 'highlighted' : 'default'}\n              description=\"Curabitur fringilla, urna ut efficitur molestie, nibh lacus tincidunt elit, ut tempor ipsum nunc sit amet massa.\"\n              renderBeforeLabel={IconCheckSolid}\n              renderAfterLabel={IconArrowOpenEndSolid}\n              beforeLabelContentVAlign=\"center\"\n              afterLabelContentVAlign=\"center\"\n            >\n              Option two\n            </Options.Item>\n            <Options.Item\n              onMouseOver={(e) => this.handleMouseOver(3)}\n              variant={this.state.highlighted === 3 ? 'highlighted' : 'default'}\n              description=\"Curabitur fringilla, urna ut efficitur molestie, nibh lacus tincidunt elit, ut tempor ipsum nunc sit amet massa.\"\n              renderBeforeLabel={IconCheckSolid}\n              renderAfterLabel={IconArrowOpenEndSolid}\n              beforeLabelContentVAlign=\"end\"\n              afterLabelContentVAlign=\"end\"\n            >\n              Option three\n            </Options.Item>\n          </Options>\n        </View>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [highlighted, setHighlighted] = useState(-1)\n\n    const handleMouseOver = (index) => {\n      setHighlighted(index)\n    }\n\n    return (\n      <View display=\"block\" width=\"300px\">\n        <Options onMouseOut={() => setHighlighted(-1)}>\n          <Options.Item\n            onMouseOver={() => handleMouseOver(1)}\n            variant={highlighted === 1 ? 'highlighted' : 'default'}\n            description=\"Curabitur fringilla, urna ut efficitur molestie, nibh lacus tincidunt elit, ut tempor ipsum nunc sit amet massa.\"\n            renderBeforeLabel={IconCheckSolid}\n            renderAfterLabel={IconArrowOpenEndSolid}\n            beforeLabelContentVAlign=\"start\"\n            afterLabelContentVAlign=\"start\"\n          >\n            Option one\n          </Options.Item>\n          <Options.Item\n            onMouseOver={() => handleMouseOver(2)}\n            variant={highlighted === 2 ? 'highlighted' : 'default'}\n            description=\"Curabitur fringilla, urna ut efficitur molestie, nibh lacus tincidunt elit, ut tempor ipsum nunc sit amet massa.\"\n            renderBeforeLabel={IconCheckSolid}\n            renderAfterLabel={IconArrowOpenEndSolid}\n            beforeLabelContentVAlign=\"center\"\n            afterLabelContentVAlign=\"center\"\n          >\n            Option two\n          </Options.Item>\n          <Options.Item\n            onMouseOver={() => handleMouseOver(3)}\n            variant={highlighted === 3 ? 'highlighted' : 'default'}\n            description=\"Curabitur fringilla, urna ut efficitur molestie, nibh lacus tincidunt elit, ut tempor ipsum nunc sit amet massa.\"\n            renderBeforeLabel={IconCheckSolid}\n            renderAfterLabel={IconArrowOpenEndSolid}\n            beforeLabelContentVAlign=\"end\"\n            afterLabelContentVAlign=\"end\"\n          >\n            Option three\n          </Options.Item>\n        </Options>\n      </View>\n    )\n  }\n\n  render(<Example />)\n  ```\n\nProviding a `href` prop will render the option as `<a>` link element.\n\n**WARNING!** Since `Options` is a view-only component, you have to make sure it is accessible, and if set the variant to disabled, disable the links as well!\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        highlighted: -1\n      }\n    }\n\n    handleMouseOver = (index) => {\n      this.setState({ highlighted: index })\n    }\n\n    render() {\n      return (\n        <View display=\"block\" width=\"300px\">\n          <Options onMouseOut={(e) => this.setState({ highlighted: -1 })}>\n            <Options.Item\n              onMouseOver={(e) => this.handleMouseOver(1)}\n              variant={this.state.highlighted === 1 ? 'highlighted' : 'default'}\n              href=\"/\"\n            >\n              Link one\n            </Options.Item>\n            <Options.Item\n              onMouseOver={(e) => this.handleMouseOver(2)}\n              variant={this.state.highlighted === 2 ? 'highlighted' : 'default'}\n              href=\"/\"\n            >\n              Link two\n            </Options.Item>\n            <Options.Item\n              onMouseOver={(e) => this.handleMouseOver(3)}\n              variant={this.state.highlighted === 3 ? 'highlighted' : 'default'}\n              variant=\"disabled\"\n              aria-disabled=\"true\"\n              onClick={(e) => {\n                e.preventDefault()\n              }}\n              href=\"/\"\n            >\n              Link three\n            </Options.Item>\n          </Options>\n        </View>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [highlighted, setHighlighted] = useState(-1)\n\n    const handleMouseOver = (index) => {\n      setHighlighted(index)\n    }\n\n    return (\n      <View display=\"block\" width=\"300px\">\n        <Options onMouseOut={() => setHighlighted(-1)}>\n          <Options.Item\n            onMouseOver={() => handleMouseOver(1)}\n            variant={highlighted === 1 ? 'highlighted' : 'default'}\n            href=\"/\"\n          >\n            Link one\n          </Options.Item>\n          <Options.Item\n            onMouseOver={() => handleMouseOver(2)}\n            variant={highlighted === 2 ? 'highlighted' : 'default'}\n            href=\"/\"\n          >\n            Link two\n          </Options.Item>\n          <Options.Item\n            onMouseOver={() => handleMouseOver(3)}\n            variant={highlighted === 3 ? 'highlighted' : 'default'}\n            variant=\"disabled\"\n            aria-disabled=\"true\"\n            onClick={(e) => {\n              e.preventDefault()\n            }}\n            href=\"/\"\n          >\n            Link three\n          </Options.Item>\n        </Options>\n      </View>\n    )\n  }\n\n  render(<Example />)\n  ```\n","displayName":"Options","methods":[],"props":{"as":{"type":{"name":"elementType"},"required":false,"description":"Element type to render as","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'span'","computed":false}},"role":{"type":{"name":"string"},"required":false,"description":"The aria role of the element","tsType":{"name":"string"},"defaultValue":{"value":"'list'","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"The the actual list element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"defaultValue":{"value":"() => {}","computed":false}},"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to render as a label. Mostly for when the component is nested","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"defaultValue":{"value":"null","computed":false}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf(['Options', 'Item', 'Separator'])"},"required":false,"description":"","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"defaultValue":{"value":"null","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-options/src/Options/index.tsx","extension":".tsx","srcPath":"packages/ui-options/src/Options/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-options/src/Options/index.tsx","packageName":"@instructure/ui-options","requirePath":"@instructure/ui-options/lib/Options/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-options/src/Options/index.tsx').default","esPath":"@instructure/ui-options/es/Options/index","themePath":"packages/ui-options/src/Options/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-options/src/Options/theme.ts","id":"Options","title":"Options"}