{"description":"\n`AppNav` is a navigation component currently intended for use within LTI apps. AppNav\ncan be configured to adapt to small screen widths by truncating nav items that\ndon't fit within the available space.\n\nThe `onUpdate` function prop returns the number of visible nav items, while the\n`renderTruncateLabel` function prop allows you to customize the trigger for the Menu\nthat contains the truncated items. The example below shows how you can use both of\nthese props to create a hamburger menu when the number of visible nav items is less\nthan two.\n\n- ```js\n  const totalItemsCount = 5\n\n  class AppNavExample extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        visibleItemsCount: totalItemsCount\n      }\n    }\n\n    handleUpdate = ({ visibleItemsCount }) => {\n      this.setState({ visibleItemsCount })\n    }\n\n    render() {\n      const visibleItemsCount = this.state.visibleItemsCount\n\n      return (\n        <AppNav\n          screenReaderLabel=\"App navigation\"\n          visibleItemsCount={visibleItemsCount >= 2 ? visibleItemsCount : 0}\n          onUpdate={this.handleUpdate}\n          renderBeforeItems={\n            <AppNav.Item\n              renderLabel={\n                <ScreenReaderContent>Instructure</ScreenReaderContent>\n              }\n              renderIcon={\n                <IconCommonsLine inline={false} size=\"medium\" color=\"primary\" />\n              }\n              href=\"http://instructure.com\"\n            />\n          }\n          renderAfterItems={\n            <IconButton\n              onClick={() => console.log('Add')}\n              renderIcon={IconPlusSolid}\n              margin=\"0 0 0 x-small\"\n              screenReaderLabel=\"Add something\"\n              withBorder={false}\n              withBackground={false}\n            />\n          }\n          renderTruncateLabel={function () {\n            const hiddenItemsCount = totalItemsCount - visibleItemsCount\n            if (visibleItemsCount >= 2) {\n              return `${hiddenItemsCount} More`\n            } else {\n              return (\n                <span>\n                  <IconHamburgerLine size=\"small\" inline={false} />\n                  <ScreenReaderContent>{`${hiddenItemsCount} More`}</ScreenReaderContent>\n                </span>\n              )\n            }\n          }}\n        >\n          <AppNav.Item\n            renderLabel=\"instructure-ui\"\n            href=\"http://instructure.design\"\n            renderAfter={\n              <Badge\n                type=\"notification\"\n                variant=\"success\"\n                standalone\n                formatOutput={function () {\n                  return (\n                    <ScreenReaderContent>\n                      You have notifications from instructure-ui\n                    </ScreenReaderContent>\n                  )\n                }}\n              />\n            }\n          />\n          <AppNav.Item\n            isSelected\n            renderLabel=\"Canvas\"\n            href=\"https://www.instructure.com/canvas/\"\n          />\n          <AppNav.Item renderLabel=\"Canvas Network\" href=\"https://canvas.net\" />\n          <AppNav.Item\n            renderLabel={() => 'Canvas Community'}\n            href=\"https://community.canvaslms.com/\"\n          />\n          <AppNav.Item\n            renderLabel=\"Bridge\"\n            href=\"https://www.instructure.com/bridge/\"\n          />\n        </AppNav>\n      )\n    }\n  }\n\n  render(<AppNavExample />)\n  ```\n\n- ```js\n  const totalItemsCount = 5\n\n  const AppNavExample = () => {\n    const [visibleItemsCount, setVisibleItemsCount] = useState(totalItemsCount)\n\n    const handleUpdate = ({ visibleItemsCount }) => {\n      setVisibleItemsCount(visibleItemsCount)\n    }\n\n    return (\n      <AppNav\n        screenReaderLabel=\"App navigation\"\n        visibleItemsCount={visibleItemsCount >= 2 ? visibleItemsCount : 0}\n        onUpdate={handleUpdate}\n        renderBeforeItems={\n          <AppNav.Item\n            renderLabel={<ScreenReaderContent>Instructure</ScreenReaderContent>}\n            renderIcon={\n              <IconCommonsLine inline={false} size=\"medium\" color=\"primary\" />\n            }\n            href=\"http://instructure.com\"\n          />\n        }\n        renderAfterItems={\n          <IconButton\n            onClick={() => console.log('Add')}\n            renderIcon={IconPlusSolid}\n            margin=\"0 0 0 x-small\"\n            screenReaderLabel=\"Add something\"\n            withBorder={false}\n            withBackground={false}\n          />\n        }\n        renderTruncateLabel={() => {\n          const hiddenItemsCount = totalItemsCount - visibleItemsCount\n          if (visibleItemsCount >= 2) {\n            return `${hiddenItemsCount} More`\n          } else {\n            return (\n              <span>\n                <IconHamburgerLine size=\"small\" inline={false} />\n                <ScreenReaderContent>{`${hiddenItemsCount} More`}</ScreenReaderContent>\n              </span>\n            )\n          }\n        }}\n      >\n        <AppNav.Item\n          renderLabel=\"instructure-ui\"\n          href=\"http://instructure.design\"\n          renderAfter={\n            <Badge\n              type=\"notification\"\n              variant=\"success\"\n              standalone\n              formatOutput={() => {\n                return (\n                  <ScreenReaderContent>\n                    You have notifications from instructure-ui\n                  </ScreenReaderContent>\n                )\n              }}\n            />\n          }\n        />\n        <AppNav.Item\n          isSelected\n          renderLabel=\"Canvas\"\n          href=\"https://www.instructure.com/canvas/\"\n        />\n        <AppNav.Item renderLabel=\"Canvas Network\" href=\"https://canvas.net\" />\n        <AppNav.Item\n          renderLabel={() => 'Canvas Community'}\n          href=\"https://community.canvaslms.com/\"\n        />\n        <AppNav.Item\n          renderLabel=\"Bridge\"\n          href=\"https://www.instructure.com/bridge/\"\n        />\n      </AppNav>\n    )\n  }\n\n  render(<AppNavExample />)\n  ```\n","displayName":"AppNav","methods":[],"props":{"screenReaderLabel":{"type":{"name":"string"},"required":true,"description":"Screenreader label for the overall navigation","tsType":{"name":"string"}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([Item])"},"required":false,"description":"Only accepts `AppNav.Item` as children","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"defaultValue":{"value":"null","computed":false}},"debounce":{"type":{"name":"number"},"required":false,"description":"The rate (in ms) the component responds to container resizing or\nan update to one of its child items","tsType":{"name":"number"},"defaultValue":{"value":"300","computed":false}},"renderBeforeItems":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display before the navigation items, such as a logo","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderAfterItems":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display after the navigation items, aligned to the far end\nof the navigation","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"},"defaultValue":{"value":"'0'","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the underlying nav element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"renderTruncateLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Customize the text displayed in the menu trigger when links overflow\nthe overall nav width.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"defaultValue":{"value":"() => 'More'","computed":false}},"onUpdate":{"type":{"name":"func"},"required":false,"description":"Called whenever the navigation items are updated or the size of\nthe navigation changes. Passes in the `visibleItemsCount` as\na parameter.","tsType":{"name":"signature","type":"function","raw":"(visibleItemsCount: { visibleItemsCount: number }) => void","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{ visibleItemsCount: number }","signature":{"properties":[{"key":"visibleItemsCount","value":{"name":"number","required":true}}]}},"name":"visibleItemsCount"}],"return":{"name":"void"}}}},"visibleItemsCount":{"type":{"name":"number"},"required":false,"description":"Sets the number of navigation items that are visible.","tsType":{"name":"number"},"defaultValue":{"value":"0","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-navigation/src/AppNav/index.tsx","extension":".tsx","srcPath":"packages/ui-navigation/src/AppNav/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-navigation/src/AppNav/index.tsx","packageName":"@instructure/ui-navigation","requirePath":"@instructure/ui-navigation/lib/AppNav/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-navigation/src/AppNav/index.tsx').default","esPath":"@instructure/ui-navigation/es/AppNav/index","themePath":"packages/ui-navigation/src/AppNav/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-navigation/src/AppNav/theme.ts","id":"AppNav","title":"AppNav"}