{"description":"\n`Selectable` is a low level utility component that can be used to create combobox widgets. Before composing your own component, make sure an existing component, like [Select](#Select), can't be adapted for your use case.\n\n```javascript\n---\ntype: example\n---\n\nclass CustomSelect extends React.Component {\n  state = {\n    isShowingOptions: false,\n    highlightedOptionId: this.props.options[0].id,\n    selectedOptionId: this.props.options[0].id,\n    inputValue: this.props.options[0].label,\n    filteredOptions: this.props.options\n  }\n\n  filterOptions = (value) => {\n    return this.props.options.filter(option => (\n      option.label.toLowerCase().startsWith(value.toLowerCase())\n    ))\n  }\n\n  matchValue () {\n    const { filteredOptions, inputValue, selectedOptionId } = this.state\n    if (filteredOptions.length === 1) {\n      if (filteredOptions[0].label.toLowerCase() === inputValue.toLowerCase()) {\n        return {\n          inputValue: filteredOptions[0].label,\n          selectedOptionId: filteredOptions[0].id\n        }\n      }\n    }\n    const index = this.getOptionIndex(null, selectedOptionId, this.props.options)\n    return { inputValue: this.props.options[index].label }\n  }\n\n  getInputStyles () {\n    return {\n      display: 'block',\n      width: '250px',\n      padding: '5px'\n    }\n  }\n\n  getListStyles () {\n    const { isShowingOptions } = this.state\n    return {\n      background: 'white',\n      listStyle: 'none',\n      padding: 0,\n      margin: 0,\n      border: isShowingOptions && 'solid 1px lightgray'\n    }\n  }\n\n  getOptionStyles (option) {\n    const { selectedOptionId, highlightedOptionId } = this.state\n    const selected = selectedOptionId === option.id\n    const highlighted = highlightedOptionId === option.id\n    let background = 'transparent'\n    if (selected) {\n      background = 'lightgray'\n    } else if (highlighted) {\n      background = '#eeeeee'\n    }\n    return {\n      background,\n      padding: '0 10px'\n    }\n  }\n\n  getOptionIndex (direction, id, from) {\n    const { filteredOptions, highlightedOptionId } = this.state\n    const options = from ? from : filteredOptions\n    let index\n\n    for (let i = 0; i <= options.length - 1; i++) {\n      if (typeof id === 'undefined') {\n        if (highlightedOptionId === options[i].id) {\n          index = i + direction\n          if (index < 0) {\n            index = 0\n          } else if (index >= options.length - 1) {\n            index = options.length - 1\n          }\n          break\n        }\n      } else {\n        if (id === options[i].id) {\n          index = i\n          break\n        }\n      }\n    }\n    return index\n  }\n\n  getHandlers () {\n    return this.props.isDisabled ? {} : {\n      onRequestShowOptions: (e) => this.setState(state => ({\n        isShowingOptions: true,\n        highlightedOptionId: state.filteredOptions[0].id\n      })),\n      onRequestHideOptions: (e) => {\n        const index = this.getOptionIndex(null, this.state.selectedOptionId, this.props.options)\n        this.setState(state => ({\n          isShowingOptions: false,\n          inputValue: this.props.options[index].label,\n          filteredOptions: this.props.options,\n          highlightedOptionId: null,\n        }))\n      },\n      onRequestHighlightOption: (e, { id, direction }) => {\n        let index = this.getOptionIndex(direction, id)\n        this.setState(state => ({\n          highlightedOptionId: state.filteredOptions[index] ? state.filteredOptions[index].id : null,\n          inputValue: direction && state.filteredOptions[index]\n            ? state.filteredOptions[index].label\n            : state.inputValue\n        }))\n      },\n      onRequestSelectOption: (e, { id }) => {\n        const index = this.getOptionIndex(null, id)\n        this.setState(state => ({\n          selectedOptionId: id,\n          inputValue: state.filteredOptions[index].label,\n          filteredOptions: this.props.options,\n          isShowingOptions: false,\n          highlightedOptionId: null,\n        }))\n      }\n    }\n  }\n\n  render () {\n    const {\n      isShowingOptions,\n      inputValue,\n      highlightedOptionId,\n      selectedOptionId,\n      filteredOptions\n    } = this.state\n\n    return (\n      <Selectable\n        isShowingOptions={isShowingOptions}\n        highlightedOptionId={highlightedOptionId}\n        selectedOptionId={selectedOptionId ? selectedOptionId : null}\n        {...this.getHandlers()}\n      >\n        {({\n          getRootProps,\n          getLabelProps,\n          getInputProps,\n          getTriggerProps,\n          getListProps,\n          getOptionProps\n        }) => (\n          <span\n            style={{display: 'inline-block'}}\n            {...getRootProps({ref: (el) => this.rootRef = el})}\n          >\n            <label {...getLabelProps()}>Selectable Example</label>\n            <input\n              style={this.getInputStyles()}\n              {...getInputProps()}\n              {...getTriggerProps({\n                type: 'text',\n                value: inputValue,\n                onChange: (e) => {\n                  const newOptions = this.filterOptions(e.target.value)\n                  this.setState({\n                    inputValue: e.target.value,\n                    filteredOptions: newOptions,\n                    isShowingOptions: true,\n                    highlightedOptionId: newOptions[0] ? newOptions[0].id : null\n                  })\n                },\n                onBlur: (e) => this.setState({\n                  filteredOptions: this.props.options,\n                  highlightedOptionId: null,\n                  isShowingOptions: false,\n                  ...this.matchValue()\n                })\n              })\n            } />\n            <ul\n              style={this.getListStyles()}\n              {...getListProps()}\n            >\n              {isShowingOptions && filteredOptions.map((option) => (\n                <li\n                  key={option.id}\n                  style={this.getOptionStyles(option)}\n                  {...getOptionProps({ id: option.id })}\n                >\n                  {option.label}\n                </li>\n              ))}\n            </ul>\n          </span>\n        )}\n      </Selectable>\n    )\n  }\n}\n\nrender(\n  <View>\n    <CustomSelect\n      options={[\n        { id: 'opt0', value: '0', label: 'Alabama' },\n        { id: 'opt1', value: '1', label: 'Alaska' },\n        { id: 'opt2', value: '2', label: 'American Samoa' },\n        { id: 'opt3', value: '3', label: 'Arizona' },\n        { id: 'opt4', value: '4', label: 'Arkansas' },\n        { id: 'opt5', value: '5', label: 'California' },\n        { id: 'opt6', value: '6', label: 'Colorado' },\n        { id: 'opt7', value: '7', label: 'Connecticut' },\n        { id: 'opt8', value: '8', label: 'Delaware' },\n        { id: 'opt9', value: '9', label: 'District Of Columbia' },\n        { id: 'opt10', value: '10', label: 'Federated States Of Micronesia' },\n        { id: 'opt11', value: '11', label: 'Florida' },\n        { id: 'opt12', value: '12', label: 'Georgia' },\n        { id: 'opt13', value: '13', label: 'Guam' },\n        { id: 'opt14', value: '14', label: 'Hawaii' },\n        { id: 'opt15', value: '15', label: 'Idaho' },\n        { id: 'opt16', value: '16', label: 'Illinois' }\n      ]}\n    />\n  </View>\n)\n```\n\nSelectable has very few opinions about how a combobox component should be composed. It mostly aims to ensure all the proper WAI-ARIA roles and attributes are set on the right elements at the right times. Selectable uses a combination of controllable props and prop getters to set these attributes and provide accessible behavior.\n\n#### Prop getters\n\n`Selectable` provides a number of different prop getters. Each getter is intended to be used with a particular element in your component. `getInputProps` should be used to obtain attributes relevant to the `input` element in a combobox component. `getTriggerProps` should be used for the element responsible for triggering the showing and hiding of the options list. If the `input` element is also the trigger, use both of these prop getters on that element.\n\nThe only getter with a required argument is `getOptionProps` which requires an `id` be provided. However, it's best practice to set any props needed on an element via its prop getter. This just ensures you don't inadvertently override an essential value.\n\n#### Controllable props\n\nThere are several controllable props available. These should be updated to reflect changes to the externally managed state of the combobox component. The `selectedOptionId` prop, for example, specifies which option(s) should be considered \"selected\" when rendered.\n\n#### Request callbacks\n\nA variety of request callbacks are provided as prompts for state updates. They do not actually make any changes to props or state on their own. `onRequestShowOptions`, for example, is fired when `Selectable` thinks its `isShowingOptions` prop should be updated to true. The consumer can always decide if and how to react to these prompts, but utilizing them reduces a lot of the boilerplate combobox logic the consumer would otherwise be responsible for providing.\n","displayName":"Selectable","methods":[],"props":{"id":{"type":{"name":"string"},"required":false,"description":"The id of the trigger element. Set automatically if not provided","tsType":{"name":"string"}},"highlightedOptionId":{"type":{"name":"string"},"required":false,"description":"The id of the option in the list that should be considered highlighted","tsType":{"name":"string"}},"selectedOptionId":{"type":{"name":"union","value":[{"name":"string"},{"name":"array"}]},"required":false,"description":"The id of the option(s) in the list that should be considered selected","tsType":{"name":"union","raw":"string | string[]","elements":[{"name":"string"},{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"}]}},"isShowingOptions":{"type":{"name":"bool"},"required":false,"description":"Whether or not the options should be visible","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"onRequestShowOptions":{"type":{"name":"func"},"required":false,"description":"Callback fired when the options want to become visible","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestHideOptions":{"type":{"name":"func"},"required":false,"description":"Callback fired when the options no longer want to be visible","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestHighlightOption":{"type":{"name":"func"},"required":false,"description":"Callback fired when option is hovered or highlighted via keyboard.\nEither the `id` or the `direction` parameter is supplied","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.SyntheticEvent,\n  data: { id?: string; direction?: 1 | -1 }\n) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ id?: string; direction?: 1 | -1 }","signature":{"properties":[{"key":"id","value":{"name":"string","required":false}},{"key":"direction","value":{"name":"union","raw":"1 | -1","elements":[{"name":"literal","value":"1"},{"name":"literal","value":"-1"}],"required":false}}]}},"name":"data"}],"return":{"name":"void"}}}},"onRequestHighlightFirstOption":{"type":{"name":"func"},"required":false,"description":"Callback fired when first option should be highlighted","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestHighlightLastOption":{"type":{"name":"func"},"required":false,"description":"Callback fired when last option should be highlighted","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onRequestSelectOption":{"type":{"name":"func"},"required":false,"description":"Callback fired when option clicked or selected via keyboard","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.SyntheticEvent,\n  data: { id?: string }\n) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ id?: string }","signature":{"properties":[{"key":"id","value":{"name":"string","required":false}}]}},"name":"data"}],"return":{"name":"void"}}}},"children":{"type":{"name":"func"},"required":false,"description":"A function with prop getters","tsType":{"name":"signature","type":"function","raw":"(propGetters: SelectableRender) => ReactNode","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  /**\n   * Prop getter for root element\n   */\n  getRootProps: (props?: {\n    onMouseDown?: React.MouseEventHandler\n    onClick?: React.MouseEventHandler\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for label element\n   */\n  getLabelProps: (props?: Record<string, any>) => Record<string, any>\n\n  /**\n   * Prop getter for trigger element\n   */\n  getTriggerProps: (props?: {\n    ref?: (element: Element | null) => void\n    onKeyDown?: (event: React.KeyboardEvent) => void\n    onKeyUp?: (event: React.KeyboardEvent) => void\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for input element\n   */\n  getInputProps: (props?: {\n    readOnly?: boolean\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for list element\n   */\n  getListProps: (props?: {\n    onMouseDown?: React.MouseEventHandler\n    onClick?: React.MouseEventHandler\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for option elements\n   */\n  getOptionProps: (props?: {\n    id?: string // TODO this is not optional\n    onMouseOver?: React.MouseEventHandler\n    onClick?: React.MouseEventHandler\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for disabled option elements\n   */\n  getDisabledOptionProps: (props?: Record<string, any>) => Record<string, any>\n\n  /**\n   * Prop getter for screenreader description element\n   */\n  getDescriptionProps: (props?: Record<string, any>) => Record<string, any>\n}","signature":{"properties":[{"key":"getRootProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  onMouseDown?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  onMouseDown?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"onMouseDown","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":"onClick","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for root element"},{"key":"getLabelProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for label element"},{"key":"getTriggerProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  ref?: (element: Element | null) => void\n  onKeyDown?: (event: React.KeyboardEvent) => void\n  onKeyUp?: (event: React.KeyboardEvent) => void\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  ref?: (element: Element | null) => void\n  onKeyDown?: (event: React.KeyboardEvent) => void\n  onKeyUp?: (event: React.KeyboardEvent) => void\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"ref","value":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent"},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyUp","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent"},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for trigger element"},{"key":"getInputProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  readOnly?: boolean\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  readOnly?: boolean\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"readOnly","value":{"name":"boolean","required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for input element"},{"key":"getListProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  onMouseDown?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  onMouseDown?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"onMouseDown","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":"onClick","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for list element"},{"key":"getOptionProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  id?: string // TODO this is not optional\n  onMouseOver?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  id?: string // TODO this is not optional\n  onMouseOver?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"id","value":{"name":"string","required":false}},{"key":"onMouseOver","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":"onClick","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for option elements"},{"key":"getDisabledOptionProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for disabled option elements"},{"key":"getDescriptionProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for screenreader description element"}]}},"name":"propGetters"}],"return":{"name":"ReactNode"}}}},"render":{"type":{"name":"func"},"required":false,"description":"A function with prop getters","tsType":{"name":"signature","type":"function","raw":"(propGetters: SelectableRender) => ReactNode","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  /**\n   * Prop getter for root element\n   */\n  getRootProps: (props?: {\n    onMouseDown?: React.MouseEventHandler\n    onClick?: React.MouseEventHandler\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for label element\n   */\n  getLabelProps: (props?: Record<string, any>) => Record<string, any>\n\n  /**\n   * Prop getter for trigger element\n   */\n  getTriggerProps: (props?: {\n    ref?: (element: Element | null) => void\n    onKeyDown?: (event: React.KeyboardEvent) => void\n    onKeyUp?: (event: React.KeyboardEvent) => void\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for input element\n   */\n  getInputProps: (props?: {\n    readOnly?: boolean\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for list element\n   */\n  getListProps: (props?: {\n    onMouseDown?: React.MouseEventHandler\n    onClick?: React.MouseEventHandler\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for option elements\n   */\n  getOptionProps: (props?: {\n    id?: string // TODO this is not optional\n    onMouseOver?: React.MouseEventHandler\n    onClick?: React.MouseEventHandler\n    [restProps: string]: any\n  }) => Record<string, any>\n\n  /**\n   * Prop getter for disabled option elements\n   */\n  getDisabledOptionProps: (props?: Record<string, any>) => Record<string, any>\n\n  /**\n   * Prop getter for screenreader description element\n   */\n  getDescriptionProps: (props?: Record<string, any>) => Record<string, any>\n}","signature":{"properties":[{"key":"getRootProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  onMouseDown?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  onMouseDown?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"onMouseDown","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":"onClick","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for root element"},{"key":"getLabelProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for label element"},{"key":"getTriggerProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  ref?: (element: Element | null) => void\n  onKeyDown?: (event: React.KeyboardEvent) => void\n  onKeyUp?: (event: React.KeyboardEvent) => void\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  ref?: (element: Element | null) => void\n  onKeyDown?: (event: React.KeyboardEvent) => void\n  onKeyUp?: (event: React.KeyboardEvent) => void\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"ref","value":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent"},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyUp","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent"},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for trigger element"},{"key":"getInputProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  readOnly?: boolean\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  readOnly?: boolean\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"readOnly","value":{"name":"boolean","required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for input element"},{"key":"getListProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  onMouseDown?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  onMouseDown?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"onMouseDown","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":"onClick","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for list element"},{"key":"getOptionProps","value":{"name":"signature","type":"function","raw":"(props?: {\n  id?: string // TODO this is not optional\n  onMouseOver?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}) => Record<string, any>","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  id?: string // TODO this is not optional\n  onMouseOver?: React.MouseEventHandler\n  onClick?: React.MouseEventHandler\n  [restProps: string]: any\n}","signature":{"properties":[{"key":"id","value":{"name":"string","required":false}},{"key":"onMouseOver","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":"onClick","value":{"name":"ReactMouseEventHandler","raw":"React.MouseEventHandler","required":false}},{"key":{"name":"string"},"value":{"name":"any","required":true}}]}},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for option elements"},{"key":"getDisabledOptionProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for disabled option elements"},{"key":"getDescriptionProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}},"required":true},"description":"Prop getter for screenreader description element"}]}},"name":"propGetters"}],"return":{"name":"ReactNode"}}}}},"category":"components","tags":"autocomplete, typeahead, combobox, dropdown, search","relativePath":"packages/ui-selectable/src/Selectable/index.tsx","extension":".tsx","srcPath":"packages/ui-selectable/src/Selectable/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-selectable/src/Selectable/index.tsx","packageName":"@instructure/ui-selectable","requirePath":"@instructure/ui-selectable/lib/Selectable/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-selectable/src/Selectable/index.tsx').default","esPath":"@instructure/ui-selectable/es/Selectable/index","id":"Selectable","title":"Selectable"}