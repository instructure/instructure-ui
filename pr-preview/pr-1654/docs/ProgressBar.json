{"description":"\n`<ProgressBar />` is a styled HTML `<progress />` element, complete\nwith the aria attributes required to support screen readers.\n\n### `size`\n\n```js\n---\ntype: example\n---\n<div>\n  <ProgressBar\n    size=\"x-small\"\n    screenReaderLabel=\"Loading completion\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n  />\n  <ProgressBar\n    size=\"small\"\n    screenReaderLabel=\"Loading completion\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n  />\n  <ProgressBar\n    size=\"large\"\n    screenReaderLabel=\"Loading completion\"\n    valueNow={40}\n    valueMax={60}\n  />\n</div>\n```\n\n### `color`\n\n`<ProgressBar />`'s `color` property controls the overall color scheme of the\ncomponent. Set it to `primary-inverse` when the component is used on dark backgrounds.\n\n```js\n---\ntype: example\n---\n<View background=\"primary-inverse\" as=\"div\">\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    color=\"primary-inverse\"\n    valueNow={30}\n    valueMax={60}\n  />\n</View>\n```\n\n### `meterColor`\n\nThe color of the progress meter is set separately through the `meterColor` property.\n\n```js\n---\ntype: example\n---\n<div>\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"info\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"success\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"alert\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"warning\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n  />\n  <ProgressBar\n    screenReaderLabel=\"Loading completion\"\n    meterColor=\"danger\"\n    valueNow={40}\n    valueMax={60}\n    margin=\"0 0 small\"\n  />\n</div>\n```\n\n`meterColor` can also be passed in as a function that takes `valueNow / valueMax`\nas parameters. This allows you to adjust the color of the meter based on the\ncurrent value.\n\n```js\n---\ntype: example\n---\n<ProgressBar\n  screenReaderLabel=\"Loading completion\"\n  meterColor={({ valueNow, valueMax }) => {\n    if (valueNow < 20) {\n      return 'danger'\n    } else if (valueNow / valueMax >= 1) {\n      return 'success'\n    } else {\n      return 'info'\n    }\n  }}\n  valueNow={10}\n  valueMax={60}\n/>\n```\n\n> `<ProgressBar />` defaults to setting the meter color to `success` when\n> complete.\n\n### `renderValue` / `formatScreenReaderValue`\n\nVia the `renderValue` prop, developers can use `valueMax` and `valueNow` props to format the\nvalue that `<ProgressBar />` displays.\n\n> `renderValue` will not be spoken by screen readers. Any essential information\n> in `renderValue` must also be conveyed via `formatScreenReaderValue` for screen reader users.\n\n```js\n---\ntype: example\n---\n<ProgressBar\n  screenReaderLabel=\"Percent complete\"\n  formatScreenReaderValue={({ valueNow, valueMax }) => {\n    return Math.round((valueNow / valueMax * 100)) + ' percent'\n  }}\n  renderValue={({ valueNow, valueMax }) => {\n    return (\n      <Text>\n        {Math.round(valueNow / valueMax * 100)}%\n      </Text>\n    )\n  }}\n  valueMax={88}\n  valueNow={33}\n/>\n```\n\n### `shouldAnimate`\n\nThe `shouldAnimate` prop makes the progress bar animate the transition between value changes, giving it a smoother look.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  MIN = 0\n  MAX = 100\n\n  state = {\n    value: 25,\n    shouldAnimate: true\n  }\n\n  bound (n) {\n    if (n < this.MIN) return this.MIN\n    if (n > this.MAX) return this.MAX\n    return n\n  }\n\n  setNumber (n) {\n    return { value: this.bound(n) }\n  }\n\n  handleChange = (event, value) => {\n    const newValue = Number(value)\n\n    if (isNaN(newValue)) {\n      return\n    }\n\n    this.setState({\n      value: newValue\n    })\n  }\n\n  handleDecrement = (event) => this.setState(({ value }) => {\n    if (Number.isInteger(value)) {\n      return this.setNumber(value - 1)\n    }\n    return this.setNumber(Math.floor(value))\n  })\n\n  handleIncrement = (event) => this.setState(({ value }) => {\n    if (Number.isInteger(value)) {\n      return this.setNumber(value + 1)\n    }\n    return this.setNumber(Math.ceil(value))\n  })\n\n  handleBlur = (event) => this.setState(({ value }) => {\n    return this.setNumber(Math.round(value))\n  })\n\n  render() {\n    return (\n      <div>\n        <View\n          as=\"div\"\n          background=\"primary\"\n          padding=\"medium\"\n          margin=\"0 0 large 0\"\n        >\n          <FormFieldGroup\n            description={<ScreenReaderContent>Settings</ScreenReaderContent>}\n          >\n            <Checkbox\n              label=\"Should animate\"\n              checked={this.state.shouldAnimate}\n              onChange={() => {\n                this.setState({ shouldAnimate: !this.state.shouldAnimate })\n              }}\n              variant=\"toggle\"\n            />\n\n            <NumberInput\n              renderLabel={`ProgressBar value (${this.MIN}-${this.MAX})`}\n              display=\"inline-block\"\n              onBlur={this.handleBlur}\n              onChange={this.handleChange}\n              onDecrement={this.handleDecrement}\n              onIncrement={this.handleIncrement}\n              showArrows\n              value={this.state.value}\n            />\n          </FormFieldGroup>\n        </View>\n\n        <ProgressBar\n          screenReaderLabel=\"Loading completion\"\n          valueNow={this.state.value}\n          valueMax={this.MAX}\n          shouldAnimate={this.state.shouldAnimate}\n        />\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n","displayName":"ProgressBar","methods":[],"props":{"screenReaderLabel":{"type":{"name":"string"},"required":true,"description":"A label is required for accessibility","tsType":{"name":"string"}},"size":{"type":{"name":"enum","value":[{"value":"'x-small'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"Control the height of the progress bar","tsType":{"name":"union","raw":"'x-small' | 'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'x-small'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"valueMax":{"type":{"name":"number"},"required":false,"description":"Maximum value (defaults to 100)","tsType":{"name":"number","raw":"Values['valueMax']"},"defaultValue":{"value":"100","computed":false}},"valueNow":{"type":{"name":"number"},"required":false,"description":"Receives the progress of the event","tsType":{"name":"number","raw":"Values['valueNow']"},"defaultValue":{"value":"0","computed":false}},"formatScreenReaderValue":{"type":{"name":"func"},"required":false,"description":"A function for formatting the text provided to screen readers via `aria-valuenow`","tsType":{"name":"signature","type":"function","raw":"(values: Values) => string","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{ valueNow: number; valueMax: number }","signature":{"properties":[{"key":"valueNow","value":{"name":"number","required":true}},{"key":"valueMax","value":{"name":"number","required":true}}]}},"name":"values"}],"return":{"name":"string"}}},"defaultValue":{"value":"({ valueNow, valueMax }: Values) =>\n`${valueNow} / ${valueMax}`","computed":false}},"renderValue":{"type":{"name":"union","value":[{"name":"func"},{"name":"node"}]},"required":false,"description":"A function to format the displayed value. If null the value will not display.\nTakes `valueNow` and `valueMax` as parameters.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"signature","type":"object","raw":"{ valueNow: number; valueMax: number }","signature":{"properties":[{"key":"valueNow","value":{"name":"number","required":true}},{"key":"valueMax","value":{"name":"number","required":true}}]}},{"name":"ClassicComponent","elements":[{"name":"signature","type":"object","raw":"{ valueNow: number; valueMax: number }","signature":{"properties":[{"key":"valueNow","value":{"name":"number","required":true}},{"key":"valueMax","value":{"name":"number","required":true}}]}},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"signature","type":"object","raw":"{ valueNow: number; valueMax: number }","signature":{"properties":[{"key":"valueNow","value":{"name":"number","required":true}},{"key":"valueMax","value":{"name":"number","required":true}}]}}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"color":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'primary-inverse'","computed":false}]},"required":false,"description":"Controls the overall color scheme of the component","tsType":{"name":"union","raw":"'primary' | 'primary-inverse'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"}]},"defaultValue":{"value":"'primary'","computed":false}},"meterColor":{"type":{"name":"union","value":[{"name":"func"},{"name":"enum","value":[{"value":"'info'","computed":false},{"value":"'warning'","computed":false},{"value":"'danger'","computed":false},{"value":"'alert'","computed":false},{"value":"'success'","computed":false},{"value":"'brand'","computed":false}]}]},"required":false,"description":"Control the color of the progress meter. Defaults to showing theme success\ncolor on completion, based on `valueNow` and `valueMax`.","tsType":{"name":"union","raw":"| ((values: Values) => ProgressBarMeterColor)\n| ProgressBarMeterColor","elements":[{"name":"unknown"},{"name":"union","raw":"| 'info'\n| 'warning'\n| 'danger'\n| 'alert'\n| 'success'\n| 'brand'","elements":[{"name":"literal","value":"'info'"},{"name":"literal","value":"'warning'"},{"name":"literal","value":"'danger'"},{"name":"literal","value":"'alert'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'brand'"}]}]},"defaultValue":{"value":"({ valueNow, valueMax }: Values) =>\nvalueNow / valueMax >= 1 ? 'success' : 'brand'","computed":false}},"shouldAnimate":{"type":{"name":"bool"},"required":false,"description":"Whether the change of value should have a transition","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the component's root HTML element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"as":{"type":{"name":"elementType"},"required":false,"description":"Set the element type of the component's root","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'div'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-progress/src/ProgressBar/index.tsx","extension":".tsx","srcPath":"packages/ui-progress/src/ProgressBar/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-progress/src/ProgressBar/index.tsx","packageName":"@instructure/ui-progress","requirePath":"@instructure/ui-progress/lib/ProgressBar/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-progress/src/ProgressBar/index.tsx').default","esPath":"@instructure/ui-progress/es/ProgressBar/index","themePath":"packages/ui-progress/src/ProgressBar/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-progress/src/ProgressBar/theme.ts","id":"ProgressBar","title":"ProgressBar"}