{"description":"\nThe Modal is a dialog component that is centered in the viewport. The Modal\noverlays the application content and applies a mask to it.\n\nThe default `padding` of the Modal content is `medium` but can be overridden\nby using the `padding` prop on the `<Modal.Body/>` if the use case requires it.\n\n- ```js\n  const fpo = lorem.paragraphs(5)\n\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        open: false\n      }\n    }\n\n    handleButtonClick = () => {\n      this.setState(function (state) {\n        return { open: !state.open }\n      })\n    }\n\n    handleFormSubmit = (e) => {\n      e.preventDefault()\n      console.log('form submitted')\n      this.setState((state) => ({ open: false }))\n    }\n\n    renderCloseButton() {\n      return (\n        <CloseButton\n          placement=\"end\"\n          offset=\"small\"\n          onClick={this.handleButtonClick}\n          screenReaderLabel=\"Close\"\n        />\n      )\n    }\n\n    render() {\n      return (\n        <div style={{ padding: '0 0 11rem 0', margin: '0 auto' }}>\n          <Button onClick={this.handleButtonClick}>\n            {this.state.open ? 'Close' : 'Open'} the Modal\n          </Button>\n          <Modal\n            as=\"form\"\n            open={this.state.open}\n            onDismiss={() => {\n              this.setState({ open: false })\n            }}\n            onSubmit={this.handleFormSubmit}\n            size=\"auto\"\n            label=\"Modal Dialog: Hello World\"\n            shouldCloseOnDocumentClick\n          >\n            <Modal.Header>\n              {this.renderCloseButton()}\n              <Heading>Hello World</Heading>\n            </Modal.Header>\n            <Modal.Body>\n              <TextInput\n                renderLabel=\"Example\"\n                placeholder=\"if you hit enter here, it should submit the form\"\n              />\n              <Text lineHeight=\"double\">{fpo}</Text>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button onClick={this.handleButtonClick} margin=\"0 x-small 0 0\">\n                Close\n              </Button>\n              <Button color=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const fpo = lorem.paragraphs(5)\n  const Example = () => {\n    const [open, setOpen] = useState(false)\n\n    const handleButtonClick = () => {\n      setOpen((state) => !state)\n    }\n\n    const handleFormSubmit = (e) => {\n      e.preventDefault()\n      console.log('form submitted')\n      setOpen(false)\n    }\n\n    const renderCloseButton = () => {\n      return (\n        <CloseButton\n          placement=\"end\"\n          offset=\"small\"\n          onClick={handleButtonClick}\n          screenReaderLabel=\"Close\"\n        />\n      )\n    }\n\n    return (\n      <div style={{ padding: '0 0 11rem 0', margin: '0 auto' }}>\n        <Button onClick={handleButtonClick}>\n          {open ? 'Close' : 'Open'} the Modal\n        </Button>\n        <Modal\n          as=\"form\"\n          open={open}\n          onDismiss={() => {\n            setOpen(false)\n          }}\n          onSubmit={handleFormSubmit}\n          size=\"auto\"\n          label=\"Modal Dialog: Hello World\"\n          shouldCloseOnDocumentClick\n        >\n          <Modal.Header>\n            {renderCloseButton()}\n            <Heading>Hello World</Heading>\n          </Modal.Header>\n          <Modal.Body>\n            <TextInput\n              renderLabel=\"Example\"\n              placeholder=\"if you hit enter here, it should submit the form\"\n            />\n            <Text lineHeight=\"double\">{fpo}</Text>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={handleButtonClick} margin=\"0 x-small 0 0\">\n              Close\n            </Button>\n            <Button color=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Constraining Modal to a parent element\n\nBy default, Modals are positioned relative to the document body.\n\nSetting the `constrain` property to `parent` will constrain the Modal within the element it is mounted from (specified via the `mountNode` property). Note: in these cases, the `mountNode` element should have an explicit `height` set: Because Modal is absolutely positioned, it has no height of its own.\n\n- ```js\n  const fpo = lorem.paragraphs(1)\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        open: false,\n        size: 'auto'\n      }\n    }\n\n    handleButtonClick = () => {\n      this.setState(function (state) {\n        return { open: !state.open }\n      })\n    }\n\n    renderCloseButton() {\n      return (\n        <CloseButton\n          placement=\"end\"\n          offset=\"small\"\n          onClick={this.handleButtonClick}\n          screenReaderLabel=\"Close\"\n        />\n      )\n    }\n\n    render() {\n      return (\n        <div>\n          <Button onClick={this.handleButtonClick}>\n            {this.state.open ? 'Close' : 'Open'} the Modal\n          </Button>\n          <Modal\n            open={this.state.open}\n            onDismiss={() => {\n              this.setState({ open: false })\n            }}\n            size=\"fullscreen\"\n            label=\"Modal Dialog: Hello World\"\n            shouldCloseOnDocumentClick\n            mountNode={() => document.getElementById('constrainExample')}\n            constrain=\"parent\"\n          >\n            <Modal.Header>\n              {this.renderCloseButton()}\n              <Heading>This Modal is constrained to a parent</Heading>\n            </Modal.Header>\n            <Modal.Body>\n              <View as=\"p\" margin=\"none none small\">\n                <Text>{fpo}</Text>\n              </View>\n              <ModalAutoCompleteExample renderLabel=\"Choose a state\" />\n            </Modal.Body>\n            <Modal.Footer>\n              <Button onClick={this.handleButtonClick} margin=\"0 x-small 0 0\">\n                Close\n              </Button>\n              <Button\n                onClick={this.handleButtonClick}\n                color=\"primary\"\n                type=\"submit\"\n              >\n                Submit\n              </Button>\n            </Modal.Footer>\n          </Modal>\n          <View\n            background=\"primary-inverse\"\n            margin=\"medium auto none\"\n            display=\"block\"\n            width=\"25rem\"\n            height=\"25rem\"\n            borderWidth=\"large\"\n            id=\"constrainExample\"\n          ></View>\n        </div>\n      )\n    }\n  }\n\n  class ModalAutoCompleteExample extends React.Component {\n    state = {\n      isShowingOptions: false\n    }\n\n    handleShowOptions = () => {\n      this.setState({ isShowingOptions: true })\n    }\n    handleHideOptions = () => {\n      this.setState({ isShowingOptions: false })\n    }\n    render() {\n      const options = [\n        'Alabama',\n        'Alaska',\n        'American Samoa',\n        'Arizona',\n        'Arkansas',\n        'California',\n        'Colorado',\n        'Connecticut',\n        'Delaware',\n        'District Of Columbia',\n        'Federated States Of Micronesia',\n        'Florida',\n        'Georgia',\n        'Guam',\n        'Hawaii',\n        'Idaho',\n        'Illinois'\n      ]\n\n      return (\n        <Select\n          {...this.props}\n          isShowingOptions={this.state.isShowingOptions}\n          onRequestShowOptions={this.handleShowOptions}\n          onRequestHideOptions={this.handleHideOptions}\n        >\n          {options.map((label, index) => (\n            <Select.Option key={label} id={'' + index}>\n              {label}\n            </Select.Option>\n          ))}\n        </Select>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const fpo = lorem.paragraphs(1)\n  const Example = () => {\n    const [open, setOpen] = useState(false)\n    const [size, setSize] = useState('auto')\n\n    const handleButtonClick = () => {\n      setOpen((state) => !state)\n    }\n\n    const renderCloseButton = () => {\n      return (\n        <CloseButton\n          placement=\"end\"\n          offset=\"small\"\n          onClick={handleButtonClick}\n          screenReaderLabel=\"Close\"\n        />\n      )\n    }\n    return (\n      <div>\n        <Button onClick={handleButtonClick}>\n          {open ? 'Close' : 'Open'} the Modal\n        </Button>\n        <Modal\n          open={open}\n          onDismiss={() => {\n            setOpen(false)\n          }}\n          size=\"fullscreen\"\n          label=\"Modal Dialog: Hello World\"\n          shouldCloseOnDocumentClick\n          mountNode={() => document.getElementById('constrainExample')}\n          constrain=\"parent\"\n        >\n          <Modal.Header>\n            {renderCloseButton()}\n            <Heading>This Modal is constrained to a parent</Heading>\n          </Modal.Header>\n          <Modal.Body>\n            <View as=\"p\" margin=\"none none small\">\n              <Text>{fpo}</Text>\n            </View>\n            <ModalAutoCompleteExample renderLabel=\"Choose a state\" />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={handleButtonClick} margin=\"0 x-small 0 0\">\n              Close\n            </Button>\n            <Button onClick={handleButtonClick} color=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <View\n          background=\"primary-inverse\"\n          margin=\"medium auto none\"\n          display=\"block\"\n          width=\"25rem\"\n          height=\"25rem\"\n          borderWidth=\"large\"\n          id=\"constrainExample\"\n        ></View>\n      </div>\n    )\n  }\n\n  const ModalAutoCompleteExample = (props) => {\n    const [isShowingOptions, setIsShowingOptions] = useState(false)\n\n    const handleShowOptions = () => {\n      setIsShowingOptions(true)\n    }\n    const handleHideOptions = () => {\n      setIsShowingOptions(false)\n    }\n\n    const options = [\n      'Alabama',\n      'Alaska',\n      'American Samoa',\n      'Arizona',\n      'Arkansas',\n      'California',\n      'Colorado',\n      'Connecticut',\n      'Delaware',\n      'District Of Columbia',\n      'Federated States Of Micronesia',\n      'Florida',\n      'Georgia',\n      'Guam',\n      'Hawaii',\n      'Idaho',\n      'Illinois'\n    ]\n    return (\n      <Select\n        {...props}\n        isShowingOptions={isShowingOptions}\n        onRequestShowOptions={handleShowOptions}\n        onRequestHideOptions={handleHideOptions}\n      >\n        {options.map((label, index) => (\n          <Select.Option key={label} id={'' + index}>\n            {label}\n          </Select.Option>\n        ))}\n      </Select>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Media (images, etc.) inside Modals\n\n> Setting the `variant` prop to `\"inverse\"` will result in a dark version of Modal, useful for displaying media. _Note that the `inverse` Modal does not currently support text or form input content._\n\n**If you are displaying small, relatively uniform images or videos inside Modal, the default settings should work well.** Modal.Body will expand to the height of the media you're displaying. If there is overflow, scrollbars will be available.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        open: false\n      }\n    }\n\n    handleButtonClick = () => {\n      this.setState(function (state) {\n        return { open: !state.open }\n      })\n    }\n\n    render() {\n      return (\n        <div>\n          <Button onClick={this.handleButtonClick}>\n            {this.state.open ? 'Close' : 'Open'} the Modal\n          </Button>\n          <Modal\n            open={this.state.open}\n            onDismiss={() => {\n              this.setState({ open: false })\n            }}\n            size=\"auto\"\n            label=\"Modal Dialog: Hello Media\"\n            shouldCloseOnDocumentClick\n            variant=\"inverse\"\n          >\n            <Modal.Header>\n              <Flex>\n                <Flex.Item shouldGrow shouldShrink>\n                  <Heading level=\"h2\">\n                    <TruncateText>A small image</TruncateText>\n                  </Heading>\n                </Flex.Item>\n                <Flex.Item>\n                  <CloseButton\n                    color=\"primary-inverse\"\n                    placement=\"end\"\n                    offset=\"small\"\n                    onClick={this.handleButtonClick}\n                    screenReaderLabel=\"Close\"\n                  />\n                </Flex.Item>\n              </Flex>\n            </Modal.Header>\n            <Modal.Body padding=\"none\">\n              <Img\n                src={placeholderImage(500, 250)}\n                display=\"block\"\n                margin=\"0 auto\"\n              />\n            </Modal.Body>\n            <Modal.Footer>\n              <Button\n                onClick={this.handleButtonClick}\n                withBackground={false}\n                color=\"primary-inverse\"\n                type=\"submit\"\n              >\n                Submit\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [open, setOpen] = useState(false)\n\n    const handleButtonClick = () => {\n      setOpen((state) => !state)\n    }\n\n    return (\n      <div>\n        <Button onClick={handleButtonClick}>\n          {open ? 'Close' : 'Open'} the Modal\n        </Button>\n        <Modal\n          open={open}\n          onDismiss={() => {\n            setOpen(false)\n          }}\n          size=\"auto\"\n          label=\"Modal Dialog: Hello Media\"\n          shouldCloseOnDocumentClick\n          variant=\"inverse\"\n        >\n          <Modal.Header>\n            <Flex>\n              <Flex.Item shouldGrow shouldShrink>\n                <Heading level=\"h2\">\n                  <TruncateText>A small image</TruncateText>\n                </Heading>\n              </Flex.Item>\n              <Flex.Item>\n                <CloseButton\n                  color=\"primary-inverse\"\n                  placement=\"end\"\n                  offset=\"small\"\n                  onClick={handleButtonClick}\n                  screenReaderLabel=\"Close\"\n                />\n              </Flex.Item>\n            </Flex>\n          </Modal.Header>\n          <Modal.Body padding=\"none\">\n            <Img\n              src={placeholderImage(500, 250)}\n              display=\"block\"\n              margin=\"0 auto\"\n            />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={handleButtonClick}\n              withBackground={false}\n              color=\"primary-inverse\"\n              type=\"submit\"\n            >\n              Submit\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n**When you have to display large media inside the Modal (or have no control over the size of the media)**, set `overflow` to `fit`. Doing so makes Modal.Body fill 100% of the available width and height, enabling you to\nuse the [Img](#Img) component's `constrain` property to fit the image inside Modal.Body.\n\n> `<Img />` uses CSS's [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) for its constrain property. If you're not using `<Img />`, add an `object-fit` rule to your media, and it will work with `overflow=\"fit\"`.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        open: false,\n        imageFit: 'cover',\n        modalSize: 'fullscreen'\n      }\n    }\n\n    handleButtonClick = () => {\n      this.setState(function (state) {\n        return { open: !state.open }\n      })\n    }\n\n    handleImageFitChange = (event, value) => {\n      this.setState({ imageFit: value })\n    }\n\n    handleModalSizeChange = (event, value) => {\n      this.setState({ modalSize: value })\n    }\n\n    render() {\n      return (\n        <div>\n          <FormFieldGroup\n            description={\n              <Heading level=\"h3\" as=\"h3\">\n                Media Modal\n              </Heading>\n            }\n            rowSpacing=\"medium\"\n          >\n            <RadioInputGroup\n              onChange={this.handleImageFitChange}\n              name=\"imageFit\"\n              defaultValue=\"cover\"\n              description=\"Img component's `constrain` prop\"\n              variant=\"toggle\"\n            >\n              <RadioInput label=\"Cover\" value=\"cover\" />\n              <RadioInput label=\"Contain\" value=\"contain\" />\n            </RadioInputGroup>\n            <RadioInputGroup\n              onChange={this.handleModalSizeChange}\n              name=\"modalSize\"\n              defaultValue=\"fullscreen\"\n              description=\"Modal size\"\n              variant=\"toggle\"\n            >\n              <RadioInput label=\"fullscreen\" value=\"fullscreen\" />\n              <RadioInput label=\"small\" value=\"small\" />\n              <RadioInput label=\"medium\" value=\"medium\" />\n              <RadioInput label=\"large\" value=\"large\" />\n              <RadioInput label=\"auto\" value=\"auto\" />\n            </RadioInputGroup>\n          </FormFieldGroup>\n          <Button onClick={this.handleButtonClick} margin=\"medium 0 0\">\n            {this.state.open ? 'Close' : 'Open'} the Modal\n          </Button>\n          <Modal\n            open={this.state.open}\n            onDismiss={() => {\n              this.setState({ open: false })\n            }}\n            size={this.state.modalSize}\n            label=\"Modal Dialog: Hello Media\"\n            shouldCloseOnDocumentClick\n            variant=\"inverse\"\n            overflow=\"fit\"\n          >\n            <Modal.Header>\n              <Flex>\n                <Flex.Item shouldGrow shouldShrink>\n                  <Flex alignItems=\"center\">\n                    <Flex.Item margin=\"0 x-small 0 0\">\n                      <SVGIcon\n                        src={iconExample}\n                        size=\"small\"\n                        title=\"Icon Example\"\n                      />\n                    </Flex.Item>\n                    <Flex.Item shouldGrow shouldShrink>\n                      <Heading level=\"h2\">\n                        <TruncateText>This Modal Contains Media</TruncateText>\n                      </Heading>\n                    </Flex.Item>\n                  </Flex>\n                </Flex.Item>\n                <Flex.Item>\n                  <IconButton\n                    color=\"primary-inverse\"\n                    withBackground={false}\n                    withBorder={false}\n                    renderIcon={IconPrinterSolid}\n                    screenReaderLabel=\"Print This Image\"\n                    margin=\"0 x-small 0 0\"\n                  />\n                  <IconButton\n                    color=\"primary-inverse\"\n                    withBackground={false}\n                    withBorder={false}\n                    renderIcon={IconDownloadSolid}\n                    screenReaderLabel=\"Download This Image\"\n                    margin=\"0 x-small 0 0\"\n                  />\n                  <IconButton\n                    color=\"primary-inverse\"\n                    withBackground={false}\n                    withBorder={false}\n                    renderIcon={IconXSolid}\n                    screenReaderLabel=\"Close\"\n                    onClick={this.handleButtonClick}\n                  />\n                </Flex.Item>\n              </Flex>\n            </Modal.Header>\n            <Modal.Body padding=\"none\">\n              <Img\n                src={avatarSquare}\n                constrain={this.state.imageFit}\n                display=\"block\"\n              />\n            </Modal.Body>\n            <Modal.Footer>\n              <Button\n                onClick={this.handleButtonClick}\n                withBackground={false}\n                color=\"primary-inverse\"\n                type=\"submit\"\n              >\n                Close\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [open, setOpen] = useState(false)\n    const [imageFit, setImageFit] = useState('cover')\n    const [modalSize, setModalSize] = useState('fullscreen')\n\n    const handleButtonClick = () => {\n      setOpen((state) => !state)\n    }\n\n    const handleImageFitChange = (event, value) => {\n      setImageFit(value)\n    }\n\n    const handleModalSizeChange = (event, value) => {\n      setModalSize(value)\n    }\n\n    return (\n      <div>\n        <FormFieldGroup\n          description={\n            <Heading level=\"h3\" as=\"h3\">\n              Media Modal\n            </Heading>\n          }\n          rowSpacing=\"medium\"\n        >\n          <RadioInputGroup\n            onChange={handleImageFitChange}\n            name=\"imageFit\"\n            defaultValue=\"cover\"\n            description=\"Img component's `constrain` prop\"\n            variant=\"toggle\"\n          >\n            <RadioInput label=\"Cover\" value=\"cover\" />\n            <RadioInput label=\"Contain\" value=\"contain\" />\n          </RadioInputGroup>\n          <RadioInputGroup\n            onChange={handleModalSizeChange}\n            name=\"modalSize\"\n            defaultValue=\"fullscreen\"\n            description=\"Modal size\"\n            variant=\"toggle\"\n          >\n            <RadioInput label=\"fullscreen\" value=\"fullscreen\" />\n            <RadioInput label=\"small\" value=\"small\" />\n            <RadioInput label=\"medium\" value=\"medium\" />\n            <RadioInput label=\"large\" value=\"large\" />\n            <RadioInput label=\"auto\" value=\"auto\" />\n          </RadioInputGroup>\n        </FormFieldGroup>\n        <Button onClick={handleButtonClick} margin=\"medium 0 0\">\n          {open ? 'Close' : 'Open'} the Modal\n        </Button>\n        <Modal\n          open={open}\n          onDismiss={() => {\n            setOpen(false)\n          }}\n          size={modalSize}\n          label=\"Modal Dialog: Hello Media\"\n          shouldCloseOnDocumentClick\n          variant=\"inverse\"\n          overflow=\"fit\"\n        >\n          <Modal.Header>\n            <Flex>\n              <Flex.Item shouldGrow shouldShrink>\n                <Flex alignItems=\"center\">\n                  <Flex.Item margin=\"0 x-small 0 0\">\n                    <SVGIcon\n                      src={iconExample}\n                      size=\"small\"\n                      title=\"Icon Example\"\n                    />\n                  </Flex.Item>\n                  <Flex.Item shouldGrow shouldShrink>\n                    <Heading level=\"h2\">\n                      <TruncateText>This Modal Contains Media</TruncateText>\n                    </Heading>\n                  </Flex.Item>\n                </Flex>\n              </Flex.Item>\n              <Flex.Item>\n                <IconButton\n                  color=\"primary-inverse\"\n                  withBackground={false}\n                  withBorder={false}\n                  renderIcon={IconPrinterSolid}\n                  screenReaderLabel=\"Print This Image\"\n                  margin=\"0 x-small 0 0\"\n                />\n                <IconButton\n                  color=\"primary-inverse\"\n                  withBackground={false}\n                  withBorder={false}\n                  renderIcon={IconDownloadSolid}\n                  screenReaderLabel=\"Download This Image\"\n                  margin=\"0 x-small 0 0\"\n                />\n                <IconButton\n                  color=\"primary-inverse\"\n                  withBackground={false}\n                  withBorder={false}\n                  renderIcon={IconXSolid}\n                  screenReaderLabel=\"Close\"\n                  onClick={handleButtonClick}\n                />\n              </Flex.Item>\n            </Flex>\n          </Modal.Header>\n          <Modal.Body padding=\"none\">\n            <Img src={avatarSquare} constrain={imageFit} display=\"block\" />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              onClick={handleButtonClick}\n              withBackground={false}\n              color=\"primary-inverse\"\n              type=\"submit\"\n            >\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Small viewports\n\nOn smaller viewports (like mobile devices or scaled-up UI), we don't want to lose space because of padding and margins. In order to achieve that, use `size=\"fullscreen\"` on the Modal and set the `spacing` property of Modal.Header to `compact`.\n\n- ```js\n  const fpo = lorem.paragraphs(1)\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        open: false,\n        smallViewport: true\n      }\n    }\n\n    toggleOpen = () => {\n      this.setState(function (state) {\n        return { open: !state.open }\n      })\n    }\n\n    toggleViewport = async () => {\n      await this.setState(function (state) {\n        return { smallViewport: !state.smallViewport }\n      })\n    }\n\n    renderCloseButton() {\n      return (\n        <CloseButton\n          placement=\"end\"\n          offset=\"small\"\n          onClick={this.toggleOpen}\n          screenReaderLabel=\"Close\"\n        />\n      )\n    }\n\n    render() {\n      return (\n        <div>\n          <Button onClick={this.toggleOpen}>\n            {this.state.open ? 'Close' : 'Open'} the Modal\n          </Button>\n          <Button\n            onClick={this.toggleViewport}\n            margin=\"0 0 0 small\"\n            id=\"toggleViewportButton\"\n          >\n            Toggle viewport\n          </Button>\n          <Modal\n            open={this.state.open}\n            size={this.state.smallViewport ? 'fullscreen' : 'small'}\n            onDismiss={(event) => {\n              if (event.target.id !== 'toggleViewportButton') {\n                this.setState({ open: false })\n              }\n            }}\n            label=\"Modal Dialog: Hello World\"\n            shouldCloseOnDocumentClick\n            mountNode={() => document.getElementById('viewportExample')}\n            constrain=\"parent\"\n          >\n            <Modal.Header\n              spacing={this.state.smallViewport ? 'compact' : 'default'}\n            >\n              {this.renderCloseButton()}\n              {this.state.smallViewport ? (\n                <Heading\n                  as=\"h2\"\n                  level=\"h3\"\n                  themeOverride={{ h3FontWeight: 400 }}\n                >\n                  This Modal is optimized for small viewport\n                </Heading>\n              ) : (\n                <Heading as=\"h2\">This is a default size Modal</Heading>\n              )}\n            </Modal.Header>\n            <Modal.Body>\n              <View as=\"p\" margin=\"none none small\">\n                <Text>{fpo}</Text>\n              </View>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button onClick={this.toggleOpen} margin=\"0 x-small 0 0\">\n                Close\n              </Button>\n              <Button onClick={this.toggleOpen} color=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Modal.Footer>\n          </Modal>\n\n          <View\n            background=\"primary-inverse\"\n            margin=\"medium auto none\"\n            display=\"block\"\n            width={this.state.smallViewport ? '20rem' : '50rem'}\n            height=\"37.5rem\"\n            borderWidth=\"large\"\n            id=\"viewportExample\"\n          ></View>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const fpo = lorem.paragraphs(1)\n  const Example = () => {\n    const [open, setOpen] = useState(false)\n    const [smallViewport, setSmallViewport] = useState(true)\n\n    const toggleOpen = () => {\n      setOpen((state) => !state)\n    }\n\n    const toggleViewport = () => {\n      setSmallViewport((state) => !state)\n    }\n\n    const renderCloseButton = () => {\n      return (\n        <CloseButton\n          placement=\"end\"\n          offset=\"small\"\n          onClick={toggleOpen}\n          screenReaderLabel=\"Close\"\n        />\n      )\n    }\n\n    return (\n      <div>\n        <Button onClick={toggleOpen}>\n          {open ? 'Close' : 'Open'} the Modal\n        </Button>\n        <Button\n          onClick={toggleViewport}\n          margin=\"0 0 0 small\"\n          id=\"toggleViewportButton\"\n        >\n          Toggle viewport\n        </Button>\n        <Modal\n          open={open}\n          size={smallViewport ? 'fullscreen' : 'small'}\n          onDismiss={(event) => {\n            if (event.target.id !== 'toggleViewportButton') {\n              setOpen(false)\n            }\n          }}\n          label=\"Modal Dialog: Hello World\"\n          shouldCloseOnDocumentClick\n          mountNode={() => document.getElementById('viewportExample')}\n          constrain=\"parent\"\n        >\n          <Modal.Header spacing={smallViewport ? 'compact' : 'default'}>\n            {renderCloseButton()}\n            {smallViewport ? (\n              <Heading as=\"h2\" level=\"h3\" themeOverride={{ h3FontWeight: 400 }}>\n                This Modal is optimized for small viewport\n              </Heading>\n            ) : (\n              <Heading as=\"h2\">This is a default size Modal</Heading>\n            )}\n          </Modal.Header>\n          <Modal.Body>\n            <View as=\"p\" margin=\"none none small\">\n              <Text>{fpo}</Text>\n            </View>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={toggleOpen} margin=\"0 x-small 0 0\">\n              Close\n            </Button>\n            <Button onClick={toggleOpen} color=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        <View\n          background=\"primary-inverse\"\n          margin=\"medium auto none\"\n          display=\"block\"\n          width={smallViewport ? '20rem' : '50rem'}\n          height=\"37.5rem\"\n          borderWidth=\"large\"\n          id=\"viewportExample\"\n        ></View>\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use it to validate user decisions or to gain secondary confirmation</Figure.Item>\n    <Figure.Item>Provide input areas that the user may interact with such as Forms, Dropdowns, Selectors, and Links</Figure.Item>\n    <Figure.Item>Provide a way to dismiss the Modal: the \"x\" close button, the ESC key, clicking outside the modal, alternative response button (done, etc...)</Figure.Item>\n    <Figure.Item>Place optional response button(s) on the right side within the Modal.Footer</Figure.Item>\n    <Figure.Item>Place primary button on the far right with secondary response buttons to the left of the primary</Figure.Item>\n    <Figure.Item>Use size=\"fullscreen\" when setting Modal.Body to overflow=\"contain\" to support media fitting within its container</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Use when the workflow should NOT be interrupted</Figure.Item>\n    <Figure.Item>Use to show error, success, or warning messages/notifications (see Alert)</Figure.Item>\n    <Figure.Item>Add content to a modal that would be better suited in its own page</Figure.Item>\n    <Figure.Item>Use \"inverse\" variant for anything other than media</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Keyboard focus must be set in the modal when it appears; usually on the first interactive element</Figure.Item>\n    <Figure.Item>Modals must contain keyboard focus until they’re closed. This is to ensure that keyboard or screen reader users won't mistakenly interact with background content that is meant to be hidden or inaccessible</Figure.Item>\n    <Figure.Item>When a user closes a modal, focus must return to a logical place within the page. This is usually the element that triggered opening the modal</Figure.Item>\n    <Figure.Item>Modals should be able to be closed by clicking away, esc key and/or a close button</Figure.Item>\n    <Figure.Item>We recommend that modals begin with a heading (typically H2)</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Modal","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"An accessible label for the `<Modal />` content","tsType":{"name":"string"}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.enforceOrder(\n  [ModalHeader, ModalBody, ModalFooter],\n  [ModalHeader, ModalBody],\n  [ModalBody, ModalFooter],\n  [ModalBody]\n)"},"required":true,"description":"The children to be rendered within the `<Modal />`. Children must be type of: `Modal.Header`, `Modal.Body`, `Modal.Footer`. The `Modal.Body` child is required, and they have to follow this order.","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render the dialog as, `span` by default","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]}},"size":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false},{"value":"'fullscreen'","computed":false}]},"required":false,"description":"The size of the `<Modal />` content","tsType":{"name":"union","raw":"'auto' | 'small' | 'medium' | 'large' | 'fullscreen'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"},{"name":"literal","value":"'fullscreen'"}]},"defaultValue":{"value":"'auto'","computed":false}},"variant":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'inverse'","computed":false}]},"required":false,"description":"Designates the background style of the `<Modal />`","tsType":{"name":"union","raw":"'default' | 'inverse'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'inverse'"}]},"defaultValue":{"value":"'default'","computed":false}},"open":{"type":{"name":"bool"},"required":false,"description":"Whether or not the `<Modal />` is open","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"defaultFocusElement":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"An element or a function returning an element to focus by default","tsType":{"name":"union","raw":"| Node\n| Window\n| ReactElement\n| Component\n| (() => Node | Window | null | undefined)\n| null","elements":[{"name":"Node"},{"name":"Window"},{"name":"ReactElement"},{"name":"Component"},{"name":"unknown"},{"name":"null"}]}},"shouldReturnFocus":{"type":{"name":"bool"},"required":false,"description":"Whether focus should be returned to the trigger when the `<Modal/>` is closed","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"shouldCloseOnDocumentClick":{"type":{"name":"bool"},"required":false,"description":"Whether the `<Modal/>` should request close when the document is clicked","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"onOpen":{"type":{"name":"func"},"required":false,"description":"Callback fired when `<Modal />` content has been mounted in the DOM","tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"TransitionType"},"name":"type"}],"return":{"name":"void"}}}},"onClose":{"type":{"name":"func"},"required":false,"description":"Callback fired when `<Modal />` has been unmounted from the DOM","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Callback fired when the `<Modal />` is requesting to be closed","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.UIEvent | React.FocusEvent,\n  documentClick?: boolean\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.UIEvent | React.FocusEvent","elements":[{"name":"ReactUIEvent","raw":"React.UIEvent"},{"name":"ReactFocusEvent","raw":"React.FocusEvent"}]},"name":"event"},{"type":{"name":"boolean"},"name":"documentClick"}],"return":{"name":"void"}}}},"contentRef":{"type":{"name":"func"},"required":false,"description":"A function that returns a reference to the content element","tsType":{"name":"signature","type":"function","raw":"(dialog: Dialog | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Dialog | null","elements":[{"name":"Dialog"},{"name":"null"}]},"name":"dialog"}],"return":{"name":"void"}}}},"mountNode":{"type":{"name":"union","value":[{"name":"element"},{"name":"func"}]},"required":false,"description":"An element or a function returning an element to use as the mount node\nfor the `<Modal />` (defaults to `document.body`)","tsType":{"name":"PositionMountNode"}},"insertAt":{"type":{"name":"enum","value":[{"value":"'bottom'","computed":false},{"value":"'top'","computed":false}]},"required":false,"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'","tsType":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}]},"defaultValue":{"value":"'bottom'","computed":false}},"liveRegion":{"type":{"name":"union","value":[{"name":"element"},{"name":"arrayOf","value":{"name":"element"}},{"name":"func"}]},"required":false,"description":"An element, function returning an element, or array of elements that will not be hidden from\nthe screen reader when the `<Modal />` is open","tsType":{"name":"union","raw":"| (() => (Element | null)[])\n| (() => Element | null)\n| (Element | null)[]\n| Element\n| null","elements":[{"name":"unknown"},{"name":"unknown"},{"name":"Array","elements":[{"name":"unknown"}],"raw":"(Element | null)[]"},{"name":"Element"},{"name":"null"}]}},"transition":{"type":{"name":"custom","raw":"import { transitionTypePropType } from '@instructure/ui-motion'"},"required":false,"description":"","tsType":{"name":"TransitionType"},"defaultValue":{"value":"'fade'","computed":false}},"onEnter":{"type":{"name":"func"},"required":false,"description":"Callback fired before the <Modal /> transitions in","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onEntering":{"type":{"name":"func"},"required":false,"description":"Callback fired as the <Modal /> begins to transition in","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onEntered":{"type":{"name":"func"},"required":false,"description":"Callback fired after the <Modal /> finishes transitioning in","tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"TransitionType"},"name":"type"}],"return":{"name":"void"}}}},"onExit":{"type":{"name":"func"},"required":false,"description":"Callback fired right before the <Modal /> transitions out","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onExiting":{"type":{"name":"func"},"required":false,"description":"Callback fired as the <Modal /> begins to transition out","tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}}},"onExited":{"type":{"name":"func"},"required":false,"description":"Callback fired after the <Modal /> finishes transitioning out","tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"TransitionType"},"name":"type"}],"return":{"name":"void"}}}},"constrain":{"type":{"name":"enum","value":[{"value":"'window'","computed":false},{"value":"'parent'","computed":false}]},"required":false,"description":"Constrain the Modal to the document window or its closest positioned parent","tsType":{"name":"union","raw":"'window' | 'parent'","elements":[{"name":"literal","value":"'window'"},{"name":"literal","value":"'parent'"}]},"defaultValue":{"value":"'window'","computed":false}},"overflow":{"type":{"name":"enum","value":[{"value":"'scroll'","computed":false},{"value":"'fit'","computed":false}]},"required":false,"description":"Should ModalBody handle overflow with scrollbars, or fit its\ncontent within its own height?","tsType":{"name":"union","raw":"'scroll' | 'fit'","elements":[{"name":"literal","value":"'scroll'"},{"name":"literal","value":"'fit'"}]},"defaultValue":{"value":"'scroll'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","tags":"overlay, portal, dialog","relativePath":"packages/ui-modal/src/Modal/index.tsx","extension":".tsx","srcPath":"packages/ui-modal/src/Modal/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-modal/src/Modal/index.tsx","packageName":"@instructure/ui-modal","requirePath":"@instructure/ui-modal/lib/Modal/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-modal/src/Modal/index.tsx').default","esPath":"@instructure/ui-modal/es/Modal/index","themePath":"packages/ui-modal/src/Modal/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-modal/src/Modal/theme.ts","id":"Modal","title":"Modal"}