{"description":"\n### Choose from four sizes and add margin as needed\n\nThe `size` prop allows you to select from `x-small`, `small`, `medium` and `large`\n-sized spinners. Margin can be added as needed using the `margin` prop.\n\n```js\n---\ntype: example\n---\n<div>\n  <Spinner renderTitle=\"Loading\" size=\"x-small\"/>\n  <Spinner renderTitle=\"Loading\" size=\"small\" margin=\"0 0 0 medium\" />\n  <Spinner renderTitle=\"Loading\" margin=\"0 0 0 medium\" />\n  <Spinner renderTitle=\"Loading\" size=\"large\" margin=\"0 0 0 medium\" />\n</div>\n```\n\n### Different color schemes for use with light and dark backgrounds\n\nSpinner provides an `inverse` color scheme designed to be used with\ndark backgrounds.\n\n```js\n---\ntype: example\n---\n<View background=\"primary-inverse\" as=\"div\">\n  <Spinner renderTitle=\"Loading\" variant=\"inverse\" />\n</View>\n```\n\n### Delay rendering\n\nThe `delay` prop allows you to delay the rendering of the spinner a desired time to prevent flickering in cases of very fast load times.\n\n```js\n---\ntype: example\n---\n<div>\n  <Spinner renderTitle=\"Loading\" size=\"x-small\" delay={1000} />\n  <Spinner renderTitle=\"Loading\" size=\"small\" margin=\"0 0 0 medium\" delay={2000} />\n  <Spinner renderTitle=\"Loading\" margin=\"0 0 0 medium\"  delay={3000} />\n  <Spinner renderTitle=\"Loading\" size=\"large\" margin=\"0 0 0 medium\"  delay={4000} />\n</div>\n```\n\n### Screen reader support\n\nThe `renderTitle` prop is read to screen readers.\n\n```js\n---\ntype: example\n---\n<Spinner renderTitle={() => \"Hello world\"} />\n```\n","displayName":"Spinner","methods":[],"props":{"delay":{"type":{"name":"number"},"required":false,"description":"delay spinner rendering for a time (in ms). Used to prevent flickering in case of very fast load times","tsType":{"name":"number"}},"renderTitle":{"type":{"name":"union","value":[{"name":"func"},{"name":"node"}]},"required":false,"description":"Give the spinner a title to be read by screenreaders","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"size":{"type":{"name":"enum","value":[{"value":"'x-small'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"Different-sized spinners","tsType":{"name":"union","raw":"'x-small' | 'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'x-small'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"variant":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'inverse'","computed":false}]},"required":false,"description":"Different color schemes for use with light or dark backgrounds","tsType":{"name":"union","raw":"'default' | 'inverse'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'inverse'"}]},"defaultValue":{"value":"'default'","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"as":{"type":{"name":"elementType"},"required":false,"description":"Render Spinner \"as\" another HTML element","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'div'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-spinner/src/Spinner/index.tsx","extension":".tsx","srcPath":"packages/ui-spinner/src/Spinner/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-spinner/src/Spinner/index.tsx","packageName":"@instructure/ui-spinner","requirePath":"@instructure/ui-spinner/lib/Spinner/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-spinner/src/Spinner/index.tsx').default","esPath":"@instructure/ui-spinner/es/Spinner/index","themePath":"packages/ui-spinner/src/Spinner/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-spinner/src/Spinner/theme.ts","id":"Spinner","title":"Spinner"}