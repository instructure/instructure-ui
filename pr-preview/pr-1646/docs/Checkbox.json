{"description":"\nBy default, the Checkbox component is a custom styled HTML checkbox. To default the checkbox to checked,\nset the `defaultChecked` prop.\n\nAdjust the size of the checkbox and label text via the `size` prop. The default size is\n`medium`.\n\n```js\n---\ntype: example\n---\n<Checkbox label={lorem.sentence()} value=\"medium\" defaultChecked />\n```\n\nThe default Checkbox in its disabled state:\n\n```js\n---\ntype: example\n---\n<CheckboxGroup\n  defaultValue={['medium']}\n  name=\"example\"\n  description={<ScreenReaderContent>Checkbox examples</ScreenReaderContent>}\n>\n  <Checkbox label={lorem.sentence()} value=\"medium\" disabled />\n  <Checkbox label={lorem.sentence()} value=\"small\" disabled />\n</CheckboxGroup>\n```\n\nThe `indeterminate` property triggers a visual state that handles\nsituations where \"child\" Checkboxes are neither all checked nor all\nunchecked. Note the use of `aria-labelledby` to make the relationship\nbetween the parent and child Checkboxes clear to screenreader users.\n\n_Note: the `toggle` variant does not support the `indeterminate`\nproperty._\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        value: ['his111', 'eng203']\n      }\n    }\n\n    updateValue(value) {\n      const index = this.state.value.indexOf(value)\n\n      if (index === -1) {\n        this.setState({ value: [...this.state.value, value] })\n      } else {\n        this.setState((prevState) => ({\n          value: [\n            ...prevState.value.slice(0, index),\n            ...prevState.value.slice(index + 1)\n          ]\n        }))\n      }\n    }\n\n    render() {\n      return (\n        <FormFieldGroup\n          description={\n            <ScreenReaderContent>\n              <span id=\"groupLabel\">Courses to edit</span>\n            </ScreenReaderContent>\n          }\n          rowSpacing=\"small\"\n        >\n          <Checkbox\n            aria-labelledby=\"groupLabel selectAllLabel\"\n            label={<span id=\"selectAllLabel\">Select all courses</span>}\n            value=\"all\"\n            onChange={() =>\n              this.setState({\n                value:\n                  this.state.value.length === 3\n                    ? []\n                    : ['eng203', 'sci101', 'his111']\n              })\n            }\n            checked={this.state.value.length === 3}\n            indeterminate={\n              this.state.value.length > 0 && this.state.value.length < 3\n            }\n          />\n          <View as=\"div\" padding=\"0 0 0 medium\">\n            <Checkbox\n              aria-labelledby=\"groupLabel eng203Label\"\n              label={<span id=\"eng203Label\">English 203</span>}\n              value=\"eng203\"\n              name=\"courses\"\n              onChange={(event) => {\n                this.updateValue(event.target.value)\n              }}\n              checked={this.state.value.indexOf('eng203') !== -1}\n            />\n          </View>\n          <View as=\"div\" padding=\"0 0 0 medium\">\n            <Checkbox\n              aria-labelledby=\"groupLabel sci101Label\"\n              label={<span id=\"sci101Label\">Science 101</span>}\n              value=\"sci101\"\n              name=\"courses\"\n              onChange={(event) => {\n                this.updateValue(event.target.value)\n              }}\n              checked={this.state.value.indexOf('sci101') !== -1}\n            />\n          </View>\n          <View as=\"div\" padding=\"0 0 0 medium\">\n            <Checkbox\n              aria-labelledby=\"groupLabel hist101Label\"\n              label={<span id=\"hist101Label\">History 111</span>}\n              value=\"his111\"\n              name=\"courses\"\n              onChange={(event) => {\n                this.updateValue(event.target.value)\n              }}\n              checked={this.state.value.indexOf('his111') !== -1}\n            />\n          </View>\n        </FormFieldGroup>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [value, setValue] = useState(['his111', 'eng203'])\n\n    const updateValue = (valueToUpdate) => {\n      const index = value.indexOf(valueToUpdate)\n      console.log(index)\n      if (index === -1) {\n        setValue([...value, valueToUpdate])\n      } else {\n        setValue([...value.slice(0, index), ...value.slice(index + 1)])\n      }\n    }\n\n    return (\n      <FormFieldGroup\n        description={\n          <ScreenReaderContent>\n            <span id=\"groupLabel\">Courses to edit</span>\n          </ScreenReaderContent>\n        }\n        rowSpacing=\"small\"\n      >\n        <Checkbox\n          aria-labelledby=\"groupLabel selectAllLabel\"\n          label={<span id=\"selectAllLabel\">Select all courses</span>}\n          value=\"all\"\n          onChange={() =>\n            setValue(value.length === 3 ? [] : ['eng203', 'sci101', 'his111'])\n          }\n          checked={value.length === 3}\n          indeterminate={value.length > 0 && value.length < 3}\n        />\n        <View as=\"div\" padding=\"0 0 0 medium\">\n          <Checkbox\n            aria-labelledby=\"groupLabel eng203Label\"\n            label={<span id=\"eng203Label\">English 203</span>}\n            value=\"eng203\"\n            name=\"courses\"\n            onChange={(event) => {\n              updateValue(event.target.value)\n            }}\n            checked={value.indexOf('eng203') !== -1}\n          />\n        </View>\n        <View as=\"div\" padding=\"0 0 0 medium\">\n          <Checkbox\n            aria-labelledby=\"groupLabel sci101Label\"\n            label={<span id=\"sci101Label\">Science 101</span>}\n            value=\"sci101\"\n            name=\"courses\"\n            onChange={(event) => {\n              updateValue(event.target.value)\n            }}\n            checked={value.indexOf('sci101') !== -1}\n          />\n        </View>\n        <View as=\"div\" padding=\"0 0 0 medium\">\n          <Checkbox\n            aria-labelledby=\"groupLabel hist101Label\"\n            label={<span id=\"hist101Label\">History 111</span>}\n            value=\"his111\"\n            name=\"courses\"\n            onChange={(event) => {\n              updateValue(event.target.value)\n            }}\n            checked={value.indexOf('his111') !== -1}\n          />\n        </View>\n      </FormFieldGroup>\n    )\n  }\n\n  render(<Example />)\n  ```\n\nSetting the `variant` prop to `toggle` turns the checkbox into a toggle switch. For **toggle only** the size prop affects the size of the label and not the actual size of the switch.\n\n```js\n---\ntype: example\n---\n<FormFieldGroup description={<ScreenReaderContent>Checkbox examples</ScreenReaderContent>}>\n  <Checkbox label=\"Small size\" value=\"small\" variant=\"toggle\" size=\"small\" defaultChecked />\n  <Checkbox label=\"Medium size\" value=\"medium\" variant=\"toggle\" />\n  <Checkbox label=\"Large size\" value=\"large\" variant=\"toggle\" size=\"large\" defaultChecked />\n</FormFieldGroup>\n```\n\nTo change the label placement for the toggle variety, use the labelPlacement prop. The default\nplacement is 'end'.\n\n_Note: the `simple` variant does not support the `labelPlacement`\nproperty._\n\n```js\n---\ntype: example\n---\n<FormFieldGroup description={<ScreenReaderContent>Toggle label examples</ScreenReaderContent>}>\n  <Checkbox label=\"Top\" variant=\"toggle\" labelPlacement=\"top\" defaultChecked />\n  <Checkbox label=\"Start\" variant=\"toggle\" labelPlacement=\"start\" />\n  <Checkbox label=\"End\" variant=\"toggle\" labelPlacement=\"end\" defaultChecked />\n</FormFieldGroup>\n```\n\nYou might want to hide the label text when using the toggle switch variant. Do that by wrapping\nthe text in the [ScreenReaderContent](#ScreenReaderContent) component.\n\n```js\n---\ntype: example\n---\n<Checkbox\n  label={<ScreenReaderContent>Screenreader-accessible label</ScreenReaderContent>}\n  value=\"accessible\"\n  variant=\"toggle\"\n/>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Align to the left side of the label</Figure.Item>\n    <Figure.Item>Use when multiple selections are allowed</Figure.Item>\n    <Figure.Item>Use to save space from toggles</Figure.Item>\n    <Figure.Item>Stack vertically if there is more than two options to select</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Run more than two checkboxes horizontally</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Checkbox","methods":[],"props":{"label":{"type":{"name":"node"},"required":true,"description":"","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"id":{"type":{"name":"string"},"required":false,"description":"","tsType":{"name":"string"}},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n  }`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"defaultChecked":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"}},"checked":{"type":{"name":"custom","raw":"controllable(PropTypes.bool, 'onChange', 'defaultChecked')"},"required":false,"description":"whether the input is checked or not (must be accompanied by an `onChange` prop)","tsType":{"name":"boolean"}},"onChange":{"type":{"name":"func"},"required":false,"description":"when used with the `checked` prop, the component will not control its own state","tsType":{"name":"signature","type":"function","raw":"(e: React.ChangeEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}}},"onKeyDown":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(e: React.KeyboardEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}}},"onFocus":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(e: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(e: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}}},"onMouseOver":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}}},"onMouseOut":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"e"}],"return":{"name":"void"}}}},"disabled":{"type":{"name":"bool"},"required":false,"description":"Whether or not to disable the checkbox","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"readOnly":{"type":{"name":"bool"},"required":false,"description":"Works just like disabled but keeps the same styles as if it were active","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"indeterminate":{"type":{"name":"bool"},"required":false,"description":"Visual state showing that child checkboxes are a combination of checked and unchecked","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"variant":{"type":{"name":"enum","value":[{"value":"'simple'","computed":false},{"value":"'toggle'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'simple' | 'toggle'","elements":[{"name":"literal","value":"'simple'"},{"name":"literal","value":"'toggle'"}]},"defaultValue":{"value":"'simple'","computed":false}},"inline":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"labelPlacement":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'start'","computed":false},{"value":"'end'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'top' | 'start' | 'end'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"}]},"defaultValue":{"value":"'end'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","tags":"toggle, switch","relativePath":"packages/ui-checkbox/src/Checkbox/index.tsx","extension":".tsx","srcPath":"packages/ui-checkbox/src/Checkbox/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-checkbox/src/Checkbox/index.tsx","packageName":"@instructure/ui-checkbox","requirePath":"@instructure/ui-checkbox/lib/Checkbox/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-checkbox/src/Checkbox/index.tsx').default","esPath":"@instructure/ui-checkbox/es/Checkbox/index","id":"Checkbox","title":"Checkbox"}