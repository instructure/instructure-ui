{"description":"\n### Create a basic column layout\n\nSimply create a `<Grid>` with some `<Grid.Row>` and `Grid.Col` children, and\nthe component will evenly distribute its columns.\n\nNote the `visualDebug` prop you can set if you're wondering\nexactly where your Grid columns are.\n\n```js\n---\ntype: example\n---\n<div>\n  <Grid visualDebug>\n    <Grid.Row>\n      <Grid.Col>\n        {lorem.paragraph()}\n      </Grid.Col>\n      <Grid.Col>\n        {lorem.paragraph()}\n      </Grid.Col>\n      <Grid.Col>\n        {lorem.paragraph()}\n      </Grid.Col>\n    </Grid.Row>\n  </Grid>\n  <p>\n    {lorem.paragraph()}\n  </p>\n</div>\n```\n\n### Make the Grid stack until a certain breakpoint/screen width\n\nOften you will want to stack your `<Grid.Col>`s until you reach a certain\nscreen width. To do this, use the `startAt` prop.\n\nReduce the screen width and see how the Grid below only displays its\ncolumns inline after it hits the `large` breakpoint. Note that by\ndefault, stacked columns have bottom margin for visual separation.\n\n```js\n---\ntype: example\n---\n<Grid startAt=\"large\" visualDebug>\n  <Grid.Row>\n    <Grid.Col>\n      {lorem.paragraph()}\n    </Grid.Col>\n    <Grid.Col>\n      {lorem.paragraph()}\n    </Grid.Col>\n  </Grid.Row>\n</Grid>\n```\n\n### Control the width of each column\n\nYou can control the width of the `<Grid.Col>` columns for each\nbreakpoint with the `width` prop. Please note the following:\n\n- If you don't need complex responsive behavior, you can just set\n  the width property to a single value for all breakpoints after\n  and including the breakpoint set via the `startAt` prop. e.g.\n  `<Grid.Col width={2}>`\n\n- The Grid is made up of **12 columns**. If the columns' total\n  width exceeds 12, the layout will break.\n\n- In addition to accepting any positive, `<=12` numerical values,\n  columns can also accept an `auto` value. This tells the column\n  to expand to the width of its content. (See the final example Grid\n  to see how this can be useful for right-aligning column content.)\n\n- The `startAt` prop setting supersedes any `<Grid.Col>` width props. For\n  example, if you set `width={{small: 2}}` on a column, but the `startAt` prop\n  on your `<Grid>` is set to `medium`, the `width={{small: 2}}` will be ignored.\n\n```js\n---\ntype: example\n---\n<Grid visualDebug>\n  <Grid.Row>\n    <Grid.Col width={{small: 4, medium: 6, large: 3, xLarge: 6}}>\n      {lorem.paragraph()}\n    </Grid.Col>\n    <Grid.Col width={{small: 4, medium: 4, large: 3, xLarge: 5}}>\n      {lorem.paragraph()}\n    </Grid.Col>\n    <Grid.Col width={{small: 4, medium: 2, large: 6, xLarge: 1}}>\n      {lorem.paragraph()}\n    </Grid.Col>\n  </Grid.Row>\n</Grid>\n```\n\n### Add space/gutter between columns and rows\n\nBy default there is uniform spacing between Grid columns and rows, use the `colSpacing` and\n`rowSpacing` props, which accept `small`, `medium`, and `large` as values, you can change amount of spacing,\nor remove it with `none`.\n\n```js\n---\ntype: example\n---\n<Grid colSpacing=\"large\" rowSpacing=\"small\" visualDebug>\n  <Grid.Row>\n    <Grid.Col>\n      {lorem.paragraph()}\n    </Grid.Col>\n    <Grid.Col>\n      {lorem.paragraph()}\n    </Grid.Col>\n    <Grid.Col>\n      {lorem.paragraph()}\n    </Grid.Col>\n  </Grid.Row>\n  <Grid.Row>\n    <Grid.Col>\n      {lorem.paragraph()}\n    </Grid.Col>\n    <Grid.Col>\n      {lorem.paragraph()}\n    </Grid.Col>\n    <Grid.Col>\n      {lorem.paragraph()}\n    </Grid.Col>\n  </Grid.Row>\n</Grid>\n```\n\nAnother useful method for spacing out `<Grid.Col>` elements is to use the `hAlign`\nprop together with set widths on the columns. `hAlign` accepts the following\nvalues: `start`, `center`, `end`, `space-around`, and `space-between`.\n\n#### `hAlign=\"space-between\"`\n\n```js\n---\ntype: example\n---\n  <Grid hAlign=\"space-between\" visualDebug>\n    <Grid.Row>\n      <Grid.Col width={2}>\n        {lorem.paragraph()}\n      </Grid.Col>\n      <Grid.Col width={4}>\n        {lorem.paragraph()}\n      </Grid.Col>\n      <Grid.Col width={2}>\n        {lorem.paragraph()}\n      </Grid.Col>\n    </Grid.Row>\n  </Grid>\n```\n\n#### `hAlign=\"space-around\"`\n\n```js\n---\ntype: example\n---\n  <Grid hAlign=\"space-around\" visualDebug>\n    <Grid.Row>\n      <Grid.Col width={2}>\n        {lorem.paragraph()}\n      </Grid.Col>\n      <Grid.Col width={4}>\n        {lorem.paragraph()}\n      </Grid.Col>\n      <Grid.Col width={2}>\n        {lorem.paragraph()}\n      </Grid.Col>\n    </Grid.Row>\n  </Grid>\n```\n\n### Vertically align your columns\n\nAlign your columns along the vertical axis with the `vAlign` prop. In the example\nbelow the Grid is set to vertically center its columns.\n\n```js\n---\ntype: example\n---\n  <Grid vAlign=\"middle\" visualDebug>\n    <Grid.Row>\n      <Grid.Col>\n        {lorem.paragraph()}\n      </Grid.Col>\n      <Grid.Col>\n        {lorem.paragraph()}\n      </Grid.Col>\n      <Grid.Col>\n        {lorem.paragraph()}\n      </Grid.Col>\n    </Grid.Row>\n  </Grid>\n```\n\n### Putting it all together\n\nLet's use `<Grid>` to create a page header with a heading on the left side\nand some action buttons on the right. In addition, let's say that on small\nscreens &#151; like smalls &#151; we want the header to stack the heading and\nthe buttons.\n\nUse `startAt=\"medium\"` to make the Grid only affect most tablets and above. To align\nthe buttons to the right, add `width=\"auto\"` to their `<Grid.Col>`. This will\nmake the column only expand to fit the width of the buttons. Because the\n`<Grid.Col>` containing the heading has no set width, it will expand by default\nto take up all the width it can, pinning the columns containing the buttons\nto the right.\n\n```js\n---\ntype: example\n---\n  <Grid startAt=\"medium\" vAlign=\"middle\" colSpacing=\"none\">\n    <Grid.Row>\n      <Grid.Col>\n        <Heading>I am a fairly lengthy heading for the page</Heading>\n      </Grid.Col>\n      <Grid.Col width=\"auto\">\n        <Button>Cancel</Button>\n        &nbsp;\n        <Button color=\"primary\" renderIcon={IconAddSolid}>Widget</Button>\n      </Grid.Col>\n    </Grid.Row>\n  </Grid>\n```\n","displayName":"Grid","methods":[],"props":{"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([GridRow, ScreenReaderContent])"},"required":false,"description":"One of: `Grid.Row`, `ScreenReaderContent`","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"defaultValue":{"value":"null","computed":false}},"colSpacing":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'none' | 'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'none'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"rowSpacing":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'none' | 'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'none'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"hAlign":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'center'","computed":false},{"value":"'end'","computed":false},{"value":"'space-around'","computed":false},{"value":"'space-between'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'start' | 'center' | 'end' | 'space-around' | 'space-between'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"},{"name":"literal","value":"'space-around'"},{"name":"literal","value":"'space-between'"}]},"defaultValue":{"value":"'start'","computed":false}},"vAlign":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'middle'","computed":false},{"value":"'bottom'","computed":false},{"value":"'stretch'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'top' | 'middle' | 'bottom' | 'stretch'","elements":[{"name":"literal","value":"'top'"},{"name":"literal","value":"'middle'"},{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'stretch'"}]},"defaultValue":{"value":"'top'","computed":false}},"startAt":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false},{"value":"'x-large'","computed":false},{"value":"null","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'small' | 'medium' | 'large' | 'x-large' | null","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"},{"name":"literal","value":"'x-large'"},{"name":"null"}]},"defaultValue":{"value":"'small'","computed":false}},"visualDebug":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-grid/src/Grid/index.tsx","extension":".tsx","srcPath":"packages/ui-grid/src/Grid/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-grid/src/Grid/index.tsx","packageName":"@instructure/ui-grid","requirePath":"@instructure/ui-grid/lib/Grid/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-grid/src/Grid/index.tsx').default","esPath":"@instructure/ui-grid/es/Grid/index","themePath":"packages/ui-grid/src/Grid/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-grid/src/Grid/theme.ts","id":"Grid","title":"Grid"}