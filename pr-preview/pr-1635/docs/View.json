{"description":"@module View\n### View: the visual basis of Instructure UI\n\nView provides the base appearance for most of the components\nin Instructure UI.\n\n> **Because View provides access to so many visual styles, it\n> can be easy to abuse.** Before you use View, ensure that the component\n> you're trying to style doesn't already have access to the same props.\n> For example, don't wrap a `<Button>` in a `<View>` just to add\n> `margin` around the button: Instead, use the `margin` prop on the\n> button itself.\n\n```js\n---\ntype: example\n---\n<View\n  as=\"div\"\n  margin=\"small\"\n  padding=\"large\"\n  textAlign=\"center\"\n  background=\"primary\"\n>\n  {lorem.sentence()}\n</View>\n```\n\n### `background`\n\nChange the background color using the `background` prop.\n\n```js\n---\ntype: example\n---\n<div>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"transparent\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"secondary\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary-inverse\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"brand\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"alert\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"success\"\n  >\n    {lorem.sentence()}\n  </View>\n    <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"danger\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"warning\"\n  >\n    {lorem.sentence()}\n  </View>\n</div>\n```\n\n### `shadow`\n\nAdd a CSS box-shadow to the View using the `shadow` prop.\n\n```js\n---\ntype: example\n---\n<div>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"large\"\n    background=\"primary\"\n    shadow=\"resting\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"large\"\n    background=\"primary\"\n    shadow=\"above\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"large\"\n    background=\"primary\"\n    shadow=\"topmost\"\n  >\n    {lorem.sentence()}\n  </View>\n</div>\n```\n\n### `borderWidth`\n\nApply a border with the `borderWidth` prop. Utilize\n[CSS shorthand style](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties)\nto apply different border styles to individual edges.\n\n```js\n---\ntype: example\n---\n<div>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"small\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"medium\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"large none\"\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"none none small none\"\n  >\n    {lorem.sentence()}\n  </View>\n</div>\n```\n\n### `borderColor`\n\nChange the color of View's border for different contexts via the `borderColor` prop.\n\n```js\n---\ntype: example\n---\n<div>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"large\"\n  >\n    primary\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"large\"\n    borderColor=\"info\"\n  >\n    info\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"large\"\n    borderColor=\"warning\"\n  >\n    warning\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"large\"\n    borderColor=\"danger\"\n  >\n    danger\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"large\"\n    borderColor=\"alert\"\n  >\n    alert\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"large\"\n    borderColor=\"success\"\n  >\n    success\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    margin=\"small\"\n    padding=\"small\"\n    background=\"primary\"\n    borderWidth=\"large\"\n    borderColor=\"brand\"\n  >\n    brand\n  </View>\n</div>\n```\n\n### `borderRadius`\n\nAdjust the border radius using the `borderRadius` prop. Utilize\n[CSS shorthand style](https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties)\nto apply different border radii to individual corners.\n\n```js\n---\ntype: example\n---\n<div>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"medium\"\n    background=\"primary-inverse\"\n    borderRadius=\"medium\"\n    textAlign=\"center\"\n  >\n    medium\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"medium\"\n    background=\"primary-inverse\"\n    borderRadius=\"large large none none\"\n    textAlign=\"center\"\n  >\n    large large none none\n  </View>\n  <View\n    as=\"span\"\n    display=\"inline-block\"\n    maxWidth=\"10rem\"\n    margin=\"small\"\n    padding=\"medium\"\n    background=\"primary-inverse\"\n    borderRadius=\"none none large large\"\n    textAlign=\"center\"\n  >\n    none none large large\n  </View>\n  <View\n    display=\"inline-block\"\n    width=\"6rem\"\n    height=\"6rem\"\n    margin=\"small\"\n    padding=\"medium\"\n    background=\"primary-inverse\"\n    borderRadius=\"circle\"\n    textAlign=\"center\"\n  >\n    circle\n  </View>\n  <View\n    display=\"inline-block\"\n    width=\"10rem\"\n    margin=\"small\"\n    padding=\"medium\"\n    background=\"primary-inverse\"\n    borderRadius=\"pill\"\n    textAlign=\"center\"\n  >\n    pill\n  </View>\n</div>\n```\n\n### `position`\n\n`position` sets the CSS position rule for the component: `static`, `absolute`, `relative`,\n`sticky`, or `fixed`.\n\n> Note that `position=\"sticky\"` is currently [not as fully supported](https://caniuse.com/#feat=css-sticky)\n> as the other values.\n\n```js\n---\ntype: example\n---\n<View\n  position=\"relative\"\n  as=\"div\"\n  height=\"200px\"\n  borderWidth=\"small\"\n>\n  <View\n    as=\"div\"\n    position=\"absolute\"\n    insetInlineEnd=\"100px\"\n    insetBlockStart=\"10px\"\n    insetBlockEnd=\"0\"\n    background=\"primary-inverse\"\n  >\n    Positioned View inside a View with relative positioning.\n  </View>\n</View>\n```\n\n### Indicating that a View is focused\n\nBy default, if a `View` is rendered as a focusable element, a focus outline will display when it is focused for accessibility.\n\n> Note that `position` must be set to `relative` for the focus ring to display.\n> (This restriction exists because the focus ring requires styling a pseudo element\n> that has absolute positioning.)\n\n```javascript\n---\ntype: example\n---\n<View\n  position=\"relative\"\n  tabIndex=\"0\"\n  role=\"button\"\n  cursor=\"pointer\"\n  display=\"block\"\n  margin=\"large\"\n  padding=\"small\"\n>\n  Tab here to see the focus outline\n</View>\n```\n\nIn some situations, you may want to manually control when the focus outline is displayed instead of leaving it up to the browser.\nThis can be done using the `withFocusOutline` prop. Set it to `true` to make View's focus outline display or `false` to hide it.\nBe careful when overriding the display of the focus outline as it is essential for accessibility.\n\nThe focus outline adjusts to account for the shape of the View. For example, the following values can be set for `borderRadius`:\n`circle`, `pill`, `small`, `medium`, and `large`. In each case, the border radius of the focus outline will automatically adjust\nto match the border radius of the corresponding View. For Views with irregular border radius (e.g., `borderRadius=\"small large none medium\"`), the focus outline will appear with square edges. The color of the focus outline can be\nchanged for different contexts via the `focusColor` property.\n\n```javascript\n---\ntype: example\n---\nclass FocusedExample extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      isFocused: true,\n      inset: false\n    }\n  }\n\n  updateFocused = (event) => {\n    this.setState({isFocused: event.target.checked})\n  }\n\n  updateInset = (event) => {\n    this.setState({inset: event.target.checked})\n  }\n\n  render () {\n    const { isFocused, focusPosition } = this.state\n\n    return (\n      <View as=\"div\">\n        <View as=\"div\" background=\"primary\" padding=\"small\" margin=\"0 0 small\" borderWidth=\"small\">\n          <FormFieldGroup\n            rowSpacing=\"small\"\n            description={<ScreenReaderContent>View focus outline examples</ScreenReaderContent>}\n          >\n            <Checkbox\n              label=\"withFocusOutline\"\n              checked={this.state.isFocused}\n              onChange={this.updateFocused}\n            />\n            <Checkbox\n              label=\"focusPosition = inset\"\n              checked={this.state.inset}\n              onChange={this.updateInset}\n            />\n          </FormFieldGroup>\n        </View>\n        <View as=\"div\">\n          <code>borderRadius =</code>\n          <View\n            display=\"inline-block\"\n            margin=\"small\"\n            padding=\"small\"\n            background=\"primary\"\n            borderRadius=\"small\"\n            borderWidth=\"small\"\n            position=\"relative\"\n            withFocusOutline={this.state.isFocused}\n            focusPosition={this.state.inset ? 'inset' : 'offset'}\n          >\n            small\n          </View>\n          <View\n            display=\"inline-block\"\n            margin=\"small\"\n            padding=\"small\"\n            background=\"primary\"\n            borderRadius=\"medium\"\n            borderWidth=\"small\"\n            position=\"relative\"\n            withFocusOutline={this.state.isFocused}\n            focusPosition={this.state.inset ? 'inset' : 'offset'}\n          >\n            medium\n          </View>\n          <View\n            display=\"inline-block\"\n            margin=\"small\"\n            padding=\"small\"\n            background=\"primary\"\n            borderRadius=\"large\"\n            borderWidth=\"small\"\n            position=\"relative\"\n            withFocusOutline={this.state.isFocused}\n            focusPosition={this.state.inset ? 'inset' : 'offset'}\n          >\n            large\n          </View>\n          <View\n            display=\"inline-block\"\n            height=\"100px\"\n            width=\"100px\"\n            margin=\"small\"\n            background=\"primary\"\n            borderRadius=\"circle\"\n            borderWidth=\"small\"\n            position=\"relative\"\n            withFocusOutline={this.state.isFocused}\n            focusPosition={this.state.inset ? 'inset' : 'offset'}\n          >\n            <Flex\n              width=\"100%\"\n              height=\"100%\"\n              alignItems=\"center\"\n              justifyItems=\"center\"\n            >\n              <Flex.Item>\n                circle\n              </Flex.Item>\n            </Flex>\n          </View>\n          <View background=\"primary-inverse\" display=\"inline-block\" padding=\"small\">\n            <View\n              display=\"block\"\n              margin=\"small\"\n              padding=\"small\"\n              background=\"primary-inverse\"\n              borderRadius=\"large\"\n              borderWidth=\"small\"\n              position=\"relative\"\n              withFocusOutline={this.state.isFocused}\n              focusColor=\"inverse\"\n              focusPosition={this.state.inset ? 'inset' : 'offset'}\n            >\n              medium\n            </View>\n          </View>\n          <View\n            display=\"inline-block\"\n            margin=\"small\"\n            padding=\"small\"\n            background=\"primary\"\n            borderRadius=\"pill\"\n            borderWidth=\"small\"\n            position=\"relative\"\n            focusColor=\"success\"\n            width=\"100px\"\n            textAlign=\"center\"\n            withFocusOutline={this.state.isFocused}\n            focusPosition={this.state.inset ? 'inset' : 'offset'}\n          >\n            pill\n          </View>\n          <View\n            display=\"inline-block\"\n            margin=\"small\"\n            padding=\"small\"\n            background=\"primary\"\n            borderWidth=\"small\"\n            borderRadius=\"none large\"\n            focusColor=\"danger\"\n            position=\"relative\"\n            withFocusOutline={this.state.isFocused}\n            focusPosition={this.state.inset ? 'inset' : 'offset'}\n          >\n            none large\n          </View>\n        </View>\n      </View>\n    )\n  }\n}\n\nrender(<FocusedExample />)\n```\n\nHandle vertical and horizontal content overflow with the `overflowX` and `overflowY`\nprops.\n\n> **Important CSS note:** Setting one axis to `visible` and setting the other to a different value results in `visible` behaving as `auto`.\n\n```javascript\n---\ntype: example\n---\nclass OverflowExample extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      overflowY: 'visible'\n    }\n  }\n\n  updateOverflowY = (event, value) => {\n    this.setState({\n      overflowY: value\n    })\n  }\n\n  updateOverflowX = (event, value) => {\n    this.setState({\n      overflowX: value\n    })\n  }\n\n  render () {\n    return (\n      <View as=\"div\">\n        <FormFieldGroup\n          description={<ScreenReaderContent>Overflow example</ScreenReaderContent>}\n          rowSpacing=\"small\"\n          vAlign=\"top\"\n          layout=\"columns\"\n        >\n          <RadioInputGroup\n            onChange={this.updateOverflowY}\n            name=\"overflowY\"\n            defaultValue=\"visible\"\n            variant=\"toggle\"\n            description=\"overflowY =\"\n          >\n            <RadioInput label=\"visible\" value=\"visible\" />\n            <RadioInput label=\"auto\" value=\"auto\" />\n            <RadioInput label=\"hidden\" value=\"hidden\" />\n          </RadioInputGroup>\n          <RadioInputGroup\n            onChange={this.updateOverflowX}\n            name=\"overflowX\"\n            defaultValue=\"visible\"\n            variant=\"toggle\"\n            description=\"overflowX =\"\n          >\n            <RadioInput label=\"visible\" value=\"visible\" />\n            <RadioInput label=\"auto\" value=\"auto\" />\n            <RadioInput label=\"hidden\" value=\"hidden\" />\n          </RadioInputGroup>\n        </FormFieldGroup>\n        <View\n          as=\"div\"\n          height=\"7rem\"\n          width=\"20rem\"\n          margin=\"medium none x-large\"\n          overflowY={this.state.overflowY}\n          overflowX={this.state.overflowX}\n          withVisualDebug\n        >\n          <div style={{width: '30rem', height: '10rem'}}>\n            <Img src={avatarSquare} constrain=\"cover\" />\n          </div>\n\n        </View>\n      </View>\n    )\n  }\n}\n\nrender(<OverflowExample />)\n```\n\n### Debugging\n\nSet the `withVisualDebug` prop to see the View's boundaries.\n\n```js\n---\ntype: example\n---\n<div>\n  <View\n    as=\"div\"\n    padding=\"large\"\n    withVisualDebug\n  >\n    {lorem.sentence()}\n  </View>\n  <View\n    as=\"div\"\n    display=\"flex\"\n    withVisualDebug\n  >\n    <View\n      as=\"div\"\n      margin=\"small\"\n      padding=\"small\"\n      withVisualDebug\n    >\n      {lorem.sentence()}\n    </View>\n    <View\n      as=\"div\"\n      margin=\"small\"\n      padding=\"small\"\n      withVisualDebug\n    >\n      {lorem.sentence()}\n    </View>\n  </View>\n</div>\n```\n\n### The `as` prop\n\nChange the `as` prop to set what element the View should render as.\nIn the example below a `<section>` wraps a `<header>` and a paragraph of content.\nThe outermost `<section>` View provides padding for all the content, while\nthe header and paragraph are separated by bottom margin from the `<header>` View.\n\n```js\n---\ntype: example\n---\n<View\n  as=\"section\"\n  padding=\"small\"\n  withVisualDebug\n>\n  <View\n    as=\"header\"\n    margin=\"0 0 medium\"\n    withVisualDebug\n  >\n  Some header content\n  </View>\n  <Text as=\"p\">{lorem.paragraph()}</Text>\n</View>\n```\n\n### Inline Views\n\nBy default, View will render as a span which displays inline. When using the `as`\nprop to render a block level element, setting `display` to `inline-block`, styles\nthe View to display inline-block with other inline elements.\n\n```js\n---\ntype: example\n---\n<View as=\"div\" textAlign=\"center\" padding=\"x-small\" withVisualDebug>\n  <View\n    as=\"div\"\n    display=\"inline-block\"\n    withVisualDebug\n    textAlign=\"end\"\n    margin=\"large auto\"\n    padding=\"0 small 0 0\"\n  >\n    {lorem.sentence()}\n  </View>\n  <Button color=\"success\">Some Action</Button>\n</View>\n```\n","displayName":"View","methods":[],"props":{"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render as the component root, `span` by default","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"display":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'inline'","computed":false},{"value":"'block'","computed":false},{"value":"'inline-block'","computed":false},{"value":"'flex'","computed":false},{"value":"'inline-flex'","computed":false}]},"required":false,"description":"By default the display prop is 'auto', meaning it takes on the\ndisplay rules of the html element it's rendered as (see `as` prop).","tsType":{"name":"union","raw":"| 'auto'\n| 'inline'\n| 'block'\n| 'inline-block'\n| 'flex'\n| 'inline-flex'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'inline'"},{"name":"literal","value":"'block'"},{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'flex'"},{"name":"literal","value":"'inline-flex'"}]},"defaultValue":{"value":"'auto'","computed":false}},"overflowX":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'hidden'","computed":false},{"value":"'visible'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'auto' | 'hidden' | 'visible'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'hidden'"},{"name":"literal","value":"'visible'"}]},"defaultValue":{"value":"'visible'","computed":false}},"overflowY":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'hidden'","computed":false},{"value":"'visible'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'auto' | 'hidden' | 'visible'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'hidden'"},{"name":"literal","value":"'visible'"}]},"defaultValue":{"value":"'visible'","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"padding":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `padding=\"small x-large large\"`.","tsType":{"name":"Spacing"}},"height":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"width":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"maxHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"maxWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"minHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"minWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"children":{"type":{"name":"node"},"required":false,"description":"The children to render inside the <View />","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"textAlign":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'center'","computed":false},{"value":"'end'","computed":false}]},"required":false,"description":"Designates the text alignment within the `<View />`","tsType":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}]}},"borderWidth":{"type":{"name":"custom","raw":"ThemeablePropTypes.borderWidth"},"required":false,"description":"Accepts the familiar CSS shorthand to designate border widths corresponding\nto edges","tsType":{"name":"BorderWidth"}},"borderRadius":{"type":{"name":"custom","raw":"ThemeablePropTypes.borderRadius"},"required":false,"description":"Accepts `small`, `medium`, `large`, `circle`, and `pill`. Border radius can be\nassigned to individual corners in CSS shorthand style (e.g., `\"medium large none pill\"`).","tsType":{"name":"BorderRadii"}},"borderColor":{"type":{"name":"enum","value":[{"value":"'transparent'","computed":false},{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'brand'","computed":false},{"value":"'info'","computed":false},{"value":"'success'","computed":false},{"value":"'warning'","computed":false},{"value":"'alert'","computed":false},{"value":"'danger'","computed":false}]},"required":false,"description":"Sets the color of the View border","tsType":{"name":"union","raw":"| 'transparent'\n| 'primary'\n| 'secondary'\n| 'brand'\n| 'info'\n| 'success'\n| 'warning'\n| 'alert'\n| 'danger'","elements":[{"name":"literal","value":"'transparent'"},{"name":"literal","value":"'primary'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'brand'"},{"name":"literal","value":"'info'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'warning'"},{"name":"literal","value":"'alert'"},{"name":"literal","value":"'danger'"}]},"defaultValue":{"value":"'primary'","computed":false}},"background":{"type":{"name":"enum","value":[{"value":"'transparent'","computed":false},{"value":"'primary'","computed":false},{"value":"'secondary'","computed":false},{"value":"'primary-inverse'","computed":false},{"value":"'brand'","computed":false},{"value":"'info'","computed":false},{"value":"'alert'","computed":false},{"value":"'success'","computed":false},{"value":"'danger'","computed":false},{"value":"'warning'","computed":false}]},"required":false,"description":"Designates the background style of the `<View />`","tsType":{"name":"union","raw":"| 'transparent'\n| 'primary'\n| 'secondary'\n| 'primary-inverse'\n| 'brand'\n| 'info'\n| 'alert'\n| 'success'\n| 'danger'\n| 'warning'","elements":[{"name":"literal","value":"'transparent'"},{"name":"literal","value":"'primary'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'primary-inverse'"},{"name":"literal","value":"'brand'"},{"name":"literal","value":"'info'"},{"name":"literal","value":"'alert'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'danger'"},{"name":"literal","value":"'warning'"}]}},"shadow":{"type":{"name":"custom","raw":"ThemeablePropTypes.shadow"},"required":false,"description":"Controls the shadow depth for the `<View />`","tsType":{"name":"Shadow"}},"stacking":{"type":{"name":"custom","raw":"ThemeablePropTypes.stacking"},"required":false,"description":"Controls the z-index depth for the `<View />`","tsType":{"name":"Stacking"}},"cursor":{"type":{"name":"custom","raw":"import { cursor as cursorPropTypes } from '@instructure/ui-prop-types'"},"required":false,"description":"Specify a mouse cursor to use when hovering over the `<View />`","tsType":{"name":"Cursor"}},"position":{"type":{"name":"enum","value":[{"value":"'static'","computed":false},{"value":"'absolute'","computed":false},{"value":"'relative'","computed":false},{"value":"'sticky'","computed":false},{"value":"'fixed'","computed":false}]},"required":false,"description":"Specify a value for the CSS position property. Use `relative` if `focusable` will be true.","tsType":{"name":"union","raw":"'static' | 'absolute' | 'relative' | 'sticky' | 'fixed'","elements":[{"name":"literal","value":"'static'"},{"name":"literal","value":"'absolute'"},{"name":"literal","value":"'relative'"},{"name":"literal","value":"'sticky'"},{"name":"literal","value":"'fixed'"}]},"defaultValue":{"value":"'static'","computed":false}},"insetInlineStart":{"type":{"name":"string"},"required":false,"description":"The `left` CSS property in left-to-right interfaces. Will not do anything if `position === \"static\"`.","tsType":{"name":"string"}},"insetInlineEnd":{"type":{"name":"string"},"required":false,"description":"The `right` CSS property in left-to-right interfaces. Will not do anything if `position === \"static\"`.","tsType":{"name":"string"}},"insetBlockStart":{"type":{"name":"string"},"required":false,"description":"The `top` CSS property. Will not do anything if `position === \"static\"`.","tsType":{"name":"string"}},"insetBlockEnd":{"type":{"name":"string"},"required":false,"description":"The `bottom` CSS property. Will not do anything if `position === \"static\"`.","tsType":{"name":"string"}},"withFocusOutline":{"type":{"name":"bool"},"required":false,"description":"Manually control if the `View` should display a focus outline. When left undefined (which is the default)\nthe focus outline will display automatically if the `View` is focusable and receives focus.\nNote: This props is applicable only when the position prop is set to relative.","tsType":{"name":"boolean"}},"focusPosition":{"type":{"name":"enum","value":[{"value":"'offset'","computed":false},{"value":"'inset'","computed":false}]},"required":false,"description":"Determines whether the focus outline displays offset or inset from the focused View","tsType":{"name":"union","raw":"'offset' | 'inset'","elements":[{"name":"literal","value":"'offset'"},{"name":"literal","value":"'inset'"}]},"defaultValue":{"value":"'offset'","computed":false}},"focusColor":{"type":{"name":"enum","value":[{"value":"'info'","computed":false},{"value":"'inverse'","computed":false},{"value":"'success'","computed":false},{"value":"'danger'","computed":false}]},"required":false,"description":"Determines the color of the focus outline","tsType":{"name":"union","raw":"'info' | 'inverse' | 'success' | 'danger'","elements":[{"name":"literal","value":"'info'"},{"name":"literal","value":"'inverse'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'danger'"}]},"defaultValue":{"value":"'info'","computed":false}},"shouldAnimateFocus":{"type":{"name":"bool"},"required":false,"description":"Determines if the focus ring should animate when it appears","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"withVisualDebug":{"type":{"name":"bool"},"required":false,"description":"Activate a dotted outline around the component to make building your\nlayout easier","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"dir":{"type":{"name":"enum","computed":true,"value":"Object.values(textDirectionContextConsumer.DIRECTION)"},"required":false,"description":"","tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]}},"overscrollBehavior":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'contain'","computed":false},{"value":"'none'","computed":false}]},"required":false,"description":"Sets what a browser does when reaching the boundary of a scrolling area.\nValid values are `auto`, `contain`, `none`.","tsType":{"name":"union","raw":"'auto' | 'contain' | 'none'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'contain'"},{"name":"literal","value":"'none'"}]},"defaultValue":{"value":"'auto'","computed":false}}},"category":"components","relativePath":"packages/ui-view/src/View/index.tsx","extension":".tsx","srcPath":"packages/ui-view/src/View/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-view/src/View/index.tsx","packageName":"@instructure/ui-view","requirePath":"@instructure/ui-view/lib/View/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-view/src/View/index.tsx').default","esPath":"@instructure/ui-view/es/View/index","themePath":"packages/ui-view/src/View/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-view/src/View/theme.ts","id":"View","title":"View"}