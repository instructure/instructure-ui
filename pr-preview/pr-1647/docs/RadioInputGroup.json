{"description":"\nA RadioInputGroup is a group of RadioInput components. It will handle setting\nthe name property on the RadioInput components for you and will set the selected item\nbased on the `value` property.\n\nAdjust the size of the radio button and label text via the `size` prop. The default size is\n`medium`.\n\n```js\n---\ntype: example\n---\nfunction Example () {\n  const inputs = [\n    {value: 'foo', label: 'Radio option one' },\n    {value: 'bar', label: 'Radio option two' },\n    {value: 'baz', label: 'Radio option three' }\n  ]\n  const handleChange = function (event, value) {\n    console.log(value)\n  }\n  return (\n    <RadioInputGroup onChange={handleChange} name=\"example1\" defaultValue=\"foo\" description=\"Select something\">\n      {inputs.map(input => <RadioInput key={input.value} value={input.value} label={input.label} />)}\n    </RadioInputGroup>\n  )\n}\nrender(<Example />)\n```\n\nWith the `layout` prop set to `inline` to render the description in its own column at screens `medium` size\nand up (see [Grid](#Grid)).\n\n```js\n---\ntype: example\n---\nfunction Example () {\n  const inputs = [\n    {value: 'foo', label: 'Classical' },\n    {value: 'bar', label: 'Electronic' },\n    {value: 'baz', label: 'Country' }\n  ]\n  return (\n    <RadioInputGroup\n      name=\"example2\"\n      defaultValue=\"foo\"\n      description=\"Select something\"\n      layout=\"inline\">\n      {inputs.map(input => <RadioInput key={input.value} value={input.value} label={input.label} />)}\n    </RadioInputGroup>\n  )\n}\nrender(<Example />)\n```\n\nWith the `layout` property set to `columns` the inputs will render horizontally at screens `medium` size\nand up (see [Grid](#Grid)).\n\n```js\n---\ntype: example\n---\nfunction Example () {\n  const inputs = [\n    {value: 'foo', label: 'Extremely happy' },\n    {value: 'bar', label: 'Very annoyed' },\n    {value: 'baz', label: 'Somewhat apathetic' }\n  ]\n  return (\n    <RadioInputGroup\n      layout=\"columns\"\n      name=\"example3\"\n      defaultValue=\"foo\"\n      description=\"Select something\"\n    >\n      {inputs.map(input =>\n        <RadioInput\n          key={input.value}\n          value={input.value}\n          label={input.label}\n        />\n      )}\n    </RadioInputGroup>\n  )\n}\n\nrender(<Example />)\n```\n\nSet the `variant` prop to `toggle` to have the RadioInputGroup display as a toggle switch. The `context` prop can be set to switch the background color of the toggle switch. Default is `success` options are 'success', 'warning', 'danger', and 'off'.\n\n```js\n---\ntype: example\n---\n<FormFieldGroup description={<ScreenReaderContent>Toggle examples</ScreenReaderContent>}>\n <RadioInputGroup\n    name=\"featuresm\"\n    defaultValue=\"off\"\n    description=\"Small-size\"\n    variant=\"toggle\"\n    size=\"small\">\n    <RadioInput label=\"Off\" value=\"off\" context=\"off\" />\n    <RadioInput label=\"Allow\" value=\"allow\" />\n    <RadioInput label=\"On\" value=\"on\" />\n  </RadioInputGroup>\n  <RadioInputGroup\n    name=\"featuremed\"\n    defaultValue=\"allow\"\n    description=\"Medium-size (default)\"\n    variant=\"toggle\">\n    <RadioInput label=\"Off\" value=\"off\" context=\"off\" />\n    <RadioInput label=\"Allow\" value=\"allow\" />\n    <RadioInput label=\"On\" value=\"on\" />\n  </RadioInputGroup>\n  <RadioInputGroup\n    name=\"context\"\n    defaultValue=\"off\"\n    description=\"Context (background changes based on context set)\"\n    variant=\"toggle\">\n    <RadioInput label=\"Off\" value=\"off\" context=\"danger\" />\n    <RadioInput label=\"Allow\" value=\"allow\" context=\"warning\" />\n    <RadioInput label=\"On\" value=\"on\" />\n  </RadioInputGroup>\n  <RadioInputGroup\n    name=\"featurelg\"\n    defaultValue=\"on\"\n    description=\"Large-size\"\n    variant=\"toggle\"\n    size=\"large\">\n    <RadioInput label=\"Off\" value=\"off\" />\n    <RadioInput label=\"Allow\" value=\"allow\" />\n    <RadioInput label=\"On\" value=\"on\" />\n  </RadioInputGroup>\n</FormFieldGroup>\n```\n\nSetting the `disabled` prop to `true` will disable the entire RadioInputGroup.\n\n```js\n---\ntype: example\n---\n<RadioInputGroup\n  name=\"fruits1\"\n  description=\"Fruits\"\n  defaultValue=\"orange\"\n  disabled\n>\n  <RadioInput label=\"Apple\" value=\"apple\" />\n  <RadioInput label=\"Orange\" value=\"orange\" />\n  <RadioInput label=\"Banana\" value=\"banana\" />\n</RadioInputGroup>\n```\n\n```js\n---\ntype: example\n---\n<RadioInputGroup name=\"feature1\" defaultValue=\"off\" description=\"Super-awesome feature\" variant=\"toggle\" disabled>\n  <RadioInput label=\"Off\" value=\"off\" context=\"off\" />\n  <RadioInput label=\"Allow\" value=\"allow\" />\n  <RadioInput label=\"On\" value=\"on\" />\n</RadioInputGroup>\n```\n\nOr disable an individual RadioInput component via its `disabled` prop.\n\n```js\n---\ntype: example\n---\n<RadioInputGroup\n  name=\"fruits2\"\n  defaultValue=\"banana\"\n  description=\"Fruits\"\n  layout=\"columns\"\n>\n  <RadioInput label=\"Apple\" value=\"apple\" />\n  <RadioInput label=\"Orange\" value=\"orange\" disabled />\n  <RadioInput label=\"Banana\" value=\"banana\" />\n</RadioInputGroup>\n```\n\n```js\n---\ntype: example\n---\n<RadioInputGroup name=\"feature2\" defaultValue=\"none\" description=\"Super-awesome feature\" variant=\"toggle\">\n  <RadioInput label=\"None\" value=\"none\" context=\"off\" />\n  <RadioInput label=\"Some\" value=\"some\" />\n  <RadioInput label=\"All\" value=\"all\" disabled />\n</RadioInputGroup>\n```\n\nIf you would like to make the description visible only to screen readers you can use the\n[ScreenReaderContent](#ScreenReaderContent) component.\n\n```js\n---\ntype: example\n---\n<RadioInputGroup\n  name=\"fruit3\"\n  defaultValue=\"banana\"\n  description={\n    <ScreenReaderContent>Select a fruit</ScreenReaderContent>\n  }\n  messages={[{ text: 'Invalid choice', type: 'error' }]}\n>\n  <RadioInput label=\"Apple\" value=\"apple\" />\n  <RadioInput label=\"Orange\" value=\"orange\" />\n  <RadioInput label=\"Banana\" value=\"banana\" />\n</RadioInputGroup>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use sentence-style capitalization</Figure.Item>\n    <Figure.Item>Use a clear and concise label for RadioInput</Figure.Item>\n    <Figure.Item>Optionally include a heading to provide further clarity</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Have a single RadioInput</Figure.Item>\n    <Figure.Item>Use long labels for RadioInput</Figure.Item>\n    <Figure.Item>Display more than two radio inputs horizontally</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"RadioInputGroup","methods":[],"props":{"name":{"type":{"name":"string"},"required":true,"description":"","tsType":{"name":"string"}},"description":{"type":{"name":"node"},"required":true,"description":"","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"defaultValue":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"value to set on initial render","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"value":{"type":{"name":"custom","raw":"controllable(\n  PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n)"},"required":false,"description":"the selected value (must be accompanied by an `onChange` prop)","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"onChange":{"type":{"name":"func"},"required":false,"description":"when used with the `value` prop, the component will not control its own state","tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent<HTMLInputElement>, value: string) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"},{"type":{"name":"string"},"name":"value"}],"return":{"name":"void"}}}},"disabled":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"readOnly":{"type":{"name":"bool"},"required":false,"description":"works just like disabled but keeps the same styles as if it were active","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Array of objects with shape: `{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"children":{"type":{"name":"node"},"required":false,"description":"any children (ones that aren't `RadioInput` are passed through)","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"variant":{"type":{"name":"enum","value":[{"value":"'simple'","computed":false},{"value":"'toggle'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'simple' | 'toggle'","elements":[{"name":"literal","value":"'simple'"},{"name":"literal","value":"'toggle'"}]},"defaultValue":{"value":"'simple'","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"layout":{"type":{"name":"enum","value":[{"value":"'stacked'","computed":false},{"value":"'columns'","computed":false},{"value":"'inline'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'stacked' | 'columns' | 'inline'","elements":[{"name":"literal","value":"'stacked'"},{"name":"literal","value":"'columns'"},{"name":"literal","value":"'inline'"}]},"defaultValue":{"value":"'stacked'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-radio-input/src/RadioInputGroup/index.tsx","extension":".tsx","srcPath":"packages/ui-radio-input/src/RadioInputGroup/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-radio-input/src/RadioInputGroup/index.tsx","packageName":"@instructure/ui-radio-input","requirePath":"@instructure/ui-radio-input/lib/RadioInputGroup/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-radio-input/src/RadioInputGroup/index.tsx').default","esPath":"@instructure/ui-radio-input/es/RadioInputGroup/index","id":"RadioInputGroup","title":"RadioInputGroup"}