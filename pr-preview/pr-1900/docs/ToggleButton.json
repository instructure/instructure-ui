{"description":"\n`ToggleButton` is a controlled button component used for toggling a status or setting\nbetween one of two states (locked/unlocked, published/unpublished, etc.).\n\n```javascript\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    locked: 'off'\n  }\n\n  handleLocked = (e) => {\n    this.setState(function(prevState) {\n      return {locked: prevState.locked === 'on' ? 'off' : 'on'}\n    })\n  }\n\n  render () {\n    const locked = this.state.locked === 'on'\n\n    return (\n      <View as=\"div\" padding=\"x-large\" id=\"toggleContainer\">\n        <ToggleButton\n          status={locked ? 'pressed' : 'unpressed'}\n          color={locked ? 'danger' : 'secondary'}\n          renderIcon={locked ? IconLockSolid : IconUnlockLine}\n          screenReaderLabel={locked ? 'Unlock assignment' : 'Lock assignment'}\n          renderTooltipContent={locked ? 'Unlock' : 'Lock'}\n          onClick={this.handleLocked}\n          mountNode={() => document.getElementById('toggleContainer')}\n        />\n      </View>\n    )\n  }\n}\nrender(<Example />)\n```\n\n### Inverse ToggleButton\n\n```javascript\n---\ntype: example\n---\nclass InverseExample extends React.Component {\n  state = {\n    locked: 'off'\n  }\n\n  handleLocked = (e) => {\n    this.setState(function(prevState) {\n      return {locked: prevState.locked === 'on' ? 'off' : 'on'}\n    })\n  }\n\n  render () {\n    const locked = this.state.locked === 'on'\n\n    return (\n      <View as=\"div\" padding=\"xx-large\" background=\"primary-inverse\" id=\"inverseToggleContainer\">\n        <ToggleButton\n          status={locked ? 'pressed' : 'unpressed'}\n          color=\"primary-inverse\"\n          renderIcon={locked ? IconLockSolid : IconUnlockLine}\n          screenReaderLabel={locked ? 'Unlock assignment' : 'Lock assignment'}\n          renderTooltipContent={locked ? 'Unlock' : 'Lock'}\n          onClick={this.handleLocked}\n          mountNode={() => document.getElementById('inverseToggleContainer')}\n        />\n      </View>\n    )\n  }\n}\nrender(<InverseExample />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use for toggling a setting or status between one of two states</Figure.Item>\n    <Figure.Item>Use <code>color=\"primary-inverse\"</code> on dark backgrounds so your icon and tooltip are visible</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Use text inside a <code>ToggleButton</code></Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"ToggleButton","methods":[],"props":{"screenReaderLabel":{"type":{"name":"string"},"required":true,"description":"Text to output only to screen readers","tsType":{"name":"string"}},"renderTooltipContent":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":true,"description":"Text to render in the tooltip shown on hover/focus","tsType":{"name":"union","raw":"React.ReactNode | ((...args: any[]) => any)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}]}},"renderIcon":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":true,"description":"An icon or function that returns an icon","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"status":{"type":{"name":"enum","value":[{"value":"'pressed'","computed":false},{"value":"'unpressed'","computed":false}]},"required":true,"description":"Toggles the `aria-pressed` attribute on the button (`true` if `pressed`; `false` if `unpressed`)","tsType":{"name":"union","raw":"'pressed' | 'unpressed'","elements":[{"name":"literal","value":"'pressed'"},{"name":"literal","value":"'unpressed'"}]}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render as the component root; `button` by default","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'button'","computed":false}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with `ToggleButton` is `enabled`, `disabled`, or `readonly`","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"defaultValue":{"value":"undefined","computed":true}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the `ToggleButton`","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to `ToggleButton`'s underlying HTML element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"onClick":{"type":{"name":"func"},"required":false,"description":"Callback fired when the `ToggleButton` is clicked","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}}}},"color":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'primary-inverse'","computed":false},{"value":"'secondary'","computed":false},{"value":"'success'","computed":false},{"value":"'danger'","computed":false}]},"required":false,"description":"The color in which to display the icon","tsType":{"name":"union","raw":"'primary' | 'primary-inverse' | 'secondary' | 'success' | 'danger'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'danger'"}]},"defaultValue":{"value":"'secondary'","computed":false}},"isShowingTooltip":{"type":{"name":"bool"},"required":false,"description":"By default, the tooltip will show on hover/focus. Use this prop if you need to override that behavior.","tsType":{"name":"boolean"}},"mountNode":{"type":{"name":"custom","raw":"PositionPropTypes.mountNode"},"required":false,"description":"An element or a function returning an element to use as the mount node","tsType":{"name":"PositionMountNode"},"defaultValue":{"value":"null","computed":false}},"placement":{"type":{"name":"custom","raw":"PositionPropTypes.placement"},"required":false,"description":"The placement of the tooltip in relation to the button","tsType":{"name":"PlacementPropValues"},"defaultValue":{"value":"'top center'","computed":false}},"constrain":{"type":{"name":"custom","raw":"PositionPropTypes.constrain"},"required":false,"description":"The parent in which to constrain the tooltip.\nOne of: 'window', 'scroll-parent', 'parent', 'none', an element,\nor a function returning an element.","tsType":{"name":"PositionConstraint"},"defaultValue":{"value":"'window'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-buttons/src/ToggleButton/index.tsx","extension":".tsx","srcPath":"packages/ui-buttons/src/ToggleButton/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/ToggleButton/index.tsx","packageName":"@instructure/ui-buttons","requirePath":"@instructure/ui-buttons/lib/ToggleButton/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-buttons/src/ToggleButton/index.tsx').default","esPath":"@instructure/ui-buttons/es/ToggleButton/index","id":"ToggleButton","title":"ToggleButton"}