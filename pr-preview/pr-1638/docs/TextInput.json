{"description":"\n`TextInput` is a custom styled `input` element. It supports the following types: `text` (default) / `email` / `url` / `tel` / `search` / `password`\n\n### Uncontrolled TextInput\n\n```js\n---\ntype: example\n---\n<TextInput\n  renderLabel=\"Name\"\n  placeholder=\"Doe, John Doe\"\n  onChange={(event, value) => { console.log(value) }}\n/>\n```\n\n#### Controlled TextInput\n\n```javascript\n---\ntype: example\n---\nclass ControlledTextInputExample extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      value: 'Supertramp',\n      disabled: false,\n      readOnly: false,\n      inline: false,\n      messages: null\n    }\n  }\n\n  handleChange = (e, value) => this.setState({\n    value,\n    messages: null\n  })\n\n  handleBlur = (e) => {\n    if (this.state.value === 'Supertramp') {\n      this.setState({\n        messages: [{ text: `Come on. There's no way your favorite band is really Supertramp.`, type: 'error' }]\n      })\n    }\n  }\n\n  toggleDisabled = (e) => this.setState(({ disabled: !this.state.disabled }))\n  toggleReadOnly = (e) => this.setState(({ readOnly: !this.state.readOnly }))\n  toggleInline = (e) => this.setState(({ inline: !this.state.inline }))\n\n  render () {\n    return (\n      <div>\n        <FormFieldGroup\n          description=\"Controlled TextInput state\"\n          layout=\"columns\"\n        >\n          <Checkbox\n            checked={this.state.disabled}\n            label=\"disabled\"\n            onChange={this.toggleDisabled}\n          />\n          <Checkbox\n            checked={this.state.readOnly}\n            label=\"readOnly\"\n            onChange={this.toggleReadOnly}\n          />\n          <Checkbox\n            checked={this.state.inline}\n            label=\"inline display\"\n            onChange={this.toggleInline}\n          />\n        </FormFieldGroup>\n        <View display=\"block\" margin=\"medium 0 0\">\n          <TextInput\n            renderLabel=\"What is your favorite band?\"\n            display={this.state.inline ? 'inline-block' : null}\n            value={this.state.value}\n            onChange={this.handleChange}\n            onBlur={this.handleBlur}\n            interaction={this.state.disabled\n              ? 'disabled'\n              : this.state.readOnly ? 'readonly' : 'enabled'\n            }\n            messages={this.state.messages}\n            renderAfterInput={<SVGIcon src={iconExample} />}\n          />\n        </View>\n      </div>\n    )\n  }\n}\n\nrender(<ControlledTextInputExample />)\n```\n\n### Prepending and appending content\n\nTextInput accepts focusable and non-focusable content before and/or after\nthe input text. A common use case is adding an icon or avatar to the input.\nFocusable content will be focused separately from the input itself.\n\n> Note: For any content larger than an icon or small avatar (multiple [Tags](#Tag), for example),\n> use the `renderBeforeInput` property.\n\n```javascript\n---\ntype: example\n---\nclass ExtraContentExample extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      value: ''\n    }\n  }\n\n  handleChange = (e, value) => this.setState({ value })\n\n  render () {\n    return (\n      <View as=\"div\">\n        <TextInput\n          renderLabel=\"What are Paula Panda's favorite ice cream flavors?\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          renderBeforeInput={\n            <View display=\"block\" padding=\"xxx-small 0\">\n              {\n                (this.state.value !== '') &&\n                <Tag\n                  text={this.state.value}\n                  margin=\"xxx-small xxx-small xxx-small none\"\n                  onClick={function () {\n                    console.log(this.state.value)\n                  }}\n                />\n              }\n              <Tag\n                text=\"Rocky road\"\n                margin=\"xxx-small xxx-small xxx-small none\"\n                onClick={function () {\n                  console.log('Rocky road')\n                }}\n              />\n              <Tag\n                text=\"Vanilla\"\n                margin=\"xxx-small xxx-small xxx-small none\"\n                onClick={function () {\n                  console.log('Vanilla')\n                }}\n              />\n              <Tag\n                text=\"Coffee\"\n                margin=\"xxx-small xxx-small xxx-small none\"\n                onClick={function () {\n                  console.log('Coffee')\n                }}\n              />\n              <Tag\n                text=\"Strawberry\"\n                margin=\"xxx-small xxx-small xxx-small none\"\n                onClick={function () {\n                  console.log('Strawberry')\n                }}\n              />\n            </View>\n          }\n          renderAfterInput={() => <Avatar name=\"Paula Panda\" src={avatarSquare} size=\"x-small\" />}\n        />\n      </View>\n    )\n  }\n}\n\nrender(<ExtraContentExample />)\n```\n\n### Setting width and display\n\nTo make the component display inline, set the `display` property to `inline-block`. To constrain the\nsize of the component, use `width`.\n\n```js\n---\ntype: example\n---\n<div>\n  <TextInput\n    renderLabel={<ScreenReaderContent>I am a hidden label</ScreenReaderContent>}\n    display=\"inline-block\"\n    width=\"4rem\"\n  />\n  &nbsp;\n  <Button>I Am Inline Content</Button>\n</div>\n```\n\n### `shouldNotWrap`\n\nIf there is content rendered before the input (via `renderBeforeInput`), the\ninput will wrap to a new line when the browser determines it does\nnot have enough room (for most browsers, this is 20 characters). Wrapping allows\nthe component to accommodate large lists of [Tags](#Tag), for example.\n\nIf not desired, this behavior can be overridden by setting the `shouldNotWrap`\nboolean prop to `true`.\n\n```js\n---\ntype: example\n---\n<View as=\"div\" maxWidth=\"250px\">\n  <TextInput\n    renderLabel=\"I will not wrap\"\n    renderBeforeInput={() => (<IconSearchLine inline={false} />)}\n    renderAfterInput={<Avatar name=\"Paula Panda\" src={avatarSquare} size=\"x-small\" />}\n    shouldNotWrap\n  />\n  <View as=\"div\" margin=\"medium none none\">\n    <TextInput\n      renderLabel=\"I will wrap\"\n      renderBeforeInput={\n        <div>\n          <Tag\n            text=\"English 101\"\n            margin=\"xx-small xxx-small\"\n          />\n          <Tag\n            text=\"History 205\"\n            margin=\"xx-small xxx-small\"\n          />\n        </div>\n      }\n      renderAfterInput={<Avatar name=\"Paula Panda\" src={avatarSquare} size=\"x-small\" />}\n    />\n  </View>\n</View>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Left align text (exceptions may apply)</Figure.Item>\n    <Figure.Item>Place labels on top or to the left (inline)</Figure.Item>\n    <Figure.Item>Make placeholder text different than the label</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Place labels to the right of the input</Figure.Item>\n    <Figure.Item>Place inputs in the middle of sentences or phrases</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"TextInput","methods":[],"props":{"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"The form field label.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'email'","computed":false},{"value":"'url'","computed":false},{"value":"'tel'","computed":false},{"value":"'search'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Determines the underlying native HTML `<input>` element's `type`.\n\nFor more see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url","tsType":{"name":"union","raw":"'text' | 'email' | 'url' | 'tel' | 'search' | 'password'","elements":[{"name":"literal","value":"'text'"},{"name":"literal","value":"'email'"},{"name":"literal","value":"'url'"},{"name":"literal","value":"'tel'"},{"name":"literal","value":"'search'"},{"name":"literal","value":"'password'"}]},"defaultValue":{"value":"'text'","computed":false}},"id":{"type":{"name":"string"},"required":false,"description":"The id of the text input. One is generated if not supplied.","tsType":{"name":"string"}},"value":{"type":{"name":"custom","raw":"controllable(PropTypes.string)"},"required":false,"description":"the selected value (must be accompanied by an `onChange` prop)","tsType":{"name":"string"}},"defaultValue":{"type":{"name":"string"},"required":false,"description":"value to set on initial render","tsType":{"name":"string"}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled.","tsType":{"name":"InteractionType"},"defaultValue":{"value":"undefined","computed":true}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Array of objects with shape: `{\n  text: React.ReactNode,\n  type: One of ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"defaultValue":{"value":"[]","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the text input.","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"textAlign":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'center'","computed":false}]},"required":false,"description":"The text alignment of the input.","tsType":{"name":"union","raw":"'start' | 'center'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"}]},"defaultValue":{"value":"'start'","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"The width of the input.","tsType":{"name":"string"}},"htmlSize":{"type":{"name":"number"},"required":false,"description":"The width of the input (integer value 0 or higher), if a width is not explicitly\nprovided via the `width` prop.\n\nOnly applicable if `display=\"inline-block\"`.\n\nFor more see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/size","tsType":{"name":"number"}},"display":{"type":{"name":"enum","value":[{"value":"'inline-block'","computed":false},{"value":"'block'","computed":false}]},"required":false,"description":"The display of the root element.","tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"defaultValue":{"value":"'block'","computed":false}},"shouldNotWrap":{"type":{"name":"bool"},"required":false,"description":"Prevents the default behavior of wrapping the input and rendered content\nwhen available space is exceeded.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Html placeholder text to display when the input has no value. This should be hint text, not a label replacement.","tsType":{"name":"string"}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"Whether or not the text input is required.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"inputRef":{"type":{"name":"func"},"required":false,"description":"a function that provides a reference to the actual input element","tsType":{"name":"signature","type":"function","raw":"(inputElement: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"inputElement"}],"return":{"name":"void"}}}},"inputContainerRef":{"type":{"name":"func"},"required":false,"description":"a function that provides a reference a parent of the input element","tsType":{"name":"signature","type":"function","raw":"(element: HTMLSpanElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLSpanElement | null","elements":[{"name":"HTMLSpanElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"renderBeforeInput":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display before the input text, such as an icon","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderAfterInput":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display after the input text, such as an icon","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a change event.\n@param {Object} event - the event object\n@param {string} value - the string value of the input","tsType":{"name":"signature","type":"function","raw":"(event: React.ChangeEvent<HTMLInputElement>, value: string) => void","signature":{"arguments":[{"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"},{"type":{"name":"string"},"name":"value"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Callback fired when input loses focus.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"onFocus":{"type":{"name":"func"},"required":false,"description":"Callback fired when input receives focus.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","tags":"form, field","relativePath":"packages/ui-text-input/src/TextInput/index.tsx","extension":".tsx","srcPath":"packages/ui-text-input/src/TextInput/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-text-input/src/TextInput/index.tsx","packageName":"@instructure/ui-text-input","requirePath":"@instructure/ui-text-input/lib/TextInput/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-text-input/src/TextInput/index.tsx').default","esPath":"@instructure/ui-text-input/es/TextInput/index","themePath":"packages/ui-text-input/src/TextInput/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-text-input/src/TextInput/theme.ts","id":"TextInput","title":"TextInput"}