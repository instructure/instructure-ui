{"description":"\n`<Tabs />` is an accessible tabbed navigation component. Use the TAB key to focus the component and arrow keys to navigate between panels of content. To set a default panel that should be selected on initial render, set the `selected` prop on that `<Tabs.Panel>`.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    selectedIndex: 0\n  }\n  handleTabChange = (event, { index, id }) => {\n    this.setState({\n      selectedIndex: index\n    })\n  }\n  render () {\n    const { selectedIndex } = this.state\n    return (\n      <Tabs\n        margin=\"large auto\"\n        padding=\"medium\"\n        onRequestTabChange={this.handleTabChange}\n      >\n        <Tabs.Panel\n          id=\"tabA\"\n          renderTitle=\"Tab A\"\n          textAlign=\"center\"\n          padding=\"large\"\n          isSelected={selectedIndex === 0}\n        >\n          <Button>Focus Me</Button>\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabB\" renderTitle=\"Disabled Tab\" isDisabled>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabC\" renderTitle=\"Tab C\" isSelected={selectedIndex === 2}>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabD\" renderTitle=\"Tab D\" isSelected={selectedIndex === 3}>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n      </Tabs>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Secondary Tabs\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    selectedIndex: 2\n  }\n  handleTabChange = (event, { index }) => {\n    this.setState({\n      selectedIndex: index\n    })\n  }\n  render () {\n    const { selectedIndex } = this.state\n    return (\n      <Tabs\n        variant=\"secondary\"\n        onRequestTabChange={this.handleTabChange}\n        minHeight=\"10rem\"\n        maxHeight=\"10rem\"\n      >\n        <Tabs.Panel renderTitle=\"First Tab\" isSelected={selectedIndex === 0}>\n          Hello World\n        </Tabs.Panel>\n        <Tabs.Panel renderTitle=\"Disabled Tab\" isDisabled>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n        <Tabs.Panel renderTitle=\"Third Tab\" isSelected={selectedIndex === 2}>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n        <Tabs.Panel renderTitle=\"Fourth Tab\" isSelected={selectedIndex === 3}>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n      </Tabs>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Handling Tab overflow\n\nBy default, `<Tabs />` will stack each individual `<Tab />` if there isn't enough horizontal\nspace to display them all inline. For a more compact tab navigation, set `tabOverflow` to\n`scroll`, which allows the Tabs to scroll horizontally.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    selectedIndex: 4\n  }\n  handleTabChange = (event, { index, id }) => {\n    this.setState({\n      selectedIndex: index\n    })\n  }\n  render () {\n    const { selectedIndex } = this.state\n    return (\n      <Tabs\n        margin=\"large auto\"\n        padding=\"medium\"\n        onRequestTabChange={this.handleTabChange}\n        tabOverflow=\"scroll\"\n        maxWidth=\"20rem\"\n      >\n        <Tabs.Panel id=\"tabA\" renderTitle=\"Tab A\" isSelected={selectedIndex === 0}>\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabB\" renderTitle=\"Tab B\" isSelected={selectedIndex === 1}>\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabC\" renderTitle=\"Tab C\" isSelected={selectedIndex === 2}>\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabD\" renderTitle=\"Tab D\" isSelected={selectedIndex === 3}>\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabE\" renderTitle=\"Tab E\" isSelected={selectedIndex === 4}>\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabF\" renderTitle=\"Tab F\" isSelected={selectedIndex === 5}>\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabG\" renderTitle=\"Tab G\" isSelected={selectedIndex === 6}>\n          {lorem.sentence()}\n        </Tabs.Panel>\n      </Tabs>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Controlling the size and the spacing\n\nTo restrict the width of `<Tabs />`, use the `maxWidth` prop. Add space around the entire component using the `margin` prop. Adjust the padding around the panel content via `padding` (default is `small`) on each `<Tabs.Panel>`.\n\nSet the height of the Tabs component with the `fixHeight` property (set to '100%' to fill out it's parent element). You can also restrict the height of the **panels** using the `minHeight` and `maxHeight` properties (they don't work if you set `fixHeight` on the whole Tabs component).\n\nFinally, switch the text alignment of the panel content with `textAlign`.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      selectedIndex: 0,\n      heightOption: 'fixHeight: 100%'\n    }\n\n    this.heightOptions = {\n      ['fixHeight: 100%']: { fixHeight: '100%' },\n      ['fixHeight: 15rem']: { fixHeight: '15rem' },\n      ['minHeight: 17rem']: { minHeight: '17rem' },\n      ['maxHeight: 10rem']: { maxHeight: '10rem' }\n    }\n  }\n\n  handleTabChange = (event, { index, id }) => {\n    this.setState({\n      selectedIndex: index\n    })\n  }\n\n  handleHeightOptionSelect = (e, heightOption) => {\n    this.setState({ heightOption })\n  }\n\n  render () {\n    const { selectedIndex, heightOption } = this.state\n    const { heightOptions } = this\n\n    const containerProps = {\n      as: 'div',\n      ...(heightOption.includes('fixHeight') && {\n        height: \"22rem\",\n        withVisualDebug: true\n      })\n    }\n\n    return (\n      <>\n        <View display=\"block\" margin=\"none none medium\">\n          <RadioInputGroup\n            name=\"tabsHeightOptions\"\n            defaultValue=\"fixHeight: 100%\"\n            description={<ScreenReaderContent>Tabs height selector</ScreenReaderContent>}\n            variant=\"toggle\"\n            onChange={this.handleHeightOptionSelect}\n          >\n            {Object.keys(heightOptions).map((heightOption) => <RadioInput key={heightOption} label={heightOption} value={heightOption} />)}\n          </RadioInputGroup>\n        </View>\n\n        <View {...containerProps}>\n          <Tabs\n            margin=\"large auto\"\n            padding=\"medium\"\n            onRequestTabChange={this.handleTabChange}\n            {...heightOptions[heightOption]}\n          >\n            <Tabs.Panel\n              id=\"tabA\"\n              renderTitle=\"Tab A\"\n              textAlign=\"center\"\n              padding=\"large\"\n              iSelected={selectedIndex === 0}\n            >\n              <Button>Focus Me</Button>\n            </Tabs.Panel>\n            <Tabs.Panel id=\"tabB\" renderTitle=\"Disabled Tab\" isDisabled>\n              {lorem.paragraphs()}\n            </Tabs.Panel>\n            <Tabs.Panel id=\"tabC\" renderTitle=\"Tab C\" isSelected={selectedIndex === 2}>\n              {lorem.paragraphs()}\n            </Tabs.Panel>\n            <Tabs.Panel id=\"tabD\" renderTitle=\"Tab D\" isSelected={selectedIndex === 3}>\n              {lorem.paragraphs()}\n            </Tabs.Panel>\n          </Tabs>\n        </View>\n      </>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Support for dynamic content with active panel\n\nMarking one of the `<Tabs.Panel>` as `active` will render that panel's content in all the panels. This is useful for dynamic content rendering: the panel area can be used as a container, what routing libraries, such as React Router, can use to render their children elements into.\n\n```js\n---\ntype: example\n---\nclass Outlet extends React.Component {\n    state = {\n      show: false\n    }\n\n    componentDidMount() {\n      setTimeout(() => this.setState({ show: true }), 2000)\n    }\n\n    render() {\n      return (\n        <div>\n          <Heading level='h1' as='h1' margin='0 0 x-small'>\n            {this.state.show ? 'Hello Developer' : 'Simulating network call...'}\n          </Heading>\n          {this.state.show ? lorem.paragraphs() : <Spinner renderTitle='Loading' size='medium' />\n          }\n        </div>\n      )\n    }\n  }\n\n\nclass Example extends React.Component {\n  state = {\n    selectedIndex: 0\n  }\n  handleTabChange = (event, { index, id }) => {\n    this.setState({\n      selectedIndex: index\n    })\n  }\n\n  render() {\n    const { selectedIndex } = this.state\n    return (\n      <Tabs\n        margin='large auto'\n        padding='medium'\n        onRequestTabChange={this.handleTabChange}\n      >\n        <Tabs.Panel\n          id='tabA'\n          renderTitle='Tab A'\n          textAlign='center'\n          padding='large'\n          isSelected={selectedIndex === 0}\n          active\n        >\n          <Outlet />\n        </Tabs.Panel>\n        <Tabs.Panel id='tabB' renderTitle='Disabled Tab' isDisabled />\n        <Tabs.Panel id='tabC' renderTitle='Tab C' isSelected={selectedIndex === 2} />\n        <Tabs.Panel id='tabD' renderTitle='Tab D' isSelected={selectedIndex === 3} />\n      </Tabs>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Persisting the selected tab\n\nIf you need to persist the rendered content of the tabpanels between tabbing, you can set the `unmountOnExit` prop to `false` on the `<Tabs.Panel>` component. It works case by case, so you can set it to `false` only on the tabpanels you want to persist.\n\n```js\n---\ntype: example\n---\nclass Counter extends React.Component{\n  state = {\n    counter: 0\n  }\n  handleIncrement = () => {\n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n\n  render () {\n    return (\n      <div>\n        <Button onClick={this.handleIncrement}>Increment</Button>\n        <hr/>\n        <Text>{this.state.counter}</Text>\n      </div>\n    )\n  }\n}\nclass Example extends React.Component {\n  state = {\n    selectedIndex: 0\n  }\n  handleTabChange = (event, { index, id }) => {\n    this.setState({\n      selectedIndex: index\n    })\n  }\n  render () {\n    const { selectedIndex } = this.state\n    return (\n      <Tabs\n        margin=\"large auto\"\n        padding=\"medium\"\n        onRequestTabChange={this.handleTabChange}\n      >\n        <Tabs.Panel\n          id=\"tabA\"\n          renderTitle=\"I will persist\"\n          textAlign=\"center\"\n          padding=\"large\"\n          isSelected={selectedIndex === 0}\n          unmountOnExit={false}\n        >\n          <Counter/>\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabB\" renderTitle=\"I will unmount\" isSelected={selectedIndex === 1}  textAlign=\"center\"\n          padding=\"large\">\n          <Counter/>\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabC\" renderTitle=\"Tab C\" isSelected={selectedIndex === 2}>\n         Tab C\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabD\" renderTitle=\"Tab D\" isSelected={selectedIndex === 3}>\n         Tab D\n        </Tabs.Panel>\n      </Tabs>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Title should be a single row above content</Figure.Item>\n    <Figure.Item>TabButton content should be succinct, preferably one word</Figure.Item>\n    <Figure.Item>Use title case</Figure.Item>\n    <Figure.Item>Use default variant when a single Tabs component exists on the page</Figure.Item>\n    <Figure.Item>Ensure each Tablist.Panel content is mutually exclusive of the others’</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Exceed 20 characters including spaces for the title</Figure.Item>\n    <Figure.Item>Exceed 5 tabs</Figure.Item>\n    <Figure.Item>Use avatars, pills, icons, etc in the TabButton</Figure.Item>\n    <Figure.Item>Use `tabOverflow=\"scroll\"` with `secondary` Tabs</Figure.Item>\n    <Figure.Item>Nest tabbed content within a tab</Figure.Item>\n    <Figure.Item>Align tabs to the center of the page</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Tabs","methods":[],"props":{"children":{"type":{"name":"custom","raw":"Children.oneOf([Panel, null])"},"required":false,"description":"children of type `Tabs.Panel`","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"variant":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'secondary'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}]},"defaultValue":{"value":"'default'","computed":false}},"screenReaderLabel":{"type":{"name":"string"},"required":false,"description":"A screen ready only label for the list of tabs","tsType":{"name":"string"}},"onRequestTabChange":{"type":{"name":"func"},"required":false,"description":"Called when the selected tab should change","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>,\n  tabData: { index: number; id?: string }\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ index: number; id?: string }","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"id","value":{"name":"string","required":false}}]}},"name":"tabData"}],"return":{"name":"void"}}}},"maxWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"maxHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"minHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"fixHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"padding":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `padding=\"small x-large large\"`.","tsType":{"name":"Spacing"}},"textAlign":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'center'","computed":false},{"value":"'end'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}]}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"tabOverflow":{"type":{"name":"enum","value":[{"value":"'stack'","computed":false},{"value":"'scroll'","computed":false}]},"required":false,"description":"Choose whether Tabs should stack or scroll when they exceed the width of their\ncontainer.","tsType":{"name":"union","raw":"'stack' | 'scroll'","elements":[{"name":"literal","value":"'stack'"},{"name":"literal","value":"'scroll'"}]},"defaultValue":{"value":"'stack'","computed":false}},"shouldFocusOnRender":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-tabs/src/Tabs/index.tsx","extension":".tsx","srcPath":"packages/ui-tabs/src/Tabs/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-tabs/src/Tabs/index.tsx","packageName":"@instructure/ui-tabs","requirePath":"@instructure/ui-tabs/lib/Tabs/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-tabs/src/Tabs/index.tsx').default","esPath":"@instructure/ui-tabs/es/Tabs/index","themePath":"packages/ui-tabs/src/Tabs/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-tabs/src/Tabs/theme.ts","id":"Tabs","title":"Tabs"}