{"description":"\nThe `Calendar` component provides a visual interface for date data.\n\n### Default config\n\nFor ease of use in most situations, the `Calendar` component provides a default\nconfiguration. The default configuration can be overridden by providing props\nto the `Calendar` component.\n\n```js\n---\ntype: example\n---\n<Calendar timezone=\"America/Santiago\"/>\n```\n","displayName":"Calendar","methods":[],"props":{"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render as the `Calendar` root, `span` by default","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'span'","computed":false}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([Day])"},"required":false,"description":"children of type `<Calendar.Day />` There should be exactly 42 provided (6\nweeks).","tsType":{"name":"Array","elements":[{"name":"ReactElement","elements":[{"name":"intersection","raw":"CalendarDayOwnProps &\nWithStyleProps<CalendarDayTheme, CalendarDayStyle> &\nOtherHTMLAttributes<CalendarDayOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The rendered representation of the corresponding date.\n   */\n  children?: Renderable\n  /**\n   * An ISO 8601 formatted string representing the date corresponding to\n   * this `<Calendar.Day />`\n   */\n  date: string\n  /**\n   * Accessible label to provide more context for the date to assistive\n   * technologies. This should consist of more than just a numerical date value.\n   * It should also include the month and the year. Ex. instead of just `1`,\n   * provide `1 August 2019`.\n   */\n  label: string\n  /**\n   * Is the `<Calendar.Day />` disabled\n   */\n  interaction?: 'enabled' | 'disabled'\n  /**\n   * Is the `<Calendar.Day />` selected\n   */\n  isSelected?: boolean\n  /**\n   * Is the `<Calendar.Day />` today\n   */\n  isToday?: boolean\n  /**\n   * Is the `<Calendar.Day />` located outside the current rendered month\n   */\n  isOutsideMonth?: boolean\n  /**\n   * Callback fired on click.\n   * @param {Object} event - the click event\n   * @param {Object} data - additional data\n   * @param data.date - the date of the corresponding `<Calendar.Day />`\n   */\n  onClick?: (\n    event: MouseEvent<ViewProps & Element>,\n    date: { date: string }\n  ) => void\n  /**\n   * Callback fired on key down.\n   * @param {Object} event - the key down event\n   * @param {Object} data - additional data\n   * @param data.date - the date of the corresponding `<Calendar.Day />`\n   */\n  onKeyDown?: (\n    event: KeyboardEvent<ViewProps & Element>,\n    data: { date: string }\n  ) => void\n  /**\n   * A ref function for the underlying DOM element.\n   */\n  elementRef?: (element: Element | null) => void\n  /**\n   * the element type to render as\n   */\n  as?: AsElementType\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"The rendered representation of the corresponding date."},{"key":"date","value":{"name":"string","required":true},"description":"An ISO 8601 formatted string representing the date corresponding to\nthis `<Calendar.Day />`"},{"key":"label","value":{"name":"string","required":true},"description":"Accessible label to provide more context for the date to assistive\ntechnologies. This should consist of more than just a numerical date value.\nIt should also include the month and the year. Ex. instead of just `1`,\nprovide `1 August 2019`."},{"key":"interaction","value":{"name":"union","raw":"'enabled' | 'disabled'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"}],"required":false},"description":"Is the `<Calendar.Day />` disabled"},{"key":"isSelected","value":{"name":"boolean","required":false},"description":"Is the `<Calendar.Day />` selected"},{"key":"isToday","value":{"name":"boolean","required":false},"description":"Is the `<Calendar.Day />` today"},{"key":"isOutsideMonth","value":{"name":"boolean","required":false},"description":"Is the `<Calendar.Day />` located outside the current rendered month"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: MouseEvent<ViewProps & Element>,\n  date: { date: string }\n) => void","signature":{"arguments":[{"type":{"name":"MouseEvent","elements":[{"name":"intersection","raw":"ViewProps & Element","elements":[{"name":"ViewProps"},{"name":"Element"}]}],"raw":"MouseEvent<ViewProps & Element>"},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ date: string }","signature":{"properties":[{"key":"date","value":{"name":"string","required":true}}]}},"name":"date"}],"return":{"name":"void"}},"required":false},"description":"Callback fired on click.\n@param {Object} event - the click event\n@param {Object} data - additional data\n@param data.date - the date of the corresponding `<Calendar.Day />`"},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(\n  event: KeyboardEvent<ViewProps & Element>,\n  data: { date: string }\n) => void","signature":{"arguments":[{"type":{"name":"KeyboardEvent","elements":[{"name":"intersection","raw":"ViewProps & Element","elements":[{"name":"ViewProps"},{"name":"Element"}]}],"raw":"KeyboardEvent<ViewProps & Element>"},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ date: string }","signature":{"properties":[{"key":"date","value":{"name":"string","required":true}}]}},"name":"data"}],"return":{"name":"void"}},"required":false},"description":"Callback fired on key down.\n@param {Object} event - the key down event\n@param {Object} data - additional data\n@param data.date - the date of the corresponding `<Calendar.Day />`"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"A ref function for the underlying DOM element."},{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"the element type to render as"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  color: Colors['contrasts']['grey125125']\n  background: Colors['contrasts']['white1010']\n  fontSize: Typography['fontSizeMedium']\n  padding: Spacing['xxSmall']\n  height: Forms['inputHeightSmall']\n  minWidth: Forms['inputHeightSmall']\n  outsideMonthColor: Colors['contrasts']['grey4570']\n  selectedBackground: Colors['contrasts']['green4570']\n  selectedColor: Colors['contrasts']['white1010']\n  selectedBorderRadius: Border['radiusMedium']\n  todayBackground: Colors['contrasts']['blue4570']\n  todayColor: Colors['contrasts']['white1010']\n  todayBorderRadius: Forms['inputHeightSmall']\n}","signature":{"properties":[{"key":"color","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"background","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"fontSize","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"padding","value":{"name":"union","raw":"Spacing['xxSmall']","required":true}},{"key":"height","value":{"name":"string","raw":"Forms['inputHeightSmall']","required":true}},{"key":"minWidth","value":{"name":"string","raw":"Forms['inputHeightSmall']","required":true}},{"key":"outsideMonthColor","value":{"name":"signature['grey4570']","raw":"Colors['contrasts']['grey4570']","required":true}},{"key":"selectedBackground","value":{"name":"signature['green4570']","raw":"Colors['contrasts']['green4570']","required":true}},{"key":"selectedColor","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"selectedBorderRadius","value":{"name":"union","raw":"Border['radiusMedium']","required":true}},{"key":"todayBackground","value":{"name":"signature['blue4570']","raw":"Colors['contrasts']['blue4570']","required":true}},{"key":"todayColor","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"todayBorderRadius","value":{"name":"string","raw":"Forms['inputHeightSmall']","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"'calendarDay' | 'day'","elements":[{"name":"literal","value":"'calendarDay'"},{"name":"literal","value":"'day'"}]}],"raw":"ComponentStyle<'calendarDay' | 'day'>"}],"raw":"WithStyleProps<CalendarDayTheme, CalendarDayStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The rendered representation of the corresponding date.\n   */\n  children?: Renderable\n  /**\n   * An ISO 8601 formatted string representing the date corresponding to\n   * this `<Calendar.Day />`\n   */\n  date: string\n  /**\n   * Accessible label to provide more context for the date to assistive\n   * technologies. This should consist of more than just a numerical date value.\n   * It should also include the month and the year. Ex. instead of just `1`,\n   * provide `1 August 2019`.\n   */\n  label: string\n  /**\n   * Is the `<Calendar.Day />` disabled\n   */\n  interaction?: 'enabled' | 'disabled'\n  /**\n   * Is the `<Calendar.Day />` selected\n   */\n  isSelected?: boolean\n  /**\n   * Is the `<Calendar.Day />` today\n   */\n  isToday?: boolean\n  /**\n   * Is the `<Calendar.Day />` located outside the current rendered month\n   */\n  isOutsideMonth?: boolean\n  /**\n   * Callback fired on click.\n   * @param {Object} event - the click event\n   * @param {Object} data - additional data\n   * @param data.date - the date of the corresponding `<Calendar.Day />`\n   */\n  onClick?: (\n    event: MouseEvent<ViewProps & Element>,\n    date: { date: string }\n  ) => void\n  /**\n   * Callback fired on key down.\n   * @param {Object} event - the key down event\n   * @param {Object} data - additional data\n   * @param data.date - the date of the corresponding `<Calendar.Day />`\n   */\n  onKeyDown?: (\n    event: KeyboardEvent<ViewProps & Element>,\n    data: { date: string }\n  ) => void\n  /**\n   * A ref function for the underlying DOM element.\n   */\n  elementRef?: (element: Element | null) => void\n  /**\n   * the element type to render as\n   */\n  as?: AsElementType\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"The rendered representation of the corresponding date."},{"key":"date","value":{"name":"string","required":true},"description":"An ISO 8601 formatted string representing the date corresponding to\nthis `<Calendar.Day />`"},{"key":"label","value":{"name":"string","required":true},"description":"Accessible label to provide more context for the date to assistive\ntechnologies. This should consist of more than just a numerical date value.\nIt should also include the month and the year. Ex. instead of just `1`,\nprovide `1 August 2019`."},{"key":"interaction","value":{"name":"union","raw":"'enabled' | 'disabled'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"}],"required":false},"description":"Is the `<Calendar.Day />` disabled"},{"key":"isSelected","value":{"name":"boolean","required":false},"description":"Is the `<Calendar.Day />` selected"},{"key":"isToday","value":{"name":"boolean","required":false},"description":"Is the `<Calendar.Day />` today"},{"key":"isOutsideMonth","value":{"name":"boolean","required":false},"description":"Is the `<Calendar.Day />` located outside the current rendered month"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: MouseEvent<ViewProps & Element>,\n  date: { date: string }\n) => void","signature":{"arguments":[{"type":{"name":"MouseEvent","elements":[{"name":"intersection","raw":"ViewProps & Element","elements":[{"name":"ViewProps"},{"name":"Element"}]}],"raw":"MouseEvent<ViewProps & Element>"},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ date: string }","signature":{"properties":[{"key":"date","value":{"name":"string","required":true}}]}},"name":"date"}],"return":{"name":"void"}},"required":false},"description":"Callback fired on click.\n@param {Object} event - the click event\n@param {Object} data - additional data\n@param data.date - the date of the corresponding `<Calendar.Day />`"},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(\n  event: KeyboardEvent<ViewProps & Element>,\n  data: { date: string }\n) => void","signature":{"arguments":[{"type":{"name":"KeyboardEvent","elements":[{"name":"intersection","raw":"ViewProps & Element","elements":[{"name":"ViewProps"},{"name":"Element"}]}],"raw":"KeyboardEvent<ViewProps & Element>"},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ date: string }","signature":{"properties":[{"key":"date","value":{"name":"string","required":true}}]}},"name":"data"}],"return":{"name":"void"}},"required":false},"description":"Callback fired on key down.\n@param {Object} event - the key down event\n@param {Object} data - additional data\n@param data.date - the date of the corresponding `<Calendar.Day />`"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"A ref function for the underlying DOM element."},{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"the element type to render as"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]}],"raw":"ReactElement<CalendarDayProps>"}],"raw":"ReactElement<CalendarDayProps>[]"}},"currentDate":{"type":{"name":"string"},"required":false,"description":"ISO date string for the current date if necessary. Defaults to the current\ndate in the user's timezone.","tsType":{"name":"string"}},"disabledDates":{"type":{"name":"union","value":[{"name":"array"},{"name":"func"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string[] | ((isoDateToCheck: string) => boolean)","elements":[{"name":"Array","elements":[{"name":"string"}],"raw":"string[]"},{"name":"unknown"}]}},"locale":{"type":{"name":"string"},"required":false,"description":"A standard language identifier.\n\nSee [Moment.js](https://momentjs.com/timezone/docs/#/using-timezones/parsing-in-zone/) for\nmore details.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's locale will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"onDateSelected":{"type":{"name":"func"},"required":false,"description":"Callback fired when a day has been selected.","tsType":{"name":"signature","type":"function","raw":"(\n  dateString: string,\n  momentDate: Moment,\n  e: React.MouseEvent\n) => void","signature":{"arguments":[{"type":{"name":"string"},"name":"dateString"},{"type":{"name":"Moment"},"name":"momentDate"},{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"}],"return":{"name":"void"}}}},"onRequestRenderNextMonth":{"type":{"name":"func"},"required":false,"description":"Callback fired when the next month button is clicked in the navigation\nheader, requesting to render the next month.","tsType":{"name":"signature","type":"function","raw":"(\n  e: React.MouseEvent,\n  requestedMonth: string\n) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"string"},"name":"requestedMonth"}],"return":{"name":"void"}}}},"onRequestRenderPrevMonth":{"type":{"name":"func"},"required":false,"description":"Callback fired when the previous month button is clicked in the navigation\nheader, requesting to render the previous month.","tsType":{"name":"signature","type":"function","raw":"(\n  e: React.MouseEvent,\n  requestedMonth: string\n) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"string"},"name":"requestedMonth"}],"return":{"name":"void"}}}},"renderNavigationLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to render in the navigation header. The recommendation is to include\nthe name of the current rendered month along with the year.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderNextMonthButton":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"A button to render in the navigation header. The recommendation is to\ncompose it with the [IconButton](#IconButton) component by setting the `size`\nprop to `small`, `withBorder` and `withBackground` to `false`, and setting\n`renderIcon` to [IconArrowOpenEnd](#iconography).","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderPrevMonthButton":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"A button to render in the navigation header. The recommendation is to\ncompose it with the [IconButton](#Button) component by setting the `size`\nprop to `small`, `withBorder` and `withBackground` to `false`, and setting\n`renderIcon` to [IconArrowOpenStart](#iconography).","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderWeekdayLabels":{"type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"node"},{"name":"func"}]}},"required":false,"description":"An array of labels containing the name of each day of the week. The visible\nportion of the label should be abbreviated (no longer than three characters).\nNote that screen readers will read this content preceding each date as the\n`<Calendar />` is navigated. Consider using\n[AccessibleContent](#AccessibleContent) with the `alt` prop containing the\nfull day name for assistive technologies and the children containing the\nabbreviation. ex. `[<AccessibleContent alt=\"Sunday\">Sun</AccessibleContent>, ...]`","tsType":{"name":"Array","elements":[{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}],"raw":"Renderable[]"}},"role":{"type":{"name":"enum","value":[{"value":"'table'","computed":false},{"value":"'listbox'","computed":false}]},"required":false,"description":"The role of the underlying table. This can be set to 'listbox' when\nassistive technologies need to read the `<Calendar.Day />` children as a list.","tsType":{"name":"union","raw":"'table' | 'listbox'","elements":[{"name":"literal","value":"'table'"},{"name":"literal","value":"'listbox'"}]},"defaultValue":{"value":"'table'","computed":false}},"selectedDate":{"type":{"name":"string"},"required":false,"description":"ISO date string for the selected date. It needs onDateSelected to be specified too.","tsType":{"name":"string"}},"timezone":{"type":{"name":"string"},"required":false,"description":"A timezone identifier in the format: *Area/Location*\n\nSee [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list\nof possible options.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's timezone will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"visibleMonth":{"type":{"name":"string"},"required":false,"description":"Visible month for the rendered calendar. Formatted as an ISO date string.","tsType":{"name":"string"}},"withYearPicker":{"type":{"name":"object"},"required":false,"description":"If set, years can be picked from a dropdown.\nIt accepts an object.\nscreenReaderLabel: string // e.g.: i18n(\"pick a year\")\n\nonRequestYearChange?:(e: React.MouseEvent,requestedYear: number): void // if set, on year change, only this will be called and no internal change will take place\n\nstartYear: number // e.g.: 2001, sets the start year of the selectable list\n\nendYear: number // e.g.: 2030, sets the end year of the selectable list","tsType":{"name":"signature","type":"object","raw":"{\n  screenReaderLabel: string\n  onRequestYearChange?: (e: any, requestedYear: number) => void\n  startYear: number\n  endYear: number\n}","signature":{"properties":[{"key":"screenReaderLabel","value":{"name":"string","required":true}},{"key":"onRequestYearChange","value":{"name":"signature","type":"function","raw":"(e: any, requestedYear: number) => void","signature":{"arguments":[{"type":{"name":"any"},"name":"e"},{"type":{"name":"number"},"name":"requestedYear"}],"return":{"name":"void"}},"required":false}},{"key":"startYear","value":{"name":"number","required":true}},{"key":"endYear","value":{"name":"number","required":true}}]}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-calendar/src/Calendar/index.tsx","extension":".tsx","srcPath":"packages/ui-calendar/src/Calendar/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-calendar/src/Calendar/index.tsx","packageName":"@instructure/ui-calendar","requirePath":"@instructure/ui-calendar/lib/Calendar/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-calendar/src/Calendar/index.tsx').default","esPath":"@instructure/ui-calendar/es/Calendar/index","themePath":"packages/ui-calendar/src/Calendar/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-calendar/src/Calendar/theme.ts","id":"Calendar","title":"Calendar"}