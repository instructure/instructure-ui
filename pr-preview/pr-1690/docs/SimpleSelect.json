{"description":"\n`SimpleSelect` is a higher level abstraction of [Select](#Select) that closely parallels the functionality of standard HTML `<select>` elements. It does not support autocomplete behavior and is much less configurable than [Select](#Select). However, because it is more opinionated, `SimpleSelect` can be implemented with very little boilerplate.\n\n### Uncontrolled\n\nFor the most basic implementations, `SimpleSelect` can be uncontrolled. If desired, the `defaultValue` prop can be used to set the initial selection.\n\n```javascript\n---\ntype: example\n---\n<SimpleSelect renderLabel=\"Uncontrolled Select\">\n  <SimpleSelect.Option id=\"foo\" value=\"foo\"\n                       renderBeforeLabel={(props) => {\n                         console.log(props)\n                         return <IconCheckSolid />\n                       }}>\n    Foo\n  </SimpleSelect.Option>\n  <SimpleSelect.Option id=\"bar\" value=\"bar\">\n    Bar\n  </SimpleSelect.Option>\n  <SimpleSelect.Option id=\"baz\" value=\"baz\">\n    Baz\n  </SimpleSelect.Option>\n</SimpleSelect>\n```\n\n### Controlled\n\nTo use `SimpleSelect` controlled, simply provide the `value` prop the string that corresponds to the selected option's `value` prop. The `onChange` callback can be used to update the value stored in state.\n\n- ```javascript\n  class Example extends React.Component {\n    state = {\n      value: 'Alaska'\n    }\n\n    handleSelect = (e, { id, value }) => {\n      this.setState({ value })\n    }\n\n    render() {\n      return (\n        <SimpleSelect\n          renderLabel=\"Controlled Select\"\n          assistiveText=\"Use arrow keys to navigate options.\"\n          value={this.state.value}\n          onChange={this.handleSelect}\n        >\n          {this.props.options.map((opt, index) => (\n            <SimpleSelect.Option key={index} id={`opt-${index}`} value={opt}>\n              {opt}\n            </SimpleSelect.Option>\n          ))}\n        </SimpleSelect>\n      )\n    }\n  }\n\n  render(\n    <Example\n      options={[\n        'Alaska',\n        'American Samoa',\n        'Arizona',\n        'Arkansas',\n        'California',\n        'Colorado',\n        'Connecticut',\n        'Delaware',\n        'District Of Columbia',\n        'Federated States Of Micronesia',\n        'Florida',\n        'Georgia',\n        'Guam',\n        'Hawaii',\n        'Idaho',\n        'Illinois'\n      ]}\n    />\n  )\n  ```\n\n- ```javascript\n  const Example = ({ options }) => {\n    const [value, setValue] = useState('Alaska')\n\n    const handleSelect = (e, { id, value }) => {\n      setValue(value)\n    }\n\n    return (\n      <SimpleSelect\n        renderLabel=\"Controlled Select\"\n        assistiveText=\"Use arrow keys to navigate options.\"\n        value={value}\n        onChange={handleSelect}\n      >\n        {options.map((opt, index) => (\n          <SimpleSelect.Option key={index} id={`opt-${index}`} value={opt}>\n            {opt}\n          </SimpleSelect.Option>\n        ))}\n      </SimpleSelect>\n    )\n  }\n\n  render(\n    <Example\n      options={[\n        'Alaska',\n        'American Samoa',\n        'Arizona',\n        'Arkansas',\n        'California',\n        'Colorado',\n        'Connecticut',\n        'Delaware',\n        'District Of Columbia',\n        'Federated States Of Micronesia',\n        'Florida',\n        'Georgia',\n        'Guam',\n        'Hawaii',\n        'Idaho',\n        'Illinois'\n      ]}\n    />\n  )\n  ```\n\n### Groups\n\nLike a HTML `<select>` element, `SimpleSelect` supports option groups. `SimpleSelect.Group` only requires the `renderLabel` prop be provided.\n\n```javascript\n---\ntype: example\n---\n<SimpleSelect renderLabel=\"Select with Groups\">\n  <SimpleSelect.Group renderLabel=\"Group one\" key=\"grp1\">\n    <SimpleSelect.Option id=\"opt1\" value=\"option-1\">\n      Option one\n    </SimpleSelect.Option>\n  </SimpleSelect.Group>\n  <SimpleSelect.Group renderLabel=\"Group two\" key=\"grp2\">\n    <SimpleSelect.Option id=\"opt2\" value=\"option-2\">\n      Option two\n    </SimpleSelect.Option>\n    <SimpleSelect.Option id=\"opt3\" value=\"option-3\">\n      Option three\n    </SimpleSelect.Option>\n    <SimpleSelect.Option id=\"opt4\" value=\"option-4\">\n      Option four\n    </SimpleSelect.Option>\n  </SimpleSelect.Group>\n</SimpleSelect>\n```\n\n### Icons\n\nTo display icons (or other elements) before or after an option, pass it via the `renderBeforeLabel` and `renderAfterLabel` prop to `SimpleSelect.Option`. You can pass a function as well, which will have a `props` parameter, so you can access the properties of that `SimpleSelect.Option` (e.g. if it is currently `isHighlighted`). The available props are: `[ id, isDisabled, isSelected, isHighlighted, children ]` (same as for `Select.Option`).\n\n```javascript\n---\ntype: example\n---\n<SimpleSelect renderLabel=\"Option Icons\">\n  <SimpleSelect.Option\n    id=\"text\"\n    value=\"text\"\n    renderBeforeLabel={'XY'}\n  >\n    Text\n  </SimpleSelect.Option>\n  <SimpleSelect.Option\n    id=\"icon\"\n    value=\"icon\"\n    renderBeforeLabel={<IconCheckSolid />}\n  >\n    Icon\n  </SimpleSelect.Option>\n  <SimpleSelect.Option\n    id=\"coloredIcon\"\n    value=\"coloredIcon\"\n    renderBeforeLabel={(props) => {\n      let color = 'brand'\n      if (props.isHighlighted) color = 'primary-inverse'\n      if (props.isSelected) color = 'primary'\n      if (props.isDisabled) color = 'warning'\n      return <IconInstructureSolid color={color} />\n    }}\n  >\n    Colored Icon\n  </SimpleSelect.Option>\n</SimpleSelect>\n```\n\n> Note: This component uses a native `input` field to render the selected value. When it's included in a native HTML `form`, the text value will be sent to the backend instead of anything specified in the `value` field of the `SimpleSelect.Option`-s. We do not recommend to use this component this way, rather write your own code that collects information and sends it to the backend.\n","displayName":"SimpleSelect","methods":[],"props":{"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":true,"description":"The form field label.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"The value corresponding to the value of the selected option. If defined,\nthe component will act controlled and will not manage its own state.","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"defaultValue":{"type":{"name":"string"},"required":false,"description":"The value of the option to select by default, when uncontrolled.","tsType":{"name":"string"}},"id":{"type":{"name":"string"},"required":false,"description":"The id of the text input. One is generated if not supplied.","tsType":{"name":"string"}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the text input.","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"assistiveText":{"type":{"name":"string"},"required":false,"description":"Additional helpful text to provide to screen readers about the operation\nof the component. Provided via aria-describedby.","tsType":{"name":"string"}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Html placeholder text to display when the input has no value. This should\nbe hint text, not a label replacement.","tsType":{"name":"string"}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"Whether or not the text input is required.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"isInline":{"type":{"name":"bool"},"required":false,"description":"Whether the input is rendered inline with other elements or if it\nis rendered as a block level element.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"The width of the text input.","tsType":{"name":"string"}},"visibleOptionsCount":{"type":{"name":"number"},"required":false,"description":"The number of options that should be visible before having to scroll. Works best when the options are the same height.","tsType":{"name":"number"},"defaultValue":{"value":"8","computed":false}},"optionsMaxHeight":{"type":{"name":"string"},"required":false,"description":"The max height the options list can be before having to scroll. If\nset, it will __override__ the `visibleOptionsCount` prop.","tsType":{"name":"string"}},"optionsMaxWidth":{"type":{"name":"string"},"required":false,"description":"The max width the options list can be before option text wraps. If not\nset, the list will only display as wide as the text input.","tsType":{"name":"string"}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Displays messages and validation for the input. It should be an array of\nobjects with the following shape:\n`{\n  text: ReactNode,\n  type: One of: ['error', 'hint', 'success', 'screenreader-only']\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"placement":{"type":{"name":"custom","raw":"PositionPropTypes.placement"},"required":false,"description":"The placement of the options list.","tsType":{"name":"PlacementPropValues"},"defaultValue":{"value":"'bottom stretch'","computed":false}},"constrain":{"type":{"name":"custom","raw":"PositionPropTypes.constrain"},"required":false,"description":"The parent in which to constrain the placement.","tsType":{"name":"PositionConstraint"},"defaultValue":{"value":"'window'","computed":false}},"mountNode":{"type":{"name":"custom","raw":"PositionPropTypes.mountNode"},"required":false,"description":"An element or a function returning an element to use mount the options\nlist to in the DOM (defaults to `document.body`)","tsType":{"name":"PositionMountNode"}},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback fired when a new option is selected.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.SyntheticEvent,\n  data: {\n    value?: string | number\n    id?: string\n  }\n) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{\n  value?: string | number\n  id?: string\n}","signature":{"properties":[{"key":"value","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"id","value":{"name":"string","required":false}}]}},"name":"data"}],"return":{"name":"void"}}}},"onFocus":{"type":{"name":"func"},"required":false,"description":"Callback fired when text input receives focus.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Callback fired when text input loses focus.","tsType":{"name":"signature","type":"function","raw":"(event: React.FocusEvent<HTMLInputElement>) => void","signature":{"arguments":[{"type":{"name":"ReactFocusEvent","raw":"React.FocusEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}]},"name":"event"}],"return":{"name":"void"}}}},"onShowOptions":{"type":{"name":"func"},"required":false,"description":"Callback fired when the options list is shown.","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"onHideOptions":{"type":{"name":"func"},"required":false,"description":"Callback fired when the options list is hidden.","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}}},"inputRef":{"type":{"name":"func"},"required":false,"description":"A ref to the html `input` element.","tsType":{"name":"signature","type":"function","raw":"(inputElement: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"inputElement"}],"return":{"name":"void"}}}},"listRef":{"type":{"name":"func"},"required":false,"description":"A ref to the html `ul` element.","tsType":{"name":"signature","type":"function","raw":"(listElement: HTMLUListElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]},"name":"listElement"}],"return":{"name":"void"}}}},"renderEmptyOption":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display in the list when no options are available.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"defaultValue":{"value":"'---'","computed":false}},"renderBeforeInput":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display before the text input. This will commonly be an icon.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderAfterInput":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"Content to display after the text input. This content will replace the\ndefault arrow icons.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([Group, Option])"},"required":false,"description":"Children of type `<SimpleSelect.Option />` or `<SimpleSelect.Group />`.","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","tags":"form, field, dropdown","relativePath":"packages/ui-simple-select/src/SimpleSelect/index.tsx","extension":".tsx","srcPath":"packages/ui-simple-select/src/SimpleSelect/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-simple-select/src/SimpleSelect/index.tsx","packageName":"@instructure/ui-simple-select","requirePath":"@instructure/ui-simple-select/lib/SimpleSelect/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-simple-select/src/SimpleSelect/index.tsx').default","esPath":"@instructure/ui-simple-select/es/SimpleSelect/index","id":"SimpleSelect","title":"SimpleSelect"}