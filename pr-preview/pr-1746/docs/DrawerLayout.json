{"description":"\nThe `<DrawerLayout />` component creates a layout consisting of both `<DrawerLayout.Tray />` and `<DrawerLayout.Content />`.\nThe tray can be placed at the `start` or `end` position. When there is sufficient space available,\nthe tray is positioned alongside the content. As the screen gets smaller, the `<DrawerTray />` can\nbe configured to overlay the `<DrawerLayout.Content />`\n\nThe `minWidth` prop specifies a breakpoint. When the `<DrawerLayout.Content />` resizes such that the width is\nless than the designated `minWidth`, the tray overlays the content\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    open: false,\n    trayIsOverlayed: false\n  };\n  handleOverlayTrayChange = (trayIsOverlayed) => {\n    this.setState({ trayIsOverlayed })\n  };\n  handleTrayDismiss = () => {\n    this.setState({ open: false })\n  };\n  render () {\n    return (\n      <View\n        height=\"25rem\"\n        as=\"div\"\n        background=\"primary\"\n        position=\"relative\"\n      >\n        { this.state.trayIsOverlayed && this.state.open && <Mask onClick={this.handleTrayDismiss} /> }\n        <DrawerLayout onOverlayTrayChange={this.handleOverlayTrayChange}>\n          <DrawerLayout.Tray\n            id=\"DrawerLayoutTrayExample1\"\n            open={this.state.open}\n            placement=\"start\"\n            label=\"Drawer Tray Start Example\"\n            onDismiss={this.handleTrayDismiss}\n          >\n            <View\n              as=\"div\"\n              maxWidth=\"16rem\"\n              textAlign=\"center\"\n              margin=\"large auto\"\n              padding=\"small\"\n            >\n              <CloseButton\n                placement=\"end\"\n                offset=\"small\"\n                onClick={this.handleTrayDismiss}\n                screenReaderLabel=\"Close\"\n              />\n              <Avatar name=\"foo bar\" margin=\"0 0 small 0\" />\n              <Text as=\"div\" size=\"x-small\">\n                Hello from start tray with a small amount of placeholder content\n              </Text>\n            </View>\n          </DrawerLayout.Tray>\n          <DrawerLayout.Content label=\"Drawer content example\">\n            <div style={{background: 'white', height: '100%'}}>\n              <View as=\"div\" padding=\"x-large\">\n                <Heading border=\"bottom\">A simple drawer layout</Heading>\n                <Grid startAt=\"medium\" vAlign=\"middle\" colSpacing=\"none\">\n                  <Grid.Row>\n                    <Grid.Col>\n                      <Button\n                        margin=\"small 0\"\n                        size=\"small\"\n                        onClick={() => { this.setState({ open: true }) }}\n                        aria-haspopup={this.state.trayIsOverlayed ? 'dialog' : 'region'}\n                        aria-controls=\"DrawerLayoutTrayExample1\"\n                      >\n                        Expand tray\n                      </Button>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Grid>\n                <Text size=\"x-small\">\n                  <p>{lorem.paragraph()}</p>\n                </Text>\n                <Text size=\"x-small\">\n                  <p>{lorem.paragraph()}</p>\n                </Text>\n              </View>\n            </div>\n          </DrawerLayout.Content>\n        </DrawerLayout>\n      </View>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\nMultiple `<DrawerLayout />` components can be nested in order to place trays on both sides\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    endOpen: false,\n    startOpen: false\n  };\n  render () {\n    return (\n      <View\n        height=\"40rem\"\n        display=\"block\"\n        background=\"primary\"\n      >\n        <DrawerLayout>\n          <DrawerLayout.Tray\n            open={this.state.endOpen}\n            placement=\"end\"\n            label=\"Drawer Tray End Example\"\n            onDismiss={() => {this.setState({ endOpen: false })}}\n          >\n            <View\n              as=\"div\"\n              maxWidth=\"48rem\"\n              textAlign=\"center\"\n              margin=\"large auto\"\n              padding=\"large\"\n            >\n              <CloseButton\n                placement=\"end\"\n                offset=\"small\"\n                onClick={() => {\n                  this.setState({ endOpen: false })\n                }}\n                screenReaderLabel=\"Close\"\n              />\n              <Text as=\"div\" size=\"x-small\">\n                Hello from end tray with a good amount of content as well\n              </Text>\n            </View>\n          </DrawerLayout.Tray>\n          <DrawerLayout.Content label=\"Drawer content example containing another layout\">\n            <DrawerLayout>\n              <DrawerLayout.Tray\n                label=\"Layout Tray Start Example\"\n                open={this.state.startOpen}\n                placement=\"start\"\n                onDismiss={() => {this.setState({ startOpen: false })}}\n              >\n                <View\n                  as=\"div\"\n                  maxWidth=\"16rem\"\n                  textAlign=\"center\"\n                  margin=\"large auto\"\n                  padding=\"small\"\n                >\n                  <CloseButton\n                    placement=\"end\"\n                    offset=\"small\"\n                    onClick={() => {\n                      this.setState({ startOpen: false })\n                    }}\n                    screenReaderLabel=\"Close\"\n                  />\n                  <Avatar name=\"foo bar\" margin=\"0 0 small 0\" />\n                  <Text as=\"div\" size=\"x-small\">\n                    Hello from start tray with a small amount of placeholder content\n                  </Text>\n                </View>\n              </DrawerLayout.Tray>\n              <DrawerLayout.Content label=\"Drawer content example containing a responsive \">\n                <div style={{background: 'white', height: '100%'}}>\n                  <View as=\"div\" padding=\"x-large\">\n                    <Heading border=\"bottom\">A nested drawer layout</Heading>\n                    <Grid startAt=\"medium\" vAlign=\"middle\" colSpacing=\"none\">\n                      <Grid.Row>\n                        <Grid.Col>\n                          <Button\n                            margin=\"small 0\"\n                            size=\"small\"\n                            onClick={() => { this.setState({ startOpen: true }) }}\n                            aria-haspopup=\"dialog\"\n                          >\n                            Expand start tray\n                          </Button>\n                        </Grid.Col>\n                        <Grid.Col width=\"auto\">\n                          <Button\n                            margin=\"small 0\"\n                            size=\"small\"\n                            onClick={() => { this.setState({ endOpen: true }) }}\n                            aria-haspopup=\"dialog\"\n                          >\n                            Expand end tray\n                          </Button>\n                        </Grid.Col>\n                      </Grid.Row>\n                      <Grid.Row colSpacing=\"medium\">\n                        <Grid.Col>\n                          <Img role=\"img\" src={placeholderImage(250, 250)} />\n                        </Grid.Col>\n                        <Grid.Col>\n                          <Img role=\"img\" src={placeholderImage(250, 250)} />\n                        </Grid.Col>\n                        <Grid.Col>\n                          <Img role=\"img\" src={placeholderImage(250, 250)} />\n                        </Grid.Col>\n                      </Grid.Row>\n                    </Grid>\n                    <Text size=\"x-small\">\n                      <p>{lorem.paragraph()}</p>\n                    </Text>\n                    <Text size=\"x-small\">\n                      <p>{lorem.paragraph()}</p>\n                    </Text>\n                  </View>\n                </div>\n              </DrawerLayout.Content>\n            </DrawerLayout>\n          </DrawerLayout.Content>\n        </DrawerLayout>\n      </View>\n    )\n  }\n}\n\nrender(<Example />)\n```\n","displayName":"DrawerLayout","methods":[],"props":{"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOfEach([DrawerContent, DrawerTray])"},"required":false,"description":"Exactly one of each of the following child types: `DrawerLayout.Content`, `DrawerLayout.Tray`","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"minWidth":{"type":{"name":"string"},"required":false,"description":"Min width for the `<DrawerLayout.Content />`","tsType":{"name":"string"},"defaultValue":{"value":"'30rem'","computed":false}},"onOverlayTrayChange":{"type":{"name":"func"},"required":false,"description":"Function called when the `<DrawerLayout.Content />` is resized and hits the `minWidth` breakpoint\nCalled with a boolean value, `true` if the tray is now overlaying the content or `false` if\nit is side by side","tsType":{"name":"signature","type":"function","raw":"(shouldOverlayTray: boolean) => void","signature":{"arguments":[{"type":{"name":"boolean"},"name":"shouldOverlayTray"}],"return":{"name":"void"}}}},"dir":{"type":{"name":"enum","computed":true,"value":"Object.values(textDirectionContextConsumer.DIRECTION)"},"required":false,"description":""}},"category":"components","relativePath":"packages/ui-drawer-layout/src/DrawerLayout/index.tsx","extension":".tsx","srcPath":"packages/ui-drawer-layout/src/DrawerLayout/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-drawer-layout/src/DrawerLayout/index.tsx","packageName":"@instructure/ui-drawer-layout","requirePath":"@instructure/ui-drawer-layout/lib/DrawerLayout/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-drawer-layout/src/DrawerLayout/index.tsx').default","esPath":"@instructure/ui-drawer-layout/es/DrawerLayout/index","id":"DrawerLayout","title":"DrawerLayout"}