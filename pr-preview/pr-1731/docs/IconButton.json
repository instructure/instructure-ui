{"description":"\nAn IconButton can be used when the Button only renders an Icon and does not have other visual elements or text content.\n\n```js\n---\ntype: example\n---\n<IconButton screenReaderLabel=\"Add User\"><IconAddLine /></IconButton>\n```\n\n### Accessibility\n\nBecause the IconButton visually only renders an icon, a description is necessary for assistive technologies. The `screenReaderLabel` prop is required for this purpose, and should consist of a complete description of the action.\n\n```js\n---\ntype: example\n---\n<IconButton color=\"primary\" screenReaderLabel=\"Add blog post\"><IconAddLine /></IconButton>\n```\n\nUsing [Tooltip](#Tooltip) in conjunction with IconButton can also provide necessary context when the IconButton alone would be insufficient.\n\n```js\n---\ntype: example\n---\n<Tooltip\n  renderTip=\"View user profile\"\n  on={['hover', 'focus']}\n  placement=\"bottom\"\n>\n  <IconButton screenReaderLabel=\"View user profile\"><IconUserLine /></IconButton>\n</Tooltip>\n```\n\n### Shaping\n\nThe `shape` prop specifies if the IconButton will render as a `rectangle` or `circle`.\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <IconButton shape=\"rectangle\" screenReaderLabel=\"Delete tag\" margin=\"small\"><IconXSolid /></IconButton>\n  <IconButton shape=\"circle\" screenReaderLabel=\"Delete tag\" margin=\"small\"><IconXSolid /></IconButton>\n</View>\n```\n\n### Rendering only the icon\n\nThe background and border can be optionally removed as needed by setting the `withBorder` and `withBackground` props to `false`\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <View display=\"inline-block\" background=\"primary\">\n    <IconButton withBackground={false} withBorder={false} screenReaderLabel=\"Delete tag\" margin=\"large\">\n      <IconXSolid />\n    </IconButton>\n  </View>\n  <View display=\"inline-block\" background=\"primary-inverse\">\n    <IconButton withBackground={false} withBorder={false} color=\"primary-inverse\" screenReaderLabel=\"Delete tag\" margin=\"large\">\n      <IconXSolid />\n    </IconButton>\n  </View>\n</View>\n```\n","displayName":"IconButton","methods":[],"props":{"children":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"An icon, or function returning an icon (identical to the `renderIcon` prop).","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"renderIcon":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"An icon, or function that returns an icon (identical to the `children` prop).","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"screenReaderLabel":{"type":{"name":"string"},"required":true,"description":"An accessible label for the `IconButton`.","tsType":{"name":"ReactNode"}},"type":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'submit'","computed":false},{"value":"'reset'","computed":false}]},"required":false,"description":"Specifies the type of the `IconButton`'s underlying html element.","tsType":{"name":"union","raw":"'button' | 'submit' | 'reset'","elements":[{"name":"literal","value":"'button'"},{"name":"literal","value":"'submit'"},{"name":"literal","value":"'reset'"}]},"defaultValue":{"value":"'button'","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the `IconButton`","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the `IconButton`'s underlying html element.","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render as the component root, `button` by default.","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'button'","computed":false}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the `IconButton` is enabled, disabled, or readonly.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"defaultValue":{"value":"undefined","computed":true}},"color":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'primary-inverse'","computed":false},{"value":"'secondary'","computed":false},{"value":"'success'","computed":false},{"value":"'danger'","computed":false}]},"required":false,"description":"Specifies the color for the `IconButton`.","tsType":{"name":"union","raw":"'primary' | 'primary-inverse' | 'secondary' | 'success' | 'danger'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'danger'"}]},"defaultValue":{"value":"'secondary'","computed":false}},"focusColor":{"type":{"name":"enum","value":[{"value":"'info'","computed":false},{"value":"'inverse'","computed":false}]},"required":false,"description":"Override the `Button`'s default focus outline color.","tsType":{"name":"union","raw":"'info' | 'inverse'","elements":[{"name":"literal","value":"'info'"},{"name":"literal","value":"'inverse'"}]}},"shape":{"type":{"name":"enum","value":[{"value":"'rectangle'","computed":false},{"value":"'circle'","computed":false}]},"required":false,"description":"Specifies if the `IconButton` shape should be a circle or rectangle.","tsType":{"name":"union","raw":"'rectangle' | 'circle'","elements":[{"name":"literal","value":"'rectangle'"},{"name":"literal","value":"'circle'"}]},"defaultValue":{"value":"'rectangle'","computed":false}},"withBackground":{"type":{"name":"bool"},"required":false,"description":"Specifies if the `IconButton` should render with a solid background. When false, the background is transparent.","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"withBorder":{"type":{"name":"bool"},"required":false,"description":"Specifies if the `IconButton` should render with a border.","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"},"defaultValue":{"value":"'0'","computed":false}},"cursor":{"type":{"name":"string"},"required":false,"description":"Specify a mouse cursor to use when hovering over the button.\nThe `pointer` cursor is used by default.","tsType":{"name":"Cursor"},"defaultValue":{"value":"'pointer'","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":"Specifies an href attribute for the `IconButton`'s underlying html element.","tsType":{"name":"string"}},"onClick":{"type":{"name":"func"},"required":false,"description":"Callback fired when the `Button` is clicked.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""},"to":{"required":false,"tsType":{"name":"string"},"description":"Needed for React Router links\n@private"}},"category":"components","relativePath":"packages/ui-buttons/src/IconButton/index.tsx","extension":".tsx","srcPath":"packages/ui-buttons/src/IconButton/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/IconButton/index.tsx","packageName":"@instructure/ui-buttons","requirePath":"@instructure/ui-buttons/lib/IconButton/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-buttons/src/IconButton/index.tsx').default","esPath":"@instructure/ui-buttons/es/IconButton/index","themePath":"packages/ui-buttons/src/IconButton/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/IconButton/theme.ts","id":"IconButton","title":"IconButton"}