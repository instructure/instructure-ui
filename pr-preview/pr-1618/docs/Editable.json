{"description":"\nThe `Editable` component exists to support in-place editing of content on the page.\nPerhaps you have a page with some text, say the heading, that you'd like to let the user\nedit right there in-place. `Editable` manages the user's interactions which will flip\nthe rendering from the view mode to the edit mode in an accessible way. It is then just up\nto the consumer of `Editable` to provide _render properties_ which return the view component\nand the edit component.\n\nWhere `Editable` provides the state management and user interactions, it is not its\nresponsibility to provide the DOM structure to layout the component on the page. We provide\na standard implementation of that in [`InPlaceEdit`](/#InPlaceEdit), which is where you\nwill find examples.\n\nUsing `Editable` gives you complete control, over how in-place editing\nshould look.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        mode: props.mode || 'view',\n        value: props.value || '',\n        readOnly: false\n      }\n    }\n\n    renderButton({ isVisible, onClick, onFocus, onBlur, buttonRef }) {\n      if (this.state.readOnly) {\n        return null\n      }\n\n      // To correctly handle focus, always return the Button, but\n      // only visible if isVisible (if you want the UI to work in the standard way)\n      return (\n        <span style={{ opacity: isVisible ? 1 : 0 }}>\n          <Button\n            size=\"small\"\n            margin=\"0 0 0 x-small\"\n            onClick={onClick}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            elementRef={buttonRef}\n          >\n            Do it!\n          </Button>\n        </span>\n      )\n    }\n\n    renderViewer() {\n      return <span>{this.state.value}</span>\n    }\n\n    handleValueChange = (event) => {\n      this.setState({ value: event.target.value })\n    }\n\n    handleModeChange = (newMode) => {\n      this.setState({ mode: newMode })\n    }\n\n    renderEditor({ onBlur, editorRef }) {\n      return (\n        <input\n          ref={editorRef}\n          onBlur={onBlur}\n          value={this.state.value}\n          onChange={this.handleValueChange}\n        />\n      )\n    }\n\n    renderMe = ({\n      mode,\n      getContainerProps,\n      getViewerProps,\n      getEditorProps,\n      getEditButtonProps\n    }) => {\n      return (\n        <View {...getContainerProps()}>\n          {mode === 'view' ? this.renderViewer(getViewerProps()) : null}\n          {mode === 'edit' ? this.renderEditor(getEditorProps()) : null}\n          {this.renderButton(getEditButtonProps())}\n        </View>\n      )\n    }\n\n    onChangeReadOnly = (event) => {\n      this.setState({ readOnly: event.target.checked })\n    }\n\n    render() {\n      return (\n        <View as=\"div\">\n          <View as=\"div\" margin=\"0 0 small 0\">\n            <Checkbox\n              size=\"small\"\n              label=\"Read Only\"\n              checked={this.state.readOnly}\n              onChange={this.onChangeReadOnly}\n            />\n          </View>\n          <Editable\n            mode={this.state.mode}\n            onChangeMode={this.handleModeChange}\n            render={this.renderMe}\n            value={this.state.value}\n            readOnly={this.state.readOnly}\n          />\n        </View>\n      )\n    }\n  }\n  render(<Example value=\"you can edit me\" />)\n  ```\n\n- ```js\n  const Example = (props) => {\n    const [mode, setMode] = useState(props.mode || 'view')\n    const [value, setValue] = useState(props.value || '')\n    const [readOnly, setReadOnly] = useState(false)\n\n    const renderButton = ({\n      isVisible,\n      onClick,\n      onFocus,\n      onBlur,\n      buttonRef\n    }) => {\n      if (readOnly) {\n        return null\n      }\n\n      // To correctly handle focus, always return the Button, but\n      // only visible if isVisible (if you want the UI to work in the standard way)\n      return (\n        <span style={{ opacity: isVisible ? 1 : 0 }}>\n          <Button\n            size=\"small\"\n            margin=\"0 0 0 x-small\"\n            onClick={onClick}\n            onFocus={onFocus}\n            onBlur={onBlur}\n            elementRef={buttonRef}\n          >\n            Do it!\n          </Button>\n        </span>\n      )\n    }\n\n    const renderViewer = () => {\n      return <span>{value}</span>\n    }\n\n    const handleValueChange = (event) => {\n      setValue(event.target.value)\n    }\n\n    const handleModeChange = (newMode) => {\n      setMode(newMode)\n    }\n\n    const renderEditor = ({ onBlur, editorRef }) => {\n      return (\n        <input\n          ref={editorRef}\n          onBlur={onBlur}\n          value={value}\n          onChange={handleValueChange}\n        />\n      )\n    }\n\n    const renderMe = ({\n      mode,\n      getContainerProps,\n      getViewerProps,\n      getEditorProps,\n      getEditButtonProps\n    }) => {\n      return (\n        <View {...getContainerProps()}>\n          {mode === 'view' ? renderViewer(getViewerProps()) : null}\n          {mode === 'edit' ? renderEditor(getEditorProps()) : null}\n          {renderButton(getEditButtonProps())}\n        </View>\n      )\n    }\n\n    const onChangeReadOnly = (event) => {\n      setReadOnly(event.target.checked)\n    }\n\n    return (\n      <View as=\"div\">\n        <View as=\"div\" margin=\"0 0 small 0\">\n          <Checkbox\n            size=\"small\"\n            label=\"Read Only\"\n            checked={readOnly}\n            onChange={onChangeReadOnly}\n          />\n        </View>\n        <Editable\n          mode={mode}\n          onChangeMode={handleModeChange}\n          render={renderMe}\n          value={value}\n          readOnly={readOnly}\n        />\n      </View>\n    )\n  }\n\n  render(<Example value=\"you can edit me\" />)\n  ```\n","displayName":"Editable","methods":[],"props":{"mode":{"type":{"name":"enum","value":[{"value":"'view'","computed":false},{"value":"'edit'","computed":false}]},"required":true,"description":"If `'view'`: the view component is rendered,\nif `'edit'`: the edit component is rendered","tsType":{"name":"union","raw":"'view' | 'edit'","elements":[{"name":"literal","value":"'view'"},{"name":"literal","value":"'edit'"}]}},"onChangeMode":{"type":{"name":"func"},"required":true,"description":"Called when the component's mode changes.","tsType":{"name":"signature","type":"function","raw":"(newMode: string) => void","signature":{"arguments":[{"type":{"name":"string"},"name":"newMode"}],"return":{"name":"void"}}}},"children":{"type":{"name":"func"},"required":false,"description":"Function that you can supply that will return the children of this component.\nIt has one parameter has the following fields:\n- mode: `view` or `edit`, depending on whether the view or the editor should be rendered.\n- getContainerProps(props) - Props to be spread onto the container element\n- getEditorProps(props) - Props to be spread onto the editor element\n- getEditButtonProps(props) - Props to be spread onto the edit button element","tsType":{"name":"signature","type":"function","raw":"(props: EditableRenderProps) => React.ReactNode","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  mode: string\n  getContainerProps: GetContainerProps\n  getViewerProps: GetViewerProps\n  getEditorProps: GetEditorProps\n  getEditButtonProps: GetEditButtonProps\n}","signature":{"properties":[{"key":"mode","value":{"name":"string","required":true}},{"key":"getContainerProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => {\n  ref: React.RefCallback<any>\n  onMouseOver: (event: React.MouseEvent<any>) => void\n  onMouseOut: (event: React.MouseEvent<any>) => void\n  onMouseDown?: (event: React.MouseEvent<any>) => void\n  onKeyUp?: (event: React.KeyboardEvent<any>) => void\n  readOnly?: boolean\n} & Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"{\n  ref: React.RefCallback<any>\n  onMouseOver: (event: React.MouseEvent<any>) => void\n  onMouseOut: (event: React.MouseEvent<any>) => void\n  onMouseDown?: (event: React.MouseEvent<any>) => void\n  onKeyUp?: (event: React.KeyboardEvent<any>) => void\n  readOnly?: boolean\n} & Record<string, any>","elements":[{"name":"signature","type":"object","raw":"{\n  ref: React.RefCallback<any>\n  onMouseOver: (event: React.MouseEvent<any>) => void\n  onMouseOut: (event: React.MouseEvent<any>) => void\n  onMouseDown?: (event: React.MouseEvent<any>) => void\n  onKeyUp?: (event: React.KeyboardEvent<any>) => void\n  readOnly?: boolean\n}","signature":{"properties":[{"key":"ref","value":{"name":"ReactRefCallback","raw":"React.RefCallback<any>","elements":[{"name":"any"}],"required":true}},{"key":"onMouseOver","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<any>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<any>","elements":[{"name":"any"}]},"name":"event"}],"return":{"name":"void"}},"required":true}},{"key":"onMouseOut","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<any>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<any>","elements":[{"name":"any"}]},"name":"event"}],"return":{"name":"void"}},"required":true}},{"key":"onMouseDown","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<any>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<any>","elements":[{"name":"any"}]},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyUp","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<any>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<any>","elements":[{"name":"any"}]},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":"readOnly","value":{"name":"boolean","required":false}}]}},{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}]}},"required":true}},{"key":"getViewerProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => {\n  mode: 'view' | 'edit'\n  readOnly?: boolean\n} & Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"{\n  mode: 'view' | 'edit'\n  readOnly?: boolean\n} & Record<string, any>","elements":[{"name":"signature","type":"object","raw":"{\n  mode: 'view' | 'edit'\n  readOnly?: boolean\n}","signature":{"properties":[{"key":"mode","value":{"name":"union","raw":"'view' | 'edit'","elements":[{"name":"literal","value":"'view'"},{"name":"literal","value":"'edit'"}],"required":true}},{"key":"readOnly","value":{"name":"boolean","required":false}}]}},{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}]}},"required":true}},{"key":"getEditorProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => {\n  mode: 'view' | 'edit'\n  onBlur: () => void\n  editorRef: (el: HTMLElement | null) => void\n  readOnly?: boolean\n} & Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"{\n  mode: 'view' | 'edit'\n  onBlur: () => void\n  editorRef: (el: HTMLElement | null) => void\n  readOnly?: boolean\n} & Record<string, any>","elements":[{"name":"signature","type":"object","raw":"{\n  mode: 'view' | 'edit'\n  onBlur: () => void\n  editorRef: (el: HTMLElement | null) => void\n  readOnly?: boolean\n}","signature":{"properties":[{"key":"mode","value":{"name":"union","raw":"'view' | 'edit'","elements":[{"name":"literal","value":"'view'"},{"name":"literal","value":"'edit'"}],"required":true}},{"key":"onBlur","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"editorRef","value":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":true}},{"key":"readOnly","value":{"name":"boolean","required":false}}]}},{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}]}},"required":true}},{"key":"getEditButtonProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => {\n  onClick: () => void\n  onFocus: () => void\n  onBlur: () => void\n  isVisible: boolean\n  buttonRef: (el: Element) => void\n  readOnly?: boolean\n} & Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"{\n  onClick: () => void\n  onFocus: () => void\n  onBlur: () => void\n  isVisible: boolean\n  buttonRef: (el: Element) => void\n  readOnly?: boolean\n} & Record<string, any>","elements":[{"name":"signature","type":"object","raw":"{\n  onClick: () => void\n  onFocus: () => void\n  onBlur: () => void\n  isVisible: boolean\n  buttonRef: (el: Element) => void\n  readOnly?: boolean\n}","signature":{"properties":[{"key":"onClick","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"onFocus","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"onBlur","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"isVisible","value":{"name":"boolean","required":true}},{"key":"buttonRef","value":{"name":"signature","type":"function","raw":"(el: Element) => void","signature":{"arguments":[{"type":{"name":"Element"},"name":"el"}],"return":{"name":"void"}},"required":true}},{"key":"readOnly","value":{"name":"boolean","required":false}}]}},{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}]}},"required":true}}]}},"name":"props"}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}},"defaultValue":{"value":"null","computed":false}},"render":{"type":{"name":"func"},"required":false,"description":"Identical to children","tsType":{"name":"signature","type":"function","raw":"(props: EditableRenderProps) => React.ReactNode","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  mode: string\n  getContainerProps: GetContainerProps\n  getViewerProps: GetViewerProps\n  getEditorProps: GetEditorProps\n  getEditButtonProps: GetEditButtonProps\n}","signature":{"properties":[{"key":"mode","value":{"name":"string","required":true}},{"key":"getContainerProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => {\n  ref: React.RefCallback<any>\n  onMouseOver: (event: React.MouseEvent<any>) => void\n  onMouseOut: (event: React.MouseEvent<any>) => void\n  onMouseDown?: (event: React.MouseEvent<any>) => void\n  onKeyUp?: (event: React.KeyboardEvent<any>) => void\n  readOnly?: boolean\n} & Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"{\n  ref: React.RefCallback<any>\n  onMouseOver: (event: React.MouseEvent<any>) => void\n  onMouseOut: (event: React.MouseEvent<any>) => void\n  onMouseDown?: (event: React.MouseEvent<any>) => void\n  onKeyUp?: (event: React.KeyboardEvent<any>) => void\n  readOnly?: boolean\n} & Record<string, any>","elements":[{"name":"signature","type":"object","raw":"{\n  ref: React.RefCallback<any>\n  onMouseOver: (event: React.MouseEvent<any>) => void\n  onMouseOut: (event: React.MouseEvent<any>) => void\n  onMouseDown?: (event: React.MouseEvent<any>) => void\n  onKeyUp?: (event: React.KeyboardEvent<any>) => void\n  readOnly?: boolean\n}","signature":{"properties":[{"key":"ref","value":{"name":"ReactRefCallback","raw":"React.RefCallback<any>","elements":[{"name":"any"}],"required":true}},{"key":"onMouseOver","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<any>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<any>","elements":[{"name":"any"}]},"name":"event"}],"return":{"name":"void"}},"required":true}},{"key":"onMouseOut","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<any>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<any>","elements":[{"name":"any"}]},"name":"event"}],"return":{"name":"void"}},"required":true}},{"key":"onMouseDown","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<any>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<any>","elements":[{"name":"any"}]},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyUp","value":{"name":"signature","type":"function","raw":"(event: React.KeyboardEvent<any>) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<any>","elements":[{"name":"any"}]},"name":"event"}],"return":{"name":"void"}},"required":false}},{"key":"readOnly","value":{"name":"boolean","required":false}}]}},{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}]}},"required":true}},{"key":"getViewerProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => {\n  mode: 'view' | 'edit'\n  readOnly?: boolean\n} & Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"{\n  mode: 'view' | 'edit'\n  readOnly?: boolean\n} & Record<string, any>","elements":[{"name":"signature","type":"object","raw":"{\n  mode: 'view' | 'edit'\n  readOnly?: boolean\n}","signature":{"properties":[{"key":"mode","value":{"name":"union","raw":"'view' | 'edit'","elements":[{"name":"literal","value":"'view'"},{"name":"literal","value":"'edit'"}],"required":true}},{"key":"readOnly","value":{"name":"boolean","required":false}}]}},{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}]}},"required":true}},{"key":"getEditorProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => {\n  mode: 'view' | 'edit'\n  onBlur: () => void\n  editorRef: (el: HTMLElement | null) => void\n  readOnly?: boolean\n} & Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"{\n  mode: 'view' | 'edit'\n  onBlur: () => void\n  editorRef: (el: HTMLElement | null) => void\n  readOnly?: boolean\n} & Record<string, any>","elements":[{"name":"signature","type":"object","raw":"{\n  mode: 'view' | 'edit'\n  onBlur: () => void\n  editorRef: (el: HTMLElement | null) => void\n  readOnly?: boolean\n}","signature":{"properties":[{"key":"mode","value":{"name":"union","raw":"'view' | 'edit'","elements":[{"name":"literal","value":"'view'"},{"name":"literal","value":"'edit'"}],"required":true}},{"key":"onBlur","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"editorRef","value":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":true}},{"key":"readOnly","value":{"name":"boolean","required":false}}]}},{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}]}},"required":true}},{"key":"getEditButtonProps","value":{"name":"signature","type":"function","raw":"(props?: Record<string, any>) => {\n  onClick: () => void\n  onFocus: () => void\n  onBlur: () => void\n  isVisible: boolean\n  buttonRef: (el: Element) => void\n  readOnly?: boolean\n} & Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"{\n  onClick: () => void\n  onFocus: () => void\n  onBlur: () => void\n  isVisible: boolean\n  buttonRef: (el: Element) => void\n  readOnly?: boolean\n} & Record<string, any>","elements":[{"name":"signature","type":"object","raw":"{\n  onClick: () => void\n  onFocus: () => void\n  onBlur: () => void\n  isVisible: boolean\n  buttonRef: (el: Element) => void\n  readOnly?: boolean\n}","signature":{"properties":[{"key":"onClick","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"onFocus","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"onBlur","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"isVisible","value":{"name":"boolean","required":true}},{"key":"buttonRef","value":{"name":"signature","type":"function","raw":"(el: Element) => void","signature":{"arguments":[{"type":{"name":"Element"},"name":"el"}],"return":{"name":"void"}},"required":true}},{"key":"readOnly","value":{"name":"boolean","required":false}}]}},{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}]}},"required":true}}]}},"name":"props"}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}}},"value":{"type":{"name":"any"},"required":false,"description":"The current value.\nThe value is managed by the consuming app, but we need to tell Editable\nit's changed or it won't re-render","tsType":{"name":"any"}},"onChange":{"type":{"name":"func"},"required":false,"description":"Called when Editable switches from edit to view mode and the value has changed.","tsType":{"name":"signature","type":"function","raw":"(value: any) => void","signature":{"arguments":[{"type":{"name":"any"},"name":"value"}],"return":{"name":"void"}}}},"readOnly":{"type":{"name":"bool"},"required":false,"description":"The mode is fixed as 'view'","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element (container)","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}}},"category":"components","relativePath":"packages/ui-editable/src/Editable/index.tsx","extension":".tsx","srcPath":"packages/ui-editable/src/Editable/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-editable/src/Editable/index.tsx","packageName":"@instructure/ui-editable","requirePath":"@instructure/ui-editable/lib/Editable/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-editable/src/Editable/index.tsx').default","esPath":"@instructure/ui-editable/es/Editable/index","id":"Editable","title":"Editable"}