{"description":"\nAn html5 range input/slider component.\n\n- ```js\n  class Example extends React.Component {\n    state = {\n      size: 'small',\n      thumbVariant: 'accessible'\n    }\n\n    handleSizeChange = (event, value) => {\n      this.setState({ size: value })\n    }\n\n    handleThumbVariantChange = (event, value) => {\n      this.setState({ thumbVariant: value })\n    }\n\n    render() {\n      return (\n        <div>\n          <View as=\"div\" padding=\"medium\" background=\"primary\">\n            <RangeInput\n              label=\"Grading range\"\n              defaultValue={30}\n              max={100}\n              min={0}\n              size={this.state.size}\n              thumbVariant={this.state.thumbVariant}\n            />\n          </View>\n\n          <View as=\"div\" margin=\"medium 0 0\">\n            <FormFieldGroup\n              description={\n                <ScreenReaderContent>\n                  RangeInput Example Settings\n                </ScreenReaderContent>\n              }\n              layout=\"columns\"\n              vAlign=\"top\"\n            >\n              <RadioInputGroup\n                onChange={this.handleSizeChange}\n                name=\"labelSize\"\n                value={this.state.size}\n                description=\"Label size\"\n              >\n                <RadioInput label=\"small\" value=\"small\" />\n                <RadioInput label=\"medium\" value=\"medium\" />\n                <RadioInput label=\"large\" value=\"large\" />\n              </RadioInputGroup>\n\n              <RadioInputGroup\n                onChange={this.handleThumbVariantChange}\n                name=\"thumbVariant\"\n                value={this.state.thumbVariant}\n                description=\"Thumb variant\"\n              >\n                <RadioInput label=\"accessible\" value=\"accessible\" />\n                <RadioInput label=\"deprecated\" value=\"deprecated\" />\n              </RadioInputGroup>\n            </FormFieldGroup>\n          </View>\n        </div>\n      )\n    }\n  }\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [size, setSize] = useState('small')\n    const [thumbVariant, setThumbVariant] = useState('accessible')\n\n    const handleSizeChange = (event, value) => {\n      setSize(value)\n    }\n\n    const handleThumbVariantChange = (event, value) => {\n      setThumbVariant(value)\n    }\n\n    return (\n      <div>\n        <View as=\"div\" padding=\"medium\" background=\"primary\">\n          <RangeInput\n            label=\"Grading range\"\n            defaultValue={30}\n            max={100}\n            min={0}\n            size={size}\n            thumbVariant={thumbVariant}\n          />\n        </View>\n\n        <View as=\"div\" margin=\"medium 0 0\">\n          <FormFieldGroup\n            description={\n              <ScreenReaderContent>\n                RangeInput Example Settings\n              </ScreenReaderContent>\n            }\n            layout=\"columns\"\n            vAlign=\"top\"\n          >\n            <RadioInputGroup\n              onChange={handleSizeChange}\n              name=\"labelSize\"\n              value={size}\n              description=\"Label size\"\n            >\n              <RadioInput label=\"small\" value=\"small\" />\n              <RadioInput label=\"medium\" value=\"medium\" />\n              <RadioInput label=\"large\" value=\"large\" />\n            </RadioInputGroup>\n\n            <RadioInputGroup\n              onChange={handleThumbVariantChange}\n              name=\"thumbVariant\"\n              value={thumbVariant}\n              description=\"Thumb variant\"\n            >\n              <RadioInput label=\"accessible\" value=\"accessible\" />\n              <RadioInput label=\"deprecated\" value=\"deprecated\" />\n            </RadioInputGroup>\n          </FormFieldGroup>\n        </View>\n      </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n","displayName":"RangeInput","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"handleInputRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]}}],"returns":null},{"name":"handleChange","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"ReactChangeEvent","raw":"React.ChangeEvent<HTMLInputElement>","elements":[{"name":"HTMLInputElement"}],"alias":"React.ChangeEvent"}}],"returns":null},{"name":"noopChange","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"value","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"id","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"renderValue","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"min":{"required":false,"tsType":{"name":"number"},"description":"","defaultValue":{"value":"0","computed":false}},"max":{"required":false,"tsType":{"name":"number"},"description":"","defaultValue":{"value":"0","computed":false}},"defaultValue":{"required":false,"tsType":{"name":"number"},"description":"value to set on initial render"},"value":{"required":false,"tsType":{"name":"number"},"description":"the selected value (must be accompanied by an `onChange` prop)"},"onChange":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(value: number | string) => void","signature":{"arguments":[{"type":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]},"name":"value"}],"return":{"name":"void"}}},"description":"when used with the `value` prop, the component will not control its own state"},"messages":{"required":false,"tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"},"description":""},"size":{"required":false,"tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"description":"The size of the value label","defaultValue":{"value":"'medium'","computed":false}},"layout":{"required":false,"tsType":{"name":"union","raw":"'stacked' | 'inline'","elements":[{"name":"literal","value":"'stacked'"},{"name":"literal","value":"'inline'"}]},"description":"","defaultValue":{"value":"'stacked'","computed":false}},"id":{"required":false,"tsType":{"name":"string"},"description":""},"label":{"required":true,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"displayValue":{"required":false,"tsType":{"name":"boolean"},"description":"whether to display the current value","defaultValue":{"value":"true","computed":false}},"step":{"required":false,"tsType":{"name":"number"},"description":"","defaultValue":{"value":"1","computed":false}},"formatValue":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(value?: number, max?: number) => string","signature":{"arguments":[{"type":{"name":"number"},"name":"value"},{"type":{"name":"number"},"name":"max"}],"return":{"name":"string"}}},"description":"A function to format the displayed value","defaultValue":{"value":"(val?: number) => val","computed":false}},"inline":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"readOnly":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"thumbVariant":{"required":false,"tsType":{"name":"union","raw":"| 'deprecated' // TODO: deprecated, remove in V9.\n| 'accessible'","elements":[{"name":"literal","value":"'deprecated'"},{"name":"literal","value":"'accessible'"}]},"description":"The \"deprecated\" variant has an outer shadow on focus.\nThe \"accessible\" variant has better color contrast, border and inset focus ring for better accessibility.","defaultValue":{"value":"'deprecated'","computed":false}},"inputRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(inputElement: HTMLInputElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLInputElement | null","elements":[{"name":"HTMLInputElement"},{"name":"null"}]},"name":"inputElement"}],"return":{"name":"void"}}},"description":"A function that provides a reference to the actual underlying input element"},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-range-input/src/RangeInput/index.tsx","extension":".tsx","srcPath":"packages/ui-range-input/src/RangeInput/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-range-input/src/RangeInput/index.tsx","packageName":"@instructure/ui-range-input","requirePath":"@instructure/ui-range-input/lib/RangeInput/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-range-input/src/RangeInput/index.tsx').default","esPath":"@instructure/ui-range-input/es/RangeInput/index","themePath":"packages/ui-range-input/src/RangeInput/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-range-input/src/RangeInput/theme.ts","id":"RangeInput","title":"RangeInput"}