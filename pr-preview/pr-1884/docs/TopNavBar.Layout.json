{"description":"@module TopNavBarLayout","displayName":"TopNavBarLayout","methods":[],"props":{"renderBrand":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([TopNavBarBrand])"},"required":false,"description":"Displays the app/product/brand/company/etc. name and/or logo.\n\nAccepts a `<TopNavBar.Brand>` component.","tsType":{"name":"ReactComponentElement","raw":"React.ComponentElement<TopNavBarBrandProps, TopNavBarBrand>","elements":[{"name":"intersection","raw":"TopNavBarBrandOwnProps &\nWithStyleProps<TopNavBarBrandTheme, TopNavBarBrandStyle> &\nOtherHTMLAttributes<TopNavBarBrandOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * A label is required for accessibility (e.g. name).\n   */\n  screenReaderLabel: string\n\n  /**\n   * The app/product/brand/company/etc. logo or icon.\n   * The icon is not displayed in \"smallViewport\" mode.\n   */\n  renderIcon?: React.ReactNode\n\n  /**\n   * Background color of the icon, usually the brand color (when an icon is provided).\n   * The background is not displayed in \"smallViewport\" mode.\n   */\n  iconBackground?: string\n\n  /**\n   * If the item goes to a new page, pass a href.\n   */\n  href?: string\n\n  /**\n   * If the item does not go to a new page, pass an onClick\n   */\n  onClick?: (event: React.MouseEvent<ViewOwnProps>) => void\n\n  /**\n   * The element type to render as (will default to `<a>` if href is provided)\n   */\n  as?: AsElementType\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLDivElement | null) => void\n}","signature":{"properties":[{"key":"screenReaderLabel","value":{"name":"string","required":true},"description":"A label is required for accessibility (e.g. name)."},{"key":"renderIcon","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false},"description":"The app/product/brand/company/etc. logo or icon.\nThe icon is not displayed in \"smallViewport\" mode."},{"key":"iconBackground","value":{"name":"string","required":false},"description":"Background color of the icon, usually the brand color (when an icon is provided).\nThe background is not displayed in \"smallViewport\" mode."},{"key":"href","value":{"name":"string","required":false},"description":"If the item goes to a new page, pass a href."},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<ViewOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"If the item does not go to a new page, pass an onClick"},{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"The element type to render as (will default to `<a>` if href is provided)"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  logoHeight: string\n  logoPadding: Spacing['small']\n  iconPadding: Spacing['small']\n  focusOutlineInset: string | 0\n}","signature":{"properties":[{"key":"logoHeight","value":{"name":"string","required":true}},{"key":"logoPadding","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"iconPadding","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"focusOutlineInset","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}}]}},{"name":"intersection","raw":"ComponentStyle<\n  'topNavBarBrand' | 'container' | 'name' | 'iconContainer' | 'icon'\n> &\n  Pick<TopNavBarBrandTheme, 'focusOutlineInset'>","elements":[{"name":"ComponentStyle","elements":[{"name":"union","raw":"'topNavBarBrand' | 'container' | 'name' | 'iconContainer' | 'icon'","elements":[{"name":"literal","value":"'topNavBarBrand'"},{"name":"literal","value":"'container'"},{"name":"literal","value":"'name'"},{"name":"literal","value":"'iconContainer'"},{"name":"literal","value":"'icon'"}]}],"raw":"ComponentStyle<\n  'topNavBarBrand' | 'container' | 'name' | 'iconContainer' | 'icon'\n>"},{"name":"Pick","elements":[{"name":"signature","type":"object","raw":"{\n  logoHeight: string\n  logoPadding: Spacing['small']\n  iconPadding: Spacing['small']\n  focusOutlineInset: string | 0\n}","signature":{"properties":[{"key":"logoHeight","value":{"name":"string","required":true}},{"key":"logoPadding","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"iconPadding","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"focusOutlineInset","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}}]}},{"name":"literal","value":"'focusOutlineInset'"}],"raw":"Pick<TopNavBarBrandTheme, 'focusOutlineInset'>"}]}],"raw":"WithStyleProps<TopNavBarBrandTheme, TopNavBarBrandStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * A label is required for accessibility (e.g. name).\n   */\n  screenReaderLabel: string\n\n  /**\n   * The app/product/brand/company/etc. logo or icon.\n   * The icon is not displayed in \"smallViewport\" mode.\n   */\n  renderIcon?: React.ReactNode\n\n  /**\n   * Background color of the icon, usually the brand color (when an icon is provided).\n   * The background is not displayed in \"smallViewport\" mode.\n   */\n  iconBackground?: string\n\n  /**\n   * If the item goes to a new page, pass a href.\n   */\n  href?: string\n\n  /**\n   * If the item does not go to a new page, pass an onClick\n   */\n  onClick?: (event: React.MouseEvent<ViewOwnProps>) => void\n\n  /**\n   * The element type to render as (will default to `<a>` if href is provided)\n   */\n  as?: AsElementType\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLDivElement | null) => void\n}","signature":{"properties":[{"key":"screenReaderLabel","value":{"name":"string","required":true},"description":"A label is required for accessibility (e.g. name)."},{"key":"renderIcon","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false},"description":"The app/product/brand/company/etc. logo or icon.\nThe icon is not displayed in \"smallViewport\" mode."},{"key":"iconBackground","value":{"name":"string","required":false},"description":"Background color of the icon, usually the brand color (when an icon is provided).\nThe background is not displayed in \"smallViewport\" mode."},{"key":"href","value":{"name":"string","required":false},"description":"If the item goes to a new page, pass a href."},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent<ViewOwnProps>) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"If the item does not go to a new page, pass an onClick"},{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"The element type to render as (will default to `<a>` if href is provided)"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"TopNavBarBrand"}]}},"renderMenuItems":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([TopNavBarMenuItems])"},"required":false,"description":"Displays the main navbar items.\n\nIn __desktop__ mode the items are listed on the navbar,\nin __smallViewport__ mode the items are accessible under the main \"hamburger\" menu.\n\nAccepts a `<TopNavBar.MenuItems>` component.","tsType":{"name":"ReactComponentElement","raw":"React.ComponentElement<\n  TopNavBarMenuItemsProps,\n  TopNavBarMenuItems\n>","elements":[{"name":"intersection","raw":"TopNavBarMenuItemsOwnProps &\nWithStyleProps<TopNavBarMenuItemsTheme, TopNavBarMenuItemsStyle> &\nWithDeterministicIdProps &\nOtherHTMLAttributes<TopNavBarMenuItemsOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Children of type: `<TopNavBar.Item>`.\n   *\n   * In __desktop__ mode the items are listed on the navbar. See `renderHiddenItemsMenuTriggerLabel` prop description for overflow logic.\n   *\n   * In __smallViewport__ mode the items are accessible under the main \"hamburger\" menu.\n   */\n  children?: ChildrenOfType<ItemChild>\n\n  /**\n   * The `id` of the link to the current page. Marks the item by setting `aria-current=\"page\"` attribute on it and setting its status to 'active'.\n   *\n   * (Note: only non-disabled, `variant=\"default\"` items can be set to current/active.)\n   */\n  currentPageId?: string\n\n  /**\n   * In __desktop__ mode, required label for the trigger item of the hidden list items menu.\n   *\n   * When there is not enough room to list all the menu items,\n   * they will be accessible via a dropdown menu at the end of the list.\n   */\n  renderHiddenItemsMenuTriggerLabel: (\n    hiddenChildrenCount: number\n  ) => React.ReactNode\n\n  /**\n   * In __desktop__ mode, 'aria-label' for the `<ul>` container.\n   */\n  listLabel?: string\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLUListElement | null) => void\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"unknown"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}],"required":false},"description":"Children of type: `<TopNavBar.Item>`.\n\nIn __desktop__ mode the items are listed on the navbar. See `renderHiddenItemsMenuTriggerLabel` prop description for overflow logic.\n\nIn __smallViewport__ mode the items are accessible under the main \"hamburger\" menu."},{"key":"currentPageId","value":{"name":"string","required":false},"description":"The `id` of the link to the current page. Marks the item by setting `aria-current=\"page\"` attribute on it and setting its status to 'active'.\n\n(Note: only non-disabled, `variant=\"default\"` items can be set to current/active.)"},{"key":"renderHiddenItemsMenuTriggerLabel","value":{"name":"signature","type":"function","raw":"(\n  hiddenChildrenCount: number\n) => React.ReactNode","signature":{"arguments":[{"type":{"name":"number"},"name":"hiddenChildrenCount"}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}},"required":true},"description":"In __desktop__ mode, required label for the trigger item of the hidden list items menu.\n\nWhen there is not enough room to list all the menu items,\nthey will be accessible via a dropdown menu at the end of the list."},{"key":"listLabel","value":{"name":"string","required":false},"description":"In __desktop__ mode, 'aria-label' for the `<ul>` container."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLUListElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  desktopItemSpacing: string\n  desktopMaxWidth: string\n  desktopSubmenuActiveOptionFontWeight: Typography['fontWeightBold']\n  desktopSubmenuActiveOptionIndicatorSpacing: Spacing['xSmall']\n  desktopSubmenuActiveOptionIndicatorWidth: Border['widthMedium']\n  desktopSubmenuActiveOptionIndicatorColor: Colors['textLightest']\n}","signature":{"properties":[{"key":"desktopItemSpacing","value":{"name":"string","required":true}},{"key":"desktopMaxWidth","value":{"name":"string","required":true}},{"key":"desktopSubmenuActiveOptionFontWeight","value":{"name":"number","raw":"Typography['fontWeightBold']","required":true}},{"key":"desktopSubmenuActiveOptionIndicatorSpacing","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"desktopSubmenuActiveOptionIndicatorWidth","value":{"name":"union","raw":"Border['widthMedium']","required":true}},{"key":"desktopSubmenuActiveOptionIndicatorColor","value":{"name":"string","raw":"Colors['textLightest']","required":true}}]}},{"name":"intersection","raw":"ComponentStyle<\n  'topNavBarMenuItems' | 'submenuOption' | 'submenuOptionActive'\n> & {\n  itemSpacing: string\n}","elements":[{"name":"ComponentStyle","elements":[{"name":"union","raw":"'topNavBarMenuItems' | 'submenuOption' | 'submenuOptionActive'","elements":[{"name":"literal","value":"'topNavBarMenuItems'"},{"name":"literal","value":"'submenuOption'"},{"name":"literal","value":"'submenuOptionActive'"}]}],"raw":"ComponentStyle<\n  'topNavBarMenuItems' | 'submenuOption' | 'submenuOptionActive'\n>"},{"name":"signature","type":"object","raw":"{\n  itemSpacing: string\n}","signature":{"properties":[{"key":"itemSpacing","value":{"name":"string","required":true}}]}}]}],"raw":"WithStyleProps<TopNavBarMenuItemsTheme, TopNavBarMenuItemsStyle>"},{"name":"WithDeterministicIdProps"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Children of type: `<TopNavBar.Item>`.\n   *\n   * In __desktop__ mode the items are listed on the navbar. See `renderHiddenItemsMenuTriggerLabel` prop description for overflow logic.\n   *\n   * In __smallViewport__ mode the items are accessible under the main \"hamburger\" menu.\n   */\n  children?: ChildrenOfType<ItemChild>\n\n  /**\n   * The `id` of the link to the current page. Marks the item by setting `aria-current=\"page\"` attribute on it and setting its status to 'active'.\n   *\n   * (Note: only non-disabled, `variant=\"default\"` items can be set to current/active.)\n   */\n  currentPageId?: string\n\n  /**\n   * In __desktop__ mode, required label for the trigger item of the hidden list items menu.\n   *\n   * When there is not enough room to list all the menu items,\n   * they will be accessible via a dropdown menu at the end of the list.\n   */\n  renderHiddenItemsMenuTriggerLabel: (\n    hiddenChildrenCount: number\n  ) => React.ReactNode\n\n  /**\n   * In __desktop__ mode, 'aria-label' for the `<ul>` container.\n   */\n  listLabel?: string\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLUListElement | null) => void\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"unknown"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}],"required":false},"description":"Children of type: `<TopNavBar.Item>`.\n\nIn __desktop__ mode the items are listed on the navbar. See `renderHiddenItemsMenuTriggerLabel` prop description for overflow logic.\n\nIn __smallViewport__ mode the items are accessible under the main \"hamburger\" menu."},{"key":"currentPageId","value":{"name":"string","required":false},"description":"The `id` of the link to the current page. Marks the item by setting `aria-current=\"page\"` attribute on it and setting its status to 'active'.\n\n(Note: only non-disabled, `variant=\"default\"` items can be set to current/active.)"},{"key":"renderHiddenItemsMenuTriggerLabel","value":{"name":"signature","type":"function","raw":"(\n  hiddenChildrenCount: number\n) => React.ReactNode","signature":{"arguments":[{"type":{"name":"number"},"name":"hiddenChildrenCount"}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}},"required":true},"description":"In __desktop__ mode, required label for the trigger item of the hidden list items menu.\n\nWhen there is not enough room to list all the menu items,\nthey will be accessible via a dropdown menu at the end of the list."},{"key":"listLabel","value":{"name":"string","required":false},"description":"In __desktop__ mode, 'aria-label' for the `<ul>` container."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLUListElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"TopNavBarMenuItems"}]}},"renderActionItems":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([TopNavBarActionItems])"},"required":false,"description":"Displays the action items, icons, buttons, etc.\n\nRenders in the top right corner of the navbar in both __desktop__ and __smallViewport__ mode.\n\nAccepts a `<TopNavBar.ActionItems>` component.","tsType":{"name":"ReactComponentElement","raw":"React.ComponentElement<\n  TopNavBarActionItemsProps,\n  TopNavBarActionItems\n>","elements":[{"name":"intersection","raw":"TopNavBarActionItemsOwnProps &\nWithStyleProps<TopNavBarActionItemsTheme, TopNavBarActionItemsStyle> &\nOtherHTMLAttributes<TopNavBarActionItemsOwnProps> &\nWithDeterministicIdProps","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Children of type: `<TopNavBar.Item>`.\n   *\n   * Items in small viewport mode are __required__ to have the `renderIcon` prop,\n   * because only the icons are displayed due to the lack of space.\n   */\n  children?: ChildrenOfType<ItemChild>\n\n  /**\n   * An 'aria-label' for the action items list.\n   */\n  listLabel?: string\n\n  /**\n   * In __smallViewport__ mode, a __required__ label for the trigger item\n   * of the hidden list items menu, used as an accessible screen reader label.\n   * (The list is not truncated in __desktop__ mode.)\n   *\n   * When there is not enough room to list all the action items,\n   * they will be accessible via a dropdown menu at the end of the list.\n   */\n  renderHiddenItemsMenuTriggerLabel:\n    | string\n    | ((hiddenChildrenCount: number) => string)\n\n  /**\n   * In __smallViewport__ mode, an optional tooltip for the trigger item\n   * of the hidden list items menu.\n   * (The list is not truncated in __desktop__ mode.)\n   *\n   * When there is not enough room to list all the action items,\n   * they will be accessible via a dropdown menu at the end of the list.\n   */\n  renderHiddenItemsMenuTriggerTooltip?:\n    | TopNavBarItemTooltipType\n    | ((hiddenChildrenCount: number) => TopNavBarItemTooltipType)\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLUListElement | null) => void\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"unknown"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}],"required":false},"description":"Children of type: `<TopNavBar.Item>`.\n\nItems in small viewport mode are __required__ to have the `renderIcon` prop,\nbecause only the icons are displayed due to the lack of space."},{"key":"listLabel","value":{"name":"string","required":false},"description":"An 'aria-label' for the action items list."},{"key":"renderHiddenItemsMenuTriggerLabel","value":{"name":"union","raw":"| string\n| ((hiddenChildrenCount: number) => string)","elements":[{"name":"string"},{"name":"unknown"}],"required":true},"description":"In __smallViewport__ mode, a __required__ label for the trigger item\nof the hidden list items menu, used as an accessible screen reader label.\n(The list is not truncated in __desktop__ mode.)\n\nWhen there is not enough room to list all the action items,\nthey will be accessible via a dropdown menu at the end of the list."},{"key":"renderHiddenItemsMenuTriggerTooltip","value":{"name":"union","raw":"| TopNavBarItemTooltipType\n| ((hiddenChildrenCount: number) => TopNavBarItemTooltipType)","elements":[{"name":"union","raw":"| string\n| {\n    renderTip: TooltipProps['renderTip']\n    color?: TooltipProps['color']\n    placement?: TooltipProps['placement']\n    offsetX?: TooltipProps['offsetX']\n    offsetY?: TooltipProps['offsetY']\n    onShowContent?: TooltipProps['onShowContent']\n    onHideContent?: TooltipProps['onHideContent']\n  }","elements":[{"name":"string"},{"name":"signature","type":"object","raw":"{\n  renderTip: TooltipProps['renderTip']\n  color?: TooltipProps['color']\n  placement?: TooltipProps['placement']\n  offsetX?: TooltipProps['offsetX']\n  offsetY?: TooltipProps['offsetY']\n  onShowContent?: TooltipProps['onShowContent']\n  onHideContent?: TooltipProps['onHideContent']\n}","signature":{"properties":[{"key":"renderTip","value":{"name":"TooltipProps['renderTip']","raw":"TooltipProps['renderTip']","required":true}},{"key":"color","value":{"name":"TooltipProps['color']","raw":"TooltipProps['color']","required":false}},{"key":"placement","value":{"name":"TooltipProps['placement']","raw":"TooltipProps['placement']","required":false}},{"key":"offsetX","value":{"name":"TooltipProps['offsetX']","raw":"TooltipProps['offsetX']","required":false}},{"key":"offsetY","value":{"name":"TooltipProps['offsetY']","raw":"TooltipProps['offsetY']","required":false}},{"key":"onShowContent","value":{"name":"TooltipProps['onShowContent']","raw":"TooltipProps['onShowContent']","required":false}},{"key":"onHideContent","value":{"name":"TooltipProps['onHideContent']","raw":"TooltipProps['onHideContent']","required":false}}]}}]},{"name":"unknown"}],"required":false},"description":"In __smallViewport__ mode, an optional tooltip for the trigger item\nof the hidden list items menu.\n(The list is not truncated in __desktop__ mode.)\n\nWhen there is not enough room to list all the action items,\nthey will be accessible via a dropdown menu at the end of the list."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLUListElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  smallViewportActionItemContainerMargin: Spacing['medium']\n  smallViewportActionItemContainerMaxWidth: string | 0\n  smallViewportDropdownMenuActiveOptionFontWeight: Typography['fontWeightBold']\n  smallViewportDropdownMenuActiveOptionIndicatorSpacing: Spacing['xSmall']\n  smallViewportDropdownMenuActiveOptionIndicatorWidth: Border['widthMedium']\n  smallViewportDropdownMenuActiveOptionIndicatorColor: string\n}","signature":{"properties":[{"key":"smallViewportActionItemContainerMargin","value":{"name":"union","raw":"Spacing['medium']","required":true}},{"key":"smallViewportActionItemContainerMaxWidth","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}},{"key":"smallViewportDropdownMenuActiveOptionFontWeight","value":{"name":"number","raw":"Typography['fontWeightBold']","required":true}},{"key":"smallViewportDropdownMenuActiveOptionIndicatorSpacing","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"smallViewportDropdownMenuActiveOptionIndicatorWidth","value":{"name":"union","raw":"Border['widthMedium']","required":true}},{"key":"smallViewportDropdownMenuActiveOptionIndicatorColor","value":{"name":"string","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"| 'topNavBarActionItems'\n| 'listItem'\n| 'dropdownMenuOption'\n| 'dropdownMenuOptionActive'","elements":[{"name":"literal","value":"'topNavBarActionItems'"},{"name":"literal","value":"'listItem'"},{"name":"literal","value":"'dropdownMenuOption'"},{"name":"literal","value":"'dropdownMenuOptionActive'"}]}],"raw":"ComponentStyle<\n  | 'topNavBarActionItems'\n  | 'listItem'\n  | 'dropdownMenuOption'\n  | 'dropdownMenuOptionActive'\n>"}],"raw":"WithStyleProps<TopNavBarActionItemsTheme, TopNavBarActionItemsStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Children of type: `<TopNavBar.Item>`.\n   *\n   * Items in small viewport mode are __required__ to have the `renderIcon` prop,\n   * because only the icons are displayed due to the lack of space.\n   */\n  children?: ChildrenOfType<ItemChild>\n\n  /**\n   * An 'aria-label' for the action items list.\n   */\n  listLabel?: string\n\n  /**\n   * In __smallViewport__ mode, a __required__ label for the trigger item\n   * of the hidden list items menu, used as an accessible screen reader label.\n   * (The list is not truncated in __desktop__ mode.)\n   *\n   * When there is not enough room to list all the action items,\n   * they will be accessible via a dropdown menu at the end of the list.\n   */\n  renderHiddenItemsMenuTriggerLabel:\n    | string\n    | ((hiddenChildrenCount: number) => string)\n\n  /**\n   * In __smallViewport__ mode, an optional tooltip for the trigger item\n   * of the hidden list items menu.\n   * (The list is not truncated in __desktop__ mode.)\n   *\n   * When there is not enough room to list all the action items,\n   * they will be accessible via a dropdown menu at the end of the list.\n   */\n  renderHiddenItemsMenuTriggerTooltip?:\n    | TopNavBarItemTooltipType\n    | ((hiddenChildrenCount: number) => TopNavBarItemTooltipType)\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLUListElement | null) => void\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"unknown"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}],"required":false},"description":"Children of type: `<TopNavBar.Item>`.\n\nItems in small viewport mode are __required__ to have the `renderIcon` prop,\nbecause only the icons are displayed due to the lack of space."},{"key":"listLabel","value":{"name":"string","required":false},"description":"An 'aria-label' for the action items list."},{"key":"renderHiddenItemsMenuTriggerLabel","value":{"name":"union","raw":"| string\n| ((hiddenChildrenCount: number) => string)","elements":[{"name":"string"},{"name":"unknown"}],"required":true},"description":"In __smallViewport__ mode, a __required__ label for the trigger item\nof the hidden list items menu, used as an accessible screen reader label.\n(The list is not truncated in __desktop__ mode.)\n\nWhen there is not enough room to list all the action items,\nthey will be accessible via a dropdown menu at the end of the list."},{"key":"renderHiddenItemsMenuTriggerTooltip","value":{"name":"union","raw":"| TopNavBarItemTooltipType\n| ((hiddenChildrenCount: number) => TopNavBarItemTooltipType)","elements":[{"name":"union","raw":"| string\n| {\n    renderTip: TooltipProps['renderTip']\n    color?: TooltipProps['color']\n    placement?: TooltipProps['placement']\n    offsetX?: TooltipProps['offsetX']\n    offsetY?: TooltipProps['offsetY']\n    onShowContent?: TooltipProps['onShowContent']\n    onHideContent?: TooltipProps['onHideContent']\n  }","elements":[{"name":"string"},{"name":"signature","type":"object","raw":"{\n  renderTip: TooltipProps['renderTip']\n  color?: TooltipProps['color']\n  placement?: TooltipProps['placement']\n  offsetX?: TooltipProps['offsetX']\n  offsetY?: TooltipProps['offsetY']\n  onShowContent?: TooltipProps['onShowContent']\n  onHideContent?: TooltipProps['onHideContent']\n}","signature":{"properties":[{"key":"renderTip","value":{"name":"TooltipProps['renderTip']","raw":"TooltipProps['renderTip']","required":true}},{"key":"color","value":{"name":"TooltipProps['color']","raw":"TooltipProps['color']","required":false}},{"key":"placement","value":{"name":"TooltipProps['placement']","raw":"TooltipProps['placement']","required":false}},{"key":"offsetX","value":{"name":"TooltipProps['offsetX']","raw":"TooltipProps['offsetX']","required":false}},{"key":"offsetY","value":{"name":"TooltipProps['offsetY']","raw":"TooltipProps['offsetY']","required":false}},{"key":"onShowContent","value":{"name":"TooltipProps['onShowContent']","raw":"TooltipProps['onShowContent']","required":false}},{"key":"onHideContent","value":{"name":"TooltipProps['onHideContent']","raw":"TooltipProps['onHideContent']","required":false}}]}}]},{"name":"unknown"}],"required":false},"description":"In __smallViewport__ mode, an optional tooltip for the trigger item\nof the hidden list items menu.\n(The list is not truncated in __desktop__ mode.)\n\nWhen there is not enough room to list all the action items,\nthey will be accessible via a dropdown menu at the end of the list."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLUListElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLUListElement | null","elements":[{"name":"HTMLUListElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]},{"name":"WithDeterministicIdProps"}]},{"name":"TopNavBarActionItems"}]}},"renderUser":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([TopNavBarUser])"},"required":false,"description":"Displays the user menu.\n\nIn __desktop__ mode it renders in the top right corner of the navbar,\nin __smallViewport__ mode it is rendered under the main \"hamburger\" menu, above the menu items.\n\nAccepts a `<TopNavBar.User>` component.","tsType":{"name":"ReactComponentElement","raw":"React.ComponentElement<TopNavBarUserProps, TopNavBarUser>","elements":[{"name":"intersection","raw":"TopNavBarUserOwnProps &\nWithStyleProps<null, TopNavBarUserStyle> &\nOtherHTMLAttributes<TopNavBarUserOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Required children of type TopNavBar.Item.\n   *\n   * Only accepts 'default', 'button' and 'avatar' variants.\n   *\n   * In \"smallViewport\" mode it will always display as text (with or without avatar).\n   */\n  children: ChildrenOfType<ItemChild>\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLDivElement | null) => void\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"unknown"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}],"required":true},"description":"Required children of type TopNavBar.Item.\n\nOnly accepts 'default', 'button' and 'avatar' variants.\n\nIn \"smallViewport\" mode it will always display as text (with or without avatar)."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"WithStyleProps","elements":[{"name":"null"},{"name":"ComponentStyle","elements":[{"name":"literal","value":"'topNavBarUser'"}],"raw":"ComponentStyle<'topNavBarUser'>"}],"raw":"WithStyleProps<null, TopNavBarUserStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * Required children of type TopNavBar.Item.\n   *\n   * Only accepts 'default', 'button' and 'avatar' variants.\n   *\n   * In \"smallViewport\" mode it will always display as text (with or without avatar).\n   */\n  children: ChildrenOfType<ItemChild>\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLDivElement | null) => void\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"unknown"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}],"required":true},"description":"Required children of type TopNavBar.Item.\n\nOnly accepts 'default', 'button' and 'avatar' variants.\n\nIn \"smallViewport\" mode it will always display as text (with or without avatar)."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"TopNavBarUser"}]}},"renderBreadcrumb":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([TopNavBarBreadcrumb])"},"required":false,"description":"Displays a hamburger icon with a breadcrumb.\n\nIn __desktop__ mode it renders in the top left corner of the navbar.\nIn __smallViewport__ mode it renders a link of the last but one crumb with a chevron icon.\n\nAccepts a `<TopNavBar.Breadcrumb>` component.","tsType":{"name":"ReactComponentElement","raw":"React.ComponentElement<\n  TopNavBarBreadcrumbProps,\n  TopNavBarBreadcrumb\n>","elements":[{"name":"intersection","raw":"TopNavBarBreadcrumbOwnProps &\nWithStyleProps<null, TopNavBarBreadcrumbStyle> &\nOtherHTMLAttributes<TopNavBarBreadcrumbOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The children to be rendered within the `<TopNavBarBreadcrumb />`. Children must be type of `Breadcrumb`.\n   */\n  children: ChildrenOfType<ComponentElement<BreadcrumbProps, Breadcrumb>>\n\n  /**\n   * A callback function to be called, if the user clicks on the hamburger icon.\n   */\n  onClick?: (\n    event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n  ) => void\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLDivElement | null) => void\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"ComponentElement","elements":[{"name":"BreadcrumbProps"},{"name":"Breadcrumb"}],"raw":"ComponentElement<BreadcrumbProps, Breadcrumb>"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}],"required":true},"description":"The children to be rendered within the `<TopNavBarBreadcrumb />`. Children must be type of `Breadcrumb`."},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"A callback function to be called, if the user clicks on the hamburger icon."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"WithStyleProps","elements":[{"name":"null"},{"name":"ComponentStyle","elements":[{"name":"union","raw":"| 'topNavBarBreadcrumb'\n| 'iconContainer'\n| 'icon'\n| 'breadcrumbContainer'\n| 'linkContainer'","elements":[{"name":"literal","value":"'topNavBarBreadcrumb'"},{"name":"literal","value":"'iconContainer'"},{"name":"literal","value":"'icon'"},{"name":"literal","value":"'breadcrumbContainer'"},{"name":"literal","value":"'linkContainer'"}]}],"raw":"ComponentStyle<\n  | 'topNavBarBreadcrumb'\n  | 'iconContainer'\n  | 'icon'\n  | 'breadcrumbContainer'\n  | 'linkContainer'\n>"}],"raw":"WithStyleProps<null, TopNavBarBreadcrumbStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The children to be rendered within the `<TopNavBarBreadcrumb />`. Children must be type of `Breadcrumb`.\n   */\n  children: ChildrenOfType<ComponentElement<BreadcrumbProps, Breadcrumb>>\n\n  /**\n   * A callback function to be called, if the user clicks on the hamburger icon.\n   */\n  onClick?: (\n    event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n  ) => void\n\n  /**\n   * A function that returns a reference to root HTML element\n   */\n  elementRef?: (el: HTMLDivElement | null) => void\n}","signature":{"properties":[{"key":"children","value":{"name":"union","raw":"| T\n| undefined\n| null\n| ChildrenOfType<T>[]","elements":[{"name":"ComponentElement","elements":[{"name":"BreadcrumbProps"},{"name":"Breadcrumb"}],"raw":"ComponentElement<BreadcrumbProps, Breadcrumb>"},{"name":"undefined"},{"name":"null"},{"name":"Array","elements":[{"name":"ChildrenOfType"}],"raw":"ChildrenOfType<T>[]"}],"required":true},"description":"The children to be rendered within the `<TopNavBarBreadcrumb />`. Children must be type of `Breadcrumb`."},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"A callback function to be called, if the user clicks on the hamburger icon."},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(el: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to root HTML element"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"TopNavBarBreadcrumb"}]}},"navLabel":{"type":{"name":"string"},"required":false,"description":"The 'aria-label' for the underlying `<nav>` element","tsType":{"name":"string"}},"elementRef":{"type":{"name":"func"},"required":false,"description":"A function that returns a reference to root HTML element","tsType":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}}}},"smallViewportConfig":{"type":{"name":"shape","value":{"dropdownMenuToggleButtonLabel":{"name":"string","required":true},"dropdownMenuToggleButtonTooltip":{"name":"custom","raw":"topNavBarItemTooltipPropType","required":false},"dropdownMenuLabel":{"name":"string","required":false},"alternativeTitle":{"name":"node","required":false},"renderInPlaceDialogConfig":{"name":"shape","value":{"open":{"name":"bool","required":true},"onClose":{"name":"func","required":true},"closeButtonLabel":{"name":"string","required":true},"content":{"name":"union","value":[{"name":"node"},{"name":"func"}],"required":false},"returnFocusElement":{"name":"func","required":false},"shouldContainFocus":{"name":"bool","required":false},"shouldCloseOnDocumentClick":{"name":"bool","required":false},"shouldCloseOnEscape":{"name":"bool","required":false}},"required":false},"trayMountNode":{"name":"union","value":[{"name":"element"},{"name":"func"}],"required":false},"onDropdownMenuToggle":{"name":"func","required":false},"onDropdownMenuSelect":{"name":"func","required":false},"renderNavbarStartDangerousHack":{"name":"node","required":false}}},"required":false,"description":"Config object for the \"small viewport\" mode:","tsType":{"name":"signature","type":"object","raw":"{\n  /**\n   * A __required__ label for the hamburger menu icon, used as an accessible screen reader label.\n   */\n  dropdownMenuToggleButtonLabel: string\n\n  /**\n   * An optional tooltip for the hamburger menu icon.\n   */\n  dropdownMenuToggleButtonTooltip?: TopNavBarItemTooltipType\n\n  /**\n   * An 'aria-label' for the dropdown menu.\n   */\n  dropdownMenuLabel?: string\n\n  /**\n   * Instead of the Brand logo and link, display other data (e.g.: page title).\n   *\n   * In this case, the hamburger menu icon will be replaced with a chevron.\n   */\n  alternativeTitle?: React.ReactNode\n\n  /**\n   * Renders a custom `<Dialog>` that renders in place of the navbar.\n   * Useful for features like full width search bars, etc.\n   *\n   * Use `returnFocusElement` prop for returning focus after close.\n   */\n  renderInPlaceDialogConfig?: {\n    open: boolean\n    onClose: () => void\n    closeButtonLabel: string\n    content?:\n      | React.ReactNode\n      | ((args: { closeInPlaceDialog: () => void }) => React.ReactNode)\n    /**\n     * Function that returns an element the focus needs to return to on close\n     */\n    returnFocusElement?: () => HTMLElement | null\n    shouldContainFocus?: boolean\n    shouldCloseOnDocumentClick?: boolean\n    shouldCloseOnEscape?: boolean\n  }\n\n  /**\n   * An element or a function returning an element to use as the mount node for the dropdown menu's `<Tray>` container.\n   *\n   * Use this prop when the default Tray placement doesn't work for your layout (e.g.: when the TopNavBar is not the main navbar of the window).\n   */\n  trayMountNode?: Element | (() => Element | null) | null\n\n  /**\n   * Callback fired on dropdown menu open and close\n   */\n  onDropdownMenuToggle?: (isMenuOpen: boolean) => void\n\n  /**\n   * Callback fired when an item is selected in the dropdown menu\n   */\n  onDropdownMenuSelect?: DrilldownProps['onSelect']\n\n  /**\n   * A way to add generic html/react content to the start (left side) of the nav bar. This is a temporary workaround if you are using a design that is not possible to achive in the TopNavBar normally.\n   */\n  renderNavbarStartDangerousHack?: React.ReactNode\n}","signature":{"properties":[{"key":"dropdownMenuToggleButtonLabel","value":{"name":"string","required":true},"description":"A __required__ label for the hamburger menu icon, used as an accessible screen reader label."},{"key":"dropdownMenuToggleButtonTooltip","value":{"name":"union","raw":"| string\n| {\n    renderTip: TooltipProps['renderTip']\n    color?: TooltipProps['color']\n    placement?: TooltipProps['placement']\n    offsetX?: TooltipProps['offsetX']\n    offsetY?: TooltipProps['offsetY']\n    onShowContent?: TooltipProps['onShowContent']\n    onHideContent?: TooltipProps['onHideContent']\n  }","elements":[{"name":"string"},{"name":"signature","type":"object","raw":"{\n  renderTip: TooltipProps['renderTip']\n  color?: TooltipProps['color']\n  placement?: TooltipProps['placement']\n  offsetX?: TooltipProps['offsetX']\n  offsetY?: TooltipProps['offsetY']\n  onShowContent?: TooltipProps['onShowContent']\n  onHideContent?: TooltipProps['onHideContent']\n}","signature":{"properties":[{"key":"renderTip","value":{"name":"TooltipProps['renderTip']","raw":"TooltipProps['renderTip']","required":true}},{"key":"color","value":{"name":"TooltipProps['color']","raw":"TooltipProps['color']","required":false}},{"key":"placement","value":{"name":"TooltipProps['placement']","raw":"TooltipProps['placement']","required":false}},{"key":"offsetX","value":{"name":"TooltipProps['offsetX']","raw":"TooltipProps['offsetX']","required":false}},{"key":"offsetY","value":{"name":"TooltipProps['offsetY']","raw":"TooltipProps['offsetY']","required":false}},{"key":"onShowContent","value":{"name":"TooltipProps['onShowContent']","raw":"TooltipProps['onShowContent']","required":false}},{"key":"onHideContent","value":{"name":"TooltipProps['onHideContent']","raw":"TooltipProps['onHideContent']","required":false}}]}}],"required":false},"description":"An optional tooltip for the hamburger menu icon."},{"key":"dropdownMenuLabel","value":{"name":"string","required":false},"description":"An 'aria-label' for the dropdown menu."},{"key":"alternativeTitle","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false},"description":"Instead of the Brand logo and link, display other data (e.g.: page title).\n\nIn this case, the hamburger menu icon will be replaced with a chevron."},{"key":"renderInPlaceDialogConfig","value":{"name":"signature","type":"object","raw":"{\n  open: boolean\n  onClose: () => void\n  closeButtonLabel: string\n  content?:\n    | React.ReactNode\n    | ((args: { closeInPlaceDialog: () => void }) => React.ReactNode)\n  /**\n   * Function that returns an element the focus needs to return to on close\n   */\n  returnFocusElement?: () => HTMLElement | null\n  shouldContainFocus?: boolean\n  shouldCloseOnDocumentClick?: boolean\n  shouldCloseOnEscape?: boolean\n}","signature":{"properties":[{"key":"open","value":{"name":"boolean","required":true}},{"key":"onClose","value":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}},"required":true}},{"key":"closeButtonLabel","value":{"name":"string","required":true}},{"key":"content","value":{"name":"union","raw":"| React.ReactNode\n| ((args: { closeInPlaceDialog: () => void }) => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}],"required":false}},{"key":"returnFocusElement","value":{"name":"signature","type":"function","raw":"() => HTMLElement | null","signature":{"arguments":[],"return":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]}},"required":false},"description":"Function that returns an element the focus needs to return to on close"},{"key":"shouldContainFocus","value":{"name":"boolean","required":false}},{"key":"shouldCloseOnDocumentClick","value":{"name":"boolean","required":false}},{"key":"shouldCloseOnEscape","value":{"name":"boolean","required":false}}]},"required":false},"description":"Renders a custom `<Dialog>` that renders in place of the navbar.\nUseful for features like full width search bars, etc.\n\nUse `returnFocusElement` prop for returning focus after close."},{"key":"trayMountNode","value":{"name":"union","raw":"Element | (() => Element | null) | null","elements":[{"name":"Element"},{"name":"unknown"},{"name":"null"}],"required":false},"description":"An element or a function returning an element to use as the mount node for the dropdown menu's `<Tray>` container.\n\nUse this prop when the default Tray placement doesn't work for your layout (e.g.: when the TopNavBar is not the main navbar of the window)."},{"key":"onDropdownMenuToggle","value":{"name":"signature","type":"function","raw":"(isMenuOpen: boolean) => void","signature":{"arguments":[{"type":{"name":"boolean"},"name":"isMenuOpen"}],"return":{"name":"void"}},"required":false},"description":"Callback fired on dropdown menu open and close"},{"key":"onDropdownMenuSelect","value":{"name":"DrilldownProps['onSelect']","raw":"DrilldownProps['onSelect']","required":false},"description":"Callback fired when an item is selected in the dropdown menu"},{"key":"renderNavbarStartDangerousHack","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false},"description":"A way to add generic html/react content to the start (left side) of the nav bar. This is a temporary workaround if you are using a design that is not possible to achive in the TopNavBar normally."}]}},"defaultValue":{"value":"{}","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"parent":"TopNavBar","id":"TopNavBar.Layout","relativePath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarLayout/index.tsx","extension":".tsx","srcPath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarLayout/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarLayout/index.tsx","packageName":"@instructure/ui-top-nav-bar","requirePath":"@instructure/ui-top-nav-bar/lib/TopNavBar/TopNavBarLayout/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarLayout/index.tsx').default","esPath":"@instructure/ui-top-nav-bar/es/TopNavBar/TopNavBarLayout/index","themePath":"packages/ui-top-nav-bar/src/TopNavBar/TopNavBarLayout/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-top-nav-bar/src/TopNavBar/TopNavBarLayout/theme.ts","title":"TopNavBar.Layout"}