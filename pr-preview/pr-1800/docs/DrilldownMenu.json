{"description":"\n## Drilldown Menu\n\n> Note: We have added the official [Drilldown](#Drilldown) component to the InstUI library. Feel free to try it!\n\nThis example shows an accessible implementation of a multi level menu using InstUI components. ([Popover](#Popover), [Menu](#Menu))\nThis component is useful when you want to display large amounts of data in a compact manner and using [Menu.SubMenu](#Menu) would be too cumbersome to use.\n\n```js\n---\ntype: example\n---\n\nconst dataMap = {\n  1: {\n    id: 1,\n    subAccounts: {\n      accounts: [\n        {\n          id: 2,\n          accountName: 'Submenu Item 1'\n        },\n        {\n          id: 7,\n          accountName: 'Item 7'\n        }\n      ]\n    }\n  },\n  2: {\n    id: 2,\n    accountName: 'Submenu Item 1',\n    parentAccount: 1,\n    subAccounts: {\n      accounts: [\n        {\n          id: 3,\n          accountName: 'Submenu Item 2'\n        },\n        {\n          id: 4,\n          accountName: 'Item 3'\n        },\n        {\n          id: 5,\n          accountName: 'Item 4'\n        }\n      ]\n    }\n  },\n  3: {\n    id: 3,\n    accountName: 'Submenu Item 2',\n    parentAccount: 2,\n    subAccounts: {\n      accounts: [\n        {\n          id: 6,\n          accountName: 'Item 5'\n        }\n      ]\n    }\n  },\n  4: {\n    id: 4,\n    accountName: 'Item 3',\n    parentAccount: 2,\n    subAccounts: {\n      accounts: []\n    }\n  },\n  5: {\n    id: 5,\n    accountName: 'Item 4',\n    parentAccount: 2,\n    subAccounts: {\n      accounts: []\n    }\n  },\n  6: {\n    id: 6,\n    accountName: 'Item 5',\n    parentAccount: 3,\n    subAccounts: {\n      accounts: []\n    }\n  },\n  7: {\n    id: 7,\n    accountName: 'Item 7',\n    parentAccount: 1,\n    subAccounts: {\n      accounts: []\n    }\n  }\n}\n\nconst useResetState = (initialState) => {\n  const [value, setValue] = React.useState(initialState)\n  React.useEffect(() => {\n    setValue(initialState)\n  }, [initialState])\n\n  return [value, setValue]\n}\n\nconst Example = ({ rootId, onChange = (_id) => {}, data }) => {\n  const [tempAccountId, setTempAccountId] = useResetState(data[rootId].id)\n  const [isShowingContent, setIsShowingContent] = React.useState(false)\n  const menuRef = React.useRef()\n  const accountObj = {\n    ...data[tempAccountId]\n  }\n  const hasParentAccount = accountObj?.parentAccount\n  const hasChildAccounts = accountObj?.subAccounts?.accounts.length > 0\n  const childAccounts = accountObj?.subAccounts?.accounts\n\n  const setAccountId = (id) => {\n    setTempAccountId(id)\n    onChange(id)\n\n    menuRef.current.focus()\n  }\n\n  const renderBackNavigation = () => {\n    if (hasParentAccount) {\n      return (\n        <Menu.Item\n          as=\"div\"\n          onClick={() => {\n            setAccountId(accountObj.parentAccount)\n          }}\n        >\n          <Flex as=\"div\" justifyItems=\"start\">\n            <View margin=\"0 small 0 0\">\n              <IconArrowOpenStartLine />\n            </View>\n            <TruncateText>Back</TruncateText>\n          </Flex>\n        </Menu.Item>\n      )\n    }\n  }\n\n  const renderChildList = () => {\n    return childAccounts\n      ?.concat()\n      .sort((a, b) => a.id - b.id)\n      .map((a) => {\n        if (data[a.id] && data[a.id]?.subAccounts?.accounts?.length) {\n          return (\n            <Menu.Item key={a.id} as=\"div\" onClick={() => setAccountId(a.id)}>\n              <Flex as=\"div\" justifyItems=\"space-between\">\n                <TruncateText>{a.accountName}</TruncateText>\n                <View margin=\"0 0 0 small\">\n                  <IconArrowOpenEndLine />\n                </View>\n              </Flex>\n            </Menu.Item>\n          )\n        } else {\n          return (\n            <Menu.Item key={a.id} as=\"div\" onClick={() => {console.log(`Selected account: ${a.accountName}`)}}>\n              <TruncateText>{a.accountName}</TruncateText>\n            </Menu.Item>\n          )\n        }\n      }) || null\n  }\n\n  const handleTabbingOut = (event) => {\n    // Drilldown should close when Tab is pressed\n    if (isShowingContent && (event?.keyCode === 9)) { // 9 = Tab\n      setIsShowingContent(false)\n    }\n  }\n\n  return (\n    <View as=\"div\">\n      <Popover\n        renderTrigger={\n          <Tooltip\n          renderTip=\"Select user account\"\n          on={['hover', 'focus']}\n          placement=\"top\"\n            >\n            <IconButton screenReaderLabel=\"Select user account\">\n              <IconUserLine />\n            </IconButton>\n          </Tooltip>\n        }\n        shouldRenderOffscreen={false}\n        on=\"click\"\n        placement=\"bottom start\"\n        constrain=\"parent\"\n        offsetY={16}\n        isShowingContent={isShowingContent}\n        onShowContent={() => { setIsShowingContent(true) }}\n        onHideContent={() => { setIsShowingContent(false) }}\n      >\n        <Menu\n          menuRef={(ref) => {\n            menuRef.current = ref\n          }}\n          themeOverride={{ minWidth: '24rem' }}\n          onKeyDown={ handleTabbingOut }\n        >\n          {renderBackNavigation()}\n          {renderChildList()}\n        </Menu>\n      </Popover>\n    </View>\n  )\n}\n\n\nrender(<Example rootId=\"1\" onChange={(selectedId) => console.log(`Selected account: ${dataMap[selectedId].accountName}`)} data={dataMap}/>)\n```\n","title":"Drilldown Menu","category":"Patterns","id":"DrilldownMenu","relativePath":"docs/patterns/DrilldownMenu.md","extension":".md","srcPath":"docs/patterns/DrilldownMenu.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/patterns/DrilldownMenu.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/patterns/DrilldownMenu","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/patterns/DrilldownMenu.md').default","esPath":"@instructure/docs/patterns/DrilldownMenu","themePath":"docs/patterns/DrilldownMenu.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/patterns/DrilldownMenu.md"}