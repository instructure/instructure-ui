{"comment":"/**\n * ---\n * category: utilities/layout\n * ---\n * Given an object of named queries, listens for changes in the\n * element size and notifies which queries match via a function\n * callback. The callback method is only called when the query\n * matches change, not on all element resizes. (If you are looking\n * to call a method on all element resizes use\n * [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) instead)\n *\n *\n * This function shares an interface with\n * [addMediaQueryMatchListener](#addMediaQueryMatchListener)\n * so that they can be used interchangeably.\n *\n * The [Responsive](#Responsive) component with the `match` prop\n * set to `element` utilizes this function. This is a low level\n * utility method and, in most cases, [Responsive](#Responsive)\n * should be used instead.\n *\n * ```js-code\n * class MyComponent extends Component {\n *   state = {\n *     matches: []\n *   }\n *\n *   _listener = null\n *\n *   componentDidMount () {\n *     const query = {myFirstQuery: { minWidth: 100 }, mySecondQuery: { maxHeight: '30rem'}}\n *     const el = findDOMNode(this)\n *\n *     this._listener = addElementQueryMatchListener(query, el, this.updateMatches)\n *   }\n *\n *   componentWillUnmount () {\n *     if (this._listener) {\n *       this._listener.remove()\n *     }\n *   }\n *\n *   updateMatches = (matches) => {\n *     this.setState({ matches })\n *   }\n *   ...\n * }\n * ```\n * @module addElementQueryMatchListener\n * @param {Object} query - object consisting of names and query objects\n * @param {Node|Window|React.ReactElement|React.Component|function} el - a DOM node or a function returning a DOM node\n * @param {function} cb - called with an array of the names of the currently\n * matching queries whenever a matching query changes\n * @returns {function} remove() function to call to remove the listener\n */","meta":{"filename":"yr49x7cyx54haqb4e1bn.js","lineno":1,"columnno":0,"path":"/tmp","code":{}},"description":"Given an object of named queries, listens for changes in the\nelement size and notifies which queries match via a function\ncallback. The callback method is only called when the query\nmatches change, not on all element resizes. (If you are looking\nto call a method on all element resizes use\n[ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) instead)\n\n\nThis function shares an interface with\n[addMediaQueryMatchListener](#addMediaQueryMatchListener)\nso that they can be used interchangeably.\n\nThe [Responsive](#Responsive) component with the `match` prop\nset to `element` utilizes this function. This is a low level\nutility method and, in most cases, [Responsive](#Responsive)\nshould be used instead.\n\n```js-code\nclass MyComponent extends Component {\n  state = {\n    matches: []\n  }\n\n  _listener = null\n\n  componentDidMount () {\n    const query = {myFirstQuery: { minWidth: 100 }, mySecondQuery: { maxHeight: '30rem'}}\n    const el = findDOMNode(this)\n\n    this._listener = addElementQueryMatchListener(query, el, this.updateMatches)\n  }\n\n  componentWillUnmount () {\n    if (this._listener) {\n      this._listener.remove()\n    }\n  }\n\n  updateMatches = (matches) => {\n    this.setState({ matches })\n  }\n  ...\n}\n```","kind":"module","name":"addElementQueryMatchListener","params":[{"type":{"names":["Object"]},"description":"object consisting of names and query objects","name":"query"},{"type":{"names":["Node","Window","React.ReactElement","React.Component","function"]},"description":"a DOM node or a function returning a DOM node","name":"el"},{"type":{"names":["function"]},"description":"called with an array of the names of the currently\nmatching queries whenever a matching query changes","name":"cb"}],"returns":[{"type":{"names":["function"]},"description":"remove() function to call to remove the listener"}],"longname":"module:addElementQueryMatchListener","undocumented":false,"category":"utilities/layout","relativePath":"packages/ui-responsive/src/addElementQueryMatchListener.ts","extension":".ts","srcPath":"packages/ui-responsive/src/addElementQueryMatchListener.ts","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-responsive/src/addElementQueryMatchListener.ts","packageName":"@instructure/ui-responsive","requirePath":"@instructure/ui-responsive/lib/addElementQueryMatchListener","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-responsive/src/addElementQueryMatchListener.ts').default","esPath":"@instructure/ui-responsive/es/addElementQueryMatchListener","themePath":"packages/ui-responsive/src/addElementQueryMatchListener.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-responsive/src/addElementQueryMatchListener.ts","id":"addElementQueryMatchListener","title":"addElementQueryMatchListener"}