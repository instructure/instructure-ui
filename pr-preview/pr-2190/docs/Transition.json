{"description":"@module Transition\nThe `Transition` wrapper helps you easily transition elements in and out of your UI. The component defaults to the `fade` opacity transition.\n\n> This component uses `setTimeout()` to fire events when the animations end (the duration is set in the theme).\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [isIn, setIsIn] = useState(true)\n\n  const handleButtonClick = () => {\n    setIsIn((prevIsIn) => !prevIsIn)\n  }\n\n  return (\n    <div>\n      <div>\n        <Button margin=\"small 0\" size=\"small\" onClick={handleButtonClick}>\n          <div aria-live=\"polite\">Fade {isIn ? 'Out' : 'In'}</div>\n        </Button>\n      </div>\n      <Transition\n        onEnter={()=>console.log('onEnter')}\n        onEntered={()=>console.log('onEntered')}\n        onEntering={()=>console.log('onEntering')}\n        onExit={()=>console.log('onExit')}\n        onExited={()=>console.log('onExited')}\n        onExiting={()=>console.log('onExiting')}\n        onTransition={(to, from)=>console.log('onTransition', to,  from)}\n        in={isIn}\n        type=\"fade\"\n      >\n        <Avatar name=\"Fade\" />\n      </Transition>\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n\n`scale` transitions both the opacity and size of the element.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [isIn, setIsIn] = useState(true)\n\n  const handleButtonClick = () => {\n    setIsIn((prevIsIn) => !prevIsIn)\n  }\n\n  return (\n    <div>\n      <div>\n        <Button margin=\"small 0\" size=\"small\" onClick={handleButtonClick}>\n          <div aria-live=\"polite\">{isIn ? 'Collapse' : 'Expand'}</div>\n        </Button>\n      </div>\n      <Transition\n        transitionOnMount\n        unmountOnExit\n        in={isIn}\n        type=\"scale\"\n      >\n        <Avatar name=\"Collapse\" />\n      </Transition>\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n\n`slide` transitions the horizontal or vertical position of the element. The slide direction can be\ninternationalized for right to left (rtl) languages. The following example uses the\n[TextDirectionContext](#TextDirectionContext) util to mirror the slide direction for rtl.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const textDirection = useContext(TextDirectionContext)\n  const [direction, setDirection] = useState('left')\n  const [isIn, setIsIn] = useState(true)\n\n  const handleDirectionChange = (e, value) => {\n    setDirection(value)\n    setIsIn(true)\n  }\n\n  const handleButtonClick = () => {\n    setIsIn((prevIsIn) => !prevIsIn)\n  }\n\n  const mirrorDirection = (direction) => {\n    const mirror = {\n      left: 'right',\n      right: 'left',\n      up: 'up',\n      down: 'down'\n    }\n    return mirror[direction]\n  }\n\n  const rtl = textDirection === 'rtl'\n  const finalDirection = rtl ? mirrorDirection(direction) : direction\n  const directionVariants = [\n    {value: 'left', label: 'Start'},\n    {value: 'right', label: 'End'},\n    {value: 'down', label: 'Down'},\n    {value: 'up', label: 'Up'}\n  ]\n\n  return (\n    <div>\n      <div>\n        <RadioInputGroup\n          onChange={handleDirectionChange}\n          name=\"slideExample\"\n          description={<ScreenReaderContent>Select a direction</ScreenReaderContent>}\n          value={finalDirection}\n          variant=\"toggle\"\n        >\n          {directionVariants.map(dir => <RadioInput key={dir.value} value={dir.value} label={dir.label} />)}\n        </RadioInputGroup>\n        <Button size=\"small\" margin=\"medium none small\" onClick={handleButtonClick}>\n          <div aria-live=\"polite\">Slide {isIn ? 'Out' : 'In'}</div>\n        </Button>\n      </div>\n      <div style={{\n        position: 'relative',\n        overflow: 'hidden',\n        height: '15rem',\n        display: 'flex',\n        justifyContent: (direction === 'right') ? 'flex-end' : 'flex-start'\n      }}>\n        <Transition\n          transitionOnMount\n          unmountOnExit\n          in={isIn}\n          type={`slide-${finalDirection}`}\n        >\n          <Avatar name=\"Slide\" />\n        </Transition>\n      </div>\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n","displayName":"Transition","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"handleExited","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleEntered","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderTransitionHelper","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"type":{"required":false,"tsType":{"name":"union","raw":"| 'fade'\n| 'scale'\n| 'slide-down'\n| 'slide-up'\n| 'slide-left'\n| 'slide-right'","elements":[{"name":"literal","value":"'fade'"},{"name":"literal","value":"'scale'"},{"name":"literal","value":"'slide-down'"},{"name":"literal","value":"'slide-up'"},{"name":"literal","value":"'slide-left'"},{"name":"literal","value":"'slide-right'"}]},"description":"","defaultValue":{"value":"'fade'","computed":false}},"in":{"required":false,"tsType":{"name":"boolean"},"description":"Show the component? Triggers the enter or exit animation.","defaultValue":{"value":"false","computed":false}},"unmountOnExit":{"required":false,"tsType":{"name":"boolean"},"description":"Unmount the component (remove it from the DOM) when it is not shown.","defaultValue":{"value":"false","computed":false}},"transitionOnMount":{"required":false,"tsType":{"name":"boolean"},"description":"Run the enter animation when the component mounts, if it is initially\nshown","defaultValue":{"value":"false","computed":false}},"transitionEnter":{"required":false,"tsType":{"name":"boolean"},"description":"Run the enter animation","defaultValue":{"value":"true","computed":false}},"transitionExit":{"required":false,"tsType":{"name":"boolean"},"description":"Run the exit animation","defaultValue":{"value":"true","computed":false}},"onTransition":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  toState: BaseTransitionStatesType,\n  fromState: BaseTransitionStatesType\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"-2 | -1 | 1 | 2","elements":[{"name":"literal","value":"-2"},{"name":"literal","value":"-1"},{"name":"literal","value":"1"},{"name":"literal","value":"2"}]},"name":"toState"},{"type":{"name":"union","raw":"-2 | -1 | 1 | 2","elements":[{"name":"literal","value":"-2"},{"name":"literal","value":"-1"},{"name":"literal","value":"1"},{"name":"literal","value":"2"}]},"name":"fromState"}],"return":{"name":"void"}}},"description":"Callback fired when transitioning to the next state"},"onEnter":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired before the \"entering\" classes are applied"},"onEntering":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired after the \"entering\" classes are applied"},"onEntered":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| 'fade'\n| 'scale'\n| 'slide-down'\n| 'slide-up'\n| 'slide-left'\n| 'slide-right'","elements":[{"name":"literal","value":"'fade'"},{"name":"literal","value":"'scale'"},{"name":"literal","value":"'slide-down'"},{"name":"literal","value":"'slide-up'"},{"name":"literal","value":"'slide-left'"},{"name":"literal","value":"'slide-right'"}]},"name":"type"}],"return":{"name":"void"}}},"description":"Callback fired after the \"enter\" classes are applied"},"onExit":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired before the \"exiting\" classes are applied"},"onExiting":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired after the \"exiting\" classes are applied"},"onExited":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"union","raw":"| 'fade'\n| 'scale'\n| 'slide-down'\n| 'slide-up'\n| 'slide-left'\n| 'slide-right'","elements":[{"name":"literal","value":"'fade'"},{"name":"literal","value":"'scale'"},{"name":"literal","value":"'slide-down'"},{"name":"literal","value":"'slide-up'"},{"name":"literal","value":"'slide-left'"},{"name":"literal","value":"'slide-right'"}]},"name":"type"}],"return":{"name":"void"}}},"description":"Callback fired after the \"exited\" classes are applied"},"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"A single element to animate in and out"},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"provides a reference to the underlying html root element"}},"category":"components/utilities","relativePath":"packages/ui-motion/src/Transition/index.tsx","extension":".tsx","srcPath":"packages/ui-motion/src/Transition/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-motion/src/Transition/index.tsx","packageName":"@instructure/ui-motion","requirePath":"@instructure/ui-motion/lib/Transition/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-motion/src/Transition/index.tsx').default","esPath":"@instructure/ui-motion/es/Transition/index","themePath":"packages/ui-motion/src/Transition/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-motion/src/Transition/theme.ts","id":"Transition","title":"Transition"}