{"description":"\nThe `Focusable` component can be used to identify when an element receives focus. `Focusable` accepts\na `render` or `children` method that returns content which must have exactly one\n[focusable](https://html.spec.whatwg.org/multipage/interaction.html#focusable-area) element.\n\n```javascript\n---\ntype: example\n---\n<Focusable>\n  {(options) => {\n    console.log(options)\n    return <span>\n      <div>\n        <Button>Focus me!</Button>\n      </div>\n      {options.focused && (\n        <ContextView\n          margin=\"small 0\"\n          placement=\"bottom\"\n          as=\"div\"\n          background=\"inverse\"\n          padding=\"small\"\n          borderWidth=\"small\"\n          display=\"block\"\n        >\n          I&#39;m focused!\n        </ContextView>\n      )}\n    </span>\n  }}\n</Focusable>\n```\n\nEasily implement a \"skip to content\" link for keyboard-only or screenreader users.\n\n```javascript\n---\ntype: example\n---\n<Focusable>\n{({ focused }) => {\n  return (\n    <div>\n      {\n        focused ?\n          <Link href=\"#mainContentExample\">Skip to content</Link> :\n          <ScreenReaderContent tabIndex=\"0\">Skip to content</ScreenReaderContent>\n      }\n      <View as=\"p\" id=\"mainContentExample\">\n        Tab into this code example to see a 'Skip to Content' link appear\n      </View>\n    </div>\n  )\n}}\n</Focusable>\n```\n","displayName":"Focusable","methods":[],"props":{"children":{"type":{"name":"func"},"required":false,"description":"The function called on each render. Identical to `render()`\n@param {Object} opts - Render options\n@param {boolean} opts.focused - Is the element focused (via keyboard only)?\n@param {HTMLElement} opts.focusable - The focusable element.\n@param {boolean} opts.focusVisible - Whether the focus state should be visible or not.\n@param {function} opts.attachRef - Used internally to get a reference to the object.","tsType":{"name":"signature","type":"function","raw":"(\n  opts: FocusableRenderOptions\n) => (\n  | ReactElement\n  | ReactComponentElement<any>\n  | DOMElement<any, any>\n  | CElement<any, any>\n  | FunctionComponentElement<any>\n) & { ref?: (args: any[]) => unknown }","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  /**\n   * Is the element focused (via keyboard only)?\n   */\n  focused: boolean\n  /**\n   * The focusable element\n   */\n  focusable?: HTMLElement\n  /**\n   * Whether the focus state should be visible or not\n   */\n  focusVisible: boolean\n  attachRef: (el: Element | null) => void\n}","signature":{"properties":[{"key":"focused","value":{"name":"boolean","required":true},"description":"Is the element focused (via keyboard only)?"},{"key":"focusable","value":{"name":"HTMLElement","required":false},"description":"The focusable element"},{"key":"focusVisible","value":{"name":"boolean","required":true},"description":"Whether the focus state should be visible or not"},{"key":"attachRef","value":{"name":"signature","type":"function","raw":"(el: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":true}}]}},"name":"opts"}],"return":{"name":"intersection","raw":"(\n  | ReactElement\n  | ReactComponentElement<any>\n  | DOMElement<any, any>\n  | CElement<any, any>\n  | FunctionComponentElement<any>\n) & { ref?: (args: any[]) => unknown }","elements":[{"name":"unknown"},{"name":"signature","type":"object","raw":"{ ref?: (args: any[]) => unknown }","signature":{"properties":[{"key":"ref","value":{"name":"signature","type":"function","raw":"(args: any[]) => unknown","signature":{"arguments":[{"type":{"name":"Array","elements":[{"name":"any"}],"raw":"any[]"},"name":"args"}],"return":{"name":"unknown"}},"required":false}}]}}]}}},"defaultValue":{"value":"null","computed":false}},"render":{"type":{"name":"func"},"required":false,"description":"The function called on each render. Identical to `children()`.\n@param {Object} opts - Render options\n@param {boolean} opts.focused - Is the element focused (via keyboard only)?\n@param {HTMLElement} opts.focusable - The focusable element.\n@param {boolean} opts.focusVisible - Whether the focus state should be visible or not.\n@param {function} opts.attachRef - Used internally to get a reference to the object.","tsType":{"name":"signature","type":"function","raw":"(\n  opts: FocusableRenderOptions\n) => (\n  | ReactElement\n  | ReactComponentElement<any>\n  | DOMElement<any, any>\n  | CElement<any, any>\n  | FunctionComponentElement<any>\n) & { ref?: (args: any[]) => unknown }","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  /**\n   * Is the element focused (via keyboard only)?\n   */\n  focused: boolean\n  /**\n   * The focusable element\n   */\n  focusable?: HTMLElement\n  /**\n   * Whether the focus state should be visible or not\n   */\n  focusVisible: boolean\n  attachRef: (el: Element | null) => void\n}","signature":{"properties":[{"key":"focused","value":{"name":"boolean","required":true},"description":"Is the element focused (via keyboard only)?"},{"key":"focusable","value":{"name":"HTMLElement","required":false},"description":"The focusable element"},{"key":"focusVisible","value":{"name":"boolean","required":true},"description":"Whether the focus state should be visible or not"},{"key":"attachRef","value":{"name":"signature","type":"function","raw":"(el: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":true}}]}},"name":"opts"}],"return":{"name":"intersection","raw":"(\n  | ReactElement\n  | ReactComponentElement<any>\n  | DOMElement<any, any>\n  | CElement<any, any>\n  | FunctionComponentElement<any>\n) & { ref?: (args: any[]) => unknown }","elements":[{"name":"unknown"},{"name":"signature","type":"object","raw":"{ ref?: (args: any[]) => unknown }","signature":{"properties":[{"key":"ref","value":{"name":"signature","type":"function","raw":"(args: any[]) => unknown","signature":{"arguments":[{"type":{"name":"Array","elements":[{"name":"any"}],"raw":"any[]"},"name":"args"}],"return":{"name":"unknown"}},"required":false}}]}}]}}}}},"category":"components/utilities","relativePath":"packages/ui-focusable/src/Focusable/index.tsx","extension":".tsx","srcPath":"packages/ui-focusable/src/Focusable/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-focusable/src/Focusable/index.tsx","packageName":"@instructure/ui-focusable","requirePath":"@instructure/ui-focusable/lib/Focusable/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-focusable/src/Focusable/index.tsx').default","esPath":"@instructure/ui-focusable/es/Focusable/index","id":"Focusable","title":"Focusable"}