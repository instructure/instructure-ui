{"description":"\nThe `<TreeBrowser/>` component provides a keyboard accessible tree structure. The component expects\nto receive a normalized data structure, examples can be seen at https://github.com/paularmstrong/normalizr.\n\n### Size\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      size: 'medium'\n    }\n\n    this.sizes = ['small', 'medium', 'large']\n  }\n\n  handleSizeSelect = (e, size) => {\n    this.setState({ size })\n  };\n\n  render () {\n    return (\n      <>\n        <View display=\"block\" margin=\"none none medium\">\n          <RadioInputGroup\n            name=\"treeBrowserSize\"\n            defaultValue=\"medium\"\n            description={<ScreenReaderContent>TreeBrowser size selector</ScreenReaderContent>}\n            variant=\"toggle\"\n            onChange={this.handleSizeSelect}\n          >\n            {this.sizes.map((size) => <RadioInput key={size} label={size} value={size} />)}\n          </RadioInputGroup>\n        </View>\n\n        <TreeBrowser\n          size={this.state.size}\n          collections={{\n            1: {\n              id: 1,\n              name: \"Assignments\",\n              collections: [2,3],\n              items: [3],\n              descriptor: \"Class Assignments\"\n            },\n            2: { id: 2, name: \"English Assignments\", collections: [4], items: [] },\n            3: { id: 3, name: \"Math Assignments\", collections: [5], items: [1,2] },\n            4: { id: 4, name: \"Reading Assignments\", collections: [], items: [4] },\n            5: { id: 5, name: \"Advanced Math Assignments\", items: [5]}\n          }}\n          items={{\n            1: { id: 1, name: \"Addition Worksheet\" },\n            2: { id: 2, name: \"Subtraction Worksheet\" },\n            3: { id: 3, name: \"General Questions\" },\n            4: { id: 4, name: \"Vogon Poetry\" },\n            5: { id: 5, name: \"Bistromath\", descriptor: \"Explain the Bistromathic Drive\" }\n          }}\n          defaultExpanded={[1, 3]}\n          rootId={1}\n        />\n      </>\n    )\n  }\n}\n\nrender(<Example/>)\n\n```\n\n### Managing State\n\n`<TreeBrowser />` can be fully controlled. The following example uses the `onCollectionToggle` callback function to set the state. It then uses the `expanded` prop to configure which collections are open or closed.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      expanded: [2]\n    }\n  }\n\n  handleCollectionClick = (id, collection) => {\n    console.log(collection.id)\n  };\n\n  handleCollectionToggle = (collection) => {\n    this.setState((state) => {\n      const expanded = [...state.expanded]\n      const index = expanded.indexOf(collection.id)\n\n      if (!collection.expanded) {\n        expanded.splice(index, 1)\n      } else if (index < 0) {\n        expanded.push(collection.id)\n      }\n\n      return { expanded }\n    })\n  };\n\n  render () {\n    return (\n      <TreeBrowser\n        variant=\"indent\"\n        selectionType=\"single\"\n        collections={{\n          1: { id: 1, name: \"Grade 1\", collections: [2,3,6] },\n          2: { id: 2, name: \"Math Outcomes\", collections: [4], items: [3,4], descriptor: \"1 Group | 2 Outcomes\" },\n          3: { id: 3, name: \"Reading Outcome\", collections: [5], items: [1,2], descriptor: \"1 Group | 2 Outcomes\" },\n          4: { id: 4, name: \"Advanced Math\", items: [6], descriptor: \"1 Outcome\" },\n          5: { id: 5, name: \"Advanced Reading\", items: [5], descriptor: \"1 Group | 2 Outcomes\" },\n          6: { id: 6, name: \"Advanced Outcomes\", items: [5,6], descriptor: \"2 Outcomes\" },\n        }}\n        items={{\n          1: { id: 1, name: \"Can read\" },\n          2: { id: 2, name: \"Can write\" },\n          3: { id: 3, name: \"Can add\" },\n          4: { id: 4, name: \"Can subtract\" },\n          5: { id: 5, name: \"Can read Shakespeare\" },\n          6: { id: 6, name: \"Can do quantum physics\" }\n        }}\n        showRootCollection={false}\n        rootId={1}\n        expanded={this.state.expanded}\n        onCollectionToggle={this.handleCollectionToggle}\n        onCollectionClick={this.handleCollectionClick}\n      />\n    )\n  }\n}\n\nrender(<Example/>)\n```\n\n### Customizing Icons\n\nAll of the `<TreeBrowser>` icons are customizable.\nThe following example sets custom icons for the expanded and collapsed state of the collections via `collectionIcon` and `collectionIconExpanded` and custom item icons via `itemIcon`.\n\n```js\n---\ntype: example\n---\n<TreeBrowser\n  collections={{\n    1: {\n      id: 1,\n      name: \"Grades\",\n      collections: [],\n      items: [1,2,3]\n    },\n  }}\n  items={{\n    1: { id: 1, name: \"Sarah\" },\n    2: { id: 2, name: \"Jenny\" },\n    3: { id: 3, name: \"Juan\" }\n  }}\n  defaultExpanded={[1]}\n  collectionIcon={IconGradebookLine}\n  collectionIconExpanded={IconXSolid}\n  itemIcon={IconUserSolid}\n  rootId={1}\n  size=\"large\"\n/>\n```\n\n#### Different icons for each item\n\nOne way do this is to use `getItemProps`. This function is called with the props for each item and returns new props you specify. These props are then passed to the item when it is rendered. In the following example, we override the `itemIcon` prop depending on the item name.\n\n```js\n---\ntype: example\n---\n<TreeBrowser\n  collections={{\n    1: {\n      id: 1,\n      name: \"Saved\",\n      collections: [],\n      items: [1,2,3]\n    },\n  }}\n  items={{\n    1: { id: 1, name: \"Modules\" },\n    2: { id: 2, name: \"Videos\" },\n    3: { id: 3, name: \"Students\" }\n  }}\n  defaultExpanded={[1]}\n  rootId={1}\n  size=\"large\"\n  getItemProps={({ name, ...props }) => {\n    let itemIcon = IconUserSolid\n\n    if (name === 'Modules') {\n      itemIcon = IconModuleLine\n    }\n\n    if (name === 'Videos') {\n      itemIcon = IconVideoLine\n    }\n\n    return {\n      ...props, // Be sure to pass the rest of the props along\n      itemIcon,\n      name\n    }\n  }}\n/>\n```\n\nAnother way to do it is to specify the `thumbnail` property in the `items` collection. This also overrides `itemIcon`.\n\n```js\n---\ntype: example\n---\n<TreeBrowser\n  collections={{\n    1: {\n      id: 1,\n      name: \"Pandas\",\n      collections: [],\n      items: [1,2,3]\n    },\n  }}\n  items={{\n    1: { id: 1, name: \"Bao Bao\", thumbnail: avatarSquare },\n    2: { id: 2, name: \"Bei Bei\" },\n    3: { id: 3, name: \"Mei Xiang\", thumbnail: avatarPortrait }\n  }}\n  defaultExpanded={[1]}\n  itemIcon={IconUserSolid}\n  rootId={1}\n  size=\"large\"\n/>\n```\n\n### Rendering custom content in nodes\n\nUsing the `renderContent` property allows you to render custom content in the area where the text and descriptor are.\nTo meet a11y standards make sure to have the right contrast ratio on hovered and selected states; you can use the\n`selected` and `focused` attributes in the given `props`.\n\n```js\n---\ntype: example\n---\n<TreeBrowser\n  collections={{\n    1: {\n      id: 1,\n      name: \"Pandas\",\n      collections: [],\n      items: [1, 2, 3]\n    },\n  }}\n  items={{\n    1: { id: 1, name: \"Bao Bao\" },\n    2: { id: 2, name: \"Bei Bei\" },\n    3: { id: 3, name: \"Mei Xiang\" }\n  }}\n  defaultExpanded={[1]}\n  itemIcon={IconUserSolid}\n  rootId={1}\n  size=\"large\"\n  renderContent={(props)=> {\n    if (props.level > 1) {\n      return <div style={{ display: 'flex', alignItems: 'flex-end', padding: '0.6rem 0 0.6rem 1rem' }}>\n        <span>{props.name}</span>\n        <Tag text=\"done\" size=\"small\" margin=\"0 xx-small 0 xx-small\"/>\n        <Tag text=\"class A\" size=\"small\"/>\n      </div>\n    }\n    return <div style={{padding: '0.6rem 0 0.6rem 1rem'}}>{props.name}</div>\n  }}\n/>\n```\n\n### Rendering custom items before and after nodes\n\nAn example of a `<TreeBrowser />` with a custom item after each collection.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      expanded: true,\n      hoveredLine: null\n    }\n  }\n\n  renderInput = () => {\n    const { expanded } = this.state\n    if (expanded) {\n      return (\n        <InstUISettingsProvider\n          theme={\n            this.state.hoveredLine === 'renderAfter'\n              ? {\n                  componentOverrides: {\n                    View: {\n                      focusColorInfo: 'white'\n                    },\n                    TextInput: {\n                      focusOutlineColor: 'white'\n                    }\n                  }\n                }\n              : undefined\n          }\n        >\n          <View\n            as=\"div\"\n            padding=\"xx-small\"\n            onFocus={(e) => e.stopPropagation()}\n            onClick={(e) => e.stopPropagation()}\n            onMouseEnter={() => this.setState({ hoveredLine: 'renderAfter' })}\n            onMouseLeave={() => this.setState({ hoveredLine: 'null' })}\n          >\n            <TextInput\n              placeholder=\"Enter new group name\"\n              display=\"inline-block\"\n              width=\"12rem\"\n              renderLabel=\"\"\n              onKeyDown={(e) => {\n                e.stopPropagation()\n              }}\n            />\n            <IconButton\n              screenReaderLabel=\"Cancel\"\n              onClick={(e) => this.setExpand(e, !expanded)}\n              onKeyDown={(e) => {\n                if (e.code === 'Space' || e.code === 'Enter') {\n                  e.preventDefault()\n                  this.setExpand(e, !expanded)\n                }\n              }}\n              margin=\"0 0 0 small\"\n            >\n              <IconXSolid />\n            </IconButton>\n            <IconButton\n              screenReaderLabel=\"Add new group\"\n              onClick={(e) => this.setExpand(e, !expanded)}\n              onKeyDown={(e) => {\n                if (e.code === 'Space' || e.code === 'Enter') {\n                  e.preventDefault()\n                  this.setExpand(e, !expanded)\n                }\n              }}\n              margin=\"0 0 0 small\"\n            >\n              <IconCheckSolid />\n            </IconButton>\n          </View>\n        </InstUISettingsProvider>\n      )\n    }\n\n    return <View as=\"div\">Create New Group</View>\n  }\n\n  setExpand = (e, expanded) => {\n    e.stopPropagation()\n    this.setState({ expanded })\n    this._node.focus()\n  }\n\n  renderNode = () => {\n    const { expanded } = this.state\n    return (\n      <TreeBrowser.Node\n        containerRef={(el) => (this._node = el)}\n        onClick={(e) => this.setExpand(e, !expanded)}\n        onKeyDown={(e) => {\n          if (e.code === 'Space' || e.code === 'Enter') {\n            e.preventDefault()\n            this.setExpand(e, !expanded)\n          }\n        }}\n        itemIcon={this.state.expanded ? '' : <IconPlusLine />}\n        size=\"large\"\n      >\n        {this.renderInput()}\n      </TreeBrowser.Node>\n    )\n  }\n\n  render() {\n    return (\n      <TreeBrowser\n        selectionType=\"single\"\n        size=\"large\"\n        defaultExpanded={[1, 2]}\n        collections={{\n          1: {\n            id: 1,\n            name: 'Grade 1',\n            collections: [2]\n          },\n          2: {\n            id: 2,\n            name: 'Math Outcomes',\n            collections: [],\n            items: [1, 2],\n            descriptor: '1 Group | 2 Outcomes',\n            renderAfterItems: this.renderNode()\n          }\n        }}\n        items={{\n          1: { id: 1, name: 'Can add' },\n          2: { id: 2, name: 'Can subtract' }\n        }}\n        showRootCollection={true}\n        rootId={1}\n      />\n    )\n  }\n}\n\nrender(<Example/>)\n```\n\n### Change the order of appearance of items and collections\n\nBy default, the order of collections and items depend on the order of `collections` and `items` array. We can override it by providing a `sortOrder` comparison function.\n\n---\n\n**NOTE**\n\nThis works with all collections and items of the TreeBrowser.\n\n---\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      size: 'medium',\n      sorted: false\n    }\n  }\n  toggleSort = (event)=>{ this.setState({sorted:!this.state.sorted}) }\n  render () {\n    return (\n      <>\n        <View display=\"block\" margin=\"none none medium\">\n         <FormFieldGroup description=\"Turn of/off sorting\">\n              <Checkbox\n                checked={this.state.sorted}\n                label=\"Sort\"\n                onChange={this.toggleSort}\n              />\n               </FormFieldGroup>\n        </View>\n\n        <TreeBrowser\n          size={this.state.size}\n          collections={{\n            1: {\n              id: 1,\n              name: \"Assignments\",\n              collections: [3,2],\n              items: [3],\n              descriptor: \"Class Assignments\"\n            },\n            2: { id: 2, name: \"English Assignments\", collections: [4], items: [] },\n            3: { id: 3, name: \"Math Assignments\", collections: [5], items: [2,1] },\n            4: { id: 4, name: \"Reading Assignments\", collections: [], items: [4] },\n            5: { id: 5, name: \"Advanced Math Assignments\", items: [5]}\n          }}\n          items={{\n            1: { id: 1, name: \"Addition Worksheet\" },\n            2: { id: 2, name: \"Subtraction Worksheet\" },\n            3: { id: 3, name: \"General Questions\" },\n            4: { id: 4, name: \"Vogon Poetry\" },\n            5: { id: 5, name: \"Bistromath\", descriptor: \"Explain the Bistromathic Drive\" }\n          }}\n          defaultExpanded={[1, 3]}\n          rootId={1}\n         sortOrder={this.state.sorted? (a,b)=>{return(a.name).localeCompare(b.name)}: (a,b)=>{return 0} }\n        />\n      </>\n    )\n  }\n}\n\nrender(<Example/>)\n\n```\n\nThere is another way to sort the children of one collection. By adding the `compareFunc` as the comparison function to the collection's properties. This will be effective only within the collection's scope. For more convenience, we support a prop called `type` to specify whether the collection's children is either an item or a subcollection (this is only make sense in `compareFunc`)\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      size: 'medium'\n    }\n  }\n  render () {\n    return (\n        <TreeBrowser\n          size={this.state.size}\n          collections={{\n            1: {\n              id: 1,\n              name: \"Assignments\",\n              collections: [3,2],\n              items: [3],\n              descriptor: \"Class Assignments\",\n              // Sort the direct children of \"Assignment\" by their name in alphabetical order\n              compareFunc: (a,b)=>{return a.name.localeCompare(b.name)}\n            },\n            2: { id: 2, name: \"English Assignments\", collections: [4], items: [] },\n            3: { id: 3, name: \"Math Assignments\", collections: [5], items: [2,1],\n            //  The items appear before subcollections\n            compareFunc: (a,b)=>{\n              if(a.type === \"item\" && b.type === \"collection\"){\n                return -1\n              }\n              if(a.type === \"collection\" && b.type === \"item\"){\n                return 1\n              }\n              return 0\n            }},\n            4: { id: 4, name: \"Reading Assignments\", collections: [], items: [4] },\n            5: { id: 5, name: \"Advanced Math Assignments\", items: [5]}\n          }}\n          items={{\n            1: { id: 1, name: \"Addition Worksheet\" },\n            2: { id: 2, name: \"Subtraction Worksheet\" },\n            3: { id: 3, name: \"General Questions\" },\n            4: { id: 4, name: \"Vogon Poetry\" },\n            5: { id: 5, name: \"Bistromath\", descriptor: \"Explain the Bistromathic Drive\" }\n          }}\n          defaultExpanded={[1, 3]}\n          rootId={1}\n        />\n    )\n  }\n}\n\nrender(<Example/>)\n\n```\n\n### showRootCollection\n\nThe `showRootCollection` prop sets whether the root collection (specified in `rootId` prop) is displayed or to begin with its immediate sub-collections and items instead. It defaults to `true`.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      showRootCollection: true\n    }\n  }\n\n  handleSwitch = () => {\n    this.setState({ showRootCollection: !this.state.showRootCollection })\n  }\n\n  renderNode = () => {\n    return (\n      <TreeBrowser.Node itemIcon={<IconPlusLine />}>\n        More\n      </TreeBrowser.Node>\n    )\n  }\n\n  render () {\n    return (\n      <>\n        <View display=\"block\" margin=\"none none medium\">\n          <Checkbox\n            label=\"showRootCollection\"\n            variant=\"toggle\"\n            size=\"medium\"\n            checked={this.state.showRootCollection}\n            onChange={this.handleSwitch}\n          />\n        </View>\n\n        <TreeBrowser\n          collections={{\n            1: {\n              id: 1,\n              name: \"Assignments\",\n              collections: [2,3],\n              items: [3, 5],\n              descriptor: \"Class Assignments\",\n              renderAfterItems: this.renderNode()\n            },\n            2: { id: 2, name: \"English Assignments\", collections: [4], items: [] },\n            3: { id: 3, name: \"Math Assignments\", collections: [5], items: [1,2] },\n            4: { id: 4, name: \"Reading Assignments\", collections: [], items: [4] },\n            5: { id: 5, name: \"Advanced Math Assignments\", items: [5]}\n          }}\n          items={{\n            1: { id: 1, name: \"Addition Worksheet\" },\n            2: { id: 2, name: \"Subtraction Worksheet\" },\n            3: { id: 3, name: \"General Questions\" },\n            4: { id: 4, name: \"Vogon Poetry\" },\n            5: { id: 5, name: \"Bistromath\", descriptor: \"Explain the Bistromathic Drive\" }\n          }}\n          defaultExpanded={[1, 3]}\n          rootId={1}\n          showRootCollection={this.state.showRootCollection}\n        />\n      </>\n    )\n  }\n}\n\nrender(<Example/>)\n\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use for browsing hierarchical content</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Use for site navigation</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"TreeBrowser","methods":[],"props":{"collections":{"type":{"name":"object"},"required":true,"description":"a normalized hash of collections, keyed by id, that contains an\n:id, :name, :items (an array of item ids), :collections (an array of\ncollection ids), optional :descriptor text, optional :containerRef function,\nan optional :renderBeforeItems TreeNode, and an optional :renderAfterItems TreeNode.\nEach collection must have a unique id.","tsType":{"name":"Record","elements":[{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]},{"name":"intersection","raw":"CollectionBase & {\n  items?: number[]\n  collections?: (number | string)[]\n  compareFunc?: (a: CompareObject, b: CompareObject) => number\n}","elements":[{"name":"signature","type":"object","raw":"{\n  id: number | string\n  name: string\n  descriptor?: string\n  /**\n   * A function that returns a reference to the underlying HTML container\n   * @param el The DOM HTMLElement\n   */\n  containerRef?: (el: HTMLElement | null) => void\n  /**\n   * children of type TreeNode\n   */\n  renderBeforeItems?: ReactElement // TODO: Children.oneOf([TreeNode])\n  /**\n   * children of type TreeNode\n   */\n  renderAfterItems?: ReactElement // TODO: Children.oneOf([TreeNode])\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"containerRef","value":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to the underlying HTML container\n@param el The DOM HTMLElement"},{"key":"renderBeforeItems","value":{"name":"ReactElement","required":false},"description":"children of type TreeNode"},{"key":"renderAfterItems","value":{"name":"ReactElement","required":false},"description":"children of type TreeNode"}]}},{"name":"signature","type":"object","raw":"{\n  items?: number[]\n  collections?: (number | string)[]\n  compareFunc?: (a: CompareObject, b: CompareObject) => number\n}","signature":{"properties":[{"key":"items","value":{"name":"Array","elements":[{"name":"number"}],"raw":"number[]","required":false}},{"key":"collections","value":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(number | string)[]","required":false}},{"key":"compareFunc","value":{"name":"signature","type":"function","raw":"(a: CompareObject, b: CompareObject) => number","signature":{"arguments":[{"type":{"name":"union","raw":"CompareItem | CompareCollection","elements":[{"name":"intersection","raw":"CollectionItem & { type: 'item' }","elements":[{"name":"signature","type":"object","raw":"{\n  id: number | string\n  name: string\n  descriptor?: string\n  thumbnail?: string\n  [key: string]: unknown // allow users to extend it\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"thumbnail","value":{"name":"string","required":false}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}},{"name":"signature","type":"object","raw":"{ type: 'item' }","signature":{"properties":[{"key":"type","value":{"name":"literal","value":"'item'","required":true}}]}}]},{"name":"intersection","raw":"CollectionProps & { type: 'collection' }","elements":[{"name":"intersection","raw":"{\n  collections?: CollectionProps[]\n  items?: CollectionItem[]\n  expanded?: boolean\n  isCollectionFlattened?: boolean\n  compareFunc?: (a: CompareObject, b: CompareObject) => number\n} & CollectionBase","elements":[{"name":"signature","type":"object","raw":"{\n  collections?: CollectionProps[]\n  items?: CollectionItem[]\n  expanded?: boolean\n  isCollectionFlattened?: boolean\n  compareFunc?: (a: CompareObject, b: CompareObject) => number\n}","signature":{"properties":[{"key":"collections","value":{"name":"Array","elements":[{"name":"CollectionProps"}],"raw":"CollectionProps[]","required":false}},{"key":"items","value":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{\n  id: number | string\n  name: string\n  descriptor?: string\n  thumbnail?: string\n  [key: string]: unknown // allow users to extend it\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"thumbnail","value":{"name":"string","required":false}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}}],"raw":"CollectionItem[]","required":false}},{"key":"expanded","value":{"name":"boolean","required":false}},{"key":"isCollectionFlattened","value":{"name":"boolean","required":false}},{"key":"compareFunc","value":{"name":"signature","type":"function","raw":"(a: CompareObject, b: CompareObject) => number","signature":{"arguments":[{"type":{"name":"CompareObject"},"name":"a"},{"type":{"name":"CompareObject"},"name":"b"}],"return":{"name":"number"}},"required":false}}]}},{"name":"signature","type":"object","raw":"{\n  id: number | string\n  name: string\n  descriptor?: string\n  /**\n   * A function that returns a reference to the underlying HTML container\n   * @param el The DOM HTMLElement\n   */\n  containerRef?: (el: HTMLElement | null) => void\n  /**\n   * children of type TreeNode\n   */\n  renderBeforeItems?: ReactElement // TODO: Children.oneOf([TreeNode])\n  /**\n   * children of type TreeNode\n   */\n  renderAfterItems?: ReactElement // TODO: Children.oneOf([TreeNode])\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"containerRef","value":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to the underlying HTML container\n@param el The DOM HTMLElement"},{"key":"renderBeforeItems","value":{"name":"ReactElement","required":false},"description":"children of type TreeNode"},{"key":"renderAfterItems","value":{"name":"ReactElement","required":false},"description":"children of type TreeNode"}]}}]},{"name":"signature","type":"object","raw":"{ type: 'collection' }","signature":{"properties":[{"key":"type","value":{"name":"literal","value":"'collection'","required":true}}]}}]}]},"name":"a"},{"type":{"name":"union","raw":"CompareItem | CompareCollection","elements":[{"name":"intersection","raw":"CollectionItem & { type: 'item' }","elements":[{"name":"signature","type":"object","raw":"{\n  id: number | string\n  name: string\n  descriptor?: string\n  thumbnail?: string\n  [key: string]: unknown // allow users to extend it\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"thumbnail","value":{"name":"string","required":false}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}},{"name":"signature","type":"object","raw":"{ type: 'item' }","signature":{"properties":[{"key":"type","value":{"name":"literal","value":"'item'","required":true}}]}}]},{"name":"intersection","raw":"CollectionProps & { type: 'collection' }","elements":[{"name":"intersection","raw":"{\n  collections?: CollectionProps[]\n  items?: CollectionItem[]\n  expanded?: boolean\n  isCollectionFlattened?: boolean\n  compareFunc?: (a: CompareObject, b: CompareObject) => number\n} & CollectionBase","elements":[{"name":"signature","type":"object","raw":"{\n  collections?: CollectionProps[]\n  items?: CollectionItem[]\n  expanded?: boolean\n  isCollectionFlattened?: boolean\n  compareFunc?: (a: CompareObject, b: CompareObject) => number\n}","signature":{"properties":[{"key":"collections","value":{"name":"Array","elements":[{"name":"CollectionProps"}],"raw":"CollectionProps[]","required":false}},{"key":"items","value":{"name":"Array","elements":[{"name":"signature","type":"object","raw":"{\n  id: number | string\n  name: string\n  descriptor?: string\n  thumbnail?: string\n  [key: string]: unknown // allow users to extend it\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"thumbnail","value":{"name":"string","required":false}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}}],"raw":"CollectionItem[]","required":false}},{"key":"expanded","value":{"name":"boolean","required":false}},{"key":"isCollectionFlattened","value":{"name":"boolean","required":false}},{"key":"compareFunc","value":{"name":"signature","type":"function","raw":"(a: CompareObject, b: CompareObject) => number","signature":{"arguments":[{"type":{"name":"CompareObject"},"name":"a"},{"type":{"name":"CompareObject"},"name":"b"}],"return":{"name":"number"}},"required":false}}]}},{"name":"signature","type":"object","raw":"{\n  id: number | string\n  name: string\n  descriptor?: string\n  /**\n   * A function that returns a reference to the underlying HTML container\n   * @param el The DOM HTMLElement\n   */\n  containerRef?: (el: HTMLElement | null) => void\n  /**\n   * children of type TreeNode\n   */\n  renderBeforeItems?: ReactElement // TODO: Children.oneOf([TreeNode])\n  /**\n   * children of type TreeNode\n   */\n  renderAfterItems?: ReactElement // TODO: Children.oneOf([TreeNode])\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"containerRef","value":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to the underlying HTML container\n@param el The DOM HTMLElement"},{"key":"renderBeforeItems","value":{"name":"ReactElement","required":false},"description":"children of type TreeNode"},{"key":"renderAfterItems","value":{"name":"ReactElement","required":false},"description":"children of type TreeNode"}]}}]},{"name":"signature","type":"object","raw":"{ type: 'collection' }","signature":{"properties":[{"key":"type","value":{"name":"literal","value":"'collection'","required":true}}]}}]}]},"name":"b"}],"return":{"name":"number"}},"required":false}}]}}]}],"raw":"Record<number | string, Collection>"}},"items":{"type":{"name":"object"},"required":true,"description":"a hash of items, keyed by id, that contain an :id, :name,\noptional :descriptor text, and optional :thumbnail url","tsType":{"name":"Record","elements":[{"name":"number"},{"name":"signature","type":"object","raw":"{\n  id: number | string\n  name: string\n  descriptor?: string\n  thumbnail?: string\n  [key: string]: unknown // allow users to extend it\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":true}},{"key":"name","value":{"name":"string","required":true}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"thumbnail","value":{"name":"string","required":false}},{"key":{"name":"string"},"value":{"name":"unknown","required":true}}]}}],"raw":"Record<number, CollectionItem>"}},"rootId":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"specifies the id of the root level collection, if present.\nif no root is specified, all collections will be rendered\nat the top level","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"expanded":{"type":{"name":"custom","raw":"controllable(\n  PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ),\n  'onCollectionToggle'\n)"},"required":false,"description":"an array of expanded collection ids, must be accompanied by an 'onCollectionToggle' prop","tsType":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number | undefined)[]"}},"defaultExpanded":{"type":{"name":"arrayOf","value":{"name":"union","value":[{"name":"string"},{"name":"number"}]}},"required":false,"description":"an array of collection ids to expand by default","tsType":{"name":"Array","elements":[{"name":"unknown"}],"raw":"(string | number)[]"},"defaultValue":{"value":"[]","computed":false}},"selectionType":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'single'","computed":false}]},"required":false,"description":"There are 2 types of tree selection:  single and multi.\nThis is set up to allow for \"multi\" in the future without having to deprecate the old API.","tsType":{"name":"union","raw":"'none' | 'single'","elements":[{"name":"literal","value":"'none'"},{"name":"literal","value":"'single'"}]},"defaultValue":{"value":"'none'","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"variant":{"type":{"name":"enum","value":[{"value":"'folderTree'","computed":false},{"value":"'indent'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'folderTree' | 'indent'","elements":[{"name":"literal","value":"'folderTree'"},{"name":"literal","value":"'indent'"}]},"defaultValue":{"value":"'folderTree'","computed":false}},"collectionIcon":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"defaultValue":{"value":"IconFolderLine","computed":true}},"collectionIconExpanded":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"defaultValue":{"value":"IconFolderLine","computed":true}},"itemIcon":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"defaultValue":{"value":"IconDocumentLine","computed":true}},"getItemProps":{"type":{"name":"func"},"required":false,"description":"A function called with each item's props as an argument. The return value of this function is a\nprops object which will be passed to the item when it is rendered. This is useful for situations where\nyou need to render the item differently depending on it's props. For example, if you would like to\ndisplay a different icon for items with a certain name.","tsType":{"name":"signature","type":"function","raw":"(props: Record<string, any>) => Record<string, any>","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"}}},"defaultValue":{"value":"(props: unknown) => props","computed":false}},"getCollectionProps":{"type":{"name":"func"},"required":false,"description":"A function called with each collection's props as an argument. The return value of this function is a\nprops object which will be passed to the collection when it is rendered. This is useful for situations where\nyou need to render the collection differently depending on it's props. For example, if you would like to\ndisplay a different icon for collections with a certain name.","tsType":{"name":"signature","type":"function","raw":"(props: Record<string, any>) => TreeBrowserButtonProps","signature":{"arguments":[{"type":{"name":"Record","elements":[{"name":"string"},{"name":"any"}],"raw":"Record<string, any>"},"name":"props"}],"return":{"name":"intersection","raw":"TreeBrowserButtonOwnProps &\nWithStyleProps<TreeBrowserButtonTheme, TreeBrowserButtonStyle>","elements":[{"name":"intersection","raw":"{\n  id?: string | number\n  name?: string\n  descriptor?: string\n  type?: 'collection' | 'item' | string // | string is for custom type\n  thumbnail?: string\n  /**\n   * Called when this button is clicked\n   */\n  onClick?: (e: React.MouseEvent) => void\n  expanded?: boolean\n  selected?: boolean\n  focused?: boolean\n  level?: number\n  /**\n   * A function that returns a reference to the parent li element\n   */\n  containerRef?: (el: HTMLElement | null) => void\n} & TreeBrowserCommonProps","elements":[{"name":"signature","type":"object","raw":"{\n  id?: string | number\n  name?: string\n  descriptor?: string\n  type?: 'collection' | 'item' | string // | string is for custom type\n  thumbnail?: string\n  /**\n   * Called when this button is clicked\n   */\n  onClick?: (e: React.MouseEvent) => void\n  expanded?: boolean\n  selected?: boolean\n  focused?: boolean\n  level?: number\n  /**\n   * A function that returns a reference to the parent li element\n   */\n  containerRef?: (el: HTMLElement | null) => void\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"name","value":{"name":"string","required":false}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"type","value":{"name":"union","raw":"'collection' | 'item' | string","elements":[{"name":"literal","value":"'collection'"},{"name":"literal","value":"'item'"},{"name":"string"}],"required":false}},{"key":"thumbnail","value":{"name":"string","required":false}},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"}],"return":{"name":"void"}},"required":false},"description":"Called when this button is clicked"},{"key":"expanded","value":{"name":"boolean","required":false}},{"key":"selected","value":{"name":"boolean","required":false}},{"key":"focused","value":{"name":"boolean","required":false}},{"key":"level","value":{"name":"number","required":false}},{"key":"containerRef","value":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to the parent li element"}]}},{"name":"signature","type":"object","raw":"{\n  size?: 'small' | 'medium' | 'large'\n  variant?: 'folderTree' | 'indent'\n  collectionIcon?: Renderable\n  collectionIconExpanded?: Renderable\n  itemIcon?: Renderable\n  renderContent?: (props: TreeBrowserButtonProps) => JSX.Element\n}","signature":{"properties":[{"key":"size","value":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}],"required":false}},{"key":"variant","value":{"name":"union","raw":"'folderTree' | 'indent'","elements":[{"name":"literal","value":"'folderTree'"},{"name":"literal","value":"'indent'"}],"required":false}},{"key":"collectionIcon","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false}},{"key":"collectionIconExpanded","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false}},{"key":"itemIcon","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false}},{"key":"renderContent","value":{"name":"signature","type":"function","raw":"(props: TreeBrowserButtonProps) => JSX.Element","signature":{"arguments":[{"type":{"name":"TreeBrowserButtonProps"},"name":"props"}],"return":{"name":"JSX.Element"}},"required":false}}]}}]},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  hoverBackgroundColor: Colors['backgroundBrand']\n  hoverTextColor: Colors['textLightest']\n  focusOutlineWidth: Border['widthMedium']\n  focusOutlineColor: Colors['borderBrand']\n  focusOutlineStyle: Border['style']\n  iconColor: Colors['textDarkest']\n  iconsMarginRight: Spacing['xSmall']\n  descriptorMarginTop: Spacing['xxxSmall']\n  descriptorTextColor: Colors['textDarkest']\n  descriptorFontSizeSmall: Typography['fontSizeXSmall']\n  descriptorFontSizeMedium: Typography['fontSizeXSmall']\n  descriptorFontSizeLarge: Typography['fontSizeSmall']\n  nameTextColor: Colors['textBrand']\n  nameFontSizeSmall: Typography['fontSizeXSmall']\n  nameFontSizeMedium: Typography['fontSizeSmall']\n  nameFontSizeLarge: Typography['fontSizeMedium']\n  baseSpacingSmall: Spacing['xSmall']\n  baseSpacingMedium: Spacing['small']\n  baseSpacingLarge: string | 0\n  borderWidth: Border['widthSmall']\n  borderRadius: Border['radiusMedium']\n  borderColor: Colors['borderDark']\n  textLineHeight: Typography['lineHeightCondensed']\n  selectedTextColor: Colors['textLightest']\n  selectedBackgroundColor: Colors['backgroundDark']\n  selectedOutlineWidth: Border['widthLarge']\n}","signature":{"properties":[{"key":"hoverBackgroundColor","value":{"name":"string","raw":"Colors['backgroundBrand']","required":true}},{"key":"hoverTextColor","value":{"name":"string","raw":"Colors['textLightest']","required":true}},{"key":"focusOutlineWidth","value":{"name":"union","raw":"Border['widthMedium']","required":true}},{"key":"focusOutlineColor","value":{"name":"string","raw":"Colors['borderBrand']","required":true}},{"key":"focusOutlineStyle","value":{"name":"string","raw":"Border['style']","required":true}},{"key":"iconColor","value":{"name":"string","raw":"Colors['textDarkest']","required":true}},{"key":"iconsMarginRight","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"descriptorMarginTop","value":{"name":"union","raw":"Spacing['xxxSmall']","required":true}},{"key":"descriptorTextColor","value":{"name":"string","raw":"Colors['textDarkest']","required":true}},{"key":"descriptorFontSizeSmall","value":{"name":"union","raw":"Typography['fontSizeXSmall']","required":true}},{"key":"descriptorFontSizeMedium","value":{"name":"union","raw":"Typography['fontSizeXSmall']","required":true}},{"key":"descriptorFontSizeLarge","value":{"name":"union","raw":"Typography['fontSizeSmall']","required":true}},{"key":"nameTextColor","value":{"name":"string","raw":"Colors['textBrand']","required":true}},{"key":"nameFontSizeSmall","value":{"name":"union","raw":"Typography['fontSizeXSmall']","required":true}},{"key":"nameFontSizeMedium","value":{"name":"union","raw":"Typography['fontSizeSmall']","required":true}},{"key":"nameFontSizeLarge","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"baseSpacingSmall","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"baseSpacingMedium","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"baseSpacingLarge","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}},{"key":"borderWidth","value":{"name":"union","raw":"Border['widthSmall']","required":true}},{"key":"borderRadius","value":{"name":"union","raw":"Border['radiusMedium']","required":true}},{"key":"borderColor","value":{"name":"string","raw":"Colors['borderDark']","required":true}},{"key":"textLineHeight","value":{"name":"union","raw":"Typography['lineHeightCondensed']","required":true}},{"key":"selectedTextColor","value":{"name":"string","raw":"Colors['textLightest']","required":true}},{"key":"selectedBackgroundColor","value":{"name":"string","raw":"Colors['backgroundDark']","required":true}},{"key":"selectedOutlineWidth","value":{"name":"union","raw":"Border['widthLarge']","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"| 'treeButton'\n| 'layout'\n| 'text'\n| 'textName'\n| 'textDescriptor'\n| 'icon'\n| 'thumbnail'\n| 'node'","elements":[{"name":"literal","value":"'treeButton'"},{"name":"literal","value":"'layout'"},{"name":"literal","value":"'text'"},{"name":"literal","value":"'textName'"},{"name":"literal","value":"'textDescriptor'"},{"name":"literal","value":"'icon'"},{"name":"literal","value":"'thumbnail'"},{"name":"literal","value":"'node'"}]}],"raw":"ComponentStyle<\n  | 'treeButton'\n  | 'layout'\n  | 'text'\n  | 'textName'\n  | 'textDescriptor'\n  | 'icon'\n  | 'thumbnail'\n  | 'node'\n>"}],"raw":"WithStyleProps<TreeBrowserButtonTheme, TreeBrowserButtonStyle>"}]}}},"defaultValue":{"value":"(props: unknown) => props","computed":false}},"showRootCollection":{"type":{"name":"bool"},"required":false,"description":"Whether or not to show the root collection specified in rootId prop or\nto begin with its immediate subcollections and items instead","tsType":{"name":"boolean"},"defaultValue":{"value":"true","computed":false}},"onCollectionClick":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(e: React.MouseEvent, data: CollectionData) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"},{"type":{"name":"signature","type":"object","raw":"{\n  id?: number | string\n  expanded?: boolean\n  type: 'child' | 'collection' | 'item'\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":false}},{"key":"expanded","value":{"name":"boolean","required":false}},{"key":"type","value":{"name":"union","raw":"'child' | 'collection' | 'item'","elements":[{"name":"literal","value":"'child'"},{"name":"literal","value":"'collection'"},{"name":"literal","value":"'item'"}],"required":true}}]}},"name":"data"}],"return":{"name":"void"}}}},"onCollectionToggle":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(collection: CollectionData) => void","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  id?: number | string\n  expanded?: boolean\n  type: 'child' | 'collection' | 'item'\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":false}},{"key":"expanded","value":{"name":"boolean","required":false}},{"key":"type","value":{"name":"union","raw":"'child' | 'collection' | 'item'","elements":[{"name":"literal","value":"'child'"},{"name":"literal","value":"'collection'"},{"name":"literal","value":"'item'"}],"required":true}}]}},"name":"collection"}],"return":{"name":"void"}}}},"onItemClick":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(data: CollectionData) => void","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{\n  id?: number | string\n  expanded?: boolean\n  type: 'child' | 'collection' | 'item'\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}],"required":false}},{"key":"expanded","value":{"name":"boolean","required":false}},{"key":"type","value":{"name":"union","raw":"'child' | 'collection' | 'item'","elements":[{"name":"literal","value":"'child'"},{"name":"literal","value":"'collection'"},{"name":"literal","value":"'item'"}],"required":true}}]}},"name":"data"}],"return":{"name":"void"}}}},"treeLabel":{"type":{"name":"string"},"required":false,"description":"An optional label to assist visually impaired users","tsType":{"name":"string"}},"renderContent":{"type":{"name":"func"},"required":false,"description":"","tsType":{"name":"signature","type":"function","raw":"(props: TreeBrowserButtonProps) => JSX.Element","signature":{"arguments":[{"type":{"name":"intersection","raw":"TreeBrowserButtonOwnProps &\nWithStyleProps<TreeBrowserButtonTheme, TreeBrowserButtonStyle>","elements":[{"name":"intersection","raw":"{\n  id?: string | number\n  name?: string\n  descriptor?: string\n  type?: 'collection' | 'item' | string // | string is for custom type\n  thumbnail?: string\n  /**\n   * Called when this button is clicked\n   */\n  onClick?: (e: React.MouseEvent) => void\n  expanded?: boolean\n  selected?: boolean\n  focused?: boolean\n  level?: number\n  /**\n   * A function that returns a reference to the parent li element\n   */\n  containerRef?: (el: HTMLElement | null) => void\n} & TreeBrowserCommonProps","elements":[{"name":"signature","type":"object","raw":"{\n  id?: string | number\n  name?: string\n  descriptor?: string\n  type?: 'collection' | 'item' | string // | string is for custom type\n  thumbnail?: string\n  /**\n   * Called when this button is clicked\n   */\n  onClick?: (e: React.MouseEvent) => void\n  expanded?: boolean\n  selected?: boolean\n  focused?: boolean\n  level?: number\n  /**\n   * A function that returns a reference to the parent li element\n   */\n  containerRef?: (el: HTMLElement | null) => void\n}","signature":{"properties":[{"key":"id","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"name","value":{"name":"string","required":false}},{"key":"descriptor","value":{"name":"string","required":false}},{"key":"type","value":{"name":"union","raw":"'collection' | 'item' | string","elements":[{"name":"literal","value":"'collection'"},{"name":"literal","value":"'item'"},{"name":"string"}],"required":false}},{"key":"thumbnail","value":{"name":"string","required":false}},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(e: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"e"}],"return":{"name":"void"}},"required":false},"description":"Called when this button is clicked"},{"key":"expanded","value":{"name":"boolean","required":false}},{"key":"selected","value":{"name":"boolean","required":false}},{"key":"focused","value":{"name":"boolean","required":false}},{"key":"level","value":{"name":"number","required":false}},{"key":"containerRef","value":{"name":"signature","type":"function","raw":"(el: HTMLElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLElement | null","elements":[{"name":"HTMLElement"},{"name":"null"}]},"name":"el"}],"return":{"name":"void"}},"required":false},"description":"A function that returns a reference to the parent li element"}]}},{"name":"signature","type":"object","raw":"{\n  size?: 'small' | 'medium' | 'large'\n  variant?: 'folderTree' | 'indent'\n  collectionIcon?: Renderable\n  collectionIconExpanded?: Renderable\n  itemIcon?: Renderable\n  renderContent?: (props: TreeBrowserButtonProps) => JSX.Element\n}","signature":{"properties":[{"key":"size","value":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}],"required":false}},{"key":"variant","value":{"name":"union","raw":"'folderTree' | 'indent'","elements":[{"name":"literal","value":"'folderTree'"},{"name":"literal","value":"'indent'"}],"required":false}},{"key":"collectionIcon","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false}},{"key":"collectionIconExpanded","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false}},{"key":"itemIcon","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false}},{"key":"renderContent","value":{"name":"signature","type":"function","raw":"(props: TreeBrowserButtonProps) => JSX.Element","signature":{"arguments":[{"type":{"name":"TreeBrowserButtonProps"},"name":"props"}],"return":{"name":"JSX.Element"}},"required":false}}]}}]},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  hoverBackgroundColor: Colors['backgroundBrand']\n  hoverTextColor: Colors['textLightest']\n  focusOutlineWidth: Border['widthMedium']\n  focusOutlineColor: Colors['borderBrand']\n  focusOutlineStyle: Border['style']\n  iconColor: Colors['textDarkest']\n  iconsMarginRight: Spacing['xSmall']\n  descriptorMarginTop: Spacing['xxxSmall']\n  descriptorTextColor: Colors['textDarkest']\n  descriptorFontSizeSmall: Typography['fontSizeXSmall']\n  descriptorFontSizeMedium: Typography['fontSizeXSmall']\n  descriptorFontSizeLarge: Typography['fontSizeSmall']\n  nameTextColor: Colors['textBrand']\n  nameFontSizeSmall: Typography['fontSizeXSmall']\n  nameFontSizeMedium: Typography['fontSizeSmall']\n  nameFontSizeLarge: Typography['fontSizeMedium']\n  baseSpacingSmall: Spacing['xSmall']\n  baseSpacingMedium: Spacing['small']\n  baseSpacingLarge: string | 0\n  borderWidth: Border['widthSmall']\n  borderRadius: Border['radiusMedium']\n  borderColor: Colors['borderDark']\n  textLineHeight: Typography['lineHeightCondensed']\n  selectedTextColor: Colors['textLightest']\n  selectedBackgroundColor: Colors['backgroundDark']\n  selectedOutlineWidth: Border['widthLarge']\n}","signature":{"properties":[{"key":"hoverBackgroundColor","value":{"name":"string","raw":"Colors['backgroundBrand']","required":true}},{"key":"hoverTextColor","value":{"name":"string","raw":"Colors['textLightest']","required":true}},{"key":"focusOutlineWidth","value":{"name":"union","raw":"Border['widthMedium']","required":true}},{"key":"focusOutlineColor","value":{"name":"string","raw":"Colors['borderBrand']","required":true}},{"key":"focusOutlineStyle","value":{"name":"string","raw":"Border['style']","required":true}},{"key":"iconColor","value":{"name":"string","raw":"Colors['textDarkest']","required":true}},{"key":"iconsMarginRight","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"descriptorMarginTop","value":{"name":"union","raw":"Spacing['xxxSmall']","required":true}},{"key":"descriptorTextColor","value":{"name":"string","raw":"Colors['textDarkest']","required":true}},{"key":"descriptorFontSizeSmall","value":{"name":"union","raw":"Typography['fontSizeXSmall']","required":true}},{"key":"descriptorFontSizeMedium","value":{"name":"union","raw":"Typography['fontSizeXSmall']","required":true}},{"key":"descriptorFontSizeLarge","value":{"name":"union","raw":"Typography['fontSizeSmall']","required":true}},{"key":"nameTextColor","value":{"name":"string","raw":"Colors['textBrand']","required":true}},{"key":"nameFontSizeSmall","value":{"name":"union","raw":"Typography['fontSizeXSmall']","required":true}},{"key":"nameFontSizeMedium","value":{"name":"union","raw":"Typography['fontSizeSmall']","required":true}},{"key":"nameFontSizeLarge","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"baseSpacingSmall","value":{"name":"union","raw":"Spacing['xSmall']","required":true}},{"key":"baseSpacingMedium","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"baseSpacingLarge","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}},{"key":"borderWidth","value":{"name":"union","raw":"Border['widthSmall']","required":true}},{"key":"borderRadius","value":{"name":"union","raw":"Border['radiusMedium']","required":true}},{"key":"borderColor","value":{"name":"string","raw":"Colors['borderDark']","required":true}},{"key":"textLineHeight","value":{"name":"union","raw":"Typography['lineHeightCondensed']","required":true}},{"key":"selectedTextColor","value":{"name":"string","raw":"Colors['textLightest']","required":true}},{"key":"selectedBackgroundColor","value":{"name":"string","raw":"Colors['backgroundDark']","required":true}},{"key":"selectedOutlineWidth","value":{"name":"union","raw":"Border['widthLarge']","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"| 'treeButton'\n| 'layout'\n| 'text'\n| 'textName'\n| 'textDescriptor'\n| 'icon'\n| 'thumbnail'\n| 'node'","elements":[{"name":"literal","value":"'treeButton'"},{"name":"literal","value":"'layout'"},{"name":"literal","value":"'text'"},{"name":"literal","value":"'textName'"},{"name":"literal","value":"'textDescriptor'"},{"name":"literal","value":"'icon'"},{"name":"literal","value":"'thumbnail'"},{"name":"literal","value":"'node'"}]}],"raw":"ComponentStyle<\n  | 'treeButton'\n  | 'layout'\n  | 'text'\n  | 'textName'\n  | 'textDescriptor'\n  | 'icon'\n  | 'thumbnail'\n  | 'node'\n>"}],"raw":"WithStyleProps<TreeBrowserButtonTheme, TreeBrowserButtonStyle>"}]},"name":"props"}],"return":{"name":"JSX.Element"}}}},"sortOrder":{"type":{"name":"func"},"required":false,"description":"An optional compare function to specify order of the collections and the items","tsType":{"name":"signature","type":"function","raw":"(obj1: any, obj2: any) => number","signature":{"arguments":[{"type":{"name":"any"},"name":"obj1"},{"type":{"name":"any"},"name":"obj2"}],"return":{"name":"number"}}},"defaultValue":{"value":"function () {\n  return 0\n}","computed":false}}},"category":"components","relativePath":"packages/ui-tree-browser/src/TreeBrowser/index.tsx","extension":".tsx","srcPath":"packages/ui-tree-browser/src/TreeBrowser/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-tree-browser/src/TreeBrowser/index.tsx","packageName":"@instructure/ui-tree-browser","requirePath":"@instructure/ui-tree-browser/lib/TreeBrowser/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-tree-browser/src/TreeBrowser/index.tsx').default","esPath":"@instructure/ui-tree-browser/es/TreeBrowser/index","themePath":"packages/ui-tree-browser/src/TreeBrowser/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-tree-browser/src/TreeBrowser/theme.ts","id":"TreeBrowser","title":"TreeBrowser"}