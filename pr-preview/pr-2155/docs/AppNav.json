{"description":"\n`AppNav` is a navigation component currently intended for use within LTI apps. AppNav\ncan be configured to adapt to small screen widths by truncating nav items that\ndon't fit within the available space.\n\nThe `onUpdate` function prop returns the number of visible nav items, while the\n`renderTruncateLabel` function prop allows you to customize the trigger for the Menu\nthat contains the truncated items. The example below shows how you can use both of\nthese props to create a hamburger menu when the number of visible nav items is less\nthan two.\n\n- ```js\n  const totalItemsCount = 5\n\n  class AppNavExample extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        visibleItemsCount: totalItemsCount\n      }\n    }\n\n    handleUpdate = ({ visibleItemsCount }) => {\n      this.setState({ visibleItemsCount })\n    }\n\n    render() {\n      const visibleItemsCount = this.state.visibleItemsCount\n\n      return (\n        <AppNav\n          screenReaderLabel=\"App navigation\"\n          visibleItemsCount={visibleItemsCount >= 2 ? visibleItemsCount : 0}\n          onUpdate={this.handleUpdate}\n          renderBeforeItems={\n            <AppNav.Item\n              renderLabel={\n                <ScreenReaderContent>Instructure</ScreenReaderContent>\n              }\n              renderIcon={\n                <IconCommonsLine inline={false} size=\"medium\" color=\"primary\" />\n              }\n              href=\"http://instructure.com\"\n            />\n          }\n          renderAfterItems={\n            <IconButton\n              onClick={() => console.log('Add')}\n              renderIcon={IconPlusSolid}\n              margin=\"0 0 0 x-small\"\n              screenReaderLabel=\"Add something\"\n              withBorder={false}\n              withBackground={false}\n            />\n          }\n          renderTruncateLabel={function () {\n            const hiddenItemsCount = totalItemsCount - visibleItemsCount\n            if (visibleItemsCount >= 2) {\n              return `${hiddenItemsCount} More`\n            } else {\n              return (\n                <span>\n                  <IconHamburgerLine size=\"small\" inline={false} />\n                  <ScreenReaderContent>{`${hiddenItemsCount} More`}</ScreenReaderContent>\n                </span>\n              )\n            }\n          }}\n        >\n          <AppNav.Item\n            renderLabel=\"instructure-ui\"\n            href=\"http://instructure.design\"\n            renderAfter={\n              <Badge\n                type=\"notification\"\n                variant=\"success\"\n                standalone\n                formatOutput={function () {\n                  return (\n                    <ScreenReaderContent>\n                      You have notifications from instructure-ui\n                    </ScreenReaderContent>\n                  )\n                }}\n              />\n            }\n          />\n          <AppNav.Item\n            isSelected\n            renderLabel=\"Canvas\"\n            href=\"https://www.instructure.com/canvas/\"\n          />\n          <AppNav.Item renderLabel=\"Canvas Network\" href=\"https://canvas.net\" />\n          <AppNav.Item\n            renderLabel={() => 'Canvas Community'}\n            href=\"https://community.canvaslms.com/\"\n          />\n          <AppNav.Item\n            renderLabel=\"Bridge\"\n            href=\"https://www.instructure.com/bridge/\"\n          />\n        </AppNav>\n      )\n    }\n  }\n\n  render(<AppNavExample />)\n  ```\n\n- ```js\n  const totalItemsCount = 5\n\n  const AppNavExample = () => {\n    const [visibleItemsCount, setVisibleItemsCount] = useState(totalItemsCount)\n\n    const handleUpdate = ({ visibleItemsCount }) => {\n      setVisibleItemsCount(visibleItemsCount)\n    }\n\n    return (\n      <AppNav\n        screenReaderLabel=\"App navigation\"\n        visibleItemsCount={visibleItemsCount >= 2 ? visibleItemsCount : 0}\n        onUpdate={handleUpdate}\n        renderBeforeItems={\n          <AppNav.Item\n            renderLabel={<ScreenReaderContent>Instructure</ScreenReaderContent>}\n            renderIcon={\n              <IconCommonsLine inline={false} size=\"medium\" color=\"primary\" />\n            }\n            href=\"http://instructure.com\"\n          />\n        }\n        renderAfterItems={\n          <IconButton\n            onClick={() => console.log('Add')}\n            renderIcon={IconPlusSolid}\n            margin=\"0 0 0 x-small\"\n            screenReaderLabel=\"Add something\"\n            withBorder={false}\n            withBackground={false}\n          />\n        }\n        renderTruncateLabel={() => {\n          const hiddenItemsCount = totalItemsCount - visibleItemsCount\n          if (visibleItemsCount >= 2) {\n            return `${hiddenItemsCount} More`\n          } else {\n            return (\n              <span>\n                <IconHamburgerLine size=\"small\" inline={false} />\n                <ScreenReaderContent>{`${hiddenItemsCount} More`}</ScreenReaderContent>\n              </span>\n            )\n          }\n        }}\n      >\n        <AppNav.Item\n          renderLabel=\"instructure-ui\"\n          href=\"http://instructure.design\"\n          renderAfter={\n            <Badge\n              type=\"notification\"\n              variant=\"success\"\n              standalone\n              formatOutput={() => {\n                return (\n                  <ScreenReaderContent>\n                    You have notifications from instructure-ui\n                  </ScreenReaderContent>\n                )\n              }}\n            />\n          }\n        />\n        <AppNav.Item\n          isSelected\n          renderLabel=\"Canvas\"\n          href=\"https://www.instructure.com/canvas/\"\n        />\n        <AppNav.Item renderLabel=\"Canvas Network\" href=\"https://canvas.net\" />\n        <AppNav.Item\n          renderLabel={() => 'Canvas Community'}\n          href=\"https://community.canvaslms.com/\"\n        />\n        <AppNav.Item\n          renderLabel=\"Bridge\"\n          href=\"https://www.instructure.com/bridge/\"\n        />\n      </AppNav>\n    )\n  }\n\n  render(<AppNavExample />)\n  ```\n","displayName":"AppNav","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"renderMenu","docblock":null,"modifiers":[],"params":[{"name":"items","optional":false,"type":{"name":"Array","elements":[{"name":"ComponentElement","elements":[{"name":"intersection","raw":"AppNavItemOwnProps &\nWithStyleProps<AppNavItemTheme, AppNavItemStyle> &\nOtherHTMLAttributes<AppNavItemOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The text to display. If the `icon` prop is used, label text must be wrapped\n   * in `ScreenReaderContent`.\n   */\n  renderLabel: Renderable\n  /**\n   * Content to display after the renderLabel text, such as a badge\n   */\n  renderAfter?: Renderable\n  /**\n   * The visual to display (ex. an Image, Logo, Avatar, or Icon)\n   */\n  renderIcon?: Renderable\n  /**\n   * If the item goes to a new page, pass an href\n   */\n  href?: string\n  /**\n   * If the item does not go to a new page, pass an onClick\n   */\n  onClick?: (event: React.MouseEvent) => void\n  /**\n   * Denotes which item is currently selected\n   */\n  isSelected?: boolean\n  /**\n   * provides a reference to the underlying focusable (`button` or `a`) element\n   */\n  elementRef?: (element: Element | null) => void\n  /**\n   * The element type to render as (will default to `<a>` if href is provided)\n   */\n  as?: AsElementType\n  /**\n   * Specify the mouse cursor to use on :hover.\n   * The `pointer` cursor is used by default.\n   */\n  cursor?: Cursor\n  /**\n   * Disables the link or button visually and functionally\n   */\n  isDisabled?: boolean\n}","signature":{"properties":[{"key":"renderLabel","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"The text to display. If the `icon` prop is used, label text must be wrapped\nin `ScreenReaderContent`."},{"key":"renderAfter","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"Content to display after the renderLabel text, such as a badge"},{"key":"renderIcon","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"The visual to display (ex. an Image, Logo, Avatar, or Icon)"},{"key":"href","value":{"name":"string","required":false},"description":"If the item goes to a new page, pass an href"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"If the item does not go to a new page, pass an onClick"},{"key":"isSelected","value":{"name":"boolean","required":false},"description":"Denotes which item is currently selected"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"provides a reference to the underlying focusable (`button` or `a`) element"},{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"The element type to render as (will default to `<a>` if href is provided)"},{"key":"cursor","value":{"name":"union","raw":"| 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'grab'\n| 'grabbing'\n| 'all-scroll'\n| 'col-resize'\n| 'row-resize'\n| 'n-resize'\n| 'e-resize'\n| 's-resize'\n| 'w-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'ew-resize'\n| 'ns-resize'\n| 'nesw-resize'\n| 'nwse-resize'\n| 'zoom-in'\n| 'zoom-out'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'default'"},{"name":"literal","value":"'none'"},{"name":"literal","value":"'context-menu'"},{"name":"literal","value":"'help'"},{"name":"literal","value":"'pointer'"},{"name":"literal","value":"'progress'"},{"name":"literal","value":"'wait'"},{"name":"literal","value":"'cell'"},{"name":"literal","value":"'crosshair'"},{"name":"literal","value":"'text'"},{"name":"literal","value":"'vertical-text'"},{"name":"literal","value":"'alias'"},{"name":"literal","value":"'copy'"},{"name":"literal","value":"'move'"},{"name":"literal","value":"'no-drop'"},{"name":"literal","value":"'not-allowed'"},{"name":"literal","value":"'grab'"},{"name":"literal","value":"'grabbing'"},{"name":"literal","value":"'all-scroll'"},{"name":"literal","value":"'col-resize'"},{"name":"literal","value":"'row-resize'"},{"name":"literal","value":"'n-resize'"},{"name":"literal","value":"'e-resize'"},{"name":"literal","value":"'s-resize'"},{"name":"literal","value":"'w-resize'"},{"name":"literal","value":"'ne-resize'"},{"name":"literal","value":"'nw-resize'"},{"name":"literal","value":"'se-resize'"},{"name":"literal","value":"'sw-resize'"},{"name":"literal","value":"'ew-resize'"},{"name":"literal","value":"'ns-resize'"},{"name":"literal","value":"'nesw-resize'"},{"name":"literal","value":"'nwse-resize'"},{"name":"literal","value":"'zoom-in'"},{"name":"literal","value":"'zoom-out'"}],"required":false},"description":"Specify the mouse cursor to use on :hover.\nThe `pointer` cursor is used by default."},{"key":"isDisabled","value":{"name":"boolean","required":false},"description":"Disables the link or button visually and functionally"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  fontFamily: Typography['fontFamily']\n  fontSize: string | 0\n  fontWeight: Typography['fontWeightBold']\n  textColor: Colors['contrasts']['blue4570']\n  textColorSelected: Colors['contrasts']['grey125125']\n  height: string | 0\n  padding: Spacing['small']\n  backgroundColor: Colors['contrasts']['white1010']\n}","signature":{"properties":[{"key":"fontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"fontSize","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}},{"key":"fontWeight","value":{"name":"number","raw":"Typography['fontWeightBold']","required":true}},{"key":"textColor","value":{"name":"signature['blue4570']","raw":"Colors['contrasts']['blue4570']","required":true}},{"key":"textColorSelected","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"height","value":{"name":"union","raw":"string | 0","elements":[{"name":"string"},{"name":"literal","value":"0"}],"required":true}},{"key":"padding","value":{"name":"union","raw":"Spacing['small']","required":true}},{"key":"backgroundColor","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"'item' | 'label'","elements":[{"name":"literal","value":"'item'"},{"name":"literal","value":"'label'"}]}],"raw":"ComponentStyle<'item' | 'label'>"}],"raw":"WithStyleProps<AppNavItemTheme, AppNavItemStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The text to display. If the `icon` prop is used, label text must be wrapped\n   * in `ScreenReaderContent`.\n   */\n  renderLabel: Renderable\n  /**\n   * Content to display after the renderLabel text, such as a badge\n   */\n  renderAfter?: Renderable\n  /**\n   * The visual to display (ex. an Image, Logo, Avatar, or Icon)\n   */\n  renderIcon?: Renderable\n  /**\n   * If the item goes to a new page, pass an href\n   */\n  href?: string\n  /**\n   * If the item does not go to a new page, pass an onClick\n   */\n  onClick?: (event: React.MouseEvent) => void\n  /**\n   * Denotes which item is currently selected\n   */\n  isSelected?: boolean\n  /**\n   * provides a reference to the underlying focusable (`button` or `a`) element\n   */\n  elementRef?: (element: Element | null) => void\n  /**\n   * The element type to render as (will default to `<a>` if href is provided)\n   */\n  as?: AsElementType\n  /**\n   * Specify the mouse cursor to use on :hover.\n   * The `pointer` cursor is used by default.\n   */\n  cursor?: Cursor\n  /**\n   * Disables the link or button visually and functionally\n   */\n  isDisabled?: boolean\n}","signature":{"properties":[{"key":"renderLabel","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"The text to display. If the `icon` prop is used, label text must be wrapped\nin `ScreenReaderContent`."},{"key":"renderAfter","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"Content to display after the renderLabel text, such as a badge"},{"key":"renderIcon","value":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false},"description":"The visual to display (ex. an Image, Logo, Avatar, or Icon)"},{"key":"href","value":{"name":"string","required":false},"description":"If the item goes to a new page, pass an href"},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(event: React.MouseEvent) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent"},"name":"event"}],"return":{"name":"void"}},"required":false},"description":"If the item does not go to a new page, pass an onClick"},{"key":"isSelected","value":{"name":"boolean","required":false},"description":"Denotes which item is currently selected"},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"provides a reference to the underlying focusable (`button` or `a`) element"},{"key":"as","value":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}],"required":false},"description":"The element type to render as (will default to `<a>` if href is provided)"},{"key":"cursor","value":{"name":"union","raw":"| 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'grab'\n| 'grabbing'\n| 'all-scroll'\n| 'col-resize'\n| 'row-resize'\n| 'n-resize'\n| 'e-resize'\n| 's-resize'\n| 'w-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'ew-resize'\n| 'ns-resize'\n| 'nesw-resize'\n| 'nwse-resize'\n| 'zoom-in'\n| 'zoom-out'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'default'"},{"name":"literal","value":"'none'"},{"name":"literal","value":"'context-menu'"},{"name":"literal","value":"'help'"},{"name":"literal","value":"'pointer'"},{"name":"literal","value":"'progress'"},{"name":"literal","value":"'wait'"},{"name":"literal","value":"'cell'"},{"name":"literal","value":"'crosshair'"},{"name":"literal","value":"'text'"},{"name":"literal","value":"'vertical-text'"},{"name":"literal","value":"'alias'"},{"name":"literal","value":"'copy'"},{"name":"literal","value":"'move'"},{"name":"literal","value":"'no-drop'"},{"name":"literal","value":"'not-allowed'"},{"name":"literal","value":"'grab'"},{"name":"literal","value":"'grabbing'"},{"name":"literal","value":"'all-scroll'"},{"name":"literal","value":"'col-resize'"},{"name":"literal","value":"'row-resize'"},{"name":"literal","value":"'n-resize'"},{"name":"literal","value":"'e-resize'"},{"name":"literal","value":"'s-resize'"},{"name":"literal","value":"'w-resize'"},{"name":"literal","value":"'ne-resize'"},{"name":"literal","value":"'nw-resize'"},{"name":"literal","value":"'se-resize'"},{"name":"literal","value":"'sw-resize'"},{"name":"literal","value":"'ew-resize'"},{"name":"literal","value":"'ns-resize'"},{"name":"literal","value":"'nesw-resize'"},{"name":"literal","value":"'nwse-resize'"},{"name":"literal","value":"'zoom-in'"},{"name":"literal","value":"'zoom-out'"}],"required":false},"description":"Specify the mouse cursor to use on :hover.\nThe `pointer` cursor is used by default."},{"key":"isDisabled","value":{"name":"boolean","required":false},"description":"Disables the link or button visually and functionally"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"Item"}],"raw":"ComponentElement<AppNavItemProps, Item>"}],"raw":"ComponentElement<AppNavItemProps, Item>[]"}}],"returns":null}],"props":{"screenReaderLabel":{"required":true,"tsType":{"name":"string"},"description":"Screenreader label for the overall navigation"},"debounce":{"required":false,"tsType":{"name":"number"},"description":"The rate (in ms) the component responds to container resizing or\nan update to one of its child items","defaultValue":{"value":"300","computed":false}},"renderBeforeItems":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"Content to display before the navigation items, such as a logo"},"renderAfterItems":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"Content to display after the navigation items, aligned to the far end\nof the navigation"},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","defaultValue":{"value":"'0'","computed":false}},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a reference to the underlying nav element"},"renderTruncateLabel":{"required":false,"tsType":{"name":"union","raw":"| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]},"description":"Customize the text displayed in the menu trigger when links overflow\nthe overall nav width.","defaultValue":{"value":"() => 'More'","computed":false}},"onUpdate":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(visibleItemsCount: { visibleItemsCount: number }) => void","signature":{"arguments":[{"type":{"name":"signature","type":"object","raw":"{ visibleItemsCount: number }","signature":{"properties":[{"key":"visibleItemsCount","value":{"name":"number","required":true}}]}},"name":"visibleItemsCount"}],"return":{"name":"void"}}},"description":"Called whenever the navigation items are updated or the size of\nthe navigation changes. Passes in the `visibleItemsCount` as\na parameter."},"visibleItemsCount":{"required":false,"tsType":{"name":"number"},"description":"Sets the number of navigation items that are visible.","defaultValue":{"value":"0","computed":false}},"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"Only accepts `AppNav.Item` as children","defaultValue":{"value":"null","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-navigation/src/AppNav/index.tsx","extension":".tsx","srcPath":"packages/ui-navigation/src/AppNav/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-navigation/src/AppNav/index.tsx","packageName":"@instructure/ui-navigation","requirePath":"@instructure/ui-navigation/lib/AppNav/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-navigation/src/AppNav/index.tsx').default","esPath":"@instructure/ui-navigation/es/AppNav/index","themePath":"packages/ui-navigation/src/AppNav/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-navigation/src/AppNav/theme.ts","id":"AppNav","title":"AppNav"}