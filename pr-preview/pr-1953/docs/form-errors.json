{"description":"\n# Adding Error Messages to Form Components\n\nInstUI offers a range of form elements and all of them have a similar API to handle error/hint/success messages. These components use the `messages` prop with the following type definition:\n\n```ts\n---\ntype: code\n---\ntype FormMessages = {\n  type:\n    | 'newError'\n    | 'error'\n    | 'hint'\n    | 'success'\n    | 'screenreader-only'\n  text: React.ReactNode\n}[]\n```\n\nSo a basic example would look something like this:\n\n```ts\n---\ntype: example\n---\nconst PasswordExample = () => {\n  const [password, setPassword] = useState('')\n  const messages = password.length < 6\n    ? [{type: 'newError', text: 'Password have to be at least 6 characters long!'}]\n    : []\n  return (\n    <TextInput\n      renderLabel=\"Password\"\n      type=\"password\"\n      messages={messages}\n      onChange={(event, value) => { setPassword(value) }}\n    />\n  )\n}\n\nrender(<PasswordExample/>)\n```\n\nHowever you might have noticed from the type definition that a message can be `error` and `newError` type. This is due to compatibility reasons. `error` is the older type and does not meet accessibility requirements, `newError` (hance the name) is the newer and more accessible format.\n\nWe wanted to allow users to start using the new format without making it mandatory, but after the introductory period `newError` will be deprecated and `error` type will be changed to look and behave the same way.\n\nWith this update we also introduced the \"required asterisk\" which will display an `*` character next to field labels that are required. This update is not opt-in and will apply to **all** InstUI form components so if you were relying on a custom solution for this feature before, you need to remove that to avoid having double asterisks.\n\nHere are examples with different form components:\n\n```ts\n---\ntype: example\n---\nconst Example = () => {\n  const [showError, setShowError] = useState(true)\n  const [showNewError, setShowNewError] = useState(true)\n  const [showLongError, setShowLongError] = useState(false)\n  const [isRequired, setIsRequired] = useState(true)\n\n  const messages = showError\n    ? [{type: showNewError ? 'newError' : 'error', text: showLongError ? 'Long error. Lorem ipsum dolor sit amet consectetur adipisicing elit. Dignissimos voluptas, esse commodi eos facilis voluptatibus harum exercitationem. Et magni est consectetur, eveniet veniam unde! Molestiae labore libero sapiente ad ratione.' : 'Short error message'}]\n    : []\n\n  const handleSettingsChange = (v) => {\n    setShowError(v.includes('showError'))\n    setShowNewError(v.includes('showNewError'))\n    setShowLongError(v.includes('showLongError'))\n    setIsRequired(v.includes('isRequired'))\n  }\n\n  return (\n    <div>\n      <CheckboxGroup\n        name=\"errorOptions\"\n        description=\"Error message options\"\n        onChange={handleSettingsChange}\n        defaultValue={['showError', 'showNewError', 'isRequired']}\n      >\n        <Checkbox label=\"Show error message\" value=\"showError\"/>\n        <Checkbox label=\"Use the new error type\" value=\"showNewError\" />\n        <Checkbox label=\"Use long message\" value=\"showLongError\" />\n        <Checkbox label=\"Make fields required\" value=\"isRequired\" />\n      </CheckboxGroup>\n      <div style={{display: 'flex', gap: '2rem', marginTop: '3rem', flexDirection: 'column'}}>\n\n        <TextInput renderLabel=\"TextInput\" messages={messages} isRequired={isRequired}/>\n\n        <NumberInput renderLabel=\"NumberInput\" messages={messages} isRequired={isRequired}/>\n\n        <TextArea messages={messages} label=\"TextArea\" required={isRequired}/>\n\n        <Checkbox label=\"Checkbox\" isRequired={isRequired} messages={messages}/>\n\n        <Checkbox label={`Checkbox (variant=\"toggle\")`} variant=\"toggle\" isRequired={isRequired} messages={messages}/>\n\n        <CheckboxGroup\n          name=\"CheckboxGroup\"\n          messages={messages}\n          description=\"CheckboxGroup\"\n        >\n          <Checkbox label=\"Checkbox 1\" value=\"checkbox1\"/>\n          <Checkbox label=\"Checkbox 2\"  value=\"checkbox2\"/>\n          <Checkbox label=\"Checkbox 3\" value=\"checkbox3\"/>\n        </CheckboxGroup>\n\n        <RadioInputGroup name=\"radioInputGroup\" description=\"RadioInputGroup\" messages={messages} isRequired={isRequired}>\n          <RadioInput\n            label=\"RadioInput 1\"\n            value=\"radioInput1\"\n          />\n          <RadioInput\n            label=\"RadioInput 2\"\n            value=\"radioInput2\"\n          />\n          <RadioInput\n            label=\"RadioInput 3\"\n            value=\"radioInput3\"\n          />\n        </RadioInputGroup>\n\n        <FileDrop messages={messages} renderLabel=\"FileDrop\" />\n\n        <ColorPicker\n          label=\"ColorPicker\"\n          placeholderText=\"Enter HEX\"\n          isRequired={isRequired}\n          renderMessages={() => messages}\n        />\n\n        <DateTimeInput\n          description={`DateTimeInput (layout=\"column\")`}\n          datePlaceholder=\"Choose a date\"\n          dateRenderLabel=\"Date\"\n          timeRenderLabel=\"Time\"\n          invalidDateTimeMessage=\"Invalid date!\"\n          prevMonthLabel=\"Previous month\"\n          nextMonthLabel=\"Next month\"\n          defaultValue=\"2018-01-18T13:30\"\n          layout=\"columns\"\n          isRequired={isRequired}\n          messages={messages}\n        />\n\n        <DateTimeInput\n          description={`DateTimeInput (layout=\"stacked\")`}\n          datePlaceholder=\"Choose a date\"\n          dateRenderLabel=\"Date\"\n          timeRenderLabel=\"Time\"\n          invalidDateTimeMessage=\"Invalid date!\"\n          prevMonthLabel=\"Previous month\"\n          nextMonthLabel=\"Next month\"\n          defaultValue=\"2018-01-18T13:30\"\n          layout=\"stacked\"\n          isRequired={isRequired}\n          messages={messages}\n        />\n\n      </div>\n    </div>\n  )\n}\n\nrender(<Example/>)\n```\n","title":"Form Errors","category":"Guides","order":7,"relativePath":"docs/guides/form-errors.md","extension":".md","srcPath":"docs/guides/form-errors.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/guides/form-errors.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/guides/form-errors","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/guides/form-errors.md').default","esPath":"@instructure/docs/guides/form-errors","themePath":"docs/guides/form-errors.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/guides/form-errors.md","id":"form-errors"}