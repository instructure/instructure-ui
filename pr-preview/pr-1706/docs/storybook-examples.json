{"description":"\n## Storybook example generation\n\nTools to work with `.examples` files for React components.\n\n### Local Development\n\nAs you develop, you can run an application that displays component examples, documented via a `.examples.js` file in the\n`__examples__` directory for each component.\n\nFrom the root of the `instructure-ui` repo:\n\n1. Run `npm install`\n1. Run `npm run dev:examples`\n1. [http://localhost:9090](http://localhost:9090) should open automatically in your browser\n\n### Configuring examples\n\nGiven a configuration object, `generateComponentExamples` returns an array of generated examples:\n\n##### Parameters\n\n| Param  | Type     | Default     | Description                                                              |\n| ------ | -------- | ----------- | ------------------------------------------------------------------------ |\n| config | `Object` | `undefined` | the generator config object. See `config` section below for more details |\n\n##### Returns\n\n| Type    | Description                                                                                                      |\n| ------- | ---------------------------------------------------------------------------------------------------------------- |\n| `Array` | array of examples broken into sections and pages if configured to do so. See `examples` section for more details |\n\n##### Example config\n\n```js\n---\ntype: code\n---\nexport default {\n  sectionProp: 'variant',\n  maxExamplesPerPage: 50,\n  maxExamples: 200,\n  excludeProps: [],\n  propValues: {\n    variant: ['circular', 'rectangular'],\n    placement: ['top', 'bottom', 'start', 'end'],\n    children: [null, <button>hello</button>, <a href=\"#\">world</a>]\n  },\n  getComponentProps: (props) => ({\n    size: props.variant === 'circular' ? 'large' : 'small'\n  }),\n  getExampleProps: (props) => ({\n    height: props.placement === 'top' ? '50rem' : '10rem'\n  }),\n  getParameters: ({ examples, index }) => {\n    return { delay: 200, viewports: [320, 1200] }\n  }\n}\n```\n\n**The `config` is an object that sets the configuration for the example generation. It has the following properties:**\n\n### sectionProp\n\nA string value used to divide the resulting examples into sections. It should correspond to an enumerated prop in the `Component`\n\n| Type     | Default     |\n| -------- | ----------- |\n| `string` | `undefined` |\n\n### maxExamplesPerPage\n\nSpecifies the max number of examples that can exist in a single page within a section\n\n| Type                   | Default |\n| ---------------------- | ------- |\n| `number` or `function` | `null`  |\n\nexample:\n\n```js\n---\ntype: code\n---\n// providing a number\nmaxExamplesPerPage: 50\n\n// providing a function\nmaxExamplesPerPage: (sectionName) => (sectionName === 'inverse' ? 20 : 50)\n```\n\n##### Parameters\n\n| Param       | Type     | Default     | Description                             |\n| ----------- | -------- | ----------- | --------------------------------------- |\n| sectionName | `string` | `undefined` | the name of the current example section |\n\n##### Returns\n\n| Type     | Description                                       |\n| -------- | ------------------------------------------------- |\n| `number` | a number specifying the maximum examples per page |\n\n### maxExamples\n\nSpecifies the total max number of examples\n\n| Type     | Default |\n| -------- | ------- |\n| `number` | `500`   |\n\n### propValues\n\nAn object with keys that correspond to the component props. Each key has a corresponding\nvalue array. This array contains possible values for that prop.\n\n| Type                                                        | Default     |\n| ----------------------------------------------------------- | ----------- |\n| `object` of keys corresponding to arrays of possible values | `undefined` |\n\nexample:\n\n```js\n---\ntype: code\n---\npropValues: {\n variant: ['circular', 'rectangular'],\n placement: ['top', 'bottom', 'start', 'end'],\n children: [null, <button>hello</button>, <a href=\"#\">world</a>]\n}\n```\n\n### excludeProps\n\nProp keys to exclude from `propValues`. Useful when generating `propValues` with code.\n\n| Type               | Default |\n| ------------------ | ------- |\n| `array of Strings` | `[]`    |\n\nexample:\n\n```js\n---\ntype: code\n---\nexcludeProps: ['readOnly', 'disabled']\n```\n\n### getComponentProps\n\nA function called with the prop combination for the current example. It returns an object\nof props that will be passed into the `renderExample` function as `componentProps`.\n\n| Type       | Default     |\n| ---------- | ----------- |\n| `function` | `undefined` |\n\nexample:\n\n```js\n---\ntype: code\n---\ngetComponentProps: (props) => ({\n  // Change the size prop passed to the component based on the value of\n  // `variant` in the current prop combination\n  size: props.variant === 'circular' ? 'large' : 'small'\n})\n```\n\n##### Parameters\n\n| Param | Type     | Default     | Description                                  |\n| ----- | -------- | ----------- | -------------------------------------------- |\n| props | `Object` | `undefined` | the prop combination for the current example |\n\n##### Returns\n\n| Type     | Description                                                                            |\n| -------- | -------------------------------------------------------------------------------------- |\n| `Object` | a props object that will be passed to the `renderExample` function as `componentProps` |\n\n### getExampleProps\n\nA function called with the prop combination for the current example. It returns an object\nof props that will be passed into the `renderExample` function as `exampleProps`.\n\n| Type       | Default     |\n| ---------- | ----------- |\n| `function` | `undefined` |\n\nexample:\n\n```js\n---\ntype: code\n---\ngetExampleProps: (props) => ({\n  // Change the height prop passed to the example based on the value of\n  // `placement` in the current prop combination\n  height: props.placement === 'top' ? '50rem' : '10rem'\n})\n```\n\n##### Parameters\n\n| Param | Type     | Default     | Description                                  |\n| ----- | -------- | ----------- | -------------------------------------------- |\n| props | `Object` | `undefined` | the prop combination for the current example |\n\n##### Returns\n\n| Type     | Description                                                                          |\n| -------- | ------------------------------------------------------------------------------------ |\n| `Object` | a props object that will be passed to the `renderExample` function as `exampleProps` |\n\n### getParameters\n\nA function called with the examples and index for the current page of examples. It returns an object\nof parameters/meta data for that page of examples (e.g. to be passed in to a visual regression tool like chromatic).\n\n| Type       | Default     |\n| ---------- | ----------- |\n| `function` | `undefined` |\n\nexample:\n\n```js\n---\ntype: code\n---\ngetParameters: ({ examples, index }) => ({\n  // add a delay for the first page of examples only:\n  return index === 1 ? { delay: 200 } : {}\n})\n```\n\n##### Parameters\n\n| Param | Type     | Default     | Description                                |\n| ----- | -------- | ----------- | ------------------------------------------ |\n| props | `Object` | `undefined` | the examples and index of the current page |\n\n##### Returns\n\n| Type     | Description                                                                  |\n| -------- | ---------------------------------------------------------------------------- |\n| `Object` | a parameters object with delay and viewport sizes configuration for the page |\n\n### filter\n\nA function to filter `propValues`, returns `boolean`. If it returns `true` the combination\nis not generated.\n\n| Type       | Default     |\n| ---------- | ----------- |\n| `function` | `undefined` |\n\nexample:\n\n```js\n---\ntype: code\n---\nfilter: (props) => {\n  return (\n    props.type !== 'button' ||\n    (props.textAlign === 'center' && props.display !== 'block')\n  )\n}\n```\n","title":"Storybook example generation","category":"Contributor Guides","order":8,"relativePath":"docs/contributor-docs/storybook-examples.md","extension":".md","srcPath":"docs/contributor-docs/storybook-examples.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/storybook-examples.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/contributor-docs/storybook-examples","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/contributor-docs/storybook-examples.md').default","esPath":"@instructure/docs/contributor-docs/storybook-examples","themePath":"docs/contributor-docs/storybook-examples.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/contributor-docs/storybook-examples.md","id":"storybook-examples"}