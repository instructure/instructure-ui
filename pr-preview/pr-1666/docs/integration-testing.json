{"description":"\n# Real-world component testing\n\nSometimes unit test behaviour doesn't match how our components work in the browser (e.g. no ResizeObserver)\nInstUI uses [Cypress Component Testing](https://docs.cypress.io/guides/component-testing/overview) for these cases. These are located at `instructure-ui/cypress/component/`.\n\n### Running tests\n\nYou can run them from the root with the following command:\n\n```\nnpm run cy:component\n```\n\n### Creating new tests\n\nNew tests should be added under `instructure-ui/cypress/component/[ComponentName].cy.tsx`\n\nCypress tests usually have a structure like this:\n\n```js\n---\ntype: code\n---\nimport React from 'react'\nimport { ComponentToTest } from '../../packages/ui'\nimport '../support/component'\n\ndescribe('<ComponentToTest/>', () => {\n  it('works as intended...', () => {\n    cy.mount(<ComponentToTest />)\n    // rest of the test comes here\n  })\n})\n```\n\nYou can read more about cypress testing from their [docs](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Writing-tests) and their [React Examples](https://docs.cypress.io/guides/component-testing/react/examples).\n\n### Debugging tests\n\nTo run cypress in a non-headless mode, use the following command:\n\n```\nnpx cypress open --component\n```\n\nThis opens a new window and prompts you to choose a browser. After that you can run tests individually, interact with them and check logs.\n\n### Using native system events\n\nSometimes using native events are needed for more accuracy. This can be achieved with [cypress-real-events](https://github.com/dmtrKovalenko/cypress-real-events).\n\nFrom their docs:\n\n> Why? Cypress default events are simulated. That means that all events like cy.click or cy.type are fired from javascript. That's why these events will be untrusted (event.isTrusted will be false) and they can behave a little different from real native events. But for some cases, it can be impossible to use simulated events, for example, to fill a native alert or copy to the clipboard. This plugin solves this problem.\n\nThis packages is added to the project so you can import it and use it like this:\n\n```js\n---\ntype: code\n---\nimport React from 'react'\nimport { Button } from '../../packages/ui'\nimport '../support/component'\nimport 'cypress-real-events'\n\ndescribe('real events testing', () => {\n  it('clicks for real', () => {\n    cy.mount(<Button >click me</Button>)\n    cy.contains('click me').realClick()\n    // rest of the test\n  })\n})\n```\n","title":"Real-world component testing","category":"Testing","order":5,"relativePath":"docs/testing/integration-testing.md","extension":".md","srcPath":"docs/testing/integration-testing.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/testing/integration-testing.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/testing/integration-testing","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/testing/integration-testing.md').default","esPath":"@instructure/docs/testing/integration-testing","themePath":"docs/testing/integration-testing.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/testing/integration-testing.md","id":"integration-testing"}