{"description":"\n`<Tabs />` is an accessible tabbed navigation component. Use the TAB key to focus the component and arrow keys to navigate between panels of content. To set a default panel that should be selected on initial render, set the `selected` prop on that `<Tabs.Panel>`.\n\n- ```js\n  class Example extends React.Component {\n    state = {\n      selectedIndex: 0\n    }\n    handleTabChange = (event, { index }) => {\n      this.setState({\n        selectedIndex: index\n      })\n    }\n    render() {\n      const { selectedIndex } = this.state\n      return (\n        <Tabs\n          margin=\"large auto\"\n          padding=\"medium\"\n          onRequestTabChange={this.handleTabChange}\n        >\n          <Tabs.Panel\n            id=\"tabA\"\n            renderTitle=\"Tab A\"\n            textAlign=\"center\"\n            padding=\"large\"\n            isSelected={selectedIndex === 0}\n          >\n            <Button>Focus Me</Button>\n          </Tabs.Panel>\n          <Tabs.Panel id=\"tabB\" renderTitle=\"Disabled Tab\" isDisabled>\n            {lorem.paragraphs()}\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabC\"\n            renderTitle=\"Tab C\"\n            isSelected={selectedIndex === 2}\n          >\n            {lorem.paragraphs()}\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabD\"\n            renderTitle=\"Tab D\"\n            isSelected={selectedIndex === 3}\n          >\n            {lorem.paragraphs()}\n          </Tabs.Panel>\n        </Tabs>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [selectedIndex, setSelectedIndex] = useState(0)\n\n    const handleTabChange = (event, { index }) => {\n      setSelectedIndex(index)\n    }\n\n    return (\n      <Tabs\n        margin=\"large auto\"\n        padding=\"medium\"\n        onRequestTabChange={handleTabChange}\n      >\n        <Tabs.Panel\n          id=\"tabA\"\n          renderTitle=\"Tab A\"\n          textAlign=\"center\"\n          padding=\"large\"\n          isSelected={selectedIndex === 0}\n        >\n          <Button>Focus Me</Button>\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabB\" renderTitle=\"Disabled Tab\" isDisabled>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabC\"\n          renderTitle=\"Tab C\"\n          isSelected={selectedIndex === 2}\n        >\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabD\"\n          renderTitle=\"Tab D\"\n          isSelected={selectedIndex === 3}\n        >\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n      </Tabs>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Secondary Tabs\n\n- ```js\n  class Example extends React.Component {\n    state = {\n      selectedIndex: 2\n    }\n    handleTabChange = (event, { index }) => {\n      this.setState({\n        selectedIndex: index\n      })\n    }\n    render() {\n      const { selectedIndex } = this.state\n      return (\n        <Tabs\n          variant=\"secondary\"\n          onRequestTabChange={this.handleTabChange}\n          minHeight=\"10rem\"\n          maxHeight=\"10rem\"\n        >\n          <Tabs.Panel renderTitle=\"First Tab\" isSelected={selectedIndex === 0}>\n            Hello World\n          </Tabs.Panel>\n          <Tabs.Panel renderTitle=\"Disabled Tab\" isDisabled>\n            {lorem.paragraphs()}\n          </Tabs.Panel>\n          <Tabs.Panel renderTitle=\"Third Tab\" isSelected={selectedIndex === 2}>\n            {lorem.paragraphs()}\n          </Tabs.Panel>\n          <Tabs.Panel renderTitle=\"Fourth Tab\" isSelected={selectedIndex === 3}>\n            {lorem.paragraphs()}\n          </Tabs.Panel>\n        </Tabs>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [selectedIndex, setSelectedIndex] = useState(2)\n\n    const handleTabChange = (event, { index }) => {\n      setSelectedIndex(index)\n    }\n\n    return (\n      <Tabs\n        variant=\"secondary\"\n        onRequestTabChange={handleTabChange}\n        minHeight=\"10rem\"\n        maxHeight=\"10rem\"\n      >\n        <Tabs.Panel renderTitle=\"First Tab\" isSelected={selectedIndex === 0}>\n          Hello World\n        </Tabs.Panel>\n        <Tabs.Panel renderTitle=\"Disabled Tab\" isDisabled>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n        <Tabs.Panel renderTitle=\"Third Tab\" isSelected={selectedIndex === 2}>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n        <Tabs.Panel renderTitle=\"Fourth Tab\" isSelected={selectedIndex === 3}>\n          {lorem.paragraphs()}\n        </Tabs.Panel>\n      </Tabs>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Handling Tab overflow\n\nBy default, `<Tabs />` will stack each individual `<Tab />` if there isn't enough horizontal\nspace to display them all inline. For a more compact tab navigation, set `tabOverflow` to\n`scroll`, which allows the Tabs to scroll horizontally.\n\n- ```js\n  class Example extends React.Component {\n    state = {\n      selectedIndex: 4\n    }\n    handleTabChange = (event, { index }) => {\n      this.setState({\n        selectedIndex: index\n      })\n    }\n    render() {\n      const { selectedIndex } = this.state\n      return (\n        <Tabs\n          margin=\"large auto\"\n          padding=\"medium\"\n          onRequestTabChange={this.handleTabChange}\n          tabOverflow=\"scroll\"\n          maxWidth=\"20rem\"\n        >\n          <Tabs.Panel\n            id=\"tabA\"\n            renderTitle=\"Tab A\"\n            isSelected={selectedIndex === 0}\n          >\n            {lorem.sentence()}\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabB\"\n            renderTitle=\"Tab B\"\n            isSelected={selectedIndex === 1}\n          >\n            {lorem.sentence()}\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabC\"\n            renderTitle=\"Tab C\"\n            isSelected={selectedIndex === 2}\n          >\n            {lorem.sentence()}\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabD\"\n            renderTitle=\"Tab D\"\n            isSelected={selectedIndex === 3}\n          >\n            {lorem.sentence()}\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabE\"\n            renderTitle=\"Tab E\"\n            isSelected={selectedIndex === 4}\n          >\n            {lorem.sentence()}\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabF\"\n            renderTitle=\"Tab F\"\n            isSelected={selectedIndex === 5}\n          >\n            {lorem.sentence()}\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabG\"\n            renderTitle=\"Tab G\"\n            isSelected={selectedIndex === 6}\n          >\n            {lorem.sentence()}\n          </Tabs.Panel>\n        </Tabs>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [selectedIndex, setSelectedIndex] = useState(4)\n\n    const handleTabChange = (event, { index }) => {\n      setSelectedIndex(index)\n    }\n\n    return (\n      <Tabs\n        margin=\"large auto\"\n        padding=\"medium\"\n        onRequestTabChange={handleTabChange}\n        tabOverflow=\"scroll\"\n        maxWidth=\"20rem\"\n      >\n        <Tabs.Panel\n          id=\"tabA\"\n          renderTitle=\"Tab A\"\n          isSelected={selectedIndex === 0}\n        >\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabB\"\n          renderTitle=\"Tab B\"\n          isSelected={selectedIndex === 1}\n        >\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabC\"\n          renderTitle=\"Tab C\"\n          isSelected={selectedIndex === 2}\n        >\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabD\"\n          renderTitle=\"Tab D\"\n          isSelected={selectedIndex === 3}\n        >\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabE\"\n          renderTitle=\"Tab E\"\n          isSelected={selectedIndex === 4}\n        >\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabF\"\n          renderTitle=\"Tab F\"\n          isSelected={selectedIndex === 5}\n        >\n          {lorem.sentence()}\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabG\"\n          renderTitle=\"Tab G\"\n          isSelected={selectedIndex === 6}\n        >\n          {lorem.sentence()}\n        </Tabs.Panel>\n      </Tabs>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Controlling the size and the spacing\n\nTo restrict the width of `<Tabs />`, use the `maxWidth` prop. Add space around the entire component using the `margin` prop. Adjust the padding around the panel content via `padding` (default is `small`) on each `<Tabs.Panel>`.\n\nSet the height of the Tabs component with the `fixHeight` property (set to '100%' to fill out it's parent element). You can also restrict the height of the **panels** using the `minHeight` and `maxHeight` properties (they don't work if you set `fixHeight` on the whole Tabs component).\n\nFinally, switch the text alignment of the panel content with `textAlign`.\n\n- ```js\n  class Example extends React.Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        selectedIndex: 0,\n        heightOption: 'fixHeight: 100%'\n      }\n\n      this.heightOptions = {\n        ['fixHeight: 100%']: { fixHeight: '100%' },\n        ['fixHeight: 15rem']: { fixHeight: '15rem' },\n        ['minHeight: 17rem']: { minHeight: '17rem' },\n        ['maxHeight: 10rem']: { maxHeight: '10rem' }\n      }\n    }\n\n    handleTabChange = (event, { index }) => {\n      this.setState({\n        selectedIndex: index\n      })\n    }\n\n    handleHeightOptionSelect = (e, heightOption) => {\n      this.setState({ heightOption })\n    }\n\n    render() {\n      const { selectedIndex, heightOption } = this.state\n      const { heightOptions } = this\n\n      const containerProps = {\n        as: 'div',\n        ...(heightOption.includes('fixHeight') && {\n          height: '22rem',\n          withVisualDebug: true\n        })\n      }\n\n      return (\n        <>\n          <View display=\"block\" margin=\"none none medium\">\n            <RadioInputGroup\n              name=\"tabsHeightOptions\"\n              defaultValue=\"fixHeight: 100%\"\n              description={\n                <ScreenReaderContent>Tabs height selector</ScreenReaderContent>\n              }\n              variant=\"toggle\"\n              onChange={this.handleHeightOptionSelect}\n            >\n              {Object.keys(heightOptions).map((heightOption) => (\n                <RadioInput\n                  key={heightOption}\n                  label={heightOption}\n                  value={heightOption}\n                />\n              ))}\n            </RadioInputGroup>\n          </View>\n\n          <View {...containerProps}>\n            <Tabs\n              margin=\"large auto\"\n              padding=\"medium\"\n              onRequestTabChange={this.handleTabChange}\n              {...heightOptions[heightOption]}\n            >\n              <Tabs.Panel\n                id=\"tabA\"\n                renderTitle=\"Tab A\"\n                textAlign=\"center\"\n                padding=\"large\"\n                iSelected={selectedIndex === 0}\n              >\n                <Button>Focus Me</Button>\n              </Tabs.Panel>\n              <Tabs.Panel id=\"tabB\" renderTitle=\"Disabled Tab\" isDisabled>\n                {lorem.paragraphs()}\n              </Tabs.Panel>\n              <Tabs.Panel\n                id=\"tabC\"\n                renderTitle=\"Tab C\"\n                isSelected={selectedIndex === 2}\n              >\n                {lorem.paragraphs()}\n              </Tabs.Panel>\n              <Tabs.Panel\n                id=\"tabD\"\n                renderTitle=\"Tab D\"\n                isSelected={selectedIndex === 3}\n              >\n                {lorem.paragraphs()}\n              </Tabs.Panel>\n            </Tabs>\n          </View>\n        </>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [selectedIndex, setSelectedIndex] = useState(0)\n    const [heightOption, setHeightOption] = useState('fixHeight: 100%')\n\n    const heightOptions = {\n      ['fixHeight: 100%']: { fixHeight: '100%' },\n      ['fixHeight: 15rem']: { fixHeight: '15rem' },\n      ['minHeight: 17rem']: { minHeight: '17rem' },\n      ['maxHeight: 10rem']: { maxHeight: '10rem' }\n    }\n\n    const handleTabChange = (event, { index }) => {\n      setSelectedIndex(index)\n    }\n\n    const handleHeightOptionSelect = (e, heightOption) => {\n      setHeightOption(heightOption)\n    }\n\n    const containerProps = {\n      as: 'div',\n      ...(heightOption.includes('fixHeight') && {\n        height: '22rem',\n        withVisualDebug: true\n      })\n    }\n\n    return (\n      <>\n        <View display=\"block\" margin=\"none none medium\">\n          <RadioInputGroup\n            name=\"tabsHeightOptions\"\n            defaultValue=\"fixHeight: 100%\"\n            description={\n              <ScreenReaderContent>Tabs height selector</ScreenReaderContent>\n            }\n            variant=\"toggle\"\n            onChange={handleHeightOptionSelect}\n          >\n            {Object.keys(heightOptions).map((heightOption) => (\n              <RadioInput\n                key={heightOption}\n                label={heightOption}\n                value={heightOption}\n              />\n            ))}\n          </RadioInputGroup>\n        </View>\n\n        <View {...containerProps}>\n          <Tabs\n            margin=\"large auto\"\n            padding=\"medium\"\n            onRequestTabChange={handleTabChange}\n            {...heightOptions[heightOption]}\n          >\n            <Tabs.Panel\n              id=\"tabA\"\n              renderTitle=\"Tab A\"\n              textAlign=\"center\"\n              padding=\"large\"\n              isSelected={selectedIndex === 0}\n            >\n              <Button>Focus Me</Button>\n            </Tabs.Panel>\n            <Tabs.Panel id=\"tabB\" renderTitle=\"Disabled Tab\" isDisabled>\n              {lorem.paragraphs()}\n            </Tabs.Panel>\n            <Tabs.Panel\n              id=\"tabC\"\n              renderTitle=\"Tab C\"\n              isSelected={selectedIndex === 2}\n            >\n              {lorem.paragraphs()}\n            </Tabs.Panel>\n            <Tabs.Panel\n              id=\"tabD\"\n              renderTitle=\"Tab D\"\n              isSelected={selectedIndex === 3}\n            >\n              {lorem.paragraphs()}\n            </Tabs.Panel>\n          </Tabs>\n        </View>\n      </>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Support for dynamic content with active panel\n\nMarking one of the `<Tabs.Panel>` as `active` will render that panel's content in all the panels. This is useful for dynamic content rendering: the panel area can be used as a container, what routing libraries, such as React Router, can use to render their children elements into.\n\n- ```js\n  class Outlet extends React.Component {\n    state = {\n      show: false\n    }\n\n    componentDidMount() {\n      setTimeout(() => this.setState({ show: true }), 2000)\n    }\n\n    render() {\n      return (\n        <div>\n          <Heading level=\"h1\" as=\"h1\" margin=\"0 0 x-small\">\n            {this.state.show ? 'Hello Developer' : 'Simulating network call...'}\n          </Heading>\n          {this.state.show ? (\n            lorem.paragraphs()\n          ) : (\n            <Spinner renderTitle=\"Loading\" size=\"medium\" />\n          )}\n        </div>\n      )\n    }\n  }\n\n  class Example extends React.Component {\n    state = {\n      selectedIndex: 0\n    }\n    handleTabChange = (event, { index }) => {\n      this.setState({\n        selectedIndex: index\n      })\n    }\n\n    render() {\n      const { selectedIndex } = this.state\n      return (\n        <Tabs\n          margin=\"large auto\"\n          padding=\"medium\"\n          onRequestTabChange={this.handleTabChange}\n        >\n          <Tabs.Panel\n            id=\"tabA\"\n            renderTitle=\"Tab A\"\n            textAlign=\"center\"\n            padding=\"large\"\n            isSelected={selectedIndex === 0}\n            active\n          >\n            <Outlet />\n          </Tabs.Panel>\n          <Tabs.Panel id=\"tabB\" renderTitle=\"Disabled Tab\" isDisabled />\n          <Tabs.Panel\n            id=\"tabC\"\n            renderTitle=\"Tab C\"\n            isSelected={selectedIndex === 2}\n          />\n          <Tabs.Panel\n            id=\"tabD\"\n            renderTitle=\"Tab D\"\n            isSelected={selectedIndex === 3}\n          />\n        </Tabs>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Outlet = () => {\n    const [show, setShow] = useState(false)\n\n    useEffect(() => {\n      const timer = setTimeout(() => setShow(true), 2000)\n      return () => clearTimeout(timer)\n    }, [])\n\n    return (\n      <div>\n        <Heading level=\"h1\" as=\"h1\" margin=\"0 0 x-small\">\n          {show ? 'Hello Developer' : 'Simulating network call...'}\n        </Heading>\n        {show ? (\n          lorem.paragraphs()\n        ) : (\n          <Spinner renderTitle=\"Loading\" size=\"medium\" />\n        )}\n      </div>\n    )\n  }\n\n  const Example = () => {\n    const [selectedIndex, setSelectedIndex] = useState(0)\n\n    const handleTabChange = (event, { index }) => {\n      setSelectedIndex(index)\n    }\n\n    return (\n      <Tabs\n        margin=\"large auto\"\n        padding=\"medium\"\n        onRequestTabChange={handleTabChange}\n      >\n        <Tabs.Panel\n          id=\"tabA\"\n          renderTitle=\"Tab A\"\n          textAlign=\"center\"\n          padding=\"large\"\n          isSelected={selectedIndex === 0}\n          active\n        >\n          <Outlet />\n        </Tabs.Panel>\n        <Tabs.Panel id=\"tabB\" renderTitle=\"Disabled Tab\" isDisabled />\n        <Tabs.Panel\n          id=\"tabC\"\n          renderTitle=\"Tab C\"\n          isSelected={selectedIndex === 2}\n        />\n        <Tabs.Panel\n          id=\"tabD\"\n          renderTitle=\"Tab D\"\n          isSelected={selectedIndex === 3}\n        />\n      </Tabs>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Persisting the selected tab\n\nIf you need to persist the rendered content of the tabpanels between tabbing, you can set the `unmountOnExit` prop to `false` on the `<Tabs.Panel>` component. It works case by case, so you can set it to `false` only on the tabpanels you want to persist.\n\n- ```js\n  class Counter extends React.Component {\n    state = {\n      counter: 0\n    }\n    handleIncrement = () => {\n      this.setState({\n        counter: this.state.counter + 1\n      })\n    }\n\n    render() {\n      return (\n        <div>\n          <Button onClick={this.handleIncrement}>Increment</Button>\n          <hr />\n          <Text>{this.state.counter}</Text>\n        </div>\n      )\n    }\n  }\n  class Example extends React.Component {\n    state = {\n      selectedIndex: 0\n    }\n    handleTabChange = (event, { index }) => {\n      this.setState({\n        selectedIndex: index\n      })\n    }\n    render() {\n      const { selectedIndex } = this.state\n      return (\n        <Tabs\n          margin=\"large auto\"\n          padding=\"medium\"\n          onRequestTabChange={this.handleTabChange}\n        >\n          <Tabs.Panel\n            id=\"tabA\"\n            renderTitle=\"I will persist\"\n            textAlign=\"center\"\n            padding=\"large\"\n            isSelected={selectedIndex === 0}\n            unmountOnExit={false}\n          >\n            <Counter />\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabB\"\n            renderTitle=\"I will unmount\"\n            isSelected={selectedIndex === 1}\n            textAlign=\"center\"\n            padding=\"large\"\n          >\n            <Counter />\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabC\"\n            renderTitle=\"Tab C\"\n            isSelected={selectedIndex === 2}\n          >\n            Tab C\n          </Tabs.Panel>\n          <Tabs.Panel\n            id=\"tabD\"\n            renderTitle=\"Tab D\"\n            isSelected={selectedIndex === 3}\n          >\n            Tab D\n          </Tabs.Panel>\n        </Tabs>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Counter = () => {\n    const [counter, setCounter] = useState(0)\n\n    const handleIncrement = () => {\n      setCounter(counter + 1)\n    }\n\n    return (\n      <div>\n        <Button onClick={handleIncrement}>Increment</Button>\n        <hr />\n        <Text>{counter}</Text>\n      </div>\n    )\n  }\n\n  const Example = () => {\n    const [selectedIndex, setSelectedIndex] = useState(0)\n\n    const handleTabChange = (event, { index }) => {\n      setSelectedIndex(index)\n    }\n\n    return (\n      <Tabs\n        margin=\"large auto\"\n        padding=\"medium\"\n        onRequestTabChange={handleTabChange}\n      >\n        <Tabs.Panel\n          id=\"tabA\"\n          renderTitle=\"I will persist\"\n          textAlign=\"center\"\n          padding=\"large\"\n          isSelected={selectedIndex === 0}\n          unmountOnExit={false}\n        >\n          <Counter />\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabB\"\n          renderTitle=\"I will unmount\"\n          isSelected={selectedIndex === 1}\n          textAlign=\"center\"\n          padding=\"large\"\n        >\n          <Counter />\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabC\"\n          renderTitle=\"Tab C\"\n          isSelected={selectedIndex === 2}\n        >\n          Tab C\n        </Tabs.Panel>\n        <Tabs.Panel\n          id=\"tabD\"\n          renderTitle=\"Tab D\"\n          isSelected={selectedIndex === 3}\n        >\n          Tab D\n        </Tabs.Panel>\n      </Tabs>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Title should be a single row above content</Figure.Item>\n    <Figure.Item>TabButton content should be succinct, preferably one word</Figure.Item>\n    <Figure.Item>Use title case</Figure.Item>\n    <Figure.Item>Use default variant when a single Tabs component exists on the page</Figure.Item>\n    <Figure.Item>Ensure each Tablist.Panel content is mutually exclusive of the others’</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Exceed 20 characters including spaces for the title</Figure.Item>\n    <Figure.Item>Exceed 5 tabs</Figure.Item>\n    <Figure.Item>Use avatars, pills, icons, etc in the TabButton</Figure.Item>\n    <Figure.Item>Use `tabOverflow=\"scroll\"` with `secondary` Tabs</Figure.Item>\n    <Figure.Item>Nest tabbed content within a tab</Figure.Item>\n    <Figure.Item>Align tabs to the center of the page</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Tabs","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"startScrollOverflow","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"cancelScrollOverflow","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getOverlayWidth","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"showActiveTabIfOverlayed","docblock":null,"modifiers":[],"params":[{"name":"activeTabEl","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"handleTabClick","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":null},{"name":"{ index }","optional":false,"type":null}],"returns":null},{"name":"handleTabKeyDown","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":null},{"name":"{ index }","optional":false,"type":null}],"returns":null},{"name":"handleResize","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"getNextTab","docblock":null,"modifiers":[],"params":[{"name":"startIndex","optional":false,"type":{"name":"number"}},{"name":"step","optional":false,"type":{"name":"union","raw":"-1 | 0 | 1","elements":[{"name":"literal","value":"-1"},{"name":"literal","value":"0"},{"name":"literal","value":"1"}]}}],"returns":{"type":{"name":"signature","type":"object","raw":"{ index: number; id?: string }","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"id","value":{"name":"string","required":false}}]}}}},{"name":"fireOnChange","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]}},{"name":"{ index, id }: { index: number; id?: string }","optional":false,"type":{"name":"signature","type":"object","raw":"{ index: number; id?: string }","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"id","value":{"name":"string","required":false}}]}}}],"returns":null},{"name":"createTab","docblock":null,"modifiers":[],"params":[{"name":"index","optional":false,"type":{"name":"number"}},{"name":"generatedId","optional":false,"type":{"name":"string"}},{"name":"selected","optional":false,"type":{"name":"boolean"}},{"name":"panel","optional":false,"type":{"name":"ComponentElement","elements":[{"name":"intersection","raw":"TabsPanelOwnProps &\nWithStyleProps<TabsPanelTheme, TabsPanelStyle> &\nOtherHTMLAttributes<TabsPanelOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The content that will be rendered in the corresponding <Tab /> and will label\n   * this `<Tabs.Panel />` for screen readers\n   */\n  renderTitle: React.ReactNode | (() => React.ReactNode)\n  children?: React.ReactNode\n  variant?: 'default' | 'secondary'\n  isSelected?: boolean\n  isDisabled?: boolean\n  maxHeight?: string | number\n  minHeight?: string | number\n  id?: string\n  labelledBy?: string\n  padding?: Spacing\n  textAlign?: 'start' | 'center' | 'end'\n  /**\n   * provides a reference to the underlying html root element\n   */\n  elementRef?: (element: HTMLDivElement | null) => void\n  /**\n   * Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\n   * for all the `<Tabs.Panel />`s.\n   */\n  active?: boolean\n  /**\n   * When set to false, the tabPanel only will be hidden, but not dismounted when not active\n   */\n  unmountOnExit?: boolean\n}","signature":{"properties":[{"key":"renderTitle","value":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}],"required":true},"description":"The content that will be rendered in the corresponding <Tab /> and will label\nthis `<Tabs.Panel />` for screen readers"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false}},{"key":"variant","value":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}],"required":false}},{"key":"isSelected","value":{"name":"boolean","required":false}},{"key":"isDisabled","value":{"name":"boolean","required":false}},{"key":"maxHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"minHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"id","value":{"name":"string","required":false}},{"key":"labelledBy","value":{"name":"string","required":false}},{"key":"padding","value":{"name":"Spacing","required":false}},{"key":"textAlign","value":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}],"required":false}},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"provides a reference to the underlying html root element"},{"key":"active","value":{"name":"boolean","required":false},"description":"Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\nfor all the `<Tabs.Panel />`s."},{"key":"unmountOnExit","value":{"name":"boolean","required":false},"description":"When set to false, the tabPanel only will be hidden, but not dismounted when not active"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  fontSize: Typography['fontSizeMedium']\n  fontFamily: Typography['fontFamily']\n  fontWeight: Typography['fontWeightNormal']\n  lineHeight: Typography['lineHeight']\n  color: Colors['contrasts']['grey125125']\n  background: Colors['contrasts']['white1010']\n  borderColor: Colors['contrasts']['grey1424']\n  borderWidth: Border['widthSmall']\n  borderStyle: Border['style']\n  defaultOverflowY: string\n}","signature":{"properties":[{"key":"fontSize","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"fontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"fontWeight","value":{"name":"number","raw":"Typography['fontWeightNormal']","required":true}},{"key":"lineHeight","value":{"name":"union","raw":"Typography['lineHeight']","required":true}},{"key":"color","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"background","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"borderColor","value":{"name":"signature['grey1424']","raw":"Colors['contrasts']['grey1424']","required":true}},{"key":"borderWidth","value":{"name":"union","raw":"Border['widthSmall']","required":true}},{"key":"borderStyle","value":{"name":"string","raw":"Border['style']","required":true}},{"key":"defaultOverflowY","value":{"name":"string","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"'panel' | 'content'","elements":[{"name":"literal","value":"'panel'"},{"name":"literal","value":"'content'"}]}],"raw":"ComponentStyle<'panel' | 'content'>"}],"raw":"WithStyleProps<TabsPanelTheme, TabsPanelStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The content that will be rendered in the corresponding <Tab /> and will label\n   * this `<Tabs.Panel />` for screen readers\n   */\n  renderTitle: React.ReactNode | (() => React.ReactNode)\n  children?: React.ReactNode\n  variant?: 'default' | 'secondary'\n  isSelected?: boolean\n  isDisabled?: boolean\n  maxHeight?: string | number\n  minHeight?: string | number\n  id?: string\n  labelledBy?: string\n  padding?: Spacing\n  textAlign?: 'start' | 'center' | 'end'\n  /**\n   * provides a reference to the underlying html root element\n   */\n  elementRef?: (element: HTMLDivElement | null) => void\n  /**\n   * Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\n   * for all the `<Tabs.Panel />`s.\n   */\n  active?: boolean\n  /**\n   * When set to false, the tabPanel only will be hidden, but not dismounted when not active\n   */\n  unmountOnExit?: boolean\n}","signature":{"properties":[{"key":"renderTitle","value":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}],"required":true},"description":"The content that will be rendered in the corresponding <Tab /> and will label\nthis `<Tabs.Panel />` for screen readers"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false}},{"key":"variant","value":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}],"required":false}},{"key":"isSelected","value":{"name":"boolean","required":false}},{"key":"isDisabled","value":{"name":"boolean","required":false}},{"key":"maxHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"minHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"id","value":{"name":"string","required":false}},{"key":"labelledBy","value":{"name":"string","required":false}},{"key":"padding","value":{"name":"Spacing","required":false}},{"key":"textAlign","value":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}],"required":false}},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"provides a reference to the underlying html root element"},{"key":"active","value":{"name":"boolean","required":false},"description":"Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\nfor all the `<Tabs.Panel />`s."},{"key":"unmountOnExit","value":{"name":"boolean","required":false},"description":"When set to false, the tabPanel only will be hidden, but not dismounted when not active"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"Panel"}],"raw":"ComponentElement<TabsPanelProps, Panel>","alias":"PanelChild"}}],"returns":{"type":{"name":"ComponentElement","elements":[{"name":"intersection","raw":"TabsTabOwnProps &\nWithStyleProps<TabsTabTheme, TabsTabStyle> &\nOtherHTMLAttributes<TabsTabOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  variant?: 'default' | 'secondary'\n  id: string\n  index: number\n  controls: string\n  isDisabled?: boolean\n  isSelected?: boolean\n  onClick?: (\n    event: React.MouseEvent<ViewOwnProps>,\n    tabData: { index: number; id: string }\n  ) => void\n  onKeyDown?: (\n    event: React.KeyboardEvent<ViewOwnProps>,\n    tabData: { index: number; id: string }\n  ) => void\n  children?: Renderable\n  /**\n   * Whether tabOverflow prop in Tabs is set to 'scroll'.\n   */\n  isOverflowScroll?: boolean\n}","signature":{"properties":[{"key":"variant","value":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}],"required":false}},{"key":"id","value":{"name":"string","required":true}},{"key":"index","value":{"name":"number","required":true}},{"key":"controls","value":{"name":"string","required":true}},{"key":"isDisabled","value":{"name":"boolean","required":false}},{"key":"isSelected","value":{"name":"boolean","required":false}},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps>,\n  tabData: { index: number; id: string }\n) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ index: number; id: string }","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"id","value":{"name":"string","required":true}}]}},"name":"tabData"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewOwnProps>,\n  tabData: { index: number; id: string }\n) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ index: number; id: string }","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"id","value":{"name":"string","required":true}}]}},"name":"tabData"}],"return":{"name":"void"}},"required":false}},{"key":"children","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false}},{"key":"isOverflowScroll","value":{"name":"boolean","required":false},"description":"Whether tabOverflow prop in Tabs is set to 'scroll'."}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  fontFamily: Typography['fontFamily']\n  fontWeight: Typography['fontWeightNormal']\n  lineHeight: Typography['lineHeightCondensed']\n  fontSize: Typography['fontSizeMedium']\n  defaultColor: Colors['contrasts']['grey125125']\n  defaultHoverBorderColor: Colors['contrasts']['grey1214']\n  defaultSelectedBorderColor: Colors['contrasts']['blue4570']\n  secondaryColor: Colors['contrasts']['grey125125']\n  secondarySelectedBackground: Colors['contrasts']['white1010']\n  secondarySelectedBorderColor: Colors['contrasts']['grey1214']\n  zIndex: Stacking['above']\n}","signature":{"properties":[{"key":"fontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"fontWeight","value":{"name":"number","raw":"Typography['fontWeightNormal']","required":true}},{"key":"lineHeight","value":{"name":"union","raw":"Typography['lineHeightCondensed']","required":true}},{"key":"fontSize","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"defaultColor","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"defaultHoverBorderColor","value":{"name":"signature['grey1214']","raw":"Colors['contrasts']['grey1214']","required":true}},{"key":"defaultSelectedBorderColor","value":{"name":"signature['blue4570']","raw":"Colors['contrasts']['blue4570']","required":true}},{"key":"secondaryColor","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"secondarySelectedBackground","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"secondarySelectedBorderColor","value":{"name":"signature['grey1214']","raw":"Colors['contrasts']['grey1214']","required":true}},{"key":"zIndex","value":{"name":"number","raw":"Stacking['above']","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"literal","value":"'tab'"}],"raw":"ComponentStyle<'tab'>"}],"raw":"WithStyleProps<TabsTabTheme, TabsTabStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  variant?: 'default' | 'secondary'\n  id: string\n  index: number\n  controls: string\n  isDisabled?: boolean\n  isSelected?: boolean\n  onClick?: (\n    event: React.MouseEvent<ViewOwnProps>,\n    tabData: { index: number; id: string }\n  ) => void\n  onKeyDown?: (\n    event: React.KeyboardEvent<ViewOwnProps>,\n    tabData: { index: number; id: string }\n  ) => void\n  children?: Renderable\n  /**\n   * Whether tabOverflow prop in Tabs is set to 'scroll'.\n   */\n  isOverflowScroll?: boolean\n}","signature":{"properties":[{"key":"variant","value":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}],"required":false}},{"key":"id","value":{"name":"string","required":true}},{"key":"index","value":{"name":"number","required":true}},{"key":"controls","value":{"name":"string","required":true}},{"key":"isDisabled","value":{"name":"boolean","required":false}},{"key":"isSelected","value":{"name":"boolean","required":false}},{"key":"onClick","value":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps>,\n  tabData: { index: number; id: string }\n) => void","signature":{"arguments":[{"type":{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ index: number; id: string }","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"id","value":{"name":"string","required":true}}]}},"name":"tabData"}],"return":{"name":"void"}},"required":false}},{"key":"onKeyDown","value":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewOwnProps>,\n  tabData: { index: number; id: string }\n) => void","signature":{"arguments":[{"type":{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ index: number; id: string }","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"id","value":{"name":"string","required":true}}]}},"name":"tabData"}],"return":{"name":"void"}},"required":false}},{"key":"children","value":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}],"required":false}},{"key":"isOverflowScroll","value":{"name":"boolean","required":false},"description":"Whether tabOverflow prop in Tabs is set to 'scroll'."}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"any"}],"raw":"ComponentElement<TabsTabProps, any>"}}},{"name":"clonePanel","docblock":null,"modifiers":[],"params":[{"name":"index","optional":false,"type":{"name":"number"}},{"name":"generatedId","optional":false,"type":{"name":"string"}},{"name":"selected","optional":false,"type":{"name":"boolean"}},{"name":"panel","optional":false,"type":{"name":"ComponentElement","elements":[{"name":"intersection","raw":"TabsPanelOwnProps &\nWithStyleProps<TabsPanelTheme, TabsPanelStyle> &\nOtherHTMLAttributes<TabsPanelOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The content that will be rendered in the corresponding <Tab /> and will label\n   * this `<Tabs.Panel />` for screen readers\n   */\n  renderTitle: React.ReactNode | (() => React.ReactNode)\n  children?: React.ReactNode\n  variant?: 'default' | 'secondary'\n  isSelected?: boolean\n  isDisabled?: boolean\n  maxHeight?: string | number\n  minHeight?: string | number\n  id?: string\n  labelledBy?: string\n  padding?: Spacing\n  textAlign?: 'start' | 'center' | 'end'\n  /**\n   * provides a reference to the underlying html root element\n   */\n  elementRef?: (element: HTMLDivElement | null) => void\n  /**\n   * Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\n   * for all the `<Tabs.Panel />`s.\n   */\n  active?: boolean\n  /**\n   * When set to false, the tabPanel only will be hidden, but not dismounted when not active\n   */\n  unmountOnExit?: boolean\n}","signature":{"properties":[{"key":"renderTitle","value":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}],"required":true},"description":"The content that will be rendered in the corresponding <Tab /> and will label\nthis `<Tabs.Panel />` for screen readers"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false}},{"key":"variant","value":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}],"required":false}},{"key":"isSelected","value":{"name":"boolean","required":false}},{"key":"isDisabled","value":{"name":"boolean","required":false}},{"key":"maxHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"minHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"id","value":{"name":"string","required":false}},{"key":"labelledBy","value":{"name":"string","required":false}},{"key":"padding","value":{"name":"Spacing","required":false}},{"key":"textAlign","value":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}],"required":false}},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"provides a reference to the underlying html root element"},{"key":"active","value":{"name":"boolean","required":false},"description":"Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\nfor all the `<Tabs.Panel />`s."},{"key":"unmountOnExit","value":{"name":"boolean","required":false},"description":"When set to false, the tabPanel only will be hidden, but not dismounted when not active"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  fontSize: Typography['fontSizeMedium']\n  fontFamily: Typography['fontFamily']\n  fontWeight: Typography['fontWeightNormal']\n  lineHeight: Typography['lineHeight']\n  color: Colors['contrasts']['grey125125']\n  background: Colors['contrasts']['white1010']\n  borderColor: Colors['contrasts']['grey1424']\n  borderWidth: Border['widthSmall']\n  borderStyle: Border['style']\n  defaultOverflowY: string\n}","signature":{"properties":[{"key":"fontSize","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"fontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"fontWeight","value":{"name":"number","raw":"Typography['fontWeightNormal']","required":true}},{"key":"lineHeight","value":{"name":"union","raw":"Typography['lineHeight']","required":true}},{"key":"color","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"background","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"borderColor","value":{"name":"signature['grey1424']","raw":"Colors['contrasts']['grey1424']","required":true}},{"key":"borderWidth","value":{"name":"union","raw":"Border['widthSmall']","required":true}},{"key":"borderStyle","value":{"name":"string","raw":"Border['style']","required":true}},{"key":"defaultOverflowY","value":{"name":"string","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"'panel' | 'content'","elements":[{"name":"literal","value":"'panel'"},{"name":"literal","value":"'content'"}]}],"raw":"ComponentStyle<'panel' | 'content'>"}],"raw":"WithStyleProps<TabsPanelTheme, TabsPanelStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The content that will be rendered in the corresponding <Tab /> and will label\n   * this `<Tabs.Panel />` for screen readers\n   */\n  renderTitle: React.ReactNode | (() => React.ReactNode)\n  children?: React.ReactNode\n  variant?: 'default' | 'secondary'\n  isSelected?: boolean\n  isDisabled?: boolean\n  maxHeight?: string | number\n  minHeight?: string | number\n  id?: string\n  labelledBy?: string\n  padding?: Spacing\n  textAlign?: 'start' | 'center' | 'end'\n  /**\n   * provides a reference to the underlying html root element\n   */\n  elementRef?: (element: HTMLDivElement | null) => void\n  /**\n   * Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\n   * for all the `<Tabs.Panel />`s.\n   */\n  active?: boolean\n  /**\n   * When set to false, the tabPanel only will be hidden, but not dismounted when not active\n   */\n  unmountOnExit?: boolean\n}","signature":{"properties":[{"key":"renderTitle","value":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}],"required":true},"description":"The content that will be rendered in the corresponding <Tab /> and will label\nthis `<Tabs.Panel />` for screen readers"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false}},{"key":"variant","value":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}],"required":false}},{"key":"isSelected","value":{"name":"boolean","required":false}},{"key":"isDisabled","value":{"name":"boolean","required":false}},{"key":"maxHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"minHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"id","value":{"name":"string","required":false}},{"key":"labelledBy","value":{"name":"string","required":false}},{"key":"padding","value":{"name":"Spacing","required":false}},{"key":"textAlign","value":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}],"required":false}},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"provides a reference to the underlying html root element"},{"key":"active","value":{"name":"boolean","required":false},"description":"Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\nfor all the `<Tabs.Panel />`s."},{"key":"unmountOnExit","value":{"name":"boolean","required":false},"description":"When set to false, the tabPanel only will be hidden, but not dismounted when not active"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"Panel"}],"raw":"ComponentElement<TabsPanelProps, Panel>","alias":"PanelChild"}},{"name":"activePanel","optional":true,"type":{"name":"ComponentElement","elements":[{"name":"intersection","raw":"TabsPanelOwnProps &\nWithStyleProps<TabsPanelTheme, TabsPanelStyle> &\nOtherHTMLAttributes<TabsPanelOwnProps>","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The content that will be rendered in the corresponding <Tab /> and will label\n   * this `<Tabs.Panel />` for screen readers\n   */\n  renderTitle: React.ReactNode | (() => React.ReactNode)\n  children?: React.ReactNode\n  variant?: 'default' | 'secondary'\n  isSelected?: boolean\n  isDisabled?: boolean\n  maxHeight?: string | number\n  minHeight?: string | number\n  id?: string\n  labelledBy?: string\n  padding?: Spacing\n  textAlign?: 'start' | 'center' | 'end'\n  /**\n   * provides a reference to the underlying html root element\n   */\n  elementRef?: (element: HTMLDivElement | null) => void\n  /**\n   * Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\n   * for all the `<Tabs.Panel />`s.\n   */\n  active?: boolean\n  /**\n   * When set to false, the tabPanel only will be hidden, but not dismounted when not active\n   */\n  unmountOnExit?: boolean\n}","signature":{"properties":[{"key":"renderTitle","value":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}],"required":true},"description":"The content that will be rendered in the corresponding <Tab /> and will label\nthis `<Tabs.Panel />` for screen readers"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false}},{"key":"variant","value":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}],"required":false}},{"key":"isSelected","value":{"name":"boolean","required":false}},{"key":"isDisabled","value":{"name":"boolean","required":false}},{"key":"maxHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"minHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"id","value":{"name":"string","required":false}},{"key":"labelledBy","value":{"name":"string","required":false}},{"key":"padding","value":{"name":"Spacing","required":false}},{"key":"textAlign","value":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}],"required":false}},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"provides a reference to the underlying html root element"},{"key":"active","value":{"name":"boolean","required":false},"description":"Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\nfor all the `<Tabs.Panel />`s."},{"key":"unmountOnExit","value":{"name":"boolean","required":false},"description":"When set to false, the tabPanel only will be hidden, but not dismounted when not active"}]}},{"name":"WithStyleProps","elements":[{"name":"signature","type":"object","raw":"{\n  fontSize: Typography['fontSizeMedium']\n  fontFamily: Typography['fontFamily']\n  fontWeight: Typography['fontWeightNormal']\n  lineHeight: Typography['lineHeight']\n  color: Colors['contrasts']['grey125125']\n  background: Colors['contrasts']['white1010']\n  borderColor: Colors['contrasts']['grey1424']\n  borderWidth: Border['widthSmall']\n  borderStyle: Border['style']\n  defaultOverflowY: string\n}","signature":{"properties":[{"key":"fontSize","value":{"name":"union","raw":"Typography['fontSizeMedium']","required":true}},{"key":"fontFamily","value":{"name":"string","raw":"Typography['fontFamily']","required":true}},{"key":"fontWeight","value":{"name":"number","raw":"Typography['fontWeightNormal']","required":true}},{"key":"lineHeight","value":{"name":"union","raw":"Typography['lineHeight']","required":true}},{"key":"color","value":{"name":"signature['grey125125']","raw":"Colors['contrasts']['grey125125']","required":true}},{"key":"background","value":{"name":"signature['white1010']","raw":"Colors['contrasts']['white1010']","required":true}},{"key":"borderColor","value":{"name":"signature['grey1424']","raw":"Colors['contrasts']['grey1424']","required":true}},{"key":"borderWidth","value":{"name":"union","raw":"Border['widthSmall']","required":true}},{"key":"borderStyle","value":{"name":"string","raw":"Border['style']","required":true}},{"key":"defaultOverflowY","value":{"name":"string","required":true}}]}},{"name":"ComponentStyle","elements":[{"name":"union","raw":"'panel' | 'content'","elements":[{"name":"literal","value":"'panel'"},{"name":"literal","value":"'content'"}]}],"raw":"ComponentStyle<'panel' | 'content'>"}],"raw":"WithStyleProps<TabsPanelTheme, TabsPanelStyle>"},{"name":"intersection","raw":"Omit<Attributes, keyof Props | 'dir'> & { dir?: 'ltr' | 'rtl' }","elements":[{"name":"Omit","elements":[{"name":"unknown"},{"name":"union","raw":"keyof Props | 'dir'","elements":[{"name":"signature","type":"object","raw":"{\n  /**\n   * The content that will be rendered in the corresponding <Tab /> and will label\n   * this `<Tabs.Panel />` for screen readers\n   */\n  renderTitle: React.ReactNode | (() => React.ReactNode)\n  children?: React.ReactNode\n  variant?: 'default' | 'secondary'\n  isSelected?: boolean\n  isDisabled?: boolean\n  maxHeight?: string | number\n  minHeight?: string | number\n  id?: string\n  labelledBy?: string\n  padding?: Spacing\n  textAlign?: 'start' | 'center' | 'end'\n  /**\n   * provides a reference to the underlying html root element\n   */\n  elementRef?: (element: HTMLDivElement | null) => void\n  /**\n   * Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\n   * for all the `<Tabs.Panel />`s.\n   */\n  active?: boolean\n  /**\n   * When set to false, the tabPanel only will be hidden, but not dismounted when not active\n   */\n  unmountOnExit?: boolean\n}","signature":{"properties":[{"key":"renderTitle","value":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}],"required":true},"description":"The content that will be rendered in the corresponding <Tab /> and will label\nthis `<Tabs.Panel />` for screen readers"},{"key":"children","value":{"name":"ReactReactNode","raw":"React.ReactNode","required":false}},{"key":"variant","value":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}],"required":false}},{"key":"isSelected","value":{"name":"boolean","required":false}},{"key":"isDisabled","value":{"name":"boolean","required":false}},{"key":"maxHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"minHeight","value":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}],"required":false}},{"key":"id","value":{"name":"string","required":false}},{"key":"labelledBy","value":{"name":"string","required":false}},{"key":"padding","value":{"name":"Spacing","required":false}},{"key":"textAlign","value":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}],"required":false}},{"key":"elementRef","value":{"name":"signature","type":"function","raw":"(element: HTMLDivElement | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}},"required":false},"description":"provides a reference to the underlying html root element"},{"key":"active","value":{"name":"boolean","required":false},"description":"Only one `<Tabs.Panel />` can be marked as active. The marked panel's content is rendered\nfor all the `<Tabs.Panel />`s."},{"key":"unmountOnExit","value":{"name":"boolean","required":false},"description":"When set to false, the tabPanel only will be hidden, but not dismounted when not active"}]}},{"name":"literal","value":"'dir'"}]}],"raw":"Omit<Attributes, keyof Props | 'dir'>"},{"name":"signature","type":"object","raw":"{ dir?: 'ltr' | 'rtl' }","signature":{"properties":[{"key":"dir","value":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}],"required":false}}]}}]}]},{"name":"Panel"}],"raw":"ComponentElement<TabsPanelProps, Panel>","alias":"PanelChild"}}],"returns":null},{"name":"handleFocusableRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Focusable | null","elements":[{"name":"Focusable"},{"name":"null"}]}}],"returns":null},{"name":"handleTabListRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"focus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleScroll","docblock":null,"modifiers":[],"params":[{"name":"event","optional":false,"type":{"name":"intersection","raw":"React.UIEvent<ViewOwnProps> & React.UIEvent<HTMLElement>","elements":[{"name":"ReactUIEvent","raw":"React.UIEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactUIEvent","raw":"React.UIEvent<HTMLElement>","elements":[{"name":"HTMLElement"}]}]}}],"returns":null}],"props":{"children":{"type":{"name":"custom","raw":"Children.oneOf([Panel, null])"},"required":false,"description":"children of type `Tabs.Panel`","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"variant":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'secondary'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'default' | 'secondary'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'secondary'"}]},"defaultValue":{"value":"'default'","computed":false}},"screenReaderLabel":{"type":{"name":"string"},"required":false,"description":"A screen ready only label for the list of tabs","tsType":{"name":"string"}},"onRequestTabChange":{"type":{"name":"func"},"required":false,"description":"Called when the selected tab should change","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>,\n  tabData: { index: number; id?: string }\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.MouseEvent<ViewOwnProps> | React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]},{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewOwnProps>","elements":[{"name":"ViewOwnProps"}]}]},"name":"event"},{"type":{"name":"signature","type":"object","raw":"{ index: number; id?: string }","signature":{"properties":[{"key":"index","value":{"name":"number","required":true}},{"key":"id","value":{"name":"string","required":false}}]}},"name":"tabData"}],"return":{"name":"void"}}}},"maxWidth":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"maxHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"minHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"fixHeight":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"","tsType":{"name":"union","raw":"string | number","elements":[{"name":"string"},{"name":"number"}]}},"margin":{"type":{"name":"string"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"padding":{"type":{"name":"string"},"required":false,"description":"Valid values are `0`, `none`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `padding=\"small x-large large\"`.","tsType":{"name":"Spacing"}},"textAlign":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'center'","computed":false},{"value":"'end'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'start' | 'center' | 'end'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"},{"name":"literal","value":"'end'"}]}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"tabOverflow":{"type":{"name":"enum","value":[{"value":"'stack'","computed":false},{"value":"'scroll'","computed":false}]},"required":false,"description":"Choose whether Tabs should stack or scroll when they exceed the width of their\ncontainer.","tsType":{"name":"union","raw":"'stack' | 'scroll'","elements":[{"name":"literal","value":"'stack'"},{"name":"literal","value":"'scroll'"}]},"defaultValue":{"value":"'stack'","computed":false}},"shouldFocusOnRender":{"type":{"name":"bool"},"required":false,"description":"","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-tabs/src/Tabs/index.tsx","extension":".tsx","srcPath":"packages/ui-tabs/src/Tabs/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-tabs/src/Tabs/index.tsx","packageName":"@instructure/ui-tabs","requirePath":"@instructure/ui-tabs/lib/Tabs/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-tabs/src/Tabs/index.tsx').default","esPath":"@instructure/ui-tabs/es/Tabs/index","themePath":"packages/ui-tabs/src/Tabs/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-tabs/src/Tabs/theme.ts","id":"Tabs","title":"Tabs"}