{"name":"addMediaQueryMatchListener","description":"Given an object of named queries, listens for changes in the\nwindow size and notifies which queries match via a function\ncallback. The callback method is only called when the query\nmatches change, not on all window resizes.\n\nThis function shares an interface with\n[addElementQueryMatchListener](#addElementQueryMatchListener)\nso that they can be used interchangeably.\n\nThe [Responsive](#Responsive) component with the `match` prop\nset to `media` utilizes this function. This is a low level utility\nmethod and, in most cases, [Responsive](#Responsive) should be\nused instead.\n\n```js-code\nclass MyComponent extends Component {\n  state = {\n    matches: []\n  }\n\n  _listener = null\n\n  componentDidMount () {\n    const query = {myFirstQuery: { minWidth: 100 }, mySecondQuery: { maxHeight: '30rem'}}\n    const el = findDOMNode(this)\n\n    this._listener = addMediaQueryMatchListener(query, el, this.updateMatches)\n  }\n\n  componentWillUnmount () {\n    if (this._listener) {\n      this._listener.remove()\n    }\n  }\n\n  updateMatches = (matches) => {\n    this.setState({ matches })\n  }\n  ...\n}\n```","params":[{"name":"query","type":"BreakpointQueries","optional":false,"description":"- object consisting of names and query objects"},{"name":"el","type":"any","optional":false,"description":"- a DOM node or a function returning a DOM node"},{"name":"cb","type":"UpdateMatches","optional":false,"description":"- called with an array of the names of the currently matching queries whenever a matching query changes"},{"name":"matchMedia","type":"(query: string, el: UIElement) => MediaQueryList","defaultValue":"defaultMatchMedia","optional":true,"description":"- called with an array of the names of the currently matching queries whenever a matching query changes"}],"returns":{"description":"remove() function to call to remove the listener","type":"{ remove(): void; }"},"category":"utilities/layout","relativePath":"packages/ui-responsive/src/addMediaQueryMatchListener.ts","extension":".ts","srcPath":"packages/ui-responsive/src/addMediaQueryMatchListener.ts","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-responsive/src/addMediaQueryMatchListener.ts","packageName":"@instructure/ui-responsive","requirePath":"@instructure/ui-responsive/lib/addMediaQueryMatchListener","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-responsive/src/addMediaQueryMatchListener.ts').default","esPath":"@instructure/ui-responsive/es/addMediaQueryMatchListener","themePath":"packages/ui-responsive/src/addMediaQueryMatchListener.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-responsive/src/addMediaQueryMatchListener.ts","id":"addMediaQueryMatchListener","title":"addMediaQueryMatchListener"}