import { Component, LegacyRef, ReactElement, SyntheticEvent } from 'react';
import { addMediaQueryMatchListener } from '@instructure/ui-responsive';
import type { QueriesMatching } from '@instructure/ui-responsive';
import { Hero } from '../Hero';
import { Nav } from '../Nav';
import type { AppProps, AppState, DocData } from './props';
import type { LibraryOptions, MainDocsData } from '../../buildScripts/DataTypes.mjs';
import type { Spacing } from '@instructure/emotion';
type AppContextType = {
    themeKey: keyof MainDocsData['themes'];
    themes: MainDocsData['themes'];
    library?: LibraryOptions;
};
export declare const AppContext: import("react").Context<AppContextType>;
declare class App extends Component<AppProps, AppState> {
    static allowedProps: readonly "trayWidth"[];
    static defaultProps: {
        trayWidth: number;
    };
    _content?: HTMLDivElement | null;
    _menuTrigger?: HTMLButtonElement;
    _mediaQueryListener?: ReturnType<typeof addMediaQueryMatchListener>;
    _defaultDocumentTitle?: string;
    _controller?: AbortController;
    _heroRef: React.RefObject<Hero | null>;
    _navRef: React.RefObject<Nav | null>;
    _skipToMainButtonRef?: HTMLElement;
    _mainContentRef?: HTMLElement;
    constructor(props: AppProps);
    fetchDocumentData: (docId: string) => Promise<DocData>;
    fetchVersionData: (signal: AbortController["signal"]) => Promise<void>;
    mainContentRef: (el: Element | null) => void;
    focusContent: () => void;
    scrollToElement(): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    trackPage(page: string): void;
    getPathInfo: () => string[];
    updateLayout: (matches: QueriesMatching) => void;
    updateKey: () => void;
    handleContentRef: LegacyRef<HTMLDivElement>;
    handleMenuTriggerRef: (el: Element | null) => void;
    handleMenuOpen: () => void;
    handleMenuClose: () => void;
    handleThemeChange: (_event: SyntheticEvent, option: {
        value: string;
    }) => void;
    handleShowTrayOnURLChange: (key: string | undefined, showMenu: boolean) => boolean;
    focusMainContent: () => void;
    handleTabKey: (event: KeyboardEvent) => void;
    skipToMainButtonRef: (el: Element | null) => void;
    focusSkipToMainButton: () => void;
    renderThemeSelect(): import("@emotion/react/jsx-runtime").JSX.Element | null;
    renderTheme(themeKey: string): import("@emotion/react/jsx-runtime").JSX.Element;
    renderIcons(key: string): import("@emotion/react/jsx-runtime").JSX.Element;
    renderDocument(docId: string, repository: string): import("@emotion/react/jsx-runtime").JSX.Element;
    renderWrappedContent(content: ReactElement[] | ReactElement, padding?: Spacing): import("@emotion/react/jsx-runtime").JSX.Element;
    renderHero(): import("@emotion/react/jsx-runtime").JSX.Element;
    renderChangeLog(): import("@emotion/react/jsx-runtime").JSX.Element;
    renderError(): import("@emotion/react/jsx-runtime").JSX.Element;
    renderContent(key?: string): import("@emotion/react/jsx-runtime").JSX.Element;
    renderFooter(): import("@emotion/react/jsx-runtime").JSX.Element | null;
    renderNavigation(): import("@emotion/react/jsx-runtime").JSX.Element | undefined;
    renderLegacyDocWarning(): import("@emotion/react/jsx-runtime").JSX.Element | null;
    renderSkipToMainButton: () => import("@emotion/react/jsx-runtime").JSX.Element;
    render(): import("@emotion/react/jsx-runtime").JSX.Element;
}
export default App;
export type { AppContextType };
export { App };
//# sourceMappingURL=index.d.ts.map