{"description":"\n@module experimental\n> *Warning*: `DateInput2` is an **experimental** upgrade to the existing [`DateInput`](/#DateInput) component, offering easier configuration, better UX, improved accessibility, and a year picker. While it addresses key limitations of `DateInput`, it's still in the experimental phase, with some missing unit tests and potential API changes.\n\n### Minimal config\n\n- ```js\n  class Example extends React.Component {\n    state = { inputValue: '', dateString: '' }\n\n    render() {\n      return (\n        <div>\n          <DateInput2\n            renderLabel=\"Choose a date\"\n            screenReaderLabels={{\n              calendarIcon: 'Calendar',\n              nextMonthButton: 'Next month',\n              prevMonthButton: 'Previous month'\n            }}\n            value={this.state.inputValue}\n            width=\"20rem\"\n            onChange={(e, inputValue, dateString) => {\n              this.setState({ dateString, inputValue })\n            }}\n            invalidDateErrorMessage=\"Invalid date\"\n          />\n          <p>\n            Input Value: <code>{this.state.inputValue}</code>\n            <br />\n            UTC Date String: <code>{this.state.dateString}</code>\n          </p>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [inputValue, setInputValue] = useState('')\n    const [dateString, setDateString] = useState('')\n    return (\n      <div>\n          <DateInput2\n            renderLabel=\"Choose a date\"\n            screenReaderLabels={{\n              calendarIcon: 'Calendar',\n              nextMonthButton: 'Next month',\n              prevMonthButton: 'Previous month'\n            }}\n            value={inputValue}\n            width=\"20rem\"\n            onChange={(e, inputValue, dateString) => {\n              setInputValue(inputValue)\n              setDateString(dateString)\n            }}\n            invalidDateErrorMessage=\"Invalid date\"\n          />\n          <p>\n            Input Value: <code>{inputValue}</code>\n            <br />\n            UTC Date String: <code>{dateString}</code>\n          </p>\n        </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Parsing and formatting dates\n\nWhen typing in a date manually (instead of using the included picker), the component tries to parse the date as you type it in. By default parsing is based on the user's locale which determines the order of day, month and year (e.g.: a user with US locale will have MONTH/DAY/YEAR order, and someone with GB locale will have DAY/MONTH/YEAR order).\n\nAny of the following separators can be used when typing a date: `,`, `-`, `.`, `/` or a whitespace however on blur the date will be formatted according to the locale and separators will be changed and leading zeros also adjusted.\n\nIf you want different parsing and formatting then the current locale you can use the `dateFormat` prop which accepts either a string with a name of a different locale (so you can use US date format even if the user is France) or a parser and formatter functions.\n\nThe default parser also has a limitation of not working with years before `1000` and after `9999`. These values are invalid by default but not with custom parsers.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [value, setValue] = useState('')\n  const [value2, setValue2] = useState('')\n  const [value3, setValue3] = useState('')\n\n  return (\n    <div>\n      <p>US locale with default format:</p>\n      <DateInput2\n        renderLabel=\"Choose a date\"\n        screenReaderLabels={{\n          calendarIcon: 'Calendar',\n          nextMonthButton: 'Next month',\n          prevMonthButton: 'Previous month'\n        }}\n        width=\"20rem\"\n        value={value}\n        locale=\"en-us\"\n        onChange={(e, value) => setValue(value)}\n      />\n      <p>US locale with german date format:</p>\n      <DateInput2\n        renderLabel=\"Choose a date\"\n        screenReaderLabels={{\n          calendarIcon: 'Calendar',\n          nextMonthButton: 'Next month',\n          prevMonthButton: 'Previous month'\n        }}\n        width=\"20rem\"\n        value={value2}\n        locale=\"en-us\"\n        dateFormat=\"de-de\"\n        onChange={(e, value) => setValue2(value)}\n      />\n      <p>US locale with ISO date format:</p>\n      <DateInput2\n        renderLabel=\"Choose a date\"\n        screenReaderLabels={{\n          calendarIcon: 'Calendar',\n          nextMonthButton: 'Next month',\n          prevMonthButton: 'Previous month'\n        }}\n        width=\"20rem\"\n        value={value3}\n        locale=\"en-us\"\n        dateFormat={{\n          parser: (input) => {\n            // split input on '.', whitespace, '/', ',' or '-' using regex: /[.\\s/.-]+/\n            // the '+' allows splitting on consecutive delimiters\n            const [year, month, day] = input.split(/[,.\\s/.-]+/)\n            const newDate = new Date(year, month-1, day)\n            return isNaN(newDate) ? '' : newDate\n          },\n          formatter: (date) => {\n            // vanilla js formatter but you could use a date library instead\n            const year = date.getFullYear()\n            // month is zero indexed so add 1\n            const month = `${date.getMonth() + 1}`.padStart(2, '0')\n            const day = `${date.getDate()}`.padStart(2, '0')\n            return `${year}-${month}-${day}`\n          }\n        }}\n        onChange={(e, value) => setValue3(value)}\n      />\n    </div>\n  )\n}\n\nrender(<Example />)\n```\n\n### Timezones\n\nIn the examples above you can see that the `onChange` callback also return a UTC date string. This means it is timezone adjusted. If the timezone is not set via the `timezone` prop, it is calculated/assumed from the user's machine. So if a user chooses September 10th 2024 with the timezone 'Europe/Budapest', the `onChange` function will return `2024-09-09T22:00:00.000Z` because Budapest is two hours ahead of UTC (summertime).\n\n### With year picker\n\n- ```js\n  class Example extends React.Component {\n    state = { inputValue: '', dateString: '' }\n\n    render() {\n      return (\n        <div>\n          <DateInput2\n            renderLabel=\"Choose a date\"\n            screenReaderLabels={{\n              calendarIcon: 'Calendar',\n              nextMonthButton: 'Next month',\n              prevMonthButton: 'Previous month'\n            }}\n            value={this.state.inputValue}\n            width=\"20rem\"\n            onChange={(e, inputValue, dateString) => {\n              this.setState({ dateString, inputValue })\n            }}\n            invalidDateErrorMessage=\"Invalid date\"\n            withYearPicker={{\n              screenReaderLabel: 'Year picker',\n              startYear: 1900,\n              endYear: 2024\n            }}\n          />\n          <p>\n            Input Value: <code>{this.state.inputValue}</code>\n            <br />\n            UTC Date String: <code>{this.state.dateString}</code>\n          </p>\n        </div>\n      )\n    }\n  }\n\n  render(<Example />)\n  ```\n\n- ```js\n  const Example = () => {\n    const [inputValue, setInputValue] = useState('')\n    const [dateString, setDateString] = useState('')\n    return (\n      <div>\n          <DateInput2\n            renderLabel=\"Choose a date\"\n            screenReaderLabels={{\n              calendarIcon: 'Calendar',\n              nextMonthButton: 'Next month',\n              prevMonthButton: 'Previous month'\n            }}\n            value={inputValue}\n            width=\"20rem\"\n            onChange={(e, inputValue, dateString) => {\n              setInputValue(inputValue)\n              setDateString(dateString)\n            }}\n            invalidDateErrorMessage=\"Invalid date\"\n            withYearPicker={{\n              screenReaderLabel: 'Year picker',\n              startYear: 1900,\n              endYear: 2024\n            }}\n          />\n          <p>\n            Input Value: <code>{inputValue}</code>\n            <br />\n            UTC Date String: <code>{dateString}</code>\n          </p>\n        </div>\n    )\n  }\n\n  render(<Example />)\n  ```\n\n### Date validation\n\nBy default `DateInput2` only does date validation if the `invalidDateErrorMessage` prop is provided. Validation is triggered on the blur event of the input field. Invalid dates are determined current locale.\n\nIf you want to do more complex validation (e.g. only allow a subset of dates) you can use the `onRequestValidateDate` and `messages` props.\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [value, setValue] = useState('')\n  const [dateString, setDateString] = useState('')\n  const [messages, setMessages] = useState([])\n\n  const handleDateValidation = (e, inputValue, utcIsoDate) => {\n    // utcIsoDate will be an empty string if the input cannot be parsed as a date\n\n    const date = new Date(utcIsoDate)\n\n    // don't validate empty input\n    if (!utcIsoDate && inputValue.length > 0) {\n      setMessages([{\n        type: 'error',\n        text: 'This is not a valid date'\n      }])\n    } else if (date < new Date('1990-01-01')) {\n      setMessages([{\n        type: 'error',\n        text: 'Select date after January 1, 1990'\n      }])\n    } else {\n      setMessages([])\n    }\n  }\n\n  return (\n    <DateInput2\n      renderLabel=\"Choose a date after January 1, 1990\"\n      screenReaderLabels={{\n        calendarIcon: 'Calendar',\n        nextMonthButton: 'Next month',\n        prevMonthButton: 'Previous month'\n      }}\n      width=\"20rem\"\n      value={value}\n      messages={messages}\n      onRequestValidateDate={handleDateValidation}\n      onChange={(e, value) => setValue(value)}\n      withYearPicker={{\n        screenReaderLabel: 'Year picker',\n        startYear: 1900,\n        endYear: 2024\n      }}\n    />\n  )\n}\n\nrender(<Example />)\n```\n\n### Date format hint\n\nIf the `placeholder` property is undefined it will display a hint for the date format (like `DD/MM/YYYY`). Usually it is recommended to leave it as it is for a better user experience.\n","displayName":"DateInput2","methods":[],"props":{"renderLabel":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":true,"description":"Specifies the input label.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"screenReaderLabels":{"type":{"name":"object"},"required":true,"description":"","tsType":{"name":"signature","type":"object","raw":"{\n  calendarIcon: string\n  prevMonthButton: string\n  nextMonthButton: string\n}","signature":{"properties":[{"key":"calendarIcon","value":{"name":"string","required":true}},{"key":"prevMonthButton","value":{"name":"string","required":true}},{"key":"nextMonthButton","value":{"name":"string","required":true}}]}}},"value":{"type":{"name":"custom","raw":"controllable(PropTypes.string)"},"required":false,"description":"Specifies the input value.","tsType":{"name":"string"}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder text for the input field. If it's left undefined it will display a hint for the date format (like `DD/MM/YYYY`).","tsType":{"name":"string"}},"onChange":{"type":{"name":"func"},"required":false,"description":"Callback fired when the input changes.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.SyntheticEvent,\n  inputValue: string,\n  utcDateString: string\n) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"string"},"name":"inputValue"},{"type":{"name":"string"},"name":"utcDateString"}],"return":{"name":"void"}}}},"onBlur":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a blur event.","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent, value: string, utcDateString: string) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"string"},"name":"value"},{"type":{"name":"string"},"name":"utcDateString"}],"return":{"name":"void"}}}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the input is enabled, disabled, or readonly.\nWhen \"disabled\", the input changes visibly to indicate that it cannot\nreceive user interactions. When \"readonly\" the input still cannot receive\nuser interactions but it keeps the same styles as if it were enabled.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"defaultValue":{"value":"'enabled'","computed":false}},"isRequired":{"type":{"name":"bool"},"required":false,"description":"Specifies if the input is required.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"isInline":{"type":{"name":"bool"},"required":false,"description":"Controls whether the input is rendered inline with other elements or if it\nis rendered as a block level element.","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"width":{"type":{"name":"string"},"required":false,"description":"Specifies the width of the input.","tsType":{"name":"string"}},"messages":{"type":{"name":"arrayOf","value":{"name":"custom","raw":"FormPropTypes.message"}},"required":false,"description":"Displays messages and validation for the input. It should be an object\nwith the following shape:\n`{\n  text: PropTypes.node,\n  type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])\n}`","tsType":{"name":"Array","elements":[{"name":"FormMessage"}],"raw":"FormMessage[]"}},"invalidDateErrorMessage":{"type":{"name":"union","value":[{"name":"func"},{"name":"string"}]},"required":false,"description":"The message shown to the user when the date is invalid. If this prop is not set, validation is bypassed.\nIf it's set to an empty string, validation happens and the input border changes to red if validation hasn't passed.","tsType":{"name":"string"}},"locale":{"type":{"name":"string"},"required":false,"description":"A standard language identifier.\n\nSee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) for\nmore details.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe web browser's locale will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"timezone":{"type":{"name":"string"},"required":false,"description":"A timezone identifier in the format: *Area/Location*\n\nSee [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list\nof possible options.\n\nThis property can also be set via a context property and if both are set\nthen the component property takes precedence over the context property.\n\nThe system timezone will be used if no value is set via a component\nproperty or a context property.","tsType":{"name":"string"}},"withYearPicker":{"type":{"name":"object"},"required":false,"description":"If set, years can be picked from a dropdown.\nIt accepts an object.\nscreenReaderLabel: string // e.g.: i18n(\"pick a year\")\n\nonRequestYearChange?:(e: React.MouseEvent,requestedYear: number): void // if set, on year change, only this will be called and no internal change will take place\n\nstartYear: number // e.g.: 2001, sets the start year of the selectable list\n\nendYear: number // e.g.: 2030, sets the end year of the selectable list","tsType":{"name":"signature","type":"object","raw":"{\n  screenReaderLabel: string\n  onRequestYearChange?: (e: SyntheticEvent, requestedYear: number) => void\n  startYear: number\n  endYear: number\n}","signature":{"properties":[{"key":"screenReaderLabel","value":{"name":"string","required":true}},{"key":"onRequestYearChange","value":{"name":"signature","type":"function","raw":"(e: SyntheticEvent, requestedYear: number) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"e"},{"type":{"name":"number"},"name":"requestedYear"}],"return":{"name":"void"}},"required":false}},{"key":"startYear","value":{"name":"number","required":true}},{"key":"endYear","value":{"name":"number","required":true}}]}}},"dateFormat":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"By default the date format is determined by the locale but can be changed via this prop to an alternate locale (passing it in as a string) or a custom parser and formatter (both as functions)","tsType":{"name":"union","raw":"{\n  parser: (input: string) => Date | null\n  formatter: (date: Date) => string\n} | string","elements":[{"name":"signature","type":"object","raw":"{\n  parser: (input: string) => Date | null\n  formatter: (date: Date) => string\n}","signature":{"properties":[{"key":"parser","value":{"name":"signature","type":"function","raw":"(input: string) => Date | null","signature":{"arguments":[{"type":{"name":"string"},"name":"input"}],"return":{"name":"union","raw":"Date | null","elements":[{"name":"Date"},{"name":"null"}]}},"required":true}},{"key":"formatter","value":{"name":"signature","type":"function","raw":"(date: Date) => string","signature":{"arguments":[{"type":{"name":"Date"},"name":"date"}],"return":{"name":"string"}},"required":true}}]}},{"name":"string"}]}},"onRequestValidateDate":{"type":{"name":"func"},"required":false,"description":"Callback executed when the input fires a blur event or a date is selected from the picker.","tsType":{"name":"signature","type":"function","raw":"(event: React.SyntheticEvent, value: string, utcDateString: string) => void","signature":{"arguments":[{"type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"},"name":"event"},{"type":{"name":"string"},"name":"value"},{"type":{"name":"string"},"name":"utcDateString"}],"return":{"name":"void"}}}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-date-input/src/DateInput2/index.tsx","extension":".tsx","srcPath":"packages/ui-date-input/src/DateInput2/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-date-input/src/DateInput2/index.tsx","packageName":"@instructure/ui-date-input","requirePath":"@instructure/ui-date-input/lib/DateInput2/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-date-input/src/DateInput2/index.tsx').default","esPath":"@instructure/ui-date-input/es/DateInput2/index","id":"DateInput2","title":"DateInput2"}