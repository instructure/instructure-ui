{"description":"\n### Table layout\n\nIn stacked layout, column header is rendered in each cell, but not in row header.\n\n> If you are using [TruncateText](#TruncateText) (or CSS ellipsis) in your Table, set the\n> layout to `fixed` or `stacked`, or the text truncation will not work. To force long strings to break and not\n> exceed the bounds of the table cell, use `fixed` or `stacked`, together with the [Text](#Text) component:\n> `<Text wrap=\"break-word\">[long string]</Text>`.\n\n```javascript\n---\ntype: example\n---\nclass Example extends React.Component {\n  state = {\n    layout: 'auto',\n    hover: false,\n  }\n\n  handleChange = (field, value) => {\n    this.setState({\n      [field]: value,\n    })\n  }\n\n  renderOptions () {\n    const { layout, hover } = this.state\n\n    return (\n      <Flex alignItems=\"start\">\n        <Flex.Item margin=\"small\">\n          <RadioInputGroup\n            name=\"layout\"\n            description=\"layout\"\n            value={layout}\n            onChange={(e, value) => this.handleChange('layout', value)}\n          >\n            <RadioInput label=\"auto\" value=\"auto\" />\n            <RadioInput label=\"fixed\" value=\"fixed\" />\n            <RadioInput label=\"stacked\" value=\"stacked\" />\n          </RadioInputGroup>\n        </Flex.Item>\n        <Flex.Item margin=\"small\">\n          <Checkbox\n            label=\"hover\"\n            checked={hover}\n            onChange={(e, value) => this.handleChange('hover', !hover)}\n          />\n        </Flex.Item>\n      </Flex>\n    )\n  }\n\n  render() {\n    const { layout, hover } = this.state\n\n    return (\n      <div>\n        {this.renderOptions()}\n        <Table\n          caption='Top rated movies'\n          layout={layout}\n          hover={hover}\n        >\n          <Table.Head>\n            <Table.Row>\n              <Table.ColHeader id=\"Rank\">Rank</Table.ColHeader>\n              <Table.ColHeader id=\"Title\">Title</Table.ColHeader>\n              <Table.ColHeader id=\"Year\">Year</Table.ColHeader>\n              <Table.ColHeader id=\"Rating\">Rating</Table.ColHeader>\n            </Table.Row>\n          </Table.Head>\n          <Table.Body>\n            <Table.Row>\n              <Table.RowHeader>1</Table.RowHeader>\n              <Table.Cell>The Shawshank Redemption</Table.Cell>\n              <Table.Cell>1994</Table.Cell>\n              <Table.Cell>9.3</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.RowHeader>2</Table.RowHeader>\n              <Table.Cell>The Godfather</Table.Cell>\n              <Table.Cell>1972</Table.Cell>\n              <Table.Cell>9.2</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.RowHeader>3</Table.RowHeader>\n              <Table.Cell>The Godfather: Part II</Table.Cell>\n              <Table.Cell>1974</Table.Cell>\n              <Table.Cell>9.0</Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n### Column width and alignment\n\nEach column (`ColHeader`) can have a custom width, and each cell (`ColHeader`, `RowHeader` or `Cell`)\ncan be aligned differently.\n\n```javascript\n---\ntype: example\n---\nclass Example extends React.Component {\n  render() {\n    const { headers, rows } = this.props\n\n    return (\n      <Responsive\n        query={{\n          small: { maxWidth: '40rem' },\n          large: { minWidth: '41rem' },\n        }}\n        props={{\n          small: { layout: 'stacked' },\n          large: { layout: 'fixed' },\n        }}\n      >\n        {({ layout }) => (\n          <div>\n            <Table\n              caption='Top rated movies'\n              layout={layout}\n            >\n              <Table.Head>\n                <Table.Row>\n                  {(headers || []).map(({ id, text, width, textAlign }) => (\n                    <Table.ColHeader\n                      key={id}\n                      id={id}\n                      width={width}\n                      textAlign={textAlign}\n                    >\n                      {text}\n                    </Table.ColHeader>\n                   ))}\n                </Table.Row>\n              </Table.Head>\n              <Table.Body>\n                {rows.map((row) => (\n                  <Table.Row key={row.id}>\n                    {headers.map(({ id, renderCell, textAlign }) => (\n                      <Table.Cell\n                        key={id}\n                        textAlign={layout === 'stacked' ? 'start' : textAlign}\n                      >\n                        {renderCell ? renderCell(row[id], layout) : row[id]}\n                      </Table.Cell>\n                    ))}\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </div>\n        )}\n      </Responsive>\n    )\n  }\n}\n\nconst renderSummary = (summary, layout) => (layout === 'stacked')\n  ? summary\n  : (\n    <TruncateText\n      truncate=\"word\"\n      ellipsis=\"...\"\n    >\n      {summary}\n    </TruncateText>\n  )\n\nrender(\n  <Example\n    headers={[\n      {\n        id: 'Title',\n        text: 'Title',\n        width: '25%',\n        textAlign: 'start',\n      },\n      {\n        id: 'Year',\n        text: 'Year',\n        width: '15%',\n        textAlign: 'start',\n      },\n      {\n        id: 'Summary',\n        text: 'Summary',\n        width: '40%',\n        renderCell: renderSummary,\n        textAlign: 'start',\n      },\n      {\n        id: 'BoxOffice',\n        text: 'Box Office',\n        width: '20%',\n        textAlign: 'end',\n      },\n    ]}\n    rows={[\n      {\n        id: '1',\n        Title: 'The Shawshank Redemption',\n        Year: 1994,\n        Summary: 'Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.',\n        BoxOffice: '$28,341,469',\n      },\n      {\n        id: '2',\n        Title: 'The Godfather',\n        Year: 1972,\n        Summary: 'The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.',\n        BoxOffice: '$133,698,921',\n      },\n      {\n        id: '3',\n        Title: 'The Godfather: Part II',\n        Year: 1974,\n        Summary: 'The early life and career of Vito Corleone in 1920s New York City is portrayed, while his son, Michael, expands and tightens his grip on the family crime syndicate.',\n        BoxOffice: '$47,542,841',\n      },\n    ]}\n  />\n)\n```\n\n### A sortable table using our Responsive component\n\nResize the window to see how column headers transition into a `Select` for sorting table content when the traditional Table Header is no longer clickable. The Table layout itself switches from the horizontal view to the stacked view allowing content to be viewed without horizontal scrolling. See [Responsive](#Responsive) for more examples.\n\nBy default, the options in the `Select` for sorting in stacked layout are generated from the `id` property of the `Table.ColHeader` components. If you want to display custom strings, use the `stackedSortByLabel` property.\n\n```javascript\n---\ntype: example\n---\nclass SortableTable extends React.Component {\n  constructor (props) {\n    super(props)\n    const { headers } = props\n\n    const initialColWidth = {}\n    headers.forEach((header) => {\n      initialColWidth[header.id] = 'start'\n    })\n\n    this.state = {\n      sortBy: headers && headers[0] && headers[0].id,\n      ascending: true,\n      colTextAligns: initialColWidth\n    }\n  }\n\n  handleSort = (event, { id }) => {\n    const { sortBy, ascending } = this.state\n\n    if (id === sortBy) {\n      this.setState({\n        ascending: !ascending,\n      })\n    } else {\n      this.setState({\n        sortBy: id,\n        ascending: true,\n      })\n    }\n  }\n\n  handleColTextAlignChange(id, value) {\n    this.setState(state => ({\n      colTextAligns: {\n        ...state.colTextAligns,\n        [id]: value\n      }\n    }))\n  }\n\n  renderHeaderRow(direction) {\n    const { headers } = this.props\n    const { colTextAligns , sortBy } = this.state\n\n    return (\n      <Table.Row>\n        {(headers || []).map(({ id, text, width }) => (\n          <Table.ColHeader\n            key={id}\n            id={id}\n            width={width}\n            {...(direction && {\n              textAlign: colTextAligns[id],\n              stackedSortByLabel: text,\n              onRequestSort: this.handleSort,\n              sortDirection: id === sortBy ? direction : 'none'\n            })}\n          >\n            {text}\n          </Table.ColHeader>\n        ))}\n      </Table.Row>\n    )\n  }\n\n  renderOptions () {\n    const { headers } = this.props\n    const { colTextAligns } = this.state\n\n    return (\n      <ToggleGroup\n        size=\"small\"\n        toggleLabel=\"Set text-align for columns\"\n        summary=\"Set text-align for columns\"\n        background=\"default\"\n      >\n        <Table caption='Set text-align for columns'>\n          <Table.Head>\n            {this.renderHeaderRow()}\n          </Table.Head>\n          <Table.Body>\n            <Table.Row>\n              {Object.entries(colTextAligns).map(([headerId, textAlign]) => {\n                return (\n                  <Table.Cell\n                    key={headerId}\n                    width={headers.find(header => header.id === headerId).width}\n                  >\n                    <RadioInputGroup\n                      description={\n                        <ScreenReaderContent>\n                          Set text-align for column: {headerId}\n                        </ScreenReaderContent>\n                      }\n                      name={`columnTextAlign_${headerId}`}\n                      value={textAlign}\n                      margin=\"0 0 small\"\n                      size=\"small\"\n                      onChange={\n                        (e, value) => this.handleColTextAlignChange(headerId, value)\n                      }\n                    >\n                      <RadioInput label=\"start\" value=\"start\" />\n                      <RadioInput label=\"center\" value=\"center\" />\n                      <RadioInput label=\"end\" value=\"end\" />\n                    </RadioInputGroup>\n                  </Table.Cell>\n                )\n              })}\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </ToggleGroup>\n    )\n\n    return (\n      <FormField id=\"columnTextAlign\" label=\"Set column text-align\">\n        <Flex margin=\"0 0 medium\">\n          {Object.entries(colTextAligns).map(([headerId, textAlign]) => {\n            return (\n              <Flex.Item\n                key={headerId}\n                width={headers.find(header => header.id === headerId).width}\n              >\n                <RadioInputGroup\n                  description={\n                    <ScreenReaderContent>\n                      Column {headerId}textAlign\n                    </ScreenReaderContent>\n                  }\n                  name={`Column \"${headerId}\" textAlign`}\n                  value={textAlign}\n                  margin=\"0 0 small\"\n                  size=\"small\"\n                  onChange={\n                    (e, value) => this.handleColTextAlignChange(headerId, value)\n                  }\n                >\n                  <RadioInput label=\"start\" value=\"start\" />\n                  <RadioInput label=\"center\" value=\"center\" />\n                  <RadioInput label=\"end\" value=\"end\" />\n                </RadioInputGroup>\n              </Flex.Item>\n            )\n          })}\n        </Flex>\n      </FormField>\n    )\n  }\n\n  render() {\n    const { caption, headers, rows } = this.props\n    const { sortBy, ascending, colTextAligns } = this.state\n    const direction = ascending ? 'ascending' : 'descending'\n    const sortedRows = [...(rows || [])].sort((a, b) => {\n      if (a[sortBy] < b[sortBy]) {\n        return -1\n      }\n      if (a[sortBy] > b[sortBy]) {\n        return 1\n      }\n      return 0\n    })\n\n    if (!ascending) {\n      sortedRows.reverse()\n    }\n    return (\n      <Responsive\n        query={{\n          small: { maxWidth: '40rem' },\n          large: { minWidth: '41rem' },\n        }}\n        props={{\n          small: { layout: 'stacked' },\n          large: { layout: 'auto' },\n        }}\n      >\n        {(props) => (\n          <div>\n            {props.layout !== 'stacked' && (\n              <View display=\"block\" margin=\"0 0 medium\">\n                {this.renderOptions()}\n              </View>\n            )}\n\n            <Table\n              caption={`${caption}: sorted by ${sortBy} in ${direction} order`}\n              {...props}\n            >\n              <Table.Head renderSortLabel=\"Sort by\">\n                {this.renderHeaderRow(direction)}\n              </Table.Head>\n              <Table.Body>\n                {sortedRows.map((row) => (\n                  <Table.Row key={row.id}>\n                    {headers.map(({ id, renderCell }) => (\n                      <Table.Cell key={id} textAlign={colTextAligns[id]}>\n                        {renderCell ? renderCell(row[id]) : row[id]}\n                      </Table.Cell>\n                    ))}\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n            <Alert\n              liveRegion={() => document.getElementById('flash-messages')}\n              liveRegionPoliteness=\"polite\"\n              screenReaderOnly\n            >\n              {`Sorted by ${sortBy} in ${direction} order`}\n            </Alert>\n          </div>\n        )}\n      </Responsive>\n    )\n  }\n}\n\nrender(\n  <SortableTable\n    caption=\"Top rated movies\"\n    headers={[\n      {\n        id: 'rank',\n        text: 'Rank',\n        width: '15%',\n      },\n      {\n        id: 'title',\n        text: 'Title',\n        width: '55%',\n      },\n      {\n        id: 'year',\n        text: 'Year',\n        width: '15%',\n      },\n      {\n        id: 'rating',\n        text: 'Rating',\n        width: '15%',\n        renderCell: (rating) => rating.toFixed(1),\n      },\n    ]}\n    rows={[\n      {\n        id: '1',\n        rank: 1,\n        title: 'The Shawshank Redemption',\n        year: 1994,\n        rating: 9.3,\n      },\n      {\n        id: '2',\n        rank: 2,\n        title: 'The Godfather',\n        year: 1972,\n        rating: 9.2,\n      },\n      {\n        id: '3',\n        rank: 3,\n        title: 'The Godfather: Part II',\n        year: 1974,\n        rating: 9.0,\n      },\n      {\n        id: '4',\n        rank: 4,\n        title: 'The Dark Knight',\n        year: 2008,\n        rating: 9.0,\n      },\n      {\n        id: '5',\n        rank: 5,\n        title: '12 Angry Men',\n        year: 1957,\n        rating: 8.9,\n      },\n    ]}\n  />\n)\n```\n\n### A sortable table with selection and pagination\n\nThe composition order is important. `SelectableTable` -> `PaginatedTable` -> `SortableTable`, so\nthat selection does not re-paginate or re-sort the table, and pagination does not re-sort the table.\n\n```javascript\n---\ntype: example\n---\nclass SelectableTable extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selected: new Set()\n    }\n  }\n\n  handleSelectAll = (allSelected) => {\n    const { rowIds } = this.props\n\n    this.setState({\n      selected: allSelected ? new Set() : new Set(rowIds),\n    })\n  }\n\n  handleSelectRow = (rowSelected, rowId) => {\n    const { selected } = this.state\n    const copy = new Set(selected)\n    if (rowSelected) {\n      copy.delete(rowId)\n    } else {\n      copy.add(rowId)\n    }\n\n    this.setState({\n      selected: copy,\n    })\n  }\n\n  render() {\n    const { caption, headers, rows, onSort, sortBy, ascending, rowIds } = this.props\n    const { selected } = this.state\n    const allSelected = selected.size > 0 && rowIds.every((id) => selected.has(id))\n    const someSelected = selected.size > 0 && !allSelected\n    const direction = ascending ? 'ascending' : 'descending'\n\n    return (\n      <Responsive\n        query={{\n          small: { maxWidth: '40rem' },\n          large: { minWidth: '41rem' },\n        }}\n        props={{\n          small: { layout: 'stacked' },\n          large: { layout: 'auto' },\n        }}\n      >\n        {(props) => (\n          <div>\n            <View\n              as=\"div\"\n              padding=\"small\"\n              background=\"primary-inverse\"\n            >\n              {`${selected.size} of ${rowIds.length} selected`}\n            </View>\n            <Table\n              caption={`${caption}: sorted by ${sortBy} in ${direction} order`}\n              {...props}\n            >\n              <Table.Head renderSortLabel={<ScreenReaderContent>Sort by</ScreenReaderContent>}>\n                <Table.Row>\n                  <Table.ColHeader id=\"select\">\n                    <Checkbox\n                      label={<ScreenReaderContent>Select all</ScreenReaderContent>}\n                      onChange={() => this.handleSelectAll(allSelected)}\n                      checked={allSelected}\n                      indeterminate={someSelected}\n                    />\n                  </Table.ColHeader>\n                  {(headers || []).map(({ id, text, width }) => (\n                     <Table.ColHeader\n                       key={id}\n                       id={id}\n                       width={width}\n                       onRequestSort={onSort}\n                       sortDirection={id === sortBy ? direction : 'none'}\n                     >\n                       {text}\n                     </Table.ColHeader>\n                   ))}\n                </Table.Row>\n              </Table.Head>\n              <Table.Body>\n                {(rows || []).map((row) => {\n                  const rowSelected = selected.has(row.id)\n\n                  return (\n                    <Table.Row key={row.id}>\n                      <Table.RowHeader>\n                        <Checkbox\n                          label={<ScreenReaderContent>Select row</ScreenReaderContent>}\n                          onChange={() => this.handleSelectRow(rowSelected, row.id)}\n                          checked={rowSelected}\n                        />\n                      </Table.RowHeader>\n                      {(headers || []).map(({ id, renderCell }) => (\n                        <Table.Cell key={id}>\n                          {renderCell ? renderCell(row[id]) : row[id]}\n                        </Table.Cell>\n                      ))}\n                    </Table.Row>\n                  )\n                })}\n              </Table.Body>\n            </Table>\n            <Alert\n              liveRegion={() => document.getElementById('flash-messages')}\n              liveRegionPoliteness=\"polite\"\n              screenReaderOnly\n            >\n              {`${selected.size} of ${rowIds.length} selected`}\n            </Alert>\n          </div>\n        )}\n      </Responsive>\n    )\n  }\n}\n\nclass PaginatedTable extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      page: 0,\n    }\n  }\n\n  handleClick = (page) => {\n    this.setState({\n      page,\n    })\n  }\n\n  handleSort = (event, options) => {\n    const { onSort } = this.props\n\n    this.setState({\n      page: 0,\n    })\n    onSort(event, options)\n  }\n\n  render() {\n    const { caption, headers, rows, sortBy, ascending, perPage } = this.props\n    const { page } = this.state\n    const startIndex = page * perPage\n    const slicedRows = rows.slice(startIndex, startIndex + perPage)\n    const pageCount = perPage && Math.ceil(rows.length / perPage)\n\n    return (\n      <div>\n        <SelectableTable\n          caption={caption}\n          headers={headers}\n          rows={slicedRows}\n          onSort={this.handleSort}\n          sortBy={sortBy}\n          ascending={ascending}\n          rowIds={rows.map((row) => row.id)}\n        />\n        {pageCount > 1 && (\n          <Pagination\n            variant='compact'\n            labelNext='Next Page'\n            labelPrev='Previous Page'\n            margin='large'\n          >\n            {Array.from(Array(pageCount), (item, index) => (\n              <Pagination.Page\n                key={index}\n                onClick={() => this.handleClick(index)}\n                current={index === page}\n              >\n                {index + 1}\n              </Pagination.Page>\n            ))}\n          </Pagination>\n        )}\n        <Alert\n          liveRegion={() => document.getElementById('flash-messages')}\n          liveRegionPoliteness=\"polite\"\n          screenReaderOnly\n        >\n          {`Table page ${page + 1} of ${pageCount}`}\n        </Alert>\n      </div>\n    )\n  }\n}\n\nclass SortableTable extends React.Component {\n  constructor (props) {\n    super(props)\n    const { headers } = props\n\n    this.state = {\n      sortBy: headers && headers[0] && headers[0].id,\n      ascending: true,\n    }\n  }\n\n  handleSort = (event, { id }) => {\n    const { sortBy, ascending } = this.state\n\n    if (id === sortBy) {\n      this.setState({\n        ascending: !ascending,\n      })\n    } else {\n      this.setState({\n        sortBy: id,\n        ascending: true,\n      })\n    }\n  }\n\n  render() {\n    const { caption, headers, rows, perPage } = this.props\n    const { sortBy, ascending } = this.state\n    const sortedRows = [...rows].sort((a, b) => {\n      if (a[sortBy] < b[sortBy]) {\n        return -1\n      }\n      if (a[sortBy] > b[sortBy]) {\n        return 1\n      }\n      return 0\n    })\n\n    if (!ascending) {\n      sortedRows.reverse()\n    }\n    return (\n      <div>\n        <PaginatedTable\n          caption={caption}\n          headers={headers}\n          rows={sortedRows}\n          onSort={this.handleSort}\n          sortBy={sortBy}\n          ascending={ascending}\n          perPage={perPage}\n        />\n        <Alert\n          liveRegion={() => document.getElementById('flash-messages')}\n          liveRegionPoliteness=\"polite\"\n          screenReaderOnly\n        >\n          {`Sorted by ${sortBy} in ${ascending ? 'ascending' : 'descending'} order`}\n        </Alert>\n      </div>\n    )\n  }\n}\n\nconst renderRating = (rating) => (\n  <Rating\n    label='Rating'\n    valueNow={rating}\n    valueMax={10}\n    iconCount={5}\n  />\n)\n\nrender(\n  <SortableTable\n    caption=\"Top rated movies\"\n    headers={[\n      {\n        id: 'Rank',\n        text: 'Rank',\n      },\n      {\n        id: 'Title',\n        text: 'Title',\n        width: '40%',\n      },\n      {\n        id: 'Year',\n        text: 'Year',\n      },\n      {\n        id: 'Rating',\n        text: 'Rating',\n        renderCell: renderRating,\n      },\n    ]}\n    rows={[\n      {\n        id: '1',\n        Rank: 1,\n        Title: 'The Shawshank Redemption',\n        Year: 1994,\n        Rating: 9.3,\n      },\n      {\n        id: '2',\n        Rank: 2,\n        Title: 'The Godfather',\n        Year: 1972,\n        Rating: 9.2,\n      },\n      {\n        id: '3',\n        Rank: 3,\n        Title: 'The Godfather: Part II',\n        Year: 1974,\n        Rating: 9.0,\n      },\n      {\n        id: '4',\n        Rank: 4,\n        Title: 'The Dark Knight',\n        Year: 2008,\n        Rating: 9.0,\n      },\n      {\n        id: '5',\n        Rank: 5,\n        Title: '12 Angry Men',\n        Year: 1957,\n        Rating: 8.9,\n      },\n    ]}\n    perPage={3}\n  />\n)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Column headers can be sortable</Figure.Item>\n    <Figure.Item>Use the <Link href=\"#CondensedButton\">CondensedButton</Link> and <strong>small</strong> inputs inside cells</Figure.Item>\n    <Figure.Item>Actions must relate to that row only</Figure.Item>\n    <Figure.Item>Use horizontal and vertical alignment that makes sense with the content</Figure.Item>\n    <Figure.Item>Start align US dates and apply i18n</Figure.Item>\n    <Figure.Item>Start align text and alphanumeric</Figure.Item>\n    <Figure.Item>Start align currency</Figure.Item>\n    <Figure.Item>End align quantities and decimals</Figure.Item>\n    <Figure.Item>Table headers should have the same start or end alignment as their column contents</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Center align more than 4 characters/numbers, choose start or end</Figure.Item>\n    <Figure.Item>Use to create a layout</Figure.Item>\n    <Figure.Item>Use zebra stripes</Figure.Item>\n    <Figure.Item>Bottom align ever</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Table","methods":[],"props":{"caption":{"type":{"name":"node"},"required":false,"description":"Provide a screen reader friendly description. Anything passed to this\nprop will be wrapped by `<ScreenReaderContent>` when it is rendered.","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"children":{"type":{"name":"custom","raw":"ChildrenPropTypes.oneOf([Head, Body])"},"required":false,"description":"Build table via `Table.Head` and `Table.Body`","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"defaultValue":{"value":"null","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provide a reference to the underlying html element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"hover":{"type":{"name":"bool"},"required":false,"description":"Highlight each row on hover","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"layout":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'fixed'","computed":false},{"value":"'stacked'","computed":false}]},"required":false,"description":"`auto` lets the browser determine table column widths based on cell content,\nwhile `fixed` forces columns of equal width. `stacked` renders table in one\ncolumn to be more readable on narrow screens","tsType":{"name":"union","raw":"'auto' | 'fixed' | 'stacked'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'fixed'"},{"name":"literal","value":"'stacked'"}]},"defaultValue":{"value":"'auto'","computed":false}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-table/src/Table/index.tsx","extension":".tsx","srcPath":"packages/ui-table/src/Table/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-table/src/Table/index.tsx","packageName":"@instructure/ui-table","requirePath":"@instructure/ui-table/lib/Table/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-table/src/Table/index.tsx').default","esPath":"@instructure/ui-table/es/Table/index","themePath":"packages/ui-table/src/Table/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-table/src/Table/theme.ts","id":"Table","title":"Table"}