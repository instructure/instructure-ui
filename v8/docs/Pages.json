{"description":"\nThe Pages component can be used to render Paginated content that does not fit into one page. Each page content should have at least one focusable element (e.g. the back button) otherwise the focus will be lost.\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      activePageIndex: 0\n    }\n  }\n\n  handlePagesBackButtonClick = (activePageIndex) => {\n    this.setState({\n      activePageIndex\n    })\n  }\n\n  handleLinkClick = () => {\n    this.setState({\n      activePageIndex: 1\n    })\n  }\n\n  renderBackButton (navigateToPreviousPage) {\n    return (\n      <IconButton\n        onClick={navigateToPreviousPage}\n        renderIcon={IconArrowOpenStartLine}\n        screenReaderLabel=\"Back to Page One\"\n        withBorder={false}\n        withBackground={false}\n      />\n    )\n  }\n\n  render () {\n    return (\n      <Pages\n        activePageIndex={this.state.activePageIndex}\n        onPageIndexChange={this.handlePagesBackButtonClick}\n      >\n        <Pages.Page>\n         {(history, navigateToPreviousPage) => {\n          return (\n            <div>\n              <View as=\"div\" textAlign=\"end\">\n                <Link\n                  isWithinText={false}\n                  onClick={this.handleLinkClick}\n                >\n                  Go to Page Two\n                </Link>\n              </View>\n              <View as=\"div\" margin=\"large 0 0 0\" textAlign=\"center\">\n                <Text as=\"div\">Page One</Text>\n              </View>\n            </div>\n          )\n        }}\n        </Pages.Page>\n        <Pages.Page>\n          {(history, navigateToPreviousPage) => {\n          return (\n            <div>\n              <View as=\"div\" maxWidth=\"7rem\">\n                {history.length > 1 && (\n                  this.renderBackButton(navigateToPreviousPage)\n                )}\n              </View>\n              <View as=\"div\" margin=\"large 0 0 0\" textAlign=\"center\">\n                Hey Look - Page Two\n              </View>\n            </div>\n          )\n        }}\n        </Pages.Page>\n      </Pages>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n```js\n---\ntype: example\n---\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      activePageIndex: 0\n    }\n  }\n\n  handlePagesBackButtonClick = (activePageIndex) => {\n    this.setState({\n      activePageIndex\n    })\n  }\n\n  handleViewDetailsClick = () => {\n    this.setState({\n      activePageIndex: 1\n    })\n  }\n\n  renderBackButton (navigateToPreviousPage) {\n    return (\n      <IconButton\n        onClick={navigateToPreviousPage}\n        renderIcon={IconArrowStartLine}\n        screenReaderLabel=\"Back\"\n        withBorder={false}\n        withBackground={false}\n      />\n    )\n  }\n\n  render () {\n    return (\n      <Pages\n        activePageIndex={this.state.activePageIndex}\n        onPageIndexChange={this.handlePagesBackButtonClick}\n      >\n        <Pages.Page>\n        {(history, navigateToPreviousPage) => {\n          return (\n            <div>\n              {history.length > 1 && (\n                this.renderBackButton(navigateToPreviousPage)\n              )}\n              <View display=\"inline-block\" margin=\"large\">\n                <Heading level=\"h1\">Hello World</Heading>\n              </View>\n              <Button\n                onClick={this.handleViewDetailsClick}\n                color=\"primary\"\n              >\n                View Details\n              </Button>\n            </div>\n          )\n        }}\n        </Pages.Page>\n        <Pages.Page>\n        {(history, navigateToPreviousPage) => {\n          return (\n            <div>\n              {history.length > 1 && (\n                this.renderBackButton(navigateToPreviousPage)\n              )}\n              <View display=\"inline-block\" margin=\"large\">\n                <Heading level=\"h1\">Foo Bar Baz Qux</Heading>\n              </View>\n              <FormField id=\"name\" label=\"Name\">\n                <input id=\"name\"/>\n              </FormField>\n            </div>\n          )\n        }}\n        </Pages.Page>\n      </Pages>\n    )\n  }\n}\n\nrender(<Example />)\n```\n\n```js\n---\ntype: example\n---\nconst USERS = [\n  {\n    id: 1,\n    name: 'Fred Flintstone',\n    email: 'fred@example.com',\n    age: 41,\n    spouse: 2\n  },\n  {\n    id: 2,\n    name: 'Wilma Flintstone',\n    email: 'wilma@example.com',\n    age: 40,\n    spouse: 1\n  },\n  {\n    id: 3,\n    name: 'Barney Rubble',\n    email: 'barney@example.com',\n    age: 42,\n    spouse: 4\n  },\n  {\n    id: 4,\n    name: 'Betty Rubble',\n    email: 'betty@example.com',\n    age: 38,\n    spouse: 3\n  },\n  {\n    id: 5,\n    name: 'Pebbles Flintstone',\n    age: 2,\n    parents: [1, 2]\n  },\n  {\n    id: 6,\n    name: 'Bamm-Bamm Rubble',\n    age: 1,\n    parents: [3, 4]\n  }\n]\n\nclass Example extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      showPopover: false,\n      activePageIndex: 0\n    }\n  }\n\n  findUser (id) {\n    return USERS.find((user) => user.id === id)\n  }\n\n  setActivePageIndex (index) {\n    this.setState({\n      activePageIndex: index,\n      lastPageIndex: this.state.activePageIndex\n    })\n  }\n\n  handlePagesBackButtonClick = (activePageIndex) => {\n    this.setActivePageIndex(activePageIndex)\n  }\n\n  handleDetailsButtonClick = (activePageIndex) => {\n    this.setActivePageIndex(activePageIndex)\n  }\n\n  showPopover = () => {\n    this.setState({\n      showPopover: true\n    })\n  }\n\n  hidePopover = () => {\n    this.setState({\n      showPopover: false,\n      activePageIndex: 0\n    })\n  }\n\n  renderNavigation () {\n    this._usersNav = []\n    return (\n      <div>\n        {USERS.map((user, index) => {\n          return (\n            <div key={index}>{this.renderUserMedia(user)}</div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  renderUserMedia (user) {\n    return (\n      <View as=\"div\" margin=\"small 0\">\n        <Link\n          isWithinText={false}\n          onClick={this.handleDetailsButtonClick.bind(this, user.id)}\n          elementRef={(el) => { this._usersNav[user.id] = el }}\n        >\n          <Byline description={user.name}>\n            <Avatar name={user.name} />\n          </Byline>\n        </Link>\n      </View>\n    )\n  }\n\n  renderNavigationButton (history, navigateToPreviousPage) {\n    return history.length === 1 ? (\n      this.renderCloseButton()\n    ) : (\n      this.renderBackButton(navigateToPreviousPage)\n    )\n  }\n\n  renderBackButton (navigateToPreviousPage) {\n    return (\n      <IconButton\n        onClick={navigateToPreviousPage}\n        renderIcon={IconArrowOpenStartLine}\n        screenReaderLabel=\"Back\"\n        withBorder={false}\n        withBackground={false}\n      />\n    )\n  }\n\n  renderCloseButton () {\n    return (\n      <IconButton\n        onClick={this.hidePopover}\n        renderIcon={IconXLine}\n        withBorder={false}\n        withBackground={false}\n        screenReaderLabel=\"Close\"\n      />\n    )\n  }\n\n  render () {\n    return (\n      <View padding=\"large 0\">\n        <Popover\n          on=\"click\"\n          isShowingContent={this.state.showPopover}\n          shouldContainFocus\n          shouldReturnFocus\n          screenReaderLabel=\"Pages Dialog Example\"\n          placement=\"center end\"\n          onHideContent={this.hidePopover}\n          renderTrigger={\n            <Button onClick={this.showPopover}>\n              View Users\n            </Button>\n          }\n        >\n          <Pages\n            activePageIndex={this.state.activePageIndex}\n            onPageIndexChange={this.handlePagesBackButtonClick}\n          >\n            <Pages.Page\n              defaultFocusElement={() => this._usersNav[this.state.lastPageIndex]}\n            >\n            {(history, navigateToPreviousPage) => {\n              return (\n                <div>\n                  <Grid hAlign=\"space-between\">\n                    <Grid.Row>\n                      <Grid.Col width={9}>\n                        <Heading level=\"h1\">Users</Heading>\n                      </Grid.Col>\n                      <Grid.Col width={3} textAlign=\"end\">\n                        {this.renderNavigationButton(history, navigateToPreviousPage)}\n                      </Grid.Col>\n                    </Grid.Row>\n                  </Grid>\n                  {this.renderNavigation()}\n                </div>\n              )\n            }}\n            </Pages.Page>\n            {USERS.map((user, index) => {\n              return (\n                <Pages.Page key={index}>\n                {(history, navigateToPreviousPage) => {\n                  return (\n                    <div>\n                      <Grid hAlign=\"space-between\">\n                        <Grid.Row>\n                          <Grid.Col width={9}>\n                            <Heading level=\"h1\">User Details</Heading>\n                          </Grid.Col>\n                          <Grid.Col width={3} textAlign=\"end\">\n                            {this.renderNavigationButton(history, navigateToPreviousPage)}\n                          </Grid.Col>\n                        </Grid.Row>\n                      </Grid>\n                      <Byline description={user.name}>\n                        <Avatar name={user.name} />\n                      </Byline>\n                      <Table caption=\"User details\">\n                        <Table.Body>\n                          <Table.Row>\n                            <Table.RowHeader>Age</Table.RowHeader>\n                            <Table.Cell>{user.age}</Table.Cell>\n                          </Table.Row>\n                          {user.email && (\n                            <Table.Row>\n                              <Table.RowHeader>Email</Table.RowHeader>\n                              <Table.Cell>{user.email}</Table.Cell>\n                            </Table.Row>\n                          )}\n                          {!isNaN(user.spouse) && (\n                            <Table.Row>\n                              <Table.RowHeader>Spouse</Table.RowHeader>\n                              <Table.Cell>\n                                {this.renderUserMedia(this.findUser(user.spouse))}\n                              </Table.Cell>\n                            </Table.Row>\n                          )}\n                          {Array.isArray(user.parents) && (\n                            <Table.Row>\n                              <Table.RowHeader>Parents</Table.RowHeader>\n                              <Table.Cell>\n                                {user.parents.map((parent, index) => {\n                                  return (\n                                    <div key={index}>{this.renderUserMedia(this.findUser(parent))}</div>\n                                  )\n                                })}\n                              </Table.Cell>\n                            </Table.Row>\n                          )}\n                        </Table.Body>\n                      </Table>\n                    </div>\n                  )\n                }}\n                </Pages.Page>\n              )\n            })}\n          </Pages>\n        </Popover>\n      </View>\n    )\n  }\n}\n\nrender(<Example />)\n```\n","displayName":"Pages","methods":[],"props":{"children":{"type":{"name":"custom","raw":"Children.oneOf([Page])"},"required":false,"description":"Children are type of `<Pages.Page>`","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"defaultPageIndex":{"type":{"name":"number"},"required":false,"description":"","tsType":{"name":"number"}},"activePageIndex":{"type":{"name":"custom","raw":"controllable(\n  PropTypes.number,\n  'onPageIndexChange',\n  'defaultPageIndex'\n)"},"required":false,"description":"The currently active page index","tsType":{"name":"number"},"defaultValue":{"value":"0","computed":false}},"onPageIndexChange":{"type":{"name":"func"},"required":false,"description":"Event handler fired anytime page index has changed due to back button being clicked","tsType":{"name":"signature","type":"function","raw":"(newPageIndex: number, oldPageIndex?: number) => void","signature":{"arguments":[{"type":{"name":"number"},"name":"newPageIndex"},{"type":{"name":"number"},"name":"oldPageIndex"}],"return":{"name":"void"}}}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}}},"category":"components","relativePath":"packages/ui-pages/src/Pages/index.tsx","extension":".tsx","srcPath":"packages/ui-pages/src/Pages/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-pages/src/Pages/index.tsx","packageName":"@instructure/ui-pages","requirePath":"@instructure/ui-pages/lib/Pages/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-pages/src/Pages/index.tsx').default","esPath":"@instructure/ui-pages/es/Pages/index","themePath":"packages/ui-pages/src/Pages/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-pages/src/Pages/theme.ts","id":"Pages","title":"Pages"}