{"description":"\n## Themeable to Emotion Migration Guide for Version 8.0\n\nThe main feature of the Version 8.0 release is the switch of the theming engine. We replaced the in-house `ui-themeable` theming solution with the popular [emotion.js](https://emotion.sh/) library.\n\nWe feel that it is very important that InstUI is easy to use and learn, so we try to use popular, well maintained and well documented open source solutions whenever possible.\n\nThis is why we decided to replace our custom-made theming library (ui-themeable) with a broadly adopted one. The two main candidates were [emotion](https://emotion.sh) and [styled components](https://styled-components.com), we decided to use `emotion`. If you are interested in our detailed reasoning you can read it [here](https://gist.github.com/serikjensen/4ba00b653efac1dbf80543c529adabbc).\n\nIn the v8.0. release we removed `ui-themeable` and its supporting packages from InstUI (see more in [Upgrade Guide for Version 8.0](#v8-upgrade-guide)). We also migrated all our components to use `emotion`, because it was not compatible with the former `ui-themeable`. This is why you'll have to make some changes in your app to adopt the new theming solution:\n\n- replace `ApplyTheme` with `InstUISettingsProvider` and import themes directly instead of registering them\n- if you have your own themeable components, refactor them to use `emotion`\n\n## The emotion package\n\nThe `@instructure/emotion` package contains our wrapper and helpers for the emotion theming library. You can find the full documentation [here](#emotion).\n\nJust like [**ui-themeable**](https://legacy.instructure.design/#ui-themeable), **emotion** is used by:\n\n- adding a decorator to our themeable components,\n- mapping the global theme variables to component variables (in the `theme.js` file),\n- applying styles using the component variables (instead of `styles.css` file, now we use a `styles.js` file),\n- and applying themes by wrapping the component in a theme provider component.\n\n```js\n---\ntype: embed\n---\n<ToggleBlockquote\n  summary=\"Migrating from ui-themeable\"\n>\n  <ToggleBlockquote.Paragraph>\n    The usage is very similar, but migrating will require some refactoring, converting <code>css</code> to <code>js</code> and moving styling logic from the components to the <code>styles.js</code> file.\n  </ToggleBlockquote.Paragraph>\n  <ToggleBlockquote.Paragraph>\n    This guide will explain every step in detail, showing many examples, but <strong>feel free to contact the InstUI team</strong> if you need further help.\n  </ToggleBlockquote.Paragraph>\n</ToggleBlockquote>\n```\n\n## Theme handling\n\nWe made changes in how we apply themes too. You no longer need to register themes and use `ApplyTheme.generateTheme`. Instead, you can directly import them from `@instructure/ui-themes` (or your own themes) and pass them to the theme provider.\n\n#### ApplyTheme to Emotion\n\nThe new theme provider is called `InstUISettingsProvider`, which is our own wrapper component for Emotion's [ThemeProvider](https://emotion.sh/docs/theming#themeprovider-reactcomponenttype).\n\n**You can find detailed information about how it works and how to add theme overrides on the [InstUISettingsProvider](#InstUISettingsProvider) page.**\n\n#### Using the built-in themes\n\n```js\n---\ntype: code\n---\n// before\nReactDOM.render(\n  <ApplyTheme theme={ApplyTheme.generateTheme('instructure')}>\n    <App />\n  </ApplyTheme>,\n  element\n)\n\n// after\nimport { instructure } from '@instructure/ui-themes'\n\nReactDOM.render(\n  <InstUISettingsProvider theme={instructure}>\n    <App />\n  </InstUISettingsProvider>,\n  element\n)\n```\n\n#### Using component overrides\n\nIf you are using global theme overrides for some components, change the structure of the overrides object: wrap them in a \"componentOverrides\" object, and the keys are simply the names of the components:\n\n```jsx\n---\ntype: code\n---\n// before\n<ApplyTheme theme={{\n   [Button.theme]: {\n     smallHeight: '23px'\n   },\n   [TextInput.theme]: {\n     smallHeight: '27px'\n   }\n }\n}>\n  ...\n</ApplyTheme>\n\n\n// after\n<InstUISettingsProvider theme={{\n  componentOverrides: {\n    Button: {\n      smallHeight: '23px'\n    },\n    TextInput: {\n      smallHeight: '27px'\n    }\n  }\n}}>\n  ...\n</InstUISettingsProvider>\n\n```\n\n#### Theme-based overrides\n\nIf you need to, and your app is using multiply themes, you can specify overrides for just one specific theme.\n\n```jsx\n---\ntype: code\n---\n<InstUISettingsProvider\n  theme={{\n    themeOverrides: {\n      canvas: {\n        colors: { backgroundLightest: '#f5f5f5' }\n      },\n      'canvas-high-contrast': {\n        colors: { backgroundLightest: '#ffffff' }\n      }\n    }\n  }}\n>\n  ...\n</InstUISettingsProvider>\n```\n\n#### Mixed and nested overrides\n\nThe `componentOverrides` can also be nested inside `themeOverrides`. This method is helpful if you want to override e.g. the `Alert` component \"**only** in canvas theme\".\n\n```jsx\n---\ntype: code\n---\n<InstUISettingsProvider\n  theme={{\n    themeOverrides: {\n      canvas: {\n        componentOverrides: {\n          Alert: {\n            warningIconBackground: 'deeppink',\n            warningBorderColor: 'deeppink'\n          }\n        }\n      }\n    }\n  }}\n>\n  <Alert variant=\"warning\">\n    My border and icon background should be \"deeppink\" in \"canvas\" theme.\n  </Alert>\n</InstUISettingsProvider>\n```\n\n#### Local theme variable overrides of components\n\nIf you need to tweak just one component locally, you can do so with a component [property](#withStyle/#applying-themes).\n\n**The `theme` prop was renamed to `themeOverride`.**\n\n```jsx\n---\ntype: code\n---\n// before\n<ExampleComponent theme={{ hoverColor: '#eee' }} />\n\n// after\n<ExampleComponent themeOverride={{ hoverColor: '#eee' }} />\n```\n\n**To ease the upgrade process we provide a codemod for this specific case.**\n\nIn order to use the codemod run:\n\n```sh\n---\ntype: code\n---\nnpx @instructure/instui-cli codemod-v8 -t themeOverride\n```\n\nExample usage:\n\n```sh\n---\ntype: code\n---\n#in the root of the project\nnpx @instructure/instui-cli codemod-v8 -t themeOverride -p ./src\n```\n\nTo learn more about the available options and defaults simply run:\n\n```sh\n---\ntype: code\n---\n npx @instructure/instui-cli codemod-v8 --help\n```\n\n#### theme.use() is deprecated\n\n```js\n---\ntype: embed\n---\n<ToggleBlockquote\n  summary=\"The theme.use() API is available again from version 8.24.0!\"\n>\n  <ToggleBlockquote.Paragraph>\n   To support multiple theming use cases we decided to re-introduce the <code>theme.use()</code> API into the library. <br/>\n   You can read more about how to use it in it's own or in conjunction with <code>InstUISettingsProvider</code> <Link href=\"/#using-theme-overrides/#using-theme-overrides-how-theming-works-in-instui\">here</Link>.\n  </ToggleBlockquote.Paragraph>\n</ToggleBlockquote>\n```\n\nApplying themes with the former `.use()` method of themes (added by ui-themeable) is now deprecated. Wrap your app in `InstUISettingsProvider` instead.\n\n```js\n---\ntype: code\n---\n// before\nimport { canvas, canvasHighContrast } from '@instructure/ui-themes'\nif (localStorage.getItem('mode') === 'highContrast') {\n  canvasHighContrast.use()\n} else {\n  canvas.use()\n}\n\n// after\nimport { canvas, canvasHighContrast } from '@instructure/ui-themes'\n\nReactDOM.render(\n  <InstUISettingsProvider\n    theme={\n      localStorage.getItem('mode') === 'highContrast'\n        ? canvasHighContrast\n        : canvas\n    }\n  >\n    <App />\n  </InstUISettingsProvider>,\n  element\n)\n```\n\nInstead of passing the theme overrides to the `.use()` method, just merge the theme with the global overrides when passing it to the theme provider.\n\n```js\n---\ntype: code\n---\n// before\nimport { theme } from '@instructure/canvas-theme'\ntheme.use({ overrides: { transitions: { duration: '0ms' } } })\n\n// after\nimport { theme } from '@instructure/canvas-theme'\nconst themeOverrides = { transitions: { duration: '0ms' } }\n\nReactDOM.render(\n  <InstUISettingsProvider theme={{ ...theme, ...themeOverrides }}>\n    <App />\n  </InstUISettingsProvider>,\n  element\n)\n```\n\n## Migrating your @themeable components\n\nAll InstUI components were migrated to use Emotion in v8.0, because it is not compatible with our former `ui-themeable`. In case you have any components of your own using the `@themeable` decorator, you'll have to migrate them too to use the new theming solution.\n\nWe tried our best to give detailed guides and examples for the migration steps, but if you need further information, **feel free to contact the InstUI team** on slack or via [GitHub tickets](https://github.com/instructure/instructure-ui).\n\n#### 1. Refactor theme.js\n\nThe `theme.js` needs a small modification. You can see the format convention in our **After** example below.\n\nRename the generator to `generateComponentTheme`. It still receives the theme object, and returns the variables mapped for the component, and the theme-specific styles.\n\nMove the variable map into a `componentVariables` object, and use optional chaining in the theme variables (e.g. colors?.textBrand).\n\nMove the theme specific generators inside the main generator to a `themeSpecificStyle` object with theme keys as props.\n\nMerge the default variable object and `themeSpecificStyle[theme.key]` in the return block with spread operator, with the latter at the end, so it can override the defaults.\n\n**Before:**\n\n```js\n---\ntype: code\n---\n// ui-themeable\n\nexport default function generator({ colors, borders, typography }) {\n  return {\n    color: colors.textBrand,\n    background: colors.backgroundLightest,\n    borderWidthSmall: borders.widthSmall,\n    borderWidthMedium: borders.widthMedium,\n    borderColor: colors.borderMedium,\n    fontFamily: typography.fontFamily,\n    fontWeight: typography.fontWeightBold\n  }\n}\n\ngenerator.canvas = function () {\n  return {\n    primaryColor: 'blue'\n  }\n}\n\ngenerator['canvas-high-contrast'] = function () {\n  return {\n    primaryColor: 'red'\n  }\n}\n```\n\n**After:**\n\n```js\n---\ntype: code\n---\n// emotion\n\n/**\n * Generates the theme object for the component from the theme and provided additional information\n * @param  {Object} theme The actual theme object.\n * @return {Object} The final theme object with the overrides and component variables\n */\nconst generateComponentTheme = (theme) => {\n  // the props of the theme you want to use\n  const { colors, borders, typography, key: themeName } = theme\n\n  // if you need different styling in specific themes,\n  // add them here with the key of the theme\n  const themeSpecificStyle = {\n    'canvas-high-contrast': {\n      primaryColor: 'red'\n    },\n    canvas: {\n      primaryColor: 'blue'\n    }\n  }\n\n  // map the theme variables to component specific style variables,\n  // and use optional chaining (?.)\n  const componentVariables = {\n    color: colors?.textBrand,\n    background: colors?.backgroundLightest,\n    borderWidthSmall: borders?.widthSmall,\n    borderWidthMedium: borders?.widthMedium,\n    borderColor: colors?.borderMedium,\n    fontFamily: typography?.fontFamily,\n    fontWeight: typography?.fontWeightBold\n  }\n\n  // return with the final theme object of the component\n  // with the added theme specific overrides\n  return {\n    ...componentVariables,\n    ...themeSpecificStyle[themeName]\n  }\n}\nexport default generateComponentTheme\n```\n\n#### 2. Create the styles.js file\n\nThe two main advantages of the new approach are that\n\n- we can directly use the component theme variables in the styling _(instead of generating tons of CSS custom properties)_,\n- and we can pass the component props to the generator, so we can handle all prop-based styling here _(instead of adding multiple conditional classes in the `index.js`)_.\n\nMigrating the styling from the `styles.css` to the `styles.js` will need some manual work (or a bit more for complex components). You'll have to convert the css to js, but luckily there are many online [css-to-js transformers](https://transform.tools/css-to-js) that can help.\n\nCreate a `styles.js` file next to the `theme.js`. Write and export a function named `generateStyle`. It receives the `componentTheme` generated by `theme.js`, the component props and a `state` object as arguments. These additional `state` variables can be passed from the component in the `makeStyles` method (see later).\n\nUse the content of the `styles.css` and convert it to css-in-js. Use the passed component variables, props and state where needed. (More info in the [emotion](#emotion) docs.) Use [Emotion's Object Styles documentation](https://emotion.sh/docs/object-styles) or other InstUI components as a reference.\n\n```js\n---\ntype: code\n---\n/**\n * Generates the style object from the theme and provided additional information\n * @param  {Object} componentTheme The theme variable object.\n * @param  {Object} props the props of the component, the style is applied to\n * @param  {Object} state the state of the component, the style is applied to\n * @return {Object} The final style object, which will be used in the component\n */\nconst generateStyle = (componentTheme, props, state) => {\n  const { color } = props\n\n  // optional mappings can be provided based on props\n  const colorStyles = {\n    primary: {\n      color: componentTheme.primaryColor,\n      fontSize: '20px'\n    },\n    info: {\n      color: componentTheme.infoColor\n    }\n  }\n\n  // return with the css you'd like to apply to the component\n  return {\n    componentName: {\n      label: 'componentName',\n      display: 'block',\n      background: componentTheme.background,\n      boxSizing: 'border-box',\n      ...colorStyles[color]\n    },\n    child: {\n      label: 'componentName__child',\n      color: 'green',\n      background: componentTheme.infoColor\n    }\n  }\n}\nexport default generateStyle\n```\n\n#### 3. Make changes in the component\n\nIn the `index.js` of the component, replace the imports, the decorator, and refactor the style handling.\n\n##### 1. jsx\n\nAdd the `/** @jsx jsx */` annotation on top.\n\n```js\n---\ntype: code\n---\n/** @jsx jsx */\nimport { Children, Component } from 'react'\n```\n\n##### 2. imports\n\n- Replace `@instructure/ui-themeable` import with `{ withStyle, jsx }` from `@instructure/emotion`.\n- Replace the `theme` import with component theme generator (`generateComponentTheme`) from `theme.js`.\n- Replace the `styles.css` import with the style generator (`generateStyle`) import from `styles.js`.\n- Don't forget to update the dependencies in `package.json`.\n\n```js\n---\ntype: code\n---\n// before\nimport { themeable } from '@instructure/ui-themeable'\nimport theme from './theme'\nimport styles from './styles.css'\n\n// after\nimport { withStyle, jsx } from '@instructure/emotion'\nimport generateComponentTheme from './theme'\nimport generateStyle from './styles'\n```\n\n**Note:** these utils were moved from `ui-themeable` to the `emotion` package: ThemeablePropValues, ThemeablePropTypes, makeThemeVars, getShorthandPropValue, mirrorShorthandCorners, mirrorShorthandEdges. Update the import where needed. We provided a codemod for these import transformations:\n\n```bash\n---\ntype: code\n---\nnpx @instructure/instui-cli codemod --scope-modifications imports -v 8\n```\n\n##### 3. decorator\n\nReplace `@themeable` decorator with `@withStyle(generateStyle, generateComponentTheme)`, passing the style and theme generators. (If needed, you can pass `null` instead of both, e.g. when there is a stylesheet, but you don't use any theme variables.)\n\n```js\n---\ntype: code\n---\n// before\n@themeable(theme, styles)\nclass ExampleComponent extends Component { ... }\n\n// after\n@withStyle(generateStyle, generateComponentTheme)\nclass ExampleComponent extends Component { ... }\n```\n\n##### 4. props and lifecycle methods\n\nThe props `makeStyles` and `styles` are added by the decorator, so you might run into eslint errors when using them in the component. We recommend adding them to propTypes, and suppressing the eslint errors there.\n\nIn the `componentDidMount` and `componentDidUpdate` methods, call the `makeStyles` method (available on this.props) to generate the styles object, passing the state (or any other object needed).\n\n```js\n---\ntype: code\n---\nstatic propTypes = {\n  // eslint-disable-next-line react/require-default-props\n  makeStyles: PropTypes.func,\n  // eslint-disable-next-line react/require-default-props\n  styles: PropTypes.object,\n  ...\n}\n\ncomponentDidMount() {\n  this.props.makeStyles({ focused: this.state.focused })\n}\n\ncomponentDidUpdate() {\n  this.props.makeStyles({ focused: this.state.focused })\n}\n```\n\n##### 5. render and applying styles\n\nIn the `render` method, use emotion's `css={this.props.styles.componentName}` syntax to add styles. Refactor your code to move all style-related logic to the `styles.js`.\n\n**Before:**\n\n```jsx\n---\ntype: code\n---\n// before in index.js\nrender() {\n  const classes = {\n    [styles.root]: true,\n    [styles[size]]: true,\n    [styles.disabled]: disabled\n  }\n\n  return (\n    <div className={classnames(classes)}>...</div>\n  )\n}\n```\n\n```css\n---\ntype: code\n---\n\n/* before in styles.css */\n.root {\n  display: block;\n  font-family: var(--fontFamily);\n}\n.small {\n  font-size: 1em;\n}\n.medium {\n  font-size: 1.5em;\n}\n.large {\n  font-size: 2em;\n}\n.disabled {\n  pointer-events: none;\n}\n```\n\n**After:**\n\n```jsx\n---\ntype: code\n---\n// after in index.js\nrender() {\n  return (\n    <div css={styles.componentName}>...</div>\n  )\n}\n```\n\n```js\n---\ntype: code\n---\n// after in styles.js\nconst sizeVariants = {\n  small: { fontSize: '1em' },\n  medium: { fontSize: '1.5em' },\n  large: { fontSize: '2em' }\n}\n\nreturn {\n  componentName: {\n    label: 'componentName',\n    display: 'block',\n    fontFamily: componentTheme.fontFamily,\n    ...sizeVariants[props.size],\n    ...(props.disabled && { pointerEvent: 'none' })\n  }\n}\n```\n\n#### Accessing theme variables in index.js\n\nIf you access theme variables in the `index.js`, you need to pass them through `styles.js`, they are not accessible on the component (on `this.theme`) anymore.\n\nBefore:\n\n```jsx\n---\ntype: code\n---\nrender() {\n  return (\n    <div maxWidth={this.theme.maxWidth}>\n      ...\n    </div>\n  )\n}\n```\n\nAfter:\n\n```js\n---\ntype: code\n---\n// after in styles.js\nreturn {\n  componentName: {\n    label: 'componentName'\n    // ...\n  },\n  maxWidth: componentTheme.maxWidth\n}\n```\n\n```jsx\n---\ntype: code\n---\n// after in index.js\nrender() {\n  return (\n    <div maxWidth={this.props.styles.maxWidth}>\n      ...\n    </div>\n  )\n}\n```\n\n#### Global styles\n\nGlobal styles need to be transformed to the \"emotion way\" too.\n\n**Before:**\n\n```css\n---\ntype: code\n---\n\n// styles.css\n\n:global {\n  .CodeMirror {\n    height: auto;\n    background: var(--background);\n    // ...\n  }\n}\n```\n\n**After:**\n\nWrite your global styles in the `styles.js` file on a \"globalStyles\" key. You don't have to add labels to global styles.\n\n```js\n---\ntype: code\n---\n// styles.js\n\nreturn {\n  globalStyles: {\n    '.CodeMirror': {\n      height: 'auto',\n      background: componentTheme.background\n      // ...\n    }\n  }\n}\n```\n\nIn the `index.js`, import `Global` from `@instructure/emotion`, which is equivalent to the [Global](https://emotion.sh/docs/globals) component of Emotion.js.\n\nIn the render method, use the `<Global>` component and pass the the \"globalStyles\" as its `styles={}` property.\n\n```jsx\n---\ntype: code\n---\n// index.js\n\nimport { withStyle, jsx, Global } from '@instructure/emotion'\n\n// ...\n\nrender() {\n  const { styles } = this.props\n\n  return (\n    <div css={styles.codeEditor}>\n      <Global styles={styles.globalStyles} />\n      // ...\n    </div>\n  )\n}\n```\n\n#### Keyframes\n\nAnimations are handled with Emotion's [keyframes](https://emotion.sh/docs/keyframes) helper.\n\n**Before:**\n\n```css\n---\ntype: code\n---\n\n// styles.css\n\n@keyframes pulse {\n  to {\n    transform: scale(1);\n    opacity: 0.9;\n  }\n}\n\n.componentClass {\n  // ...\n  animation-name: pulse;\n}\n```\n\n**After:**\n\nImport `keyframes` from `@instructure/emotion` in the `styles.js` file.\n\nDefine the animation on the top of the page as a `const` and use it in your style object where needed. **Make sure that it is defined outside of the `generateStyle` method, otherwise it is causing problems with style recalculation.**\n\n```js\n---\ntype: code\n---\n// styles.js\n\nimport { keyframes } from '@instructure/emotion'\n\nconst pulseAnimation = keyframes`\n  to {\n    transform: scale(1);\n    opacity: 0.9;\n  }`\n\nconst generateStyle = (componentTheme, props, state) => {\n  // ...\n\n  return {\n    componentClass: {\n      // ...\n      animationName: pulseAnimation\n    }\n  }\n}\n```\n\n#### An example component using emotion theming\n\n```jsx\n---\ntype: code\n---\n/** @jsx jsx */\nimport { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { passthroughProps } from '@instructure/ui-react-utils'\n\nimport { withStyle, jsx } from '@instructure/emotion'\n\nimport generateStyle from './styles'\nimport generateComponentTheme from './theme'\n\n/**\n---\ncategory: components\n---\n**/\n@withStyle(generateStyle, generateComponentTheme)\nclass ExampleComponent extends Component {\n  static propTypes = {\n    // eslint-disable-next-line react/require-default-props\n    makeStyles: PropTypes.func,\n    // eslint-disable-next-line react/require-default-props\n    styles: PropTypes.object,\n    children: PropTypes.node,\n    elementRef: PropTypes.func\n  }\n\n  static defaultProps = {\n    children: null,\n    elementRef: (el) => {}\n  }\n\n  componentDidMount() {\n    this.props.makeStyles()\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.props.makeStyles()\n  }\n\n  render() {\n    const { children, elementRef, styles, ...props } = this.props\n    return (\n      <div\n        {...passthroughProps(props)}\n        ref={elementRef}\n        css={styles.exampleComponent}\n      >\n        <div css={styles.componentName__children}>{children}</div>\n      </div>\n    )\n  }\n}\n\nexport { ExampleComponent }\nexport default ExampleComponent\n```\n\n#### Theme tests\n\nFor components with theme tests, you can use `generateComponentTheme` from `theme.js` to get the theme variables.\n\nImport the themes needed for your test, and pass them to the generator.\n\n```js\n---\ntype: code\n---\nimport { canvas, canvasHighContrast } from '@instructure/ui-themes'\nimport generateComponentTheme from '../theme'\ndescribe('YourComponent.theme', () => {\n  describe('with canvas theme', () => {\n    const variables = generateComponentTheme(canvas)\n\n    describe('default', () => {\n      it('should ensure background color and text color meet 3:1 contrast', () => {\n        expect(contrast(variables.background, variables.color)).to.be.above(3)\n      })\n    })\n  })\n  describe('with the \"canvas-high-contrast\" theme', () => {\n    const variables = generateComponentTheme(canvasHighContrast)\n\n    describe('default', () => {\n      it('should ensure background color and text color meet 4.5:1 contrast', () => {\n        expect(contrast(variables.background, variables.color)).to.be.above(4.5)\n      })\n    })\n  })\n})\n```\n","title":"Themeable to Emotion Migration Guide for Version 8.0","category":"Guides","order":3,"relativePath":"docs/guides/themeable-to-emotion-migration-guide.md","extension":".md","srcPath":"docs/guides/themeable-to-emotion-migration-guide.md","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/guides/themeable-to-emotion-migration-guide.md","packageName":"@instructure/docs","requirePath":"@instructure/docs/guides/themeable-to-emotion-migration-guide","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/docs/guides/themeable-to-emotion-migration-guide.md').default","esPath":"@instructure/docs/guides/themeable-to-emotion-migration-guide","themePath":"docs/guides/themeable-to-emotion-migration-guide.md","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/docs/guides/themeable-to-emotion-migration-guide.md","id":"themeable-to-emotion-migration-guide"}