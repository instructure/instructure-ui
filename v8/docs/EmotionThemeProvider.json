{"description":"@module EmotionThemeProvider\n```js\n---\ntype: embed\n---\n<ToggleBlockquote\n  summary=\"DEPRECATED\"\n>\n  <ToggleBlockquote.Paragraph>\n    This component is deprecated. Please use <Link href=\"#InstUISettingsProvider\">InstUISettingsProvider</Link> instead. It has the same functionality and adds additional configuration.\n  </ToggleBlockquote.Paragraph>\n</ToggleBlockquote>\n```\n\nThe `<EmotionThemeProvider/>` component provides a way to set the theme for our app or override the default theme properties for all themeable child components using the [withStyle](#withStyle) decorator.\n\nNote that `<EmotionThemeProvider/>` components can be nested and that\ntheme properties will fall back to the parent theme, or the default `canvas` theme when they are not set.\n\n`<EmotionThemeProvider/>` is a wrapper for the [ThemeProvider](https://emotion.sh/docs/theming#themeprovider-reactcomponenttype) of Emotion library that we use under the hood for theming and applying css styles to our components.\n\n### Applying theme to the application:\n\nTo apply a theme to whole app, you need to import `<EmotionThemeProvider/>` and the theme you want to use from `@instructure/ui-themes` (or use your own compatible theme), and wrap your app in the theme provider.\n\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { instructure } from '@instructure/ui-themes'\nimport { EmotionThemeProvider } from '@instructure/emotion'\n\nimport { App } from './App'\n\nReactDOM.render(\n  <EmotionThemeProvider theme={instructure}>\n    <App />\n  </EmotionThemeProvider>,\n  document.getElementById('app')\n)\n```\n\n### Nesting theme providers\n\n```js\n<EmotionThemeProvider theme={canvas}>\n  <Heading>I should have \"canvas\" font family.</Heading>\n\n  <EmotionThemeProvider theme={instructure}>\n    <Heading>I should have \"instructure\" font family.</Heading>\n  </EmotionThemeProvider>\n</EmotionThemeProvider>\n```\n\n### Global overrides\n\n`<EmotionThemeProvider/>`accepts override objects too. Here you can override any theme variable inside that provider.\n\n```js\n---\ntype: example\n---\n<EmotionThemeProvider theme={canvas}>\n  <div>\n    <Heading level=\"h3\" margin=\"small small medium\">I should have default font family.</Heading>\n\n    <EmotionThemeProvider\n      theme={{\n        typography: { fontFamily: 'monospace' }\n      }}\n    >\n      <Heading level=\"h3\" margin=\"small small\">I should have monospace font family.</Heading>\n    </EmotionThemeProvider>\n  </div>\n</EmotionThemeProvider>\n```\n\n### Theme overrides\n\nIn case you are using multiple themes in your app, you can target a specific theme to override with the `themeOverrides` key, and under the name (key) of the theme.\n\n```js\n---\n type: example\n---\n<EmotionThemeProvider theme={canvas}>\n  <div>\n  <Alert variant=\"info\" margin=\"small\">\n    I am a default style Alert.\n  </Alert>\n\n  <EmotionThemeProvider\n    theme={{\n      themeOverrides: {\n        canvas: {\n          colors: { backgroundLightest: 'orange' }\n        },\n        'canvas-high-contrast': {\n          colors: { backgroundLightest: 'red' }\n        },\n        instructure: {\n          colors: { backgroundLightest: 'green' }\n        }\n      }\n    }}\n  >\n    <Alert variant=\"info\" margin=\"small\">\n      My background should be:\n      <List margin=\"xx-small\">\n        <List.Item><strong>orange</strong> in 'canvas',</List.Item>\n        <List.Item><strong>red</strong> in 'canvas-high-contrast',</List.Item>\n        <List.Item>and <strong>green</strong> in 'instructure' theme.</List.Item>\n      </List>\n    </Alert>\n  </EmotionThemeProvider>\n</div>\n</EmotionThemeProvider>\n```\n\n### Global component theme overrides\n\nYou can globally override the themeVariables of specific components too with the `componentOverrides` key.\n\n**Important:** these variables are the components own theme variables set in the `theme.js` of the component.\n\nThe `componentOverrides` can also be nested inside `themeOverrides`.\n\n**Note:** these overrides are handled in the `getComponentThemeOverride` style util method, not in\n`EmotionThemeProvider`.\n\n```js\n---\n  type: example\n---\n<EmotionThemeProvider theme={canvas}>\n  <div>\n    <Alert variant=\"info\" margin=\"small\">\n      I am a default style Alert.\n    </Alert>\n\n    <EmotionThemeProvider\n      theme={{\n        componentOverrides: {\n          Alert: {\n            infoIconBackground: \"darkblue\",\n            infoBorderColor: \"darkblue\"\n          },\n          [List.Item.componentId]: {\n            color: \"red\"\n          },\n          'InlineList.Item': {\n            color: \"blue\"\n          }\n        },\n        themeOverrides: {\n          canvas: {\n            colors: {\n              backgroundLightest: \"lightgray\"\n            },\n            componentOverrides: {\n              Alert: {\n                warningIconBackground: \"deeppink\",\n                warningBorderColor: \"deeppink\"\n              }\n            },\n          }\n        }\n      }}\n    >\n      <Alert variant=\"success\" margin=\"small\">\n        My background should be light gray in 'canvas' theme.\n      </Alert>\n\n      <Alert variant=\"warning\" margin=\"small\">\n        My background should be light gray and the icon background should be pink in 'canvas' theme.\n      </Alert>\n\n      <Alert variant=\"info\" margin=\"small\">\n        My background should be light gray in 'canvas' theme, and the icon background should be dark blue in any theme.\n      </Alert>\n      <List margin=\"large 0\">\n        <List.Item>These List.Items have red color.</List.Item>\n        <List.Item>These List.Items have red color.</List.Item>\n        <List.Item>These List.Items have red color.</List.Item>\n      </List>\n      <div>\n        <InlineList delimiter=\"pipe\" margin=\"large 0\">\n          <InlineList.Item>This text should be blue</InlineList.Item>\n          <InlineList.Item>10pts</InlineList.Item>\n          <InlineList.Item><b>Due:</b> Oct 1, 2019</InlineList.Item>\n          <InlineList.Item><Link href=\"#\">Pipe Separator</Link></InlineList.Item>\n        </InlineList>\n      </div>\n    </EmotionThemeProvider>\n  </div>\n</EmotionThemeProvider>\n```\n","displayName":"EmotionThemeProvider","methods":[],"props":{"theme":{"defaultValue":{"value":"{}","computed":false},"required":false}},"category":"components/utilities","relativePath":"packages/emotion/src/EmotionThemeProvider/index.tsx","extension":".tsx","srcPath":"packages/emotion/src/EmotionThemeProvider/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/emotion/src/EmotionThemeProvider/index.tsx","packageName":"@instructure/emotion","requirePath":"@instructure/emotion/lib/EmotionThemeProvider/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/emotion/src/EmotionThemeProvider/index.tsx').default","esPath":"@instructure/emotion/es/EmotionThemeProvider/index","id":"EmotionThemeProvider","title":"EmotionThemeProvider"}