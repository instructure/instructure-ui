{"description":"\nSome design patterns require a `CloseButton` to be placed in the start or end position. This is a helper component that gives you the close icon out of the box and facilitates placement.\n\nThe `placement` prop designates the `CloseButton` placement within the parent container. Note that in order to apply an `offset`, `placement` should be set to `start` or `end`. Also make sure that the container has a `position` css style applied other than `static`. In the following example we use [View](#View) as the container and set the `position` to `relative`.\n\n```js\n---\ntype: example\n---\n<View display=\"block\" position=\"relative\" height=\"5rem\" background=\"primary\" shadow=\"resting\">\n  <CloseButton placement=\"end\" offset=\"small\" screenReaderLabel=\"Close\" />\n</View>\n```\n\nIf you need the `CloseButton` to work in a layout with other elements vs. absolutely positioning it, you can omit the `placement` prop or set it to `static`. You can then use another tool such as [Flex](#Flex) to handle the layout.\n\n```js\n---\ntype: example\n---\n<View display=\"block\" position=\"relative\" background=\"primary\" shadow=\"resting\">\n  <Flex height=\"6rem\" justifyItems=\"space-between\" alignItems=\"center\" padding=\"medium\">\n    <Flex.Item shouldShrink shouldGrow>\n      <Heading level=\"h2\">Some Heading Text</Heading>\n    </Flex.Item>\n    <Flex.Item padding=\"none none none medium\">\n      <CloseButton size=\"medium\" screenReaderLabel=\"Close\" />\n    </Flex.Item>\n  </Flex>\n</View>\n```\n\nIf you need even more customization, note that you can always compose this component using the [IconButton](#IconButton) directly. Supply the `renderIcon` prop with [IconXSolid](#Iconography) and set the `withBorder` and `withBackground` props to `false`.\n\n```js\n---\ntype: example\n---\n<View display=\"block\" position=\"relative\" height=\"5rem\" background=\"primary\" shadow=\"resting\">\n  <Flex justifyItems=\"end\">\n    <Flex.Item>\n      <IconButton\n        screenReaderLabel=\"Close\"\n        renderIcon={IconXSolid}\n        size=\"small\"\n        withBackground={false}\n        withBorder={false}\n        margin=\"small\"\n      />\n    </Flex.Item>\n  </Flex>\n</View>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Set the <code>color</code> prop to <code>primary</code> when a CloseButton appears on a dark background to ensure adequate contrast</Figure.Item>\n    <Figure.Item>Ensure the CloseButton is labeled correctly using the <code>screenReaderLabel</code> prop so screen readers announce what action will be taken when selected</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"CloseButton","methods":[],"props":{"screenReaderLabel":{"type":{"name":"union","value":[{"name":"string"},{"name":"node"}]},"required":true,"description":"An accessible label for the `CloseButton` (required)","tsType":{"name":"ReactReactNode","raw":"React.ReactNode"}},"color":{"type":{"name":"enum","value":[{"value":"'primary'","computed":false},{"value":"'primary-inverse'","computed":false}]},"required":false,"description":"Specifies the color for the `CloseButton`.","tsType":{"name":"union","raw":"'primary' | 'primary-inverse'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"}]}},"interaction":{"type":{"name":"enum","value":[{"value":"'enabled'","computed":false},{"value":"'disabled'","computed":false},{"value":"'readonly'","computed":false}]},"required":false,"description":"Specifies if interaction with the `CloseButton` is enabled, disabled, or readonly.","tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"defaultValue":{"value":"undefined","computed":true}},"elementRef":{"type":{"name":"func"},"required":false,"description":"Provides a reference to the `CloseButton`'s underlying html element.","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"size":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"The size of the `CloseButton`","tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"defaultValue":{"value":"'small'","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"Callback fired when the `CloseButton` is clicked.","tsType":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}}}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"},"defaultValue":{"value":"'0'","computed":false}},"placement":{"type":{"name":"enum","value":[{"value":"'start'","computed":false},{"value":"'end'","computed":false},{"value":"'static'","computed":false}]},"required":false,"description":"Specifies the placement of the `CloseButton`","tsType":{"name":"union","raw":"'start' | 'end' | 'static'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'end'"},{"name":"literal","value":"'static'"}]},"defaultValue":{"value":"'static'","computed":false}},"offset":{"type":{"name":"enum","value":[{"value":"'none'","computed":false},{"value":"'x-small'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false}]},"required":false,"description":"Specifies the offset distance for the `CloseButton` with respect to both the top and start/end of the container.\nNote that for this property to have an effect, the `placement` prop must be set to either `start` or `end`. The\noffset will also be created with respect to a positioned parent. If it does not appear to be working, try setting\nthe `position` of the parent container to `relative`.","tsType":{"name":"union","raw":"'none' | 'x-small' | 'small' | 'medium'","elements":[{"name":"literal","value":"'none'"},{"name":"literal","value":"'x-small'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"}]},"defaultValue":{"value":"'x-small'","computed":false}},"type":{"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'submit'","computed":false},{"value":"'reset'","computed":false}]},"required":false,"description":"Specifies the type of the `Button`'s underlying html element.","tsType":{"name":"union","raw":"'button' | 'submit' | 'reset'","elements":[{"name":"literal","value":"'button'"},{"name":"literal","value":"'submit'"},{"name":"literal","value":"'reset'"}]},"defaultValue":{"value":"'button'","computed":false}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element to render as the component root, `CloseButton` by default.","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"defaultValue":{"value":"'button'","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":"Specifies an href attribute for the `CloseButton`'s underlying html element.","tsType":{"name":"string"}},"cursor":{"type":{"name":"string"},"required":false,"description":"Specify a mouse cursor to use when hovering over the `CloseButton`.","tsType":{"name":"Cursor"},"defaultValue":{"value":"'pointer'","computed":false}},"tabIndex":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"Specifies the tabindex of the `CloseButton`.\n\n(`string` type is __deprecated__, use `number`)","tsType":{"name":"union","raw":"number | string","elements":[{"name":"number"},{"name":"string"}]}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""},"to":{"required":false,"tsType":{"name":"string"},"description":"Needed for React Router links\n@private"}},"category":"components","relativePath":"packages/ui-buttons/src/CloseButton/index.tsx","extension":".tsx","srcPath":"packages/ui-buttons/src/CloseButton/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/CloseButton/index.tsx","packageName":"@instructure/ui-buttons","requirePath":"@instructure/ui-buttons/lib/CloseButton/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-buttons/src/CloseButton/index.tsx').default","esPath":"@instructure/ui-buttons/es/CloseButton/index","themePath":"packages/ui-buttons/src/CloseButton/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/CloseButton/theme.ts","id":"CloseButton","title":"CloseButton"}