{"description":"\nThe Overlay component is a closable/dismissible component that transitions\nin and out content rendered in a [Portal](#Portal)\n\n```js\n---\ntype: example\n---\nconst Example = () => {\n  const [open, setOpen] = useState(false)\n  const maskRef = useRef(null)\n\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setOpen(true)\n        }}\n      >\n        Show the Overlay\n      </Button>\n      <Overlay\n        open={open}\n        transition=\"fade\"\n        label=\"Overlay Example\"\n        shouldReturnFocus\n        shouldContainFocus\n        onDismiss={() => {\n          setOpen(false)\n        }}\n        defaultFocusElement={() => maskRef.current}\n      >\n        <Mask\n          onClick={() => {\n            setOpen(false)\n          }}\n          elementRef={maskRef}\n        >\n          <Spinner renderTitle=\"Loading\" size=\"large\" margin=\"0 0 0 medium\" />\n        </Mask>\n      </Overlay>\n    </div>\n  )\n}\nrender(<Example />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>Ensure content behind the overlay is hidden from users so they cannot navigate to it when using keyboard navigation and screen readers</Figure.Item>\n    <Figure.Item>Dismissable with the ESC key</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Overlay","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"DOMNode","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"DOMNode","docblock":null,"modifiers":["set"],"params":[{"name":"el","optional":false,"type":null}],"returns":null},{"name":"handlePortalOpen","docblock":null,"modifiers":[],"params":[{"name":"DOMNode","optional":false,"type":{"name":"PortalNode","alias":"PortalNode"}}],"returns":null},{"name":"handleTransitionExited","docblock":null,"modifiers":[],"params":[{"name":"_type","optional":true,"type":{"name":"TransitionType","alias":"TransitionType"}}],"returns":null},{"name":"renderTransition","docblock":null,"modifiers":[],"params":[{"name":"content","optional":false,"type":{"name":"ReactElement","elements":[{"name":"DialogProps"},{"name":"ComponentClass","elements":[{"name":"DialogProps"}],"raw":"ComponentClass<DialogProps>"}],"raw":"ReactElement<DialogProps, ComponentClass<DialogProps>>","alias":"ReactElement"}}],"returns":null}],"props":{"open":{"required":false,"tsType":{"name":"boolean"},"description":"Whether or not the `<Overlay />` is open","defaultValue":{"value":"false","computed":false}},"transition":{"required":false,"tsType":{"name":"TransitionType"},"description":"The type of `<Transition />` to use for animating in/out"},"onOpen":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(DOMNode: PortalNode) => void","signature":{"arguments":[{"type":{"name":"PortalNode"},"name":"DOMNode"}],"return":{"name":"void"}}},"description":"Callback fired when `<Portal />` content has been mounted in the DOM"},"onClose":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired when `<Portal />` has been unmounted from the DOM"},"mountNode":{"required":false,"tsType":{"name":"PositionMountNode"},"description":"An element or a function returning an element to use as the mount node\nfor the `<Portal />` (defaults to `document.body`)"},"insertAt":{"required":false,"tsType":{"name":"union","raw":"'bottom' | 'top'","elements":[{"name":"literal","value":"'bottom'"},{"name":"literal","value":"'top'"}]},"description":"Insert the element at the 'top' of the mountNode or at the 'bottom'","defaultValue":{"value":"'bottom'","computed":false}},"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":""},"label":{"required":true,"tsType":{"name":"string"},"description":"An accessible label for the `<Overlay />` content"},"defaultFocusElement":{"required":false,"tsType":{"name":"union","raw":"| Node\n| Window\n| ReactElement\n| Component\n| (() => Node | Window | null | undefined)\n| null","elements":[{"name":"Node"},{"name":"Window"},{"name":"ReactElement"},{"name":"Component"},{"name":"unknown"},{"name":"null"}]},"description":"An element or a function returning an element to focus by default"},"contentElement":{"required":false,"tsType":{"name":"union","raw":"| Node\n| Window\n| ReactElement\n| Component\n| (() => Node | Window | null | undefined)\n| null","elements":[{"name":"Node"},{"name":"Window"},{"name":"ReactElement"},{"name":"Component"},{"name":"unknown"},{"name":"null"}]},"description":"An element or a function returning an element that wraps the content of the `<Overlay />`"},"shouldContainFocus":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"shouldReturnFocus":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"shouldCloseOnDocumentClick":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"false","computed":false}},"shouldCloseOnEscape":{"required":false,"tsType":{"name":"boolean"},"description":"","defaultValue":{"value":"true","computed":false}},"onDismiss":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  event: React.UIEvent | React.FocusEvent,\n  documentClick?: boolean\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.UIEvent | React.FocusEvent","elements":[{"name":"ReactUIEvent","raw":"React.UIEvent"},{"name":"ReactFocusEvent","raw":"React.FocusEvent"}]},"name":"event"},{"type":{"name":"boolean"},"name":"documentClick"}],"return":{"name":"void"}}},"description":"Callback fired when the `<Overlay />` is requesting to be closed"},"in":{"required":false,"tsType":{"name":"boolean"},"description":"Show the component; triggers the enter or exit animation","defaultValue":{"value":"false","computed":false}},"unmountOnExit":{"required":false,"tsType":{"name":"boolean"},"description":"Unmount the component (remove it from the DOM) when it is not shown","defaultValue":{"value":"false","computed":false}},"transitionOnMount":{"required":false,"tsType":{"name":"boolean"},"description":"Run the enter animation when the component mounts, if it is initially\nshown","defaultValue":{"value":"false","computed":false}},"transitionEnter":{"required":false,"tsType":{"name":"boolean"},"description":"Run the enter animation","defaultValue":{"value":"true","computed":false}},"transitionExit":{"required":false,"tsType":{"name":"boolean"},"description":"Run the exit animation","defaultValue":{"value":"true","computed":false}},"onEnter":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired before the \"entering\" classes are applied"},"onEntering":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired after the \"entering\" classes are applied"},"onEntered":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"TransitionType"},"name":"type"}],"return":{"name":"void"}}},"description":"Callback fired after the \"enter\" classes are applied"},"onExit":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired before the \"exiting\" classes are applied"},"onExiting":{"required":false,"tsType":{"name":"signature","type":"function","raw":"() => void","signature":{"arguments":[],"return":{"name":"void"}}},"description":"Callback fired after the \"exiting\" classes are applied"},"onExited":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(type?: TransitionType) => void","signature":{"arguments":[{"type":{"name":"TransitionType"},"name":"type"}],"return":{"name":"void"}}},"description":"Callback fired after the \"exited\" classes are applied"},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-overlays/src/Overlay/index.tsx","extension":".tsx","srcPath":"packages/ui-overlays/src/Overlay/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-overlays/src/Overlay/index.tsx","packageName":"@instructure/ui-overlays","requirePath":"@instructure/ui-overlays/lib/Overlay/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-overlays/src/Overlay/index.tsx').default","esPath":"@instructure/ui-overlays/es/Overlay/index","id":"Overlay","title":"Overlay"}