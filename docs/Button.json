{"description":"\nButton allows users to perform actions or trigger changes. If selecting the Button causes the user to navigate to a different location, consider using the [Link](#Link) component instead.\n\n```js\n---\ntype: example\n---\n<Button>Hello Instructure</Button>\n```\n\n### Color\n\nThe `color` prop will change the Button's color scheme.\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <Button color=\"primary\" margin=\"small\">Primary</Button>\n  <Button color=\"secondary\" margin=\"small\">Secondary</Button>\n  <Button color=\"success\" margin=\"small\">Success</Button>\n  <Button color=\"danger\" margin=\"small\">Danger</Button>\n  <Button color=\"primary-inverse\" margin=\"small\">Primary Inverse</Button>\n  <Button color=\"ai-primary\" margin=\"small\">AI Primary</Button>\n  <Button color=\"ai-secondary\" margin=\"small\">AI Secondary</Button>\n</View>\n```\n\n### AI buttons\n\nThere is a specific need for `AI buttons`, which has an icon and gradient colors for `background` and `borders`. Here are the preset examples you can use. (the `IconButton` examples are also included for convenience)\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <Button color=\"ai-primary\" renderIcon={IconAiSolid} margin=\"small\">AI Primary</Button>\n  <Button color=\"ai-secondary\" renderIcon={IconAiColoredSolid} margin=\"small\">AI Secondary</Button>\n  <IconButton color=\"ai-primary\" screenReaderLabel=\"AI button\" margin=\"small\"><IconAiSolid/></IconButton>\n  <IconButton  shape='circle' color=\"ai-secondary\" screenReaderLabel=\"AI button\"  margin=\"small\"><IconAiColoredSolid/></IconButton>\n  <IconButton   shape='circle' color=\"ai-primary\" screenReaderLabel=\"AI button\" margin=\"small\"><IconAiSolid/></IconButton>\n  <IconButton color=\"ai-secondary\" screenReaderLabel=\"AI button\"  margin=\"small\"><IconAiColoredSolid/></IconButton>\n</View>\n```\n\n### Size\n\nTo specify the Button `size`, set the size prop to `small`, `medium` (default) or `large`.\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <Button size=\"small\" margin=\"small\">Small</Button>\n  <Button margin=\"small\">Medium</Button>\n  <Button size=\"large\" margin=\"small\">Large</Button>\n</View>\n```\n\n### Rendering icons in Buttons\n\nAn icon can be rendered alongside the Button content using the `renderIcon` prop. Use [IconButton](#IconButton) instead if your Button only displays an Icon with no other visual content.\n\n```js\n---\ntype: example\n---\n<Button renderIcon={IconAddLine}>Add Item</Button>\n```\n\n### Text wrapping\n\nJust like native HTML buttons, the Button text will wrap to the next line when it does not have enough room.\n\n```js\n---\ntype: example\n---\n<View\n  display=\"block\"\n  width=\"10rem\"\n  margin=\"small\"\n  padding=\"small none\"\n  withVisualDebug\n>\n  <Button color=\"primary\">\n    A Button With a Whole Lot of Text\n  </Button>\n</View>\n```\n\nIf you need to prevent text wrapping, you can use the [TruncateText](#TruncateText) util. You can also conditionally render a [Tooltip](#Tooltip) with the full text when truncation occurs.\n\n```js\n---\ntype: example\n---\n  const Example = ({ message }) => {\n    const [isTruncated, setIsTruncated] = useState(false)\n\n    const handleUpdate = (shouldBeTruncated) => {\n      if (isTruncated !== shouldBeTruncated) {\n        setIsTruncated(shouldBeTruncated)\n      }\n    }\n\n    const renderButton = () => {\n      return (\n        <Button color=\"primary\">\n          <TruncateText onUpdate={handleUpdate}>{message}</TruncateText>\n        </Button>\n      )\n    }\n\n    return (\n      <View\n        display=\"block\"\n        width=\"10rem\"\n        margin=\"small\"\n        padding=\"small none\"\n        withVisualDebug\n      >\n        {isTruncated ? (\n          <Tooltip\n            renderTip={message}\n            mountNode={() => document.getElementById('main')}\n          >\n            {renderButton()}\n          </Tooltip>\n        ) : (\n          renderButton()\n        )}\n      </View>\n    )\n  }\n\n  render(<Example message=\"A Button With a Whole Lot of Text\" />)\n```\n\n### Display\n\nBy default, the Button displays inline with other elements. If you need it to expand to fill the width of it's container, set the `display` prop to `block`.\n\n```js\n---\ntype: example\n---\n<View\n  display=\"block\"\n  width=\"30rem\"\n  margin=\"small\"\n  padding=\"small none\"\n  withVisualDebug\n>\n  <Button\n    renderIcon={IconUserLine}\n    display=\"block\"\n    textAlign=\"center\"\n    color=\"success\"\n  >\n    User Details\n  </Button>\n</View>\n```\n\n### Rendering Buttons without backgrounds\n\nUse backgroundless buttons for interfaces on dark backgrounds or when there is a need to deemphasize the button from another primary action on the page. Be sure to use border/text colors that meet the proper contrast ratios with whatever background they are placed on.\n\n```js\n---\ntype: example\n---\n<View display=\"block\">\n  <View display=\"inline-block\" background=\"primary\">\n    <Button renderIcon={IconAddLine} withBackground={false} color=\"primary\" margin=\"small\">Click here</Button>\n  </View>\n  <View display=\"inline-block\" background=\"primary-inverse\">\n    <Button renderIcon={IconAddLine} withBackground={false} color=\"primary-inverse\" margin=\"small\">Click here</Button>\n  </View>\n</View>\n```\n\n### Styling buttons\n\n[Button](#Button) and [IconButton](#IconButton) share the same styling mechanics (they are `BaseButton`s underneath). You need to set the theme based on their `color` and `withBackground` prop:\n\n```js\n---\ntype: example\n---\n  class Example extends React.Component {\n    state = {\n      withBackground: true,\n      color : \"secondary\"\n    }\n    toggleWithBackground = (event) => this.setState({ withBackground: !this.state.withBackground })\n    changeColor = (event,color) =>  {this.setState({color})}\n    render() {\n      const overrides = {\n        borderWidth: \"0.3rem\",\n        // what to override depends on the 'color' value (by default 'secondary')\n        // if withBackground is true:\n        secondaryColor: '#000000', // icon color\n        secondaryBackground: '#ff00ff',\n        secondaryBorderColor: 'brown',\n\n        secondaryActiveBackground: '#000000', // &:active CSS, e.g. space is pressed, not hovered, see https://developer.mozilla.org/en-US/docs/Web/CSS/:active\n        secondaryActiveBoxShadow: '10px 5px 5px red',\n\n        secondaryHoverBackground: '#00FF00',\n        // if withBackground is false:\n        secondaryGhostColor: '#0000FF',\n        secondaryGhostBackground: 'transparent',\n        secondaryGhostBorderColor: '#FF00FF',\n\n        secondaryGhostActiveBackground: '#FF0000',\n        secondaryGhostActiveBoxShadow: '10px 5px 5px green',\n\n        secondaryGhostHoverBackground: '#00FFFF',\n\n        secondaryBoxShadow: '0 0 0.4875rem 0.625rem yellow',\n        secondaryHoverBoxShadow: '0 0 0.1875rem 0.625rem lime',\n        secondaryActiveBoxShadow: '0 0px 0px 25px red',\n        secondaryGhostHoverBoxShadow: '0 0 0.7875rem 0.625rem pink',\n        secondaryGhostBoxShadow: '0 0 0.2875rem 0.625rem green',\n        secondaryGhostActiveBoxShadow: '10px 5px 5px blue'\n\n      }\n      return (\n        <>\n          <FormFieldGroup description=\"In this example 'secondary' colors are overridden\">\n            <Checkbox\n              checked={this.state.withBackground}\n              label=\"withBackground?\"\n              onChange={this.toggleWithBackground}\n            />\n          </FormFieldGroup>\n          <View display=\"block\" margin=\"small none\">\n            <RadioInputGroup\n              name=\"color\"\n              defaultValue=\"secondary\"\n              description=\"Color:\"\n              variant=\"toggle\"\n              size=\"small\"\n              onChange={this.changeColor} >\n              <RadioInput label=\"Primary\" value=\"primary\"/>\n              <RadioInput label=\"secondary\" value=\"secondary\" />\n            </RadioInputGroup>\n          </View>\n          <Flex margin=\"none none medium\" gap=\"medium\">\n            <Flex.Item>\n              <Button withBackground={this.state.withBackground}\n                      color={this.state.color}\n                      themeOverride={overrides}\n              >\n                Button\n              </Button>\n            </Flex.Item>\n            <Flex.Item>\n              <IconButton screenReaderLabel=\"View user profile\"\n                          withBackground={this.state.withBackground}\n                          color={this.state.color}\n                          themeOverride={overrides}>\n                <IconUserLine />\n              </IconButton>\n            </Flex.Item>\n          </Flex>\n        </>\n      )\n    }\n  }\nrender(<Example />)\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Use 'Title Case' for button text</Figure.Item>\n    <Figure.Item>Use buttons with color set to <code>primary</code> only once for each section of content</Figure.Item>\n    <Figure.Item>Use buttons with color set to <code>primary</code> when the task of the view requires an action to be taken</Figure.Item>\n    <Figure.Item>Use the <code>success</code> and <code>danger</code> colors for grading activities</Figure.Item>\n    <Figure.Item>Use the <code>danger</code> color to warn the user of potentially destructive actions</Figure.Item>\n    <Figure.Item>Use a button with color set to <code>secondary</code> as a secondary or tertiary option for actions such as Cancel</Figure.Item>\n    <Figure.Item>The <code>primary-inverse</code> color can be used as a secondary option instead of the <code>secondary</code> color when the background would otherwise match the <code>secondary</code> button color (example: ModalFooter). Set the focusColor to `info` as well with this configuration.</Figure.Item>\n    <Figure.Item>The maximum string length of any button, including spaces, should be 20 characters</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Use more than one button with color set to <code>primary</code> per section of content\n</Figure.Item>\n    <Figure.Item>Use buttons without backgrounds excessively</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"a11y\" title=\"Accessibility\">\n    <Figure.Item>When using buttons on a dark background, use the <code>primary-inverse</code> color to ensure adequate contrast</Figure.Item>\n    <Figure.Item>Buttons are activated with both Enter and Spacebar keys, and either key press will fire an `onClick` event</Figure.Item>\n    <Figure.Item>Disabled buttons do not need to meet color contrast ratio requirements or receive keyboard focus but will be read as \"disabled\" or \"dimmed\" by screen readers</Figure.Item>\n    <Figure.Item>Icon only buttons must have ScreenReaderContent added so screen readers indicate what the button is used for</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Button","methods":[{"name":"focused","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"focus","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"handleElementRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]}}],"returns":null},{"name":"handleButtonRef","docblock":null,"modifiers":[],"params":[{"name":"component","optional":false,"type":{"name":"union","raw":"BaseButton | null","elements":[{"name":"BaseButton"},{"name":"null"}]}}],"returns":null}],"props":{"children":{"required":false,"tsType":{"name":"ReactReactNode","raw":"React.ReactNode"},"description":"Specifies the `Button` children."},"type":{"required":false,"tsType":{"name":"union","raw":"'button' | 'submit' | 'reset'","elements":[{"name":"literal","value":"'button'"},{"name":"literal","value":"'submit'"},{"name":"literal","value":"'reset'"}]},"description":"Specifies the type of the `Button`'s underlying html element.","defaultValue":{"value":"'button'","computed":false}},"size":{"required":false,"tsType":{"name":"union","raw":"'small' | 'medium' | 'large'","elements":[{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"}]},"description":"The size of the `Button`","defaultValue":{"value":"'medium'","computed":false}},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a reference to the `Button`'s underlying html element."},"as":{"required":false,"tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]},"description":"The element to render as the component root, `Button` by default.","defaultValue":{"value":"'button'","computed":false}},"interaction":{"required":false,"tsType":{"name":"union","raw":"'enabled' | 'disabled' | 'readonly'","elements":[{"name":"literal","value":"'enabled'"},{"name":"literal","value":"'disabled'"},{"name":"literal","value":"'readonly'"}]},"description":"Specifies if interaction with the `Button` is enabled, disabled, or readonly.","defaultValue":{"value":"undefined","computed":true}},"color":{"required":false,"tsType":{"name":"union","raw":"| 'primary'\n| 'primary-inverse'\n| 'secondary'\n| 'success'\n| 'danger'\n| 'ai-primary'\n| 'ai-secondary'","elements":[{"name":"literal","value":"'primary'"},{"name":"literal","value":"'primary-inverse'"},{"name":"literal","value":"'secondary'"},{"name":"literal","value":"'success'"},{"name":"literal","value":"'danger'"},{"name":"literal","value":"'ai-primary'"},{"name":"literal","value":"'ai-secondary'"}]},"description":"Specifies the color for the `Button`.","defaultValue":{"value":"'secondary'","computed":false}},"focusColor":{"required":false,"tsType":{"name":"union","raw":"'info' | 'inverse'","elements":[{"name":"literal","value":"'info'"},{"name":"literal","value":"'inverse'"}]},"description":"Override the `Button`'s default focus outline color."},"display":{"required":false,"tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"description":"The `Button` display property. When set to `inline-block`, the `Button` displays inline with other elements.\nWhen set to block, the `Button` expands to fill the width of the container.","defaultValue":{"value":"'inline-block'","computed":false}},"textAlign":{"required":false,"tsType":{"name":"union","raw":"'start' | 'center'","elements":[{"name":"literal","value":"'start'"},{"name":"literal","value":"'center'"}]},"description":"Sets the alignment of the `Button` children and/or icon.","defaultValue":{"value":"'center'","computed":false}},"withBackground":{"required":false,"tsType":{"name":"boolean"},"description":"Specifies if the `Button` should render with a solid background. When false, the background is transparent.","defaultValue":{"value":"true","computed":false}},"margin":{"required":false,"tsType":{"name":"Spacing"},"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","defaultValue":{"value":"'0'","computed":false}},"cursor":{"required":false,"tsType":{"name":"union","raw":"| 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'grab'\n| 'grabbing'\n| 'all-scroll'\n| 'col-resize'\n| 'row-resize'\n| 'n-resize'\n| 'e-resize'\n| 's-resize'\n| 'w-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'ew-resize'\n| 'ns-resize'\n| 'nesw-resize'\n| 'nwse-resize'\n| 'zoom-in'\n| 'zoom-out'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'default'"},{"name":"literal","value":"'none'"},{"name":"literal","value":"'context-menu'"},{"name":"literal","value":"'help'"},{"name":"literal","value":"'pointer'"},{"name":"literal","value":"'progress'"},{"name":"literal","value":"'wait'"},{"name":"literal","value":"'cell'"},{"name":"literal","value":"'crosshair'"},{"name":"literal","value":"'text'"},{"name":"literal","value":"'vertical-text'"},{"name":"literal","value":"'alias'"},{"name":"literal","value":"'copy'"},{"name":"literal","value":"'move'"},{"name":"literal","value":"'no-drop'"},{"name":"literal","value":"'not-allowed'"},{"name":"literal","value":"'grab'"},{"name":"literal","value":"'grabbing'"},{"name":"literal","value":"'all-scroll'"},{"name":"literal","value":"'col-resize'"},{"name":"literal","value":"'row-resize'"},{"name":"literal","value":"'n-resize'"},{"name":"literal","value":"'e-resize'"},{"name":"literal","value":"'s-resize'"},{"name":"literal","value":"'w-resize'"},{"name":"literal","value":"'ne-resize'"},{"name":"literal","value":"'nw-resize'"},{"name":"literal","value":"'se-resize'"},{"name":"literal","value":"'sw-resize'"},{"name":"literal","value":"'ew-resize'"},{"name":"literal","value":"'ns-resize'"},{"name":"literal","value":"'nesw-resize'"},{"name":"literal","value":"'nwse-resize'"},{"name":"literal","value":"'zoom-in'"},{"name":"literal","value":"'zoom-out'"}]},"description":"Specify a mouse cursor to use when hovering over the button.\nThe `pointer` cursor is used by default.","defaultValue":{"value":"'pointer'","computed":false}},"href":{"required":false,"tsType":{"name":"string"},"description":"Specifies an href attribute for the `Button`'s underlying html element."},"renderIcon":{"required":false,"tsType":{"name":"union","raw":"React.ReactNode | (() => React.ReactNode)","elements":[{"name":"ReactReactNode","raw":"React.ReactNode"},{"name":"unknown"}]},"description":"An icon, or function that returns an icon."},"onClick":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(\n  event: React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>\n) => void","signature":{"arguments":[{"type":{"name":"union","raw":"React.KeyboardEvent<ViewProps> | React.MouseEvent<ViewProps>","elements":[{"name":"ReactKeyboardEvent","raw":"React.KeyboardEvent<ViewProps>","elements":[{"name":"ViewProps"}]},{"name":"ReactMouseEvent","raw":"React.MouseEvent<ViewProps>","elements":[{"name":"ViewProps"}]}]},"name":"event"}],"return":{"name":"void"}}},"description":"Callback fired when the `Button` is clicked."},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""},"to":{"required":false,"tsType":{"name":"string"},"description":"Needed for React Router links\n@private"}},"category":"components","relativePath":"packages/ui-buttons/src/Button/index.tsx","extension":".tsx","srcPath":"packages/ui-buttons/src/Button/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/Button/index.tsx","packageName":"@instructure/ui-buttons","requirePath":"@instructure/ui-buttons/lib/Button/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-buttons/src/Button/index.tsx').default","esPath":"@instructure/ui-buttons/es/Button/index","themePath":"packages/ui-buttons/src/Button/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-buttons/src/Button/theme.ts","id":"Button","title":"Button"}