{"description":"\nA component for picking a color from a list of colors. Supports adding new colors either programmatically through the `colors` prop, or manually with the built in color picker.\n\n### Color Preset\n\n```js\n---\ntype: example\n---\n  const Example = () => {\n    const [selected, setSelected] = useState('')\n    const [colors, setColors] = useState([\n      '#ffffff',\n      '#0CBF94',\n      '#0C89BF00',\n      '#BF0C6D',\n      '#BF8D0C',\n      '#ff0000',\n      '#576A66',\n      '#35423A',\n      '#35423F'\n    ])\n\n    return (\n      <div>\n        <ColorPreset\n          label=\"Choose a color\"\n          colors={colors}\n          selected={selected}\n          onSelect={setSelected}\n          colorScreenReaderLabel={(hexCode, isSelected) => {\n            return `color with hex code ${hexCode}${\n              isSelected ? ' selected' : ''\n            }`\n          }}\n        />\n      </div>\n    )\n  }\n\n  render(<Example />)\n```\n\n### Color Preset (with addition, deletion)\n\n```js\n---\ntype: example\n---\n  const Example = () => {\n    const [selected, setSelected] = useState('')\n    const [colors, setColors] = useState([\n      '#ffffff',\n      '#0CBF94',\n      '#0C89BF00',\n      '#BF0C6D',\n      '#BF8D0C',\n      '#ff0000',\n      '#576A66',\n      '#35423A',\n      '#35423F'\n    ])\n\n    return (\n      <div>\n        <ColorPreset\n          colors={colors}\n          selected={selected}\n          onSelect={setSelected}\n          colorMixerSettings={{\n            addNewPresetButtonScreenReaderLabel: 'Add new preset button label',\n            selectColorLabel: 'Select',\n            removeColorLabel: 'Remove',\n            onPresetChange: setColors,\n            popoverAddButtonLabel: 'Add',\n            popoverCloseButtonLabel: 'Cancel',\n            colorMixer: {\n              rgbRedInputScreenReaderLabel: 'Input field for red',\n              rgbGreenInputScreenReaderLabel: 'Input field for green',\n              rgbBlueInputScreenReaderLabel: 'Input field for blue',\n              rgbAlphaInputScreenReaderLabel: 'Input field for alpha',\n              colorSliderNavigationExplanationScreenReaderLabel: `You are on a color slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`,\n              alphaSliderNavigationExplanationScreenReaderLabel: `You are on an alpha slider. To navigate the slider left or right, use the 'A' and 'D' buttons respectively`,\n              colorPaletteNavigationExplanationScreenReaderLabel: `You are on a color palette. To navigate on the palette up, left, down or right, use the 'W', 'A', 'S' and 'D' buttons respectively`\n            },\n            colorContrast: {\n              firstColor: '#FF0000',\n              label: 'Color Contrast Ratio',\n              successLabel: 'PASS',\n              failureLabel: 'FAIL',\n              normalTextLabel: 'Normal text',\n              largeTextLabel: 'Large text',\n              graphicsTextLabel: 'Graphics text',\n              firstColorLabel: 'Background',\n              secondColorLabel: 'Foreground'\n            }\n          }}\n          colorScreenReaderLabel={(hexCode, isSelected) => {\n            return `color with hex code ${hexCode}${\n              isSelected ? ' selected' : ''\n            }`\n          }}\n        />\n      </div>\n    )\n  }\n\n  render(<Example />)\n```\n","displayName":"ColorPreset","methods":[{"name":"handleRef","docblock":null,"modifiers":[],"params":[{"name":"el","optional":false,"type":{"name":"union","raw":"HTMLDivElement | null","elements":[{"name":"HTMLDivElement"},{"name":"null"}]}}],"returns":null},{"name":"isModifiable","docblock":null,"modifiers":["get"],"params":[],"returns":null},{"name":"isSelectedColor","docblock":null,"modifiers":[],"params":[{"name":"color","optional":false,"type":{"name":"string"}}],"returns":null},{"name":"onMenuItemSelected","docblock":null,"modifiers":[],"params":[{"name":"color","optional":false,"type":{"name":"string"}}],"returns":{"type":{"name":"DrilldownProps['onSelect']","raw":"DrilldownProps['onSelect']"}}},{"name":"renderAddNewPresetButton","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"renderColorIndicator","docblock":null,"modifiers":[],"params":[{"name":"color","optional":false,"type":{"name":"string"}},{"name":"selectOnClick","optional":true,"type":{"name":"boolean"}}],"returns":null},{"name":"renderIndicatorBase","docblock":null,"modifiers":[],"params":[{"name":"color","optional":false,"type":{"name":"string"}},{"name":"selectOnClick","optional":true,"type":{"name":"boolean"}}],"returns":null},{"name":"renderIndicatorTooltip","docblock":null,"modifiers":[],"params":[{"name":"child","optional":false,"type":{"name":"ReactReactElement","raw":"React.ReactElement","alias":"React.ReactElement"}},{"name":"color","optional":false,"type":{"name":"string"}}],"returns":null},{"name":"renderSettingsMenu","docblock":null,"modifiers":[],"params":[{"name":"color","optional":false,"type":{"name":"string"}},{"name":"index","optional":false,"type":{"name":"number"}}],"returns":null}],"props":{"colors":{"required":true,"tsType":{"name":"Array","elements":[{"name":"string"}],"raw":"Array<string>"},"description":"Array of HEX strings which are the preset colors. Supports 8 character HEX (with alpha)"},"disabled":{"required":false,"tsType":{"name":"boolean"},"description":"Makes the component uninteractable","defaultValue":{"value":"false","computed":false}},"elementRef":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}},"description":"Provides a reference to the component's underlying html element."},"label":{"required":false,"tsType":{"name":"string"},"description":"Label text of the component"},"colorMixerSettings":{"required":false,"tsType":{"name":"signature","type":"object","raw":"{\n  /**\n   * screenReaderLabel for the add new preset button\n   */\n  addNewPresetButtonScreenReaderLabel: string\n  selectColorLabel: string\n  removeColorLabel: string\n  onPresetChange: (colors: ColorPresetOwnProps['colors']) => void\n  popoverAddButtonLabel: string\n  popoverCloseButtonLabel: string\n  maxHeight?: string\n  colorMixer: {\n    withAlpha?: boolean\n    rgbRedInputScreenReaderLabel: string\n    rgbGreenInputScreenReaderLabel: string\n    rgbBlueInputScreenReaderLabel: string\n    rgbAlphaInputScreenReaderLabel: string\n    colorSliderNavigationExplanationScreenReaderLabel: string\n    alphaSliderNavigationExplanationScreenReaderLabel: string\n    colorPaletteNavigationExplanationScreenReaderLabel: string\n  }\n  colorContrast?: {\n    firstColor: string\n    label: string\n    successLabel: string\n    failureLabel: string\n    normalTextLabel: string\n    largeTextLabel: string\n    graphicsTextLabel: string\n    firstColorLabel: string\n    secondColorLabel: string\n  }\n}","signature":{"properties":[{"key":"addNewPresetButtonScreenReaderLabel","value":{"name":"string","required":true},"description":"screenReaderLabel for the add new preset button"},{"key":"selectColorLabel","value":{"name":"string","required":true}},{"key":"removeColorLabel","value":{"name":"string","required":true}},{"key":"onPresetChange","value":{"name":"signature","type":"function","raw":"(colors: ColorPresetOwnProps['colors']) => void","signature":{"arguments":[{"type":{"name":"Array","raw":"ColorPresetOwnProps['colors']"},"name":"colors"}],"return":{"name":"void"}},"required":true}},{"key":"popoverAddButtonLabel","value":{"name":"string","required":true}},{"key":"popoverCloseButtonLabel","value":{"name":"string","required":true}},{"key":"maxHeight","value":{"name":"string","required":false}},{"key":"colorMixer","value":{"name":"signature","type":"object","raw":"{\n  withAlpha?: boolean\n  rgbRedInputScreenReaderLabel: string\n  rgbGreenInputScreenReaderLabel: string\n  rgbBlueInputScreenReaderLabel: string\n  rgbAlphaInputScreenReaderLabel: string\n  colorSliderNavigationExplanationScreenReaderLabel: string\n  alphaSliderNavigationExplanationScreenReaderLabel: string\n  colorPaletteNavigationExplanationScreenReaderLabel: string\n}","signature":{"properties":[{"key":"withAlpha","value":{"name":"boolean","required":false}},{"key":"rgbRedInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbGreenInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbBlueInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"rgbAlphaInputScreenReaderLabel","value":{"name":"string","required":true}},{"key":"colorSliderNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}},{"key":"alphaSliderNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}},{"key":"colorPaletteNavigationExplanationScreenReaderLabel","value":{"name":"string","required":true}}]},"required":true}},{"key":"colorContrast","value":{"name":"signature","type":"object","raw":"{\n  firstColor: string\n  label: string\n  successLabel: string\n  failureLabel: string\n  normalTextLabel: string\n  largeTextLabel: string\n  graphicsTextLabel: string\n  firstColorLabel: string\n  secondColorLabel: string\n}","signature":{"properties":[{"key":"firstColor","value":{"name":"string","required":true}},{"key":"label","value":{"name":"string","required":true}},{"key":"successLabel","value":{"name":"string","required":true}},{"key":"failureLabel","value":{"name":"string","required":true}},{"key":"normalTextLabel","value":{"name":"string","required":true}},{"key":"largeTextLabel","value":{"name":"string","required":true}},{"key":"graphicsTextLabel","value":{"name":"string","required":true}},{"key":"firstColorLabel","value":{"name":"string","required":true}},{"key":"secondColorLabel","value":{"name":"string","required":true}}]},"required":false}}]}},"description":"If set, a `plus` button will appear for the preset. Those components whose corresponding keys aren't provided (`colorMixer` or `colorContrast`)\nwill not be rendered.\nThe `onPresetChange` function gets called when a color gets added or removed from the preset list.\nIt will be called with the new list of colors"},"onSelect":{"required":true,"tsType":{"name":"signature","type":"function","raw":"(selected: string) => void","signature":{"arguments":[{"type":{"name":"string"},"name":"selected"}],"return":{"name":"void"}}},"description":"The function gets called when a color gets selected"},"popoverScreenReaderLabel":{"required":false,"tsType":{"name":"string"},"description":"Sets the ScreenReaderLabel for the popover"},"selected":{"required":false,"tsType":{"name":"string"},"description":"The currently selected HEX string"},"colorScreenReaderLabel":{"required":false,"tsType":{"name":"signature","type":"function","raw":"(hexCode: string, isSelected: boolean) => string","signature":{"arguments":[{"type":{"name":"string"},"name":"hexCode"},{"type":{"name":"boolean"},"name":"isSelected"}],"return":{"name":"string"}}},"description":"A function for formatting the text provided to screen readers about the color.\n\n@param {string} hexCode - The hexadecimal color code (e.g., \"#FFFFFF\") of the current color option. Provided by the component - treat as read-only.\n\n@param {boolean} isSelected - Indicates whether this color is currently selected. Provided by the component - treat as read-only.\n\nSets the aria-label attribute of the color.\n\nIf not set, aria-label defaults to the hex code of the color."},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-color-picker/src/ColorPreset/index.tsx","extension":".tsx","srcPath":"packages/ui-color-picker/src/ColorPreset/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-color-picker/src/ColorPreset/index.tsx","packageName":"@instructure/ui-color-picker","requirePath":"@instructure/ui-color-picker/lib/ColorPreset/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-color-picker/src/ColorPreset/index.tsx').default","esPath":"@instructure/ui-color-picker/es/ColorPreset/index","themePath":"packages/ui-color-picker/src/ColorPreset/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-color-picker/src/ColorPreset/theme.ts","id":"ColorPreset","title":"ColorPreset"}