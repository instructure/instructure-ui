{"description":"\nThe avatar component can be used to display a user's avatar. When an image src is not supplied the user's initials will display.\n\nInstead of the initials, an SVG icon can be displayed with the `renderIcon` property.\n\nThe avatar can be `circle` _(default)_ or `rectangle`. Use the `margin` prop to add space between Avatar and other content.\n\n```js\n---\ntype: example\nreadonly: true\n---\n<div>\n  <Avatar name=\"Sarah Robinson\" src={avatarSquare} margin=\"0 small 0 0\" />\n  <Avatar name=\"Sarah Robinson\" margin=\"0 small 0 0\" />\n  <Avatar name=\"Sarah Robinson\" renderIcon={<IconGroupLine />} margin=\"0 small 0 0\" />\n  <Avatar name=\"Kyle Montgomery\" src={avatarSquare} shape=\"rectangle\" margin=\"0 small 0 0\" />\n  <Avatar name=\"Kyle Montgomery\" shape=\"rectangle\" margin=\"0 small 0 0\" />\n  <Avatar name=\"Kyle Montgomery\" renderIcon={<IconGroupLine />} shape=\"rectangle\" />\n</div>\n```\n\n### Size\n\nThe `size` prop allows you to select from `xx-small`, `x-small`, `small`, `medium`, `large`, `x-large`, and `xx-large`. If the `auto` prop is set, the avatar size will adjust according to the font-size\nof its container.\n\n```js\n---\ntype: example\n---\n<div>\n  <View display=\"block\" padding=\"small medium\">\n    <Avatar name=\"Arthur C. Clarke\" size=\"xx-small\" margin=\"0 small 0 0\" />\n    <Avatar name=\"James Arias\" size=\"x-small\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Charles Kimball\" size=\"small\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Melissa Reed\" size=\"medium\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Heather Wheeler\" size=\"large\" margin=\"0 small 0 0\" />\n    <Avatar name=\"David Herbert\" size=\"x-large\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Isaac Asimov\" size=\"xx-large\" />\n  </View>\n  <View display=\"block\" padding=\"small medium\" background=\"primary\">\n    <Avatar name=\"Arthur C. Clarke\" size=\"xx-small\" margin=\"0 small 0 0\"  src={avatarSquare} />\n    <Avatar name=\"James Arias\" size=\"x-small\" margin=\"0 small 0 0\"  src={avatarSquare} />\n    <Avatar name=\"Charles Kimball\" size=\"small\" margin=\"0 small 0 0\"  src={avatarSquare} />\n    <Avatar name=\"Melissa Reed\" size=\"medium\" margin=\"0 small 0 0\"  src={avatarSquare} />\n    <Avatar name=\"Heather Wheeler\" size=\"large\" margin=\"0 small 0 0\"  src={avatarSquare} />\n    <Avatar name=\"David Herbert\" size=\"x-large\" margin=\"0 small 0 0\"  src={avatarSquare} />\n    <Avatar name=\"Isaac Asimov\" size=\"xx-large\"  src={avatarSquare} />\n  </View>\n  <View display=\"block\" padding=\"small medium\">\n    <Avatar name=\"Arthur C. Clarke\" renderIcon={<IconGroupLine />} size=\"xx-small\" margin=\"0 small 0 0\" />\n    <Avatar name=\"James Arias\" renderIcon={<IconGroupLine />} size=\"x-small\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Charles Kimball\" renderIcon={<IconGroupLine />} size=\"small\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Melissa Reed\" renderIcon={<IconGroupLine />} size=\"medium\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Heather Wheeler\" renderIcon={<IconGroupLine />} size=\"large\" margin=\"0 small 0 0\" />\n    <Avatar name=\"David Herbert\" renderIcon={<IconGroupLine />} size=\"x-large\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Isaac Asimov\" renderIcon={<IconGroupLine />} size=\"xx-large\" />\n  </View>\n</div>\n```\n\n### Colors\n\nThe color of the initials and icons can be set with the `color` prop, and it allows you to select from `default`, `shamrock`, `barney`, `crimson`, `fire`, `licorice` and `ash`.\n\n```js\n---\ntype: example\n---\n<div>\n  <View display=\"block\" padding=\"small medium\">\n    <Avatar name=\"Arthur C. Clarke\" margin=\"0 small 0 0\" />\n    <Avatar name=\"James Arias\" color=\"shamrock\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Charles Kimball\" color=\"barney\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Melissa Reed\" color=\"crimson\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Heather Wheeler\" color=\"fire\" margin=\"0 small 0 0\" />\n    <Avatar name=\"David Herbert\" color=\"licorice\" margin=\"0 small 0 0\" />\n    <Avatar name=\"Isaac Asimov\" color=\"ash\" />\n  </View>\n  <View display=\"block\" padding=\"small medium\">\n    <Avatar renderIcon={<IconGroupLine />} name=\"Arthur C. Clarke\" margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"James Arias\" color=\"shamrock\" margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"Charles Kimball\" color=\"barney\" margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"Melissa Reed\" color=\"crimson\" margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"Heather Wheeler\" color=\"fire\" margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"David Herbert\" color=\"licorice\" margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"Isaac Asimov\" color=\"ash\" />\n  </View>\n</div>\n```\n\nThe `hasInverseColor` prop inverts the background color and the text/icon color.\n\nInverted Avatars have **no border**.\n\n```js\n---\ntype: example\n---\n<div>\n  <View display=\"block\" padding=\"small medium\" background=\"primary\">\n    <Avatar name=\"Arthur C. Clarke\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar name=\"James Arias\" color=\"shamrock\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar name=\"Charles Kimball\" color=\"barney\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar name=\"Melissa Reed\" color=\"crimson\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar name=\"Heather Wheeler\" color=\"fire\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar name=\"David Herbert\" color=\"licorice\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar name=\"Isaac Asimov\" color=\"ash\" hasInverseColor />\n  </View>\n  <View display=\"block\" padding=\"small medium\" background=\"primary\">\n    <Avatar renderIcon={<IconGroupLine />} name=\"Arthur C. Clarke\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"James Arias\" color=\"shamrock\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"Charles Kimball\" color=\"barney\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"Melissa Reed\" color=\"crimson\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"Heather Wheeler\" color=\"fire\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"David Herbert\" color=\"licorice\" hasInverseColor margin=\"0 small 0 0\" />\n    <Avatar renderIcon={<IconGroupLine />} name=\"Isaac Asimov\" color=\"ash\" hasInverseColor />\n  </View>\n</div>\n```\n\nIn case you need more control over the color, feel free to use the `themeOverride` prop, and override the default theme variables.\n\n```js\n---\ntype: example\n---\n<div>\n  <Avatar name=\"Isaac Asimov\" renderIcon={<IconGroupLine />} themeOverride={{ color: '#efb410' }} margin=\"0 small 0 0\" />\n  <Avatar name=\"Heather Wheeler\" color=\"fire\" themeOverride={{ colorFire: 'magenta' }} margin=\"0 small 0 0\" />\n  <Avatar name=\"Charles Kimball\" renderIcon={<IconGroupLine />} hasInverseColor themeOverride={{ color: 'lightblue', background: 'black' }} margin=\"0 small 0 0\" />\n  <Avatar name=\"David Herbert\" hasInverseColor color=\"fire\" themeOverride={{ colorFire: '#efb410' }} />\n</div>\n```\n\n### Border\n\nBy default only avatars without an image have borders but you can force it to `always` or `never` show with the `showBorder` prop however you should only use it rarely in very specific occasions (e.g. displaying an avatar in the [SideNavBar](/#SideNavBar))\n\n```js\n---\ntype: example\n---\n<div>\n  <Avatar name=\"Sarah Robinson\" src={avatarSquare} margin=\"0 small 0 0\" showBorder=\"always\"/>\n  <Avatar name=\"Sarah Robinson\" renderIcon={<IconGroupLine />} margin=\"0 small 0 0\" showBorder=\"never\"/>\n</div>\n```\n\n### Guidelines\n\n```js\n---\ntype: embed\n---\n<Guidelines>\n  <Figure recommendation=\"yes\" title=\"Do\">\n    <Figure.Item>Ensure the appropriate size is being used for its placement (in a table, stand-alone, etcâ€¦)</Figure.Item>\n    <Figure.Item>Use circle variant in Canvas</Figure.Item>\n  </Figure>\n  <Figure recommendation=\"no\" title=\"Don't\">\n    <Figure.Item>Use inline in sentence</Figure.Item>\n  </Figure>\n</Guidelines>\n```\n","displayName":"Avatar","methods":[],"props":{"name":{"type":{"name":"string"},"required":true,"description":"The name to display. It will be automatically converted to initials.","tsType":{"name":"string"}},"src":{"type":{"name":"string"},"required":false,"description":"URL of the image to display as the background image","tsType":{"name":"string"}},"alt":{"type":{"name":"string"},"required":false,"description":"Accessible label","tsType":{"name":"string"}},"size":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'xx-small'","computed":false},{"value":"'x-small'","computed":false},{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false},{"value":"'x-large'","computed":false},{"value":"'xx-large'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"| 'auto'\n| 'xx-small'\n| 'x-small'\n| 'small'\n| 'medium'\n| 'large'\n| 'x-large'\n| 'xx-large'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'xx-small'"},{"name":"literal","value":"'x-small'"},{"name":"literal","value":"'small'"},{"name":"literal","value":"'medium'"},{"name":"literal","value":"'large'"},{"name":"literal","value":"'x-large'"},{"name":"literal","value":"'xx-large'"}]},"defaultValue":{"value":"'medium'","computed":false}},"color":{"type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'shamrock'","computed":false},{"value":"'barney'","computed":false},{"value":"'crimson'","computed":false},{"value":"'fire'","computed":false},{"value":"'licorice'","computed":false},{"value":"'ash'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"| 'default' // = brand\n| 'shamrock'\n| 'barney'\n| 'crimson'\n| 'fire'\n| 'licorice'\n| 'ash'","elements":[{"name":"literal","value":"'default'"},{"name":"literal","value":"'shamrock'"},{"name":"literal","value":"'barney'"},{"name":"literal","value":"'crimson'"},{"name":"literal","value":"'fire'"},{"name":"literal","value":"'licorice'"},{"name":"literal","value":"'ash'"}]},"defaultValue":{"value":"'default'","computed":false}},"hasInverseColor":{"type":{"name":"bool"},"required":false,"description":"In inverse color mode the background and text/icon colors are inverted","tsType":{"name":"boolean"},"defaultValue":{"value":"false","computed":false}},"showBorder":{"type":{"name":"enum","value":[{"value":"'auto'","computed":false},{"value":"'always'","computed":false},{"value":"'never'","computed":false}]},"required":false,"description":"`auto` only shows a border when there is no source image. This prop can force to always or never show that border.","tsType":{"name":"union","raw":"'auto' | 'always' | 'never'","elements":[{"name":"literal","value":"'auto'"},{"name":"literal","value":"'always'"},{"name":"literal","value":"'never'"}]},"defaultValue":{"value":"'auto'","computed":false}},"shape":{"type":{"name":"enum","value":[{"value":"'circle'","computed":false},{"value":"'rectangle'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'circle' | 'rectangle'","elements":[{"name":"literal","value":"'circle'"},{"name":"literal","value":"'rectangle'"}]},"defaultValue":{"value":"'circle'","computed":false}},"margin":{"type":{"name":"custom","raw":"ThemeablePropTypes.spacing"},"required":false,"description":"Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,\n`small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via\nfamiliar CSS-like shorthand. For example: `margin=\"small auto large\"`.","tsType":{"name":"Spacing"}},"display":{"type":{"name":"enum","value":[{"value":"'inline-block'","computed":false},{"value":"'block'","computed":false}]},"required":false,"description":"","tsType":{"name":"union","raw":"'inline-block' | 'block'","elements":[{"name":"literal","value":"'inline-block'"},{"name":"literal","value":"'block'"}]},"defaultValue":{"value":"'inline-block'","computed":false}},"onImageLoaded":{"type":{"name":"func"},"required":false,"description":"Callback fired when the avatar image has loaded","tsType":{"name":"signature","type":"function","raw":"(event: SyntheticEvent) => void","signature":{"arguments":[{"type":{"name":"SyntheticEvent"},"name":"event"}],"return":{"name":"void"}}},"defaultValue":{"value":"(_event: SyntheticEvent) => {}","computed":false}},"as":{"type":{"name":"elementType"},"required":false,"description":"The element type to render as","tsType":{"name":"union","raw":"keyof JSX.IntrinsicElements | ComponentType<P>","elements":[{"name":"JSX.IntrinsicElements"},{"name":"ComponentType","elements":[{"name":"P"}],"raw":"ComponentType<P>"}]}},"elementRef":{"type":{"name":"func"},"required":false,"description":"provides a reference to the underlying html root element","tsType":{"name":"signature","type":"function","raw":"(element: Element | null) => void","signature":{"arguments":[{"type":{"name":"union","raw":"Element | null","elements":[{"name":"Element"},{"name":"null"}]},"name":"element"}],"return":{"name":"void"}}}},"renderIcon":{"type":{"name":"union","value":[{"name":"node"},{"name":"func"}]},"required":false,"description":"An icon, or function that returns an icon that gets displayed. If the `src` prop is provided, `src` will have priority.","tsType":{"name":"union","raw":"| keyof ReactHTML\n| keyof ReactSVG\n| ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>\n| ComponentClass\n| ReactNode\n| ((data: P) => ReactNode | Element)\n| (() => ReactNode | Element)\n| Element","elements":[{"name":"ReactHTML"},{"name":"ReactSVG"},{"name":"ClassType","elements":[{"name":"P"},{"name":"ClassicComponent","elements":[{"name":"P"},{"name":"ComponentState"}],"raw":"ClassicComponent<P, ComponentState>"},{"name":"ClassicComponentClass","elements":[{"name":"P"}],"raw":"ClassicComponentClass<P>"}],"raw":"ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>"},{"name":"ComponentClass"},{"name":"ReactNode"},{"name":"unknown"},{"name":"unknown"},{"name":"Element"}]}},"dir":{"required":false,"tsType":{"name":"union","raw":"'ltr' | 'rtl'","elements":[{"name":"literal","value":"'ltr'"},{"name":"literal","value":"'rtl'"}]},"description":""}},"category":"components","relativePath":"packages/ui-avatar/src/Avatar/index.tsx","extension":".tsx","srcPath":"packages/ui-avatar/src/Avatar/index.tsx","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-avatar/src/Avatar/index.tsx","packageName":"@instructure/ui-avatar","requirePath":"@instructure/ui-avatar/lib/Avatar/index","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-avatar/src/Avatar/index.tsx').default","esPath":"@instructure/ui-avatar/es/Avatar/index","themePath":"packages/ui-avatar/src/Avatar/theme.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-avatar/src/Avatar/theme.ts","id":"Avatar","title":"Avatar"}