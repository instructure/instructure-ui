{"comment":"/**\n * ---\n * category: utilities/PropTypes\n * ---\n * Ensure that a corresponding handler function is provided for the given prop if the\n * component does not manage its own state.\n *\n * ```js-code\n *  import { controllable } from '@instructure/ui-prop-types'\n *\n *  class Foo extends Component {\n *    static propTypes = {\n *      selected: controllable(PropTypes.bool, 'onSelect', 'defaultSelected'),\n *      onSelect: PropTypes.func,\n *      defaultSelected: PropTypes.bool\n *    }\n *  ...\n * ```\n *\n * This will throw an error if the 'selected' prop is supplied without a corresponding\n * 'onSelect' handler and will recommend using 'defaultSelected' instead.\n * @module controllable\n * @param {function} checkType - validates the prop type. Returns null if valid, error otherwise\n * @param {string} handlerName - name of the handler function\n * @param {string} defaultPropName - name of the default prop\n * @returns {function} A function that return Error if designated prop is\n * supplied without a corresponding handler function\n */","meta":{"filename":"wrez0depgtomfx3bvclym.js","lineno":1,"columnno":0,"path":"/tmp","code":{}},"description":"Ensure that a corresponding handler function is provided for the given prop if the\ncomponent does not manage its own state.\n\n```js-code\n import { controllable } from '@instructure/ui-prop-types'\n\n class Foo extends Component {\n   static propTypes = {\n     selected: controllable(PropTypes.bool, 'onSelect', 'defaultSelected'),\n     onSelect: PropTypes.func,\n     defaultSelected: PropTypes.bool\n   }\n ...\n```\n\nThis will throw an error if the 'selected' prop is supplied without a corresponding\n'onSelect' handler and will recommend using 'defaultSelected' instead.","kind":"module","name":"controllable","params":[{"type":{"names":["function"]},"description":"validates the prop type. Returns null if valid, error otherwise","name":"checkType"},{"type":{"names":["string"]},"description":"name of the handler function","name":"handlerName"},{"type":{"names":["string"]},"description":"name of the default prop","name":"defaultPropName"}],"returns":[{"type":{"names":["function"]},"description":"A function that return Error if designated prop is\nsupplied without a corresponding handler function"}],"longname":"module:controllable","undocumented":false,"category":"utilities/PropTypes","relativePath":"packages/ui-prop-types/src/controllable.ts","extension":".ts","srcPath":"packages/ui-prop-types/src/controllable.ts","srcUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-prop-types/src/controllable.ts","packageName":"@instructure/ui-prop-types","requirePath":"@instructure/ui-prop-types/lib/controllable","requireStr":"require('/home/runner/work/instructure-ui/instructure-ui/packages/ui-prop-types/src/controllable.ts').default","esPath":"@instructure/ui-prop-types/es/controllable","themePath":"packages/ui-prop-types/src/controllable.ts","themeUrl":"https://github.com/instructure/instructure-ui/tree/master/packages/ui-prop-types/src/controllable.ts","id":"controllable","title":"controllable"}